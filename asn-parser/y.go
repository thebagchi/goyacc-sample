// Code generated by goyacc -p ASN asn.y. DO NOT EDIT.

//line asn.y:1

package main

import __yyfmt__ "fmt"

//line asn.y:3
import (
	"bytes"
	"encoding/json"
	"fmt"
)

var code bytes.Buffer

func AddLine(line string) {
	code.WriteString(line)
	code.WriteByte('\n')
}

func JSON(obj interface{}) string {
	data, err := json.MarshalIndent(obj, "", "    ")
	if nil != err {
		fmt.Println("Error: ", err)
		return ""
	}
	return string(data)
}

func Print(line string) {
	fmt.Println(line)
}

func Join(values ...string) string {
	var buffer bytes.Buffer
	for _, value := range values {
		buffer.WriteString(value)
	}
	return buffer.String()
}

func SetResult(l ASNLexer, v VALUE) {
	l.(*Parser).Result = JSON(&v)
}

type Empty struct{}
type (
	VALUE   interface{}
	STRING  string
	NUMBER  float64
	BOOLEAN bool
	LIST    []VALUE
	MAP     map[string]VALUE
)

//line asn.y:50
type ASNSymType struct {
	yys         int
	TypeToken   struct{}
	TypeString  STRING
	TypeNumber  NUMBER
	TypeValue   VALUE
	TypeBoolean BOOLEAN
	TypeMap     MAP
	TypeList    LIST
}

const CURLY_START = 57346
const CURLY_END = 57347
const SQUARE_START = 57348
const SQUARE_END = 57349
const DOUBLE_QUOTE = 57350
const SINGLE_QUOTE = 57351
const COMMA = 57352
const COLON = 57353
const MINUS = 57354
const GREATER_THAN = 57355
const LESS_THAN = 57356
const DOT = 57357
const SLASH = 57358
const ROUND_START = 57359
const ROUND_END = 57360
const EQUALITY = 57361
const APOSTROPHE = 57362
const SPACE = 57363
const PIPE = 57364
const AT_THE_RATE = 57365
const EXCLAMATION = 57366
const CARET = 57367
const SEMI_COMMA = 57368
const ELLIPSIS = 57369
const ABSENT_SYMBOL = 57370
const ABSTRACTSYNTAX_SYMBOL = 57371
const ALL_SYMBOL = 57372
const APPLICATION_SYMBOL = 57373
const AUTOMATIC_SYMBOL = 57374
const BEGIN_SYMBOL = 57375
const BIT_SYMBOL = 57376
const BMPSTRING_SYMBOL = 57377
const BOOLEAN_SYMBOL = 57378
const BY_SYMBOL = 57379
const CHARACTER_SYMBOL = 57380
const CHOICE_SYMBOL = 57381
const CLASS_SYMBOL = 57382
const COMPONENT_SYMBOL = 57383
const COMPONENTS_SYMBOL = 57384
const CONSTRAINED_SYMBOL = 57385
const CONTAINING_SYMBOL = 57386
const DATE_SYMBOL = 57387
const DATETIME_SYMBOL = 57388
const DEFAULT_SYMBOL = 57389
const DEFINITIONS_SYMBOL = 57390
const DURATION_SYMBOL = 57391
const EMBEDDED_SYMBOL = 57392
const ENCODED_SYMBOL = 57393
const ENCODINGCONTROL_SYMBOL = 57394
const END_SYMBOL = 57395
const ENUMERATED_SYMBOL = 57396
const EXCEPT_SYMBOL = 57397
const EXPLICIT_SYMBOL = 57398
const EXPORTS_SYMBOL = 57399
const EXTENSIBILITY_SYMBOL = 57400
const EXTERNEL_SYMBOL = 57401
const FALSE_SYMBOL = 57402
const FROM_SYMBOL = 57403
const GENERALIZEDTIME_SYMBOL = 57404
const GENERALSTRING_SYMBOL = 57405
const GRAPHICSTRING_SYMBOL = 57406
const IA5STRING_SYMBOL = 57407
const IDENTIFIER_SYMBOL = 57408
const IMPLICIT_SYMBOL = 57409
const IMPLIED_SYMBOL = 57410
const IMPORTS_SYMBOL = 57411
const INCLUDES_SYMBOL = 57412
const INSTANCE_SYMBOL = 57413
const INSTRUCTIONS_SYMBOL = 57414
const INTEGER_SYMBOL = 57415
const INTERSECTION_SYMBOL = 57416
const ISO646STRING_SYMBOL = 57417
const MAX_SYMBOL = 57418
const MIN_SYMBOL = 57419
const MINUSINFINITY_SYMBOL = 57420
const NOTANUMBER_SYMBOL = 57421
const NULL_SYMBOL = 57422
const NUMERICSTRING_SYMBOL = 57423
const OBJECT_SYMBOL = 57424
const OBJECTDESCRIPTOR_SYMBOL = 57425
const OCTET_SYMBOL = 57426
const OF_SYMBOL = 57427
const OIDIRI_SYMBOL = 57428
const OPTIONAL_SYMBOL = 57429
const PATTERN_SYMBOL = 57430
const PDV_SYMBOL = 57431
const PLUSINFINITY_SYMBOL = 57432
const PRESENT_SYMBOL = 57433
const PRINTABLESTRING_SYMBOL = 57434
const PRIVATE_SYMBOL = 57435
const REAL_SYMBOL = 57436
const RELATIVEOID_SYMBOL = 57437
const RELATIVEOIDIRI_SYMBOL = 57438
const SEQUENCE_SYMBOL = 57439
const SET_SYMBOL = 57440
const SETTINGS_SYMBOL = 57441
const SIZE_SYMBOL = 57442
const STRING_SYMBOL = 57443
const SYNTAX_SYMBOL = 57444
const T61STRING_SYMBOL = 57445
const TAGS_SYMBOL = 57446
const TELETEXSTRING_SYMBOL = 57447
const TIME_SYMBOL = 57448
const TIMEOFDAY_SYMBOL = 57449
const TRUE_SYMBOL = 57450
const TYPEIDENTIFIER_SYMBOL = 57451
const UNION_SYMBOL = 57452
const UNIQUE_SYMBOL = 57453
const UNIVERSAL_SYMBOL = 57454
const UNIVERSALSTRING_SYMBOL = 57455
const UTCTIME_SYMBOL = 57456
const UTF8STRING_SYMBOL = 57457
const VIDEOTEXSTRING_SYMBOL = 57458
const VISIBLESTRING_SYMBOL = 57459
const WITH_SYMBOL = 57460
const ASSIGNMENT_SYMBOL = 57461
const TokenCapitalString = 57462
const TokenString = 57463
const TokenNumber = 57464
const TokenInteger = 57465
const TokenFloat = 57466
const TokenBoolean = 57467
const TokenBString = 57468
const TokenHString = 57469
const TokenCString = 57470

var ASNToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"CURLY_START",
	"CURLY_END",
	"SQUARE_START",
	"SQUARE_END",
	"DOUBLE_QUOTE",
	"SINGLE_QUOTE",
	"COMMA",
	"COLON",
	"MINUS",
	"GREATER_THAN",
	"LESS_THAN",
	"DOT",
	"SLASH",
	"ROUND_START",
	"ROUND_END",
	"EQUALITY",
	"APOSTROPHE",
	"SPACE",
	"PIPE",
	"AT_THE_RATE",
	"EXCLAMATION",
	"CARET",
	"SEMI_COMMA",
	"ELLIPSIS",
	"ABSENT_SYMBOL",
	"ABSTRACTSYNTAX_SYMBOL",
	"ALL_SYMBOL",
	"APPLICATION_SYMBOL",
	"AUTOMATIC_SYMBOL",
	"BEGIN_SYMBOL",
	"BIT_SYMBOL",
	"BMPSTRING_SYMBOL",
	"BOOLEAN_SYMBOL",
	"BY_SYMBOL",
	"CHARACTER_SYMBOL",
	"CHOICE_SYMBOL",
	"CLASS_SYMBOL",
	"COMPONENT_SYMBOL",
	"COMPONENTS_SYMBOL",
	"CONSTRAINED_SYMBOL",
	"CONTAINING_SYMBOL",
	"DATE_SYMBOL",
	"DATETIME_SYMBOL",
	"DEFAULT_SYMBOL",
	"DEFINITIONS_SYMBOL",
	"DURATION_SYMBOL",
	"EMBEDDED_SYMBOL",
	"ENCODED_SYMBOL",
	"ENCODINGCONTROL_SYMBOL",
	"END_SYMBOL",
	"ENUMERATED_SYMBOL",
	"EXCEPT_SYMBOL",
	"EXPLICIT_SYMBOL",
	"EXPORTS_SYMBOL",
	"EXTENSIBILITY_SYMBOL",
	"EXTERNEL_SYMBOL",
	"FALSE_SYMBOL",
	"FROM_SYMBOL",
	"GENERALIZEDTIME_SYMBOL",
	"GENERALSTRING_SYMBOL",
	"GRAPHICSTRING_SYMBOL",
	"IA5STRING_SYMBOL",
	"IDENTIFIER_SYMBOL",
	"IMPLICIT_SYMBOL",
	"IMPLIED_SYMBOL",
	"IMPORTS_SYMBOL",
	"INCLUDES_SYMBOL",
	"INSTANCE_SYMBOL",
	"INSTRUCTIONS_SYMBOL",
	"INTEGER_SYMBOL",
	"INTERSECTION_SYMBOL",
	"ISO646STRING_SYMBOL",
	"MAX_SYMBOL",
	"MIN_SYMBOL",
	"MINUSINFINITY_SYMBOL",
	"NOTANUMBER_SYMBOL",
	"NULL_SYMBOL",
	"NUMERICSTRING_SYMBOL",
	"OBJECT_SYMBOL",
	"OBJECTDESCRIPTOR_SYMBOL",
	"OCTET_SYMBOL",
	"OF_SYMBOL",
	"OIDIRI_SYMBOL",
	"OPTIONAL_SYMBOL",
	"PATTERN_SYMBOL",
	"PDV_SYMBOL",
	"PLUSINFINITY_SYMBOL",
	"PRESENT_SYMBOL",
	"PRINTABLESTRING_SYMBOL",
	"PRIVATE_SYMBOL",
	"REAL_SYMBOL",
	"RELATIVEOID_SYMBOL",
	"RELATIVEOIDIRI_SYMBOL",
	"SEQUENCE_SYMBOL",
	"SET_SYMBOL",
	"SETTINGS_SYMBOL",
	"SIZE_SYMBOL",
	"STRING_SYMBOL",
	"SYNTAX_SYMBOL",
	"T61STRING_SYMBOL",
	"TAGS_SYMBOL",
	"TELETEXSTRING_SYMBOL",
	"TIME_SYMBOL",
	"TIMEOFDAY_SYMBOL",
	"TRUE_SYMBOL",
	"TYPEIDENTIFIER_SYMBOL",
	"UNION_SYMBOL",
	"UNIQUE_SYMBOL",
	"UNIVERSAL_SYMBOL",
	"UNIVERSALSTRING_SYMBOL",
	"UTCTIME_SYMBOL",
	"UTF8STRING_SYMBOL",
	"VIDEOTEXSTRING_SYMBOL",
	"VISIBLESTRING_SYMBOL",
	"WITH_SYMBOL",
	"ASSIGNMENT_SYMBOL",
	"TokenCapitalString",
	"TokenString",
	"TokenNumber",
	"TokenInteger",
	"TokenFloat",
	"TokenBoolean",
	"TokenBString",
	"TokenHString",
	"TokenCString",
}

var ASNStatenames = [...]string{}

const ASNEofCode = 1
const ASNErrCode = 2
const ASNInitialStackSize = 16

//line asn.y:3296

//line yacctab:1
var ASNExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 45,
	120, 36,
	121, 36,
	-2, 32,
	-1, 182,
	10, 405,
	-2, 271,
	-1, 248,
	10, 195,
	18, 195,
	-2, 265,
	-1, 272,
	15, 169,
	-2, 258,
	-1, 274,
	15, 170,
	-2, 260,
	-1, 305,
	17, 271,
	-2, 404,
	-1, 318,
	10, 342,
	-2, 65,
	-1, 325,
	10, 328,
	-2, 66,
	-1, 326,
	10, 344,
	-2, 67,
	-1, 359,
	10, 328,
	-2, 66,
	-1, 360,
	10, 344,
	-2, 67,
	-1, 361,
	10, 339,
	-2, 332,
	-1, 362,
	10, 340,
	-2, 334,
	-1, 363,
	10, 341,
	-2, 335,
	-1, 417,
	4, 136,
	5, 136,
	15, 173,
	17, 136,
	-2, 402,
}

const ASNPrivate = 57344

const ASNLast = 937

var ASNAct = [...]int{
	228, 5, 175, 5, 435, 411, 247, 275, 327, 252,
	328, 238, 237, 295, 250, 229, 329, 297, 306, 164,
	309, 163, 293, 340, 366, 313, 23, 304, 21, 159,
	210, 21, 301, 314, 436, 23, 223, 33, 34, 154,
	184, 72, 271, 14, 23, 335, 412, 280, 40, 6,
	7, 65, 65, 23, 424, 397, 39, 83, 83, 38,
	65, 37, 29, 23, 343, 302, 156, 150, 144, 155,
	450, 50, 62, 68, 83, 23, 224, 67, 51, 148,
	28, 43, 36, 73, 140, 145, 51, 158, 93, 55,
	50, 83, 234, 377, 65, 169, 147, 60, 30, 427,
	23, 140, 74, 9, 27, 23, 71, 151, 414, 149,
	240, 241, 230, 344, 49, 26, 370, 152, 157, 143,
	153, 146, 239, 48, 6, 7, 41, 6, 7, 451,
	45, 101, 351, 449, 335, 319, 61, 22, 24, 94,
	233, 90, 23, 6, 7, 386, 22, 24, 171, 102,
	55, 70, 6, 7, 53, 22, 24, 92, 221, 222,
	235, 6, 7, 56, 22, 24, 167, 6, 7, 332,
	190, 6, 7, 57, 22, 24, 99, 284, 97, 291,
	140, 296, 194, 284, 20, 191, 22, 24, 69, 310,
	300, 42, 96, 99, 187, 188, 274, 91, 272, 418,
	186, 181, 183, 23, 311, 290, 285, 195, 6, 7,
	100, 22, 24, 307, 20, 154, 22, 24, 52, 315,
	289, 368, 176, 298, 325, 303, 389, 292, 174, 177,
	299, 385, 336, 44, 316, 334, 333, 32, 390, 326,
	42, 356, 156, 150, 144, 155, 176, 354, 318, 330,
	6, 7, 348, 22, 24, 148, 315, 331, 332, 284,
	16, 145, 180, 158, 337, 346, 355, 179, 396, 337,
	368, 337, 147, 42, 179, 178, 31, 140, 274, 345,
	272, 349, 350, 151, 353, 149, 179, 178, 285, 46,
	352, 442, 441, 152, 157, 143, 153, 146, 373, 371,
	6, 7, 428, 374, 372, 419, 359, 310, 310, 409,
	376, 6, 7, 300, 22, 24, 369, 363, 362, 310,
	375, 360, 311, 311, 347, 382, 367, 365, 358, 339,
	318, 330, 93, 452, 311, 440, 439, 367, 420, 331,
	311, 378, 284, 284, 416, 384, 298, 357, 303, 381,
	379, 383, 388, 299, 392, 296, 387, 296, 380, 284,
	170, 274, 274, 272, 272, 432, 300, 182, 310, 190,
	394, 285, 285, 402, 95, 190, 395, 393, 400, 12,
	317, 401, 415, 311, 311, 403, 334, 333, 365, 1,
	191, 406, 408, 399, 398, 225, 223, 417, 413, 404,
	3, 303, 273, 8, 23, 448, 299, 444, 443, 258,
	284, 437, 364, 431, 430, 429, 422, 308, 423, 23,
	413, 391, 249, 410, 23, 287, 277, 154, 276, 274,
	270, 272, 269, 438, 268, 426, 224, 267, 266, 285,
	265, 445, 438, 438, 434, 264, 446, 447, 263, 262,
	261, 260, 234, 278, 156, 150, 144, 155, 259, 257,
	256, 255, 286, 254, 342, 253, 341, 148, 251, 288,
	240, 241, 230, 145, 248, 158, 421, 246, 245, 244,
	282, 243, 239, 338, 147, 242, 223, 138, 294, 166,
	165, 283, 279, 162, 23, 151, 161, 149, 98, 258,
	233, 54, 160, 142, 141, 152, 157, 143, 153, 146,
	281, 139, 6, 7, 137, 22, 24, 154, 221, 222,
	235, 136, 135, 134, 133, 64, 224, 6, 7, 63,
	22, 24, 6, 7, 324, 22, 24, 232, 231, 407,
	323, 433, 234, 278, 156, 150, 144, 155, 425, 405,
	322, 321, 286, 236, 320, 227, 226, 148, 220, 288,
	240, 241, 230, 145, 219, 158, 218, 217, 216, 215,
	282, 214, 239, 213, 147, 212, 305, 319, 211, 209,
	208, 283, 279, 207, 23, 151, 206, 149, 205, 204,
	233, 203, 202, 223, 201, 152, 157, 143, 153, 146,
	281, 23, 6, 7, 200, 22, 24, 154, 221, 222,
	235, 199, 198, 197, 196, 193, 224, 192, 189, 132,
	131, 130, 129, 128, 127, 126, 125, 124, 123, 122,
	121, 120, 234, 224, 156, 150, 144, 155, 119, 118,
	117, 116, 114, 115, 113, 112, 111, 148, 110, 234,
	240, 241, 230, 145, 109, 158, 108, 107, 106, 105,
	104, 103, 239, 223, 147, 414, 89, 240, 241, 230,
	88, 23, 87, 86, 85, 151, 84, 149, 173, 239,
	233, 172, 82, 81, 80, 152, 157, 143, 153, 146,
	79, 78, 6, 7, 154, 22, 24, 233, 221, 222,
	361, 77, 76, 224, 75, 312, 185, 168, 66, 6,
	7, 59, 22, 24, 58, 221, 222, 235, 47, 234,
	35, 156, 150, 144, 155, 13, 25, 19, 18, 17,
	15, 11, 10, 4, 148, 2, 0, 240, 241, 230,
	145, 0, 158, 0, 0, 0, 0, 0, 0, 239,
	305, 147, 0, 0, 0, 0, 0, 0, 23, 0,
	0, 0, 151, 0, 149, 0, 0, 233, 0, 0,
	0, 0, 152, 157, 143, 153, 146, 0, 0, 6,
	7, 154, 22, 24, 0, 221, 222, 235, 0, 0,
	224, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 234, 0, 156, 150,
	144, 155, 223, 0, 0, 0, 0, 0, 0, 0,
	23, 148, 0, 0, 240, 241, 230, 145, 0, 158,
	0, 0, 0, 0, 0, 0, 239, 0, 147, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 151,
	0, 149, 224, 0, 233, 0, 0, 0, 0, 152,
	157, 143, 153, 146, 0, 0, 6, 7, 234, 22,
	24, 0, 221, 222, 235, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 240, 241, 230, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 239, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 233, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 6, 7,
	0, 22, 24, 0, 221, 222, 235,
}

var ASNPact = [...]int{
	-71, -1000, -71, -1000, 55, 375, -1000, -1000, -1000, -77,
	-1000, -1000, 63, 48, -10, 93, -1000, -1000, -1000, -1000,
	220, -1000, -1000, -86, -1000, 24, -43, -45, -48, -1000,
	-1000, -1000, 14, -1000, -1000, 262, 13, -1000, -1000, -1000,
	215, 97, 278, -1000, -1000, 21, 199, 37, 29, 2,
	-71, 47, -1000, 98, -1000, -79, -71, -71, 171, -71,
	-1000, 78, -1000, 370, -1000, -1000, 166, 152, -1000, 322,
	-1000, 37, -1000, -71, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 180, -1000, -1000, -1000, -1000, -1000, -1000,
	-71, -1000, -1000, -71, -71, 355, -1000, -1000, -1000, -1000,
	4, 229, 262, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	272, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 247,
	363, 363, -1000, 363, -1000, -1000, -1000, -1000, -1000, 191,
	-1000, 205, -1000, -1000, 808, -1000, 392, -1000, -71, 4,
	-71, -1000, 746, -1000, -1000, -1000, -1000, -1000, 412, -1000,
	241, -1000, -1000, 363, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 130, 808, -1000, -1000, -1000, 258, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 319, -1000, -1000, -1000,
	-1000, -1000, -1000, 39, -1000, -1000, -1000, -1000, 392, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 363, -1000, -1000, -1000, 4, 237, 205, 205,
	205, 90, 808, -71, 260, 232, -1000, 252, -1000, -1000,
	-1000, -1000, 205, -1000, 226, -1000, -1000, 342, 318, 205,
	-1000, -1000, -1000, -1000, -1000, 572, 407, 23, -1000, -1000,
	204, -1000, -1000, -1000, -1000, -71, -1000, 72, 23, -1000,
	294, 293, 310, 300, 88, 204, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 14, -1000, 808, 213, 118,
	-1000, 482, 482, -1000, -1000, -1000, 208, 205, 223, -1000,
	-1000, 205, -1000, -1000, -71, -1000, -71, -1000, 659, 253,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 51, 23, -1000,
	808, -1000, -71, -1000, 41, 14, 14, -1000, -1000, -1000,
	-1000, -1000, 204, -1000, -1000, -1000, 299, -1000, -1000, -1000,
	32, -1000, -1000, -1000, -1000, 339, -71, -1000, 181, -1000,
	-1000, -1000, -1000, -1000, -1000, 295, -1000, 333, -1000, 392,
	-1000, -1000, 589, -1000, -1000, -64, -1000, -1000, -1000, 14,
	-1000, -1000, -1000, -1000, 57, 292, -1000, 361, 14, -1000,
	-1000, -1000, 7, 331, -1000, 330, 282, 281, 205, -1000,
	-1000, -71, -71, -1000, 42, -1000, 328, -1000, -1000, -1000,
	-1000, -1000, -1000,
}

var ASNPgo = [...]int{
	0, 735, 400, 733, 732, 731, 730, 260, 729, 728,
	727, 726, 725, 720, 718, 123, 114, 714, 711, 97,
	708, 136, 72, 707, 706, 30, 18, 20, 705, 25,
	33, 83, 102, 24, 704, 702, 701, 691, 690, 684,
	683, 682, 47, 7, 32, 681, 678, 65, 42, 27,
	676, 674, 673, 672, 670, 666, 661, 660, 659, 658,
	657, 656, 654, 648, 646, 645, 644, 643, 642, 641,
	640, 639, 638, 631, 630, 629, 628, 627, 626, 625,
	624, 623, 622, 621, 620, 619, 618, 617, 615, 40,
	614, 613, 612, 611, 604, 594, 592, 591, 589, 588,
	586, 583, 580, 579, 578, 575, 573, 571, 569, 568,
	567, 566, 564, 558, 556, 555, 554, 8, 553, 12,
	11, 551, 10, 550, 549, 548, 541, 540, 539, 538,
	537, 534, 16, 106, 529, 525, 524, 523, 522, 521,
	514, 511, 504, 503, 502, 29, 22, 17, 501, 498,
	496, 493, 21, 19, 490, 489, 488, 13, 2, 487,
	485, 483, 481, 479, 478, 477, 476, 6, 474, 23,
	14, 468, 466, 9, 465, 464, 463, 461, 460, 459,
	458, 451, 450, 449, 448, 445, 440, 438, 437, 434,
	432, 430, 428, 426, 425, 423, 5, 421, 415, 414,
	413, 4, 411, 408, 407, 405, 402, 126, 0, 15,
	395, 389, 382, 380,
}

var ASNR1 = [...]int{
	0, 211, 1, 1, 2, 133, 133, 133, 148, 149,
	3, 12, 12, 4, 4, 5, 6, 6, 7, 7,
	7, 8, 9, 10, 11, 11, 11, 11, 13, 13,
	14, 14, 14, 16, 16, 16, 16, 20, 20, 21,
	21, 22, 22, 134, 135, 135, 15, 15, 17, 17,
	18, 18, 19, 23, 24, 24, 24, 25, 25, 25,
	26, 26, 27, 27, 27, 27, 28, 29, 29, 30,
	31, 31, 31, 32, 32, 32, 32, 32, 32, 32,
	32, 34, 35, 36, 37, 38, 39, 40, 41, 41,
	41, 41, 41, 41, 42, 42, 42, 43, 43, 43,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 57, 57, 57,
	57, 57, 136, 136, 136, 136, 141, 142, 143, 144,
	144, 89, 89, 147, 147, 147, 147, 147, 147, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 138, 139, 145, 145, 145,
	145, 150, 150, 154, 151, 152, 152, 155, 153, 146,
	156, 156, 157, 140, 58, 58, 158, 160, 160, 162,
	164, 164, 164, 165, 166, 167, 167, 168, 168, 170,
	170, 173, 173, 176, 176, 176, 177, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 180,
	181, 192, 192, 182, 193, 193, 194, 194, 195, 195,
	196, 196, 183, 184, 185, 212, 186, 197, 198, 198,
	199, 201, 201, 202, 203, 204, 204, 205, 205, 205,
	205, 200, 187, 188, 189, 190, 191, 179, 179, 179,
	179, 206, 174, 175, 175, 171, 172, 170, 169, 163,
	161, 159, 59, 60, 61, 62, 63, 64, 65, 66,
	68, 67, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, 80, 81, 82, 83, 84, 85, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 93, 93, 93, 93, 93, 116, 116, 117, 94,
	95, 95, 114, 114, 114, 114, 118, 121, 121, 122,
	122, 122, 122, 119, 123, 124, 125, 126, 120, 127,
	128, 115, 96, 97, 98, 99, 100, 101, 101, 103,
	104, 213, 104, 105, 105, 129, 129, 130, 130, 130,
	102, 106, 107, 131, 131, 132, 132, 132, 108, 109,
	110, 111, 112, 113, 91, 92, 45, 44, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55, 33, 33,
	33, 33, 86, 87, 88, 89, 210, 210, 208, 208,
	209, 209, 209, 209, 207,
}

var ASNR2 = [...]int{
	0, 1, 1, 2, 10, 1, 2, 0, 3, 0,
	2, 2, 0, 1, 0, 3, 1, 2, 1, 1,
	1, 1, 1, 4, 2, 2, 2, 0, 2, 0,
	3, 3, 0, 3, 3, 2, 0, 1, 0, 1,
	3, 1, 1, 1, 1, 3, 3, 0, 1, 0,
	1, 2, 3, 2, 1, 1, 0, 3, 4, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 4,
	1, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 4, 3, 4, 3, 4, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 2, 1,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 3, 2, 1, 1, 3, 2, 1,
	1, 3, 1, 3, 2, 1, 4, 1, 1, 1,
	1, 3, 5, 1, 1, 1, 2, 1, 3, 1,
	3, 1, 2, 1, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 0, 4, 1, 2, 1, 1, 1, 2,
	1, 1, 2, 2, 1, 0, 7, 1, 1, 1,
	3, 1, 3, 2, 2, 1, 0, 1, 1, 1,
	0, 5, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 1, 1, 1, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 2, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 9, 1, 1, 1, 1, 5, 1,
	1, 1, 3, 1, 1, 1, 0, 1, 1, 1,
	1, 0, 4, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 3, 1, 2, 1, 1, 1, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
	1, 1, 3, 2, 0, 0, 1, 1, 1, 1,
	1, 2, 1, 2, 3,
}

var ASNChk = [...]int{
	-1000, -211, -1, -2, -3, -208, 120, 121, -2, 48,
	-4, -5, 4, -12, 120, -6, -7, -8, -9, -10,
	121, -209, 123, 12, 124, -11, 67, 56, 32, 72,
	5, -7, 17, 123, 124, -13, 58, 104, 104, 104,
	-209, -207, 11, 68, 18, 33, 11, -14, -15, -16,
	69, 57, 19, -133, -148, 52, -16, -15, -17, -18,
	-19, -21, -22, -134, -135, -208, -20, 30, 26, -21,
	53, -133, 120, -31, -32, -34, -35, -36, -37, -38,
	-39, -40, -41, -208, -50, -51, -52, -53, -54, -55,
	-31, 26, -19, 10, 61, 4, 26, 26, -149, -32,
	-207, -42, -47, -56, -57, -58, -59, -60, -61, -62,
	-63, -64, -65, -66, -68, -67, -69, -70, -71, -72,
	-73, -74, -75, -76, -77, -78, -79, -80, -81, -82,
	-83, -84, -85, -136, -137, -138, -139, -140, -159, -141,
	-208, -142, -143, 115, 64, 81, 117, 92, 75, 105,
	63, 103, 113, 116, 35, 65, 62, 114, 83, -145,
	-144, -150, -151, -152, -153, -154, -155, -22, -23, -208,
	5, -42, -45, -46, -207, -158, 17, -207, 15, 14,
	15, -89, 4, -89, -89, -24, -25, -33, 4, -86,
	-208, -209, -87, -88, -43, -44, -90, -91, -92, -93,
	-94, -95, -96, -97, -98, -99, -100, -101, -102, -103,
	-25, -104, -105, -106, -107, -108, -109, -110, -111, -112,
	-113, 126, 127, 4, 44, -210, -114, -115, -208, -209,
	80, -129, -130, 108, 60, 128, -118, -119, -120, 90,
	78, 79, -160, -162, -163, -164, -165, -167, -168, 30,
	-170, -171, -173, -174, -176, -177, -178, -179, 17, -180,
	-181, -182, -183, -184, -185, -186, -187, -188, -189, -190,
	-191, -48, -152, -206, -153, -43, -192, -193, 61, 100,
	-42, 118, 88, 99, -208, -145, 70, -194, 77, -48,
	-49, -208, -42, -146, -156, -157, -208, -147, -89, -42,
	-43, -44, -47, -48, -49, 4, -26, -33, 5, -27,
	-208, -209, -28, -29, -30, 15, -89, -213, -33, 5,
	-116, -121, -123, -127, -131, -208, -209, -117, -122, -132,
	-29, -30, 128, -119, -120, 4, -43, 11, -161, 10,
	-169, -172, -175, 25, 74, -169, -167, -42, 15, -158,
	-158, 42, -43, -208, 15, 14, 15, 5, 10, -208,
	-209, 128, -119, -120, 5, -27, -33, -26, 17, -208,
	44, 5, 10, 5, 10, 10, 10, 5, -132, -29,
	-30, -33, -208, -209, -43, 18, 27, -170, -173, 18,
	15, -197, -158, -146, -157, -147, 15, 4, -29, -33,
	-43, -117, -208, -122, -33, -124, -209, -128, -209, 10,
	-195, -196, 14, -43, 76, -212, 5, -208, 18, 10,
	5, -166, -167, -196, 118, -125, -209, 42, 10, -198,
	-199, -200, 4, -126, -209, -201, 27, -202, -208, 5,
	5, 10, 10, -203, -204, -158, -201, -201, -205, 91,
	28, 87, 5,
}

var ASNDef = [...]int{
	0, -2, 1, 2, 0, 14, 408, 409, 3, 12,
	10, 13, 0, 27, 0, 0, 16, 18, 19, 20,
	21, 22, 410, 0, 412, 29, 0, 0, 0, 11,
	15, 17, 0, 411, 413, 0, 0, 24, 25, 26,
	0, 0, 0, 28, 23, -2, 0, 7, 36, 47,
	49, 0, 414, 0, 5, 0, 72, 72, 0, 48,
	50, 0, 39, 41, 42, 43, 0, 0, 35, 37,
	4, 6, 9, 30, 70, 73, 74, 75, 76, 77,
	78, 79, 80, 271, 88, 89, 90, 91, 92, 93,
	31, 46, 51, 0, 0, 0, 33, 34, 8, 71,
	271, 0, 0, 94, 95, 96, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 185, 132,
	133, 134, 135, 149, 150, 151, 152, 153, 154, 155,
	156, 157, 158, 159, 160, 161, 162, 163, 164, 0,
	405, 167, 168, 169, 170, 171, 175, 40, 52, 56,
	45, 81, 83, 85, 356, 184, 222, 390, 0, 271,
	0, 137, -2, 174, 178, 53, 54, 55, 404, 398,
	399, 400, 401, 405, 82, 84, 97, 98, 99, 299,
	300, 301, 302, 303, 304, 305, 306, 307, 308, 309,
	310, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 404, 356, 329, 330, 331, 354, 357,
	359, 363, 364, 406, 407, 332, 333, 334, 335, 367,
	368, 369, 270, 187, 188, 189, 190, 193, -2, 268,
	197, 266, 199, 0, 201, 268, 203, 204, 222, 207,
	208, 209, 210, 211, 212, 213, 214, 215, 216, 217,
	218, 257, -2, 259, -2, 219, 271, 0, 0, 0,
	234, 0, 356, 0, 133, 0, 221, 224, 227, 86,
	87, 136, 165, 166, 179, 180, 182, 0, 0, 143,
	144, 145, 146, 147, 148, -2, 404, 65, 59, 60,
	66, 67, 62, 63, 64, 0, 403, 0, -2, 59,
	0, 0, 0, 0, 404, -2, -2, 326, 337, 373,
	63, 64, 339, 340, 341, 0, 325, 356, 0, 0,
	196, 222, 222, 263, 264, 202, 0, 220, 0, 232,
	233, 0, 252, 253, 0, 225, 0, 141, 271, -2,
	-2, -2, -2, -2, 57, 61, 65, 0, 404, 402,
	356, 323, 0, 336, 404, 0, 0, 372, 374, 375,
	376, 68, 399, 344, 352, 186, 191, 198, 200, 205,
	356, 235, 237, 166, 181, 0, 0, 58, 0, 68,
	362, 327, 328, 338, 342, 0, 345, 0, 350, 222,
	223, 228, 356, 230, 231, 0, 142, -2, 69, 0,
	348, 192, 194, 229, 0, 0, 346, 0, 0, 236,
	238, 239, 0, 0, 347, 0, 0, 241, 246, 343,
	240, 0, 0, 243, 250, 245, 0, 242, 244, 247,
	248, 249, 251,
}

var ASNTok1 = [...]int{
	1,
}

var ASNTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128,
}

var ASNTok3 = [...]int{
	0,
}

var ASNErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	ASNDebug        = 0
	ASNErrorVerbose = false
)

type ASNLexer interface {
	Lex(lval *ASNSymType) int
	Error(s string)
}

type ASNParser interface {
	Parse(ASNLexer) int
	Lookahead() int
}

type ASNParserImpl struct {
	lval  ASNSymType
	stack [ASNInitialStackSize]ASNSymType
	char  int
}

func (p *ASNParserImpl) Lookahead() int {
	return p.char
}

func ASNNewParser() ASNParser {
	return &ASNParserImpl{}
}

const ASNFlag = -1000

func ASNTokname(c int) string {
	if c >= 1 && c-1 < len(ASNToknames) {
		if ASNToknames[c-1] != "" {
			return ASNToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func ASNStatname(s int) string {
	if s >= 0 && s < len(ASNStatenames) {
		if ASNStatenames[s] != "" {
			return ASNStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func ASNErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !ASNErrorVerbose {
		return "syntax error"
	}

	for _, e := range ASNErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + ASNTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := ASNPact[state]
	for tok := TOKSTART; tok-1 < len(ASNToknames); tok++ {
		if n := base + tok; n >= 0 && n < ASNLast && ASNChk[ASNAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if ASNDef[state] == -2 {
		i := 0
		for ASNExca[i] != -1 || ASNExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; ASNExca[i] >= 0; i += 2 {
			tok := ASNExca[i]
			if tok < TOKSTART || ASNExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if ASNExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += ASNTokname(tok)
	}
	return res
}

func ASNlex1(lex ASNLexer, lval *ASNSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = ASNTok1[0]
		goto out
	}
	if char < len(ASNTok1) {
		token = ASNTok1[char]
		goto out
	}
	if char >= ASNPrivate {
		if char < ASNPrivate+len(ASNTok2) {
			token = ASNTok2[char-ASNPrivate]
			goto out
		}
	}
	for i := 0; i < len(ASNTok3); i += 2 {
		token = ASNTok3[i+0]
		if token == char {
			token = ASNTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = ASNTok2[1] /* unknown char */
	}
	if ASNDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", ASNTokname(token), uint(char))
	}
	return char, token
}

func ASNParse(ASNlex ASNLexer) int {
	return ASNNewParser().Parse(ASNlex)
}

func (ASNrcvr *ASNParserImpl) Parse(ASNlex ASNLexer) int {
	var ASNn int
	var ASNVAL ASNSymType
	var ASNDollar []ASNSymType
	_ = ASNDollar // silence set and not used
	ASNS := ASNrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	ASNstate := 0
	ASNrcvr.char = -1
	ASNtoken := -1 // ASNrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		ASNstate = -1
		ASNrcvr.char = -1
		ASNtoken = -1
	}()
	ASNp := -1
	goto ASNstack

ret0:
	return 0

ret1:
	return 1

ASNstack:
	/* put a state and value onto the stack */
	if ASNDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", ASNTokname(ASNtoken), ASNStatname(ASNstate))
	}

	ASNp++
	if ASNp >= len(ASNS) {
		nyys := make([]ASNSymType, len(ASNS)*2)
		copy(nyys, ASNS)
		ASNS = nyys
	}
	ASNS[ASNp] = ASNVAL
	ASNS[ASNp].yys = ASNstate

ASNnewstate:
	ASNn = ASNPact[ASNstate]
	if ASNn <= ASNFlag {
		goto ASNdefault /* simple state */
	}
	if ASNrcvr.char < 0 {
		ASNrcvr.char, ASNtoken = ASNlex1(ASNlex, &ASNrcvr.lval)
	}
	ASNn += ASNtoken
	if ASNn < 0 || ASNn >= ASNLast {
		goto ASNdefault
	}
	ASNn = ASNAct[ASNn]
	if ASNChk[ASNn] == ASNtoken { /* valid shift */
		ASNrcvr.char = -1
		ASNtoken = -1
		ASNVAL = ASNrcvr.lval
		ASNstate = ASNn
		if Errflag > 0 {
			Errflag--
		}
		goto ASNstack
	}

ASNdefault:
	/* default state action */
	ASNn = ASNDef[ASNstate]
	if ASNn == -2 {
		if ASNrcvr.char < 0 {
			ASNrcvr.char, ASNtoken = ASNlex1(ASNlex, &ASNrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if ASNExca[xi+0] == -1 && ASNExca[xi+1] == ASNstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			ASNn = ASNExca[xi+0]
			if ASNn < 0 || ASNn == ASNtoken {
				break
			}
		}
		ASNn = ASNExca[xi+1]
		if ASNn < 0 {
			goto ret0
		}
	}
	if ASNn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			ASNlex.Error(ASNErrorMessage(ASNstate, ASNtoken))
			Nerrs++
			if ASNDebug >= 1 {
				__yyfmt__.Printf("%s", ASNStatname(ASNstate))
				__yyfmt__.Printf(" saw %s\n", ASNTokname(ASNtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for ASNp >= 0 {
				ASNn = ASNPact[ASNS[ASNp].yys] + ASNErrCode
				if ASNn >= 0 && ASNn < ASNLast {
					ASNstate = ASNAct[ASNn] /* simulate a shift of "error" */
					if ASNChk[ASNstate] == ASNErrCode {
						goto ASNstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if ASNDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", ASNS[ASNp].yys)
				}
				ASNp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if ASNDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", ASNTokname(ASNtoken))
			}
			if ASNtoken == ASNEofCode {
				goto ret1
			}
			ASNrcvr.char = -1
			ASNtoken = -1
			goto ASNnewstate /* try again in the same state */
		}
	}

	/* reduction by production ASNn */
	if ASNDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", ASNn, ASNStatname(ASNstate))
	}

	ASNnt := ASNn
	ASNpt := ASNp
	_ = ASNpt // guard against "declared and not used"

	ASNp -= ASNR2[ASNn]
	// ASNp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if ASNp+1 >= len(ASNS) {
		nyys := make([]ASNSymType, len(ASNS)*2)
		copy(nyys, ASNS)
		ASNS = nyys
	}
	ASNVAL = ASNS[ASNp+1]

	/* consult goto table to find next state */
	ASNn = ASNR1[ASNn]
	ASNg := ASNPgo[ASNn]
	ASNj := ASNg + ASNS[ASNp].yys + 1

	if ASNj >= ASNLast {
		ASNstate = ASNAct[ASNg]
	} else {
		ASNstate = ASNAct[ASNj]
		if ASNChk[ASNstate] != -ASNn {
			ASNstate = ASNAct[ASNg]
		}
	}
	// dummy call; replaced with literal code
	switch ASNnt {

	case 1:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:404
		{
			SetResult(ASNlex, ASNDollar[1].TypeValue)
			Print("Done")
			Print("--------------------------------------------------------------------------------")
			Print(JSON(&ASNDollar[1].TypeValue))
			Print("--------------------------------------------------------------------------------")
		}
	case 2:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:413
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 3:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:418
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 4:
		ASNDollar = ASNS[ASNpt-10 : ASNpt+1]
//line asn.y:448
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"encoding":   ASNDollar[3].TypeValue,
				"tag":        ASNDollar[4].TypeValue,
				"body":       ASNDollar[8].TypeValue,
			}
		}
	case 5:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:464
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 6:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:469
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 7:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:473
		{
			ASNVAL.TypeValue = nil
		}
	case 8:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:485
		{
			ASNVAL.TypeValue = MAP{
				"encodingReference":    ASNDollar[2].TypeString,
				"encodingInstructions": ASNDollar[3].TypeValue,
			}
		}
	case 9:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:500
		{
			ASNVAL.TypeValue = nil
		}
	case 10:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:513
		{
			ASNVAL.TypeValue = MAP{
				"reference":             ASNDollar[1].TypeValue,
				"definitiveIdentifiers": ASNDollar[2].TypeValue,
			}
		}
	case 11:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:527
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 12:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:530
		{
			ASNVAL.TypeValue = ""
		}
	case 13:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:542
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 14:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:545
		{
			ASNVAL.TypeValue = nil
		}
	case 15:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:555
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 16:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:566
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 17:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:571
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 18:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:584
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 19:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:587
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 20:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:590
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 21:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:599
		{
			ASNVAL.TypeValue = MAP{
				"name": ASNDollar[1].TypeString,
			}
		}
	case 22:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:610
		{
			ASNVAL.TypeValue = MAP{
				"number": ASNDollar[1].TypeValue,
			}
		}
	case 23:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:621
		{
			ASNVAL.TypeValue = MAP{
				"name":   ASNDollar[1].TypeString,
				"number": ASNDollar[3].TypeValue,
			}
		}
	case 24:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:637
		{
			ASNVAL.TypeValue = "Implicit"
		}
	case 25:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:640
		{
			ASNVAL.TypeValue = "Explicit"
		}
	case 26:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:643
		{
			ASNVAL.TypeValue = "Automatic"
		}
	case 27:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:646
		{
			ASNVAL.TypeValue = "Explicit"
		}
	case 28:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:657
		{
			ASNVAL.TypeValue = true
		}
	case 29:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:660
		{
			ASNVAL.TypeValue = false
		}
	case 30:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:673
		{
			ASNVAL.TypeValue = MAP{
				"imports":     ASNDollar[1].TypeValue,
				"exports":     ASNDollar[2].TypeValue,
				"assignments": ASNDollar[3].TypeValue,
			}
		}
	case 31:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:682
		{
			ASNVAL.TypeValue = MAP{
				"imports":     ASNDollar[2].TypeValue,
				"exports":     ASNDollar[1].TypeValue,
				"assignments": ASNDollar[3].TypeValue,
			}
		}
	case 32:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:689
		{
			ASNVAL.TypeValue = nil
		}
	case 33:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:701
		{
			ASNVAL.TypeValue = MAP{
				"all":     "false",
				"symbols": ASNDollar[2].TypeValue,
			}
		}
	case 34:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:707
		{
			ASNVAL.TypeValue = MAP{
				"all": "true",
			}
		}
	case 35:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:712
		{
			ASNVAL.TypeValue = MAP{
				"all": "false",
			}
		}
	case 36:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:717
		{
			ASNVAL.TypeValue = MAP{
				"all": "true",
			}
		}
	case 37:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:730
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 38:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:733
		{
			ASNVAL.TypeValue = nil
		}
	case 39:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:744
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 40:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:749
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 41:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:761
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
			}
		}
	case 42:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:766
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedReference": ASNDollar[1].TypeValue,
			}
		}
	case 43:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:785
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 44:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:795
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 45:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:798
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 46:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:809
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 47:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:812
		{
			ASNVAL.TypeValue = nil
		}
	case 48:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:823
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 49:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:826
		{
			ASNVAL.TypeValue = nil
		}
	case 50:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:837
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 51:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:842
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 52:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:853
		{
			ASNVAL.TypeValue = MAP{
				"symbols":   ASNDollar[1].TypeValue,
				"reference": ASNDollar[3].TypeValue,
			}
		}
	case 53:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:866
		{
			ASNVAL.TypeValue = MAP{
				"name":        ASNDollar[1].TypeValue,
				"identifiers": ASNDollar[2].TypeValue,
			}
		}
	case 54:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:881
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 55:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:884
		{
			ASNVAL.TypeValue = nil
		}
	case 56:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:887
		{
			ASNVAL.TypeValue = nil
		}
	case 57:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:898
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 58:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:901
		{
			ASNVAL.TypeValue = ASNDollar[3].TypeValue
		}
	case 59:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:904
		{
			ASNVAL.TypeValue = nil
		}
	case 60:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:915
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 61:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:920
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 62:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:934
		{
			ASNVAL.TypeValue = MAP{
				"name": ASNDollar[1].TypeValue,
			}
		}
	case 63:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:939
		{
			ASNVAL.TypeValue = MAP{
				"number": ASNDollar[1].TypeValue,
			}
		}
	case 64:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:944
		{
			ASNVAL.TypeValue = MAP{
				"nameAndNumber": ASNDollar[1].TypeValue,
			}
		}
	case 65:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:949
		{
			ASNVAL.TypeValue = MAP{
				"definedValue": ASNDollar[1].TypeValue,
			}
		}
	case 66:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:961
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 67:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:972
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 68:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:975
		{
			ASNVAL.TypeValue = MAP{
				"definedValue": ASNDollar[1].TypeValue,
			}
		}
	case 69:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:987
		{
			ASNVAL.TypeValue = MAP{
				"name":   ASNDollar[1].TypeValue,
				"number": ASNDollar[3].TypeValue,
			}
		}
	case 70:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1001
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 71:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1006
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 72:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1010
		{
			ASNVAL.TypeValue = nil
		}
	case 73:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1027
		{
			ASNVAL.TypeValue = MAP{
				"typeAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 74:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1032
		{
			ASNVAL.TypeValue = MAP{
				"valueAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 75:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1037
		{
			ASNVAL.TypeValue = MAP{
				"xmlValueAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 76:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1042
		{
			ASNVAL.TypeValue = MAP{
				"valueSetAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 77:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1047
		{
			ASNVAL.TypeValue = MAP{
				"objectClassAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 78:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1052
		{
			ASNVAL.TypeValue = MAP{
				"objectAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 79:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1057
		{
			ASNVAL.TypeValue = MAP{
				"objectSetAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 80:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1062
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 81:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1076
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"type":      ASNDollar[2].TypeValue,
			}
		}
	case 82:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1092
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"type":      ASNDollar[2].TypeValue,
				"value":     ASNDollar[4].TypeValue,
			}
		}
	case 83:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1108
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"value":     ASNDollar[3].TypeValue,
			}
		}
	case 84:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1124
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"type":      ASNDollar[2].TypeValue,
				"valueSet":  ASNDollar[4].TypeValue,
			}
		}
	case 85:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1140
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"class":     ASNDollar[3].TypeValue,
			}
		}
	case 86:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1156
		{
			ASNVAL.TypeValue = MAP{
				"reference":    ASNDollar[1].TypeValue,
				"definedClass": ASNDollar[2].TypeValue,
				"object":       ASNDollar[4].TypeValue,
			}
		}
	case 87:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1173
		{
			ASNVAL.TypeValue = MAP{
				"reference":    ASNDollar[1].TypeValue,
				"definedClass": ASNDollar[2].TypeValue,
				"objectSet":    ASNDollar[4].TypeValue,
			}
		}
	case 88:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1192
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 89:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1195
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 90:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1198
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 91:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1201
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 92:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1204
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 93:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1207
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 94:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1219
		{
			ASNVAL.TypeValue = MAP{
				"type":       "BUILTIN_TYPE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 95:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1225
		{
			ASNVAL.TypeValue = MAP{
				"type":       "REFERENCED_TYPE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 96:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1231
		{
			ASNVAL.TypeValue = MAP{
				"type":       "CONSTRAINED_TYPE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 97:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1246
		{
			ASNVAL.TypeValue = MAP{
				"type":       "BUILTIN_VALUE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 98:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1252
		{
			ASNVAL.TypeValue = MAP{
				"type":       "REFERENCED_VALUE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 99:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1258
		{
			ASNVAL.TypeValue = MAP{
				"type":       "OBJECT_CLASS_FIELD_VALUE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 100:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1296
		{
			ASNVAL.TypeValue = MAP{
				"bitStringType": ASNDollar[1].TypeValue,
			}
		}
	case 101:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1301
		{
			ASNVAL.TypeValue = MAP{
				"booleanType": ASNDollar[1].TypeValue,
			}
		}
	case 102:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1306
		{
			ASNVAL.TypeValue = MAP{
				"characterStringType": ASNDollar[1].TypeValue,
			}
		}
	case 103:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1311
		{
			ASNVAL.TypeValue = MAP{
				"choiceType": ASNDollar[1].TypeValue,
			}
		}
	case 104:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1316
		{
			ASNVAL.TypeValue = MAP{
				"dateType": ASNDollar[1].TypeValue,
			}
		}
	case 105:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1321
		{
			ASNVAL.TypeValue = MAP{
				"dataTimeType": ASNDollar[1].TypeValue,
			}
		}
	case 106:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1326
		{
			ASNVAL.TypeValue = MAP{
				"durationType": ASNDollar[1].TypeValue,
			}
		}
	case 107:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1331
		{
			ASNVAL.TypeValue = MAP{
				"embeddedPDVType": ASNDollar[1].TypeValue,
			}
		}
	case 108:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1336
		{
			ASNVAL.TypeValue = MAP{
				"enumeratedType": ASNDollar[1].TypeValue,
			}
		}
	case 109:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1341
		{
			ASNVAL.TypeValue = MAP{
				"externalType": ASNDollar[1].TypeValue,
			}
		}
	case 110:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1346
		{
			ASNVAL.TypeValue = MAP{
				"instanceOfType": ASNDollar[1].TypeValue,
			}
		}
	case 111:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1351
		{
			ASNVAL.TypeValue = MAP{
				"integerType": ASNDollar[1].TypeValue,
			}
		}
	case 112:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1356
		{
			ASNVAL.TypeValue = MAP{
				"iriType": ASNDollar[1].TypeValue,
			}
		}
	case 113:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1361
		{
			ASNVAL.TypeValue = MAP{
				"nullType": ASNDollar[1].TypeValue,
			}
		}
	case 114:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1366
		{
			ASNVAL.TypeValue = MAP{
				"objectClassFieldType": ASNDollar[1].TypeValue,
			}
		}
	case 115:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1371
		{
			ASNVAL.TypeValue = MAP{
				"objectIdentifierType": ASNDollar[1].TypeValue,
			}
		}
	case 116:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1376
		{
			ASNVAL.TypeValue = MAP{
				"octetStringType": ASNDollar[1].TypeValue,
			}
		}
	case 117:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1381
		{
			ASNVAL.TypeValue = MAP{
				"realType": ASNDollar[1].TypeValue,
			}
		}
	case 118:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1386
		{
			ASNVAL.TypeValue = MAP{
				"relativeIRIType": ASNDollar[1].TypeValue,
			}
		}
	case 119:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1391
		{
			ASNVAL.TypeValue = MAP{
				"relativeOIDType": ASNDollar[1].TypeValue,
			}
		}
	case 120:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1396
		{
			ASNVAL.TypeValue = MAP{
				"sequenceType": ASNDollar[1].TypeValue,
			}
		}
	case 121:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1401
		{
			ASNVAL.TypeValue = MAP{
				"sequenceOfType": ASNDollar[1].TypeValue,
			}
		}
	case 122:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1406
		{
			ASNVAL.TypeValue = MAP{
				"setType": ASNDollar[1].TypeValue,
			}
		}
	case 123:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1411
		{
			ASNVAL.TypeValue = MAP{
				"setOfType": ASNDollar[1].TypeValue,
			}
		}
	case 124:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1416
		{
			ASNVAL.TypeValue = MAP{
				"prefixedType": ASNDollar[1].TypeValue,
			}
		}
	case 125:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1421
		{
			ASNVAL.TypeValue = MAP{
				"timeType": ASNDollar[1].TypeValue,
			}
		}
	case 126:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1426
		{
			ASNVAL.TypeValue = MAP{
				"timeOfDayType": ASNDollar[1].TypeValue,
			}
		}
	case 127:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1442
		{
			ASNVAL.TypeValue = MAP{
				"definedType": ASNDollar[1].TypeValue,
			}
		}
	case 128:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1447
		{
			ASNVAL.TypeValue = MAP{
				"usefulType": ASNDollar[1].TypeValue,
			}
		}
	case 129:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1452
		{
			ASNVAL.TypeValue = MAP{
				"selectionType": ASNDollar[1].TypeValue,
			}
		}
	case 130:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1457
		{
			ASNVAL.TypeValue = MAP{
				"typeFromObject": ASNDollar[1].TypeValue,
			}
		}
	case 131:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1462
		{
			ASNVAL.TypeValue = MAP{
				"valueSetFromObjects": ASNDollar[1].TypeValue,
			}
		}
	case 132:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1477
		{
			ASNVAL.TypeValue = MAP{
				"externalTypeReference": ASNDollar[1].TypeValue,
			}
		}
	case 133:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1482
		{
			ASNVAL.TypeValue = MAP{
				"typeReference": ASNDollar[1].TypeValue,
			}
		}
	case 134:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1487
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedType": ASNDollar[1].TypeValue,
			}
		}
	case 135:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1492
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedValueSetType": ASNDollar[1].TypeValue,
			}
		}
	case 136:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1506
		{
			ASNVAL.TypeValue = MAP{
				"moduleReference": ASNDollar[1].TypeValue,
				"typeReference":   ASNDollar[2].TypeToken,
			}
		}
	case 137:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1520
		{
			ASNVAL.TypeValue = MAP{
				"simpleDefinedType":   ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 138:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1534
		{
			ASNVAL.TypeValue = MAP{
				"simpleDefinedType":   ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 139:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1548
		{
			ASNVAL.TypeValue = MAP{
				"externalTypeReference": ASNDollar[1].TypeValue,
			}
		}
	case 140:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1553
		{
			ASNVAL.TypeValue = MAP{
				"typeReference": ASNDollar[1].TypeValue,
			}
		}
	case 141:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1564
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[2].TypeValue,
			}
		}
	case 142:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:1569
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[4].TypeValue)
		}
	case 143:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1585
		{
			ASNVAL.TypeValue = MAP{
				"type": ASNDollar[1].TypeValue,
			}
		}
	case 144:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1590
		{
			ASNVAL.TypeValue = MAP{
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 145:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1595
		{
			ASNVAL.TypeValue = MAP{
				"valueSet": ASNDollar[1].TypeValue,
			}
		}
	case 146:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1600
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectClass": ASNDollar[1].TypeValue,
			}
		}
	case 147:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1605
		{
			ASNVAL.TypeValue = MAP{
				"object": ASNDollar[1].TypeValue,
			}
		}
	case 148:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1610
		{
			ASNVAL.TypeValue = MAP{
				"objectSet": ASNDollar[1].TypeValue,
			}
		}
	case 149:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1638
		{
			ASNVAL.TypeValue = STRING(UTF8String)
		}
	case 150:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1641
		{
			ASNVAL.TypeValue = STRING(GraphicString)
		}
	case 151:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1644
		{
			ASNVAL.TypeValue = STRING(NumericString)
		}
	case 152:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1647
		{
			ASNVAL.TypeValue = STRING(VisibleString)
		}
	case 153:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1650
		{
			ASNVAL.TypeValue = STRING(PrintableString)
		}
	case 154:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1653
		{
			ASNVAL.TypeValue = STRING(ISO646String)
		}
	case 155:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1656
		{
			ASNVAL.TypeValue = STRING(TeletexString)
		}
	case 156:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1659
		{
			ASNVAL.TypeValue = STRING(GeneralString)
		}
	case 157:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1662
		{
			ASNVAL.TypeValue = STRING(T61String)
		}
	case 158:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1665
		{
			ASNVAL.TypeValue = STRING(UniversalString)
		}
	case 159:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1668
		{
			ASNVAL.TypeValue = STRING(VideotexString)
		}
	case 160:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1671
		{
			ASNVAL.TypeValue = STRING(BMPString)
		}
	case 161:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1674
		{
			ASNVAL.TypeValue = STRING(IA5String)
		}
	case 162:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1677
		{
			ASNVAL.TypeValue = STRING(GeneralizedTime)
		}
	case 163:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1680
		{
			ASNVAL.TypeValue = STRING(UTCTime)
		}
	case 164:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1683
		{
			ASNVAL.TypeValue = STRING(ObjectDescriptor)
		}
	case 165:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1693
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"type":       ASNDollar[3].TypeValue,
			}
		}
	case 166:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1706
		{
			ASNVAL.TypeValue = MAP{
				"referencedObjects": ASNDollar[1].TypeValue,
				"fieldName":         ASNDollar[2].TypeToken,
			}
		}
	case 167:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1719
		{
			ASNVAL.TypeValue = MAP{
				"definedObject": ASNDollar[1].TypeValue,
			}
		}
	case 168:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1724
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedObject": ASNDollar[1].TypeValue,
			}
		}
	case 169:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1729
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 170:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1734
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 171:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1746
		{
			ASNVAL.TypeValue = MAP{
				"externalObjectReference": ASNDollar[1].TypeValue,
			}
		}
	case 172:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1751
		{
			ASNVAL.TypeValue = MAP{
				"objectReference": ASNDollar[1].TypeValue,
			}
		}
	case 173:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1763
		{
			ASNVAL.TypeValue = MAP{
				"moduleReference": ASNDollar[1].TypeValue,
				"objectReference": ASNDollar[3].TypeValue,
			}
		}
	case 174:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1776
		{
			ASNVAL.TypeValue = MAP{
				"definedObject":       ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 175:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1789
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 176:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1792
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 177:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1802
		{
			ASNVAL.TypeValue = MAP{
				"moduleReference":    ASNDollar[1].TypeValue,
				"objectSetReference": ASNDollar[3].TypeValue,
			}
		}
	case 178:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1815
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet":    ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 179:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1828
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 180:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1839
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 181:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1844
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 182:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1859
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 183:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1869
		{
			ASNVAL.TypeValue = MAP{
				"referencedObjects": ASNDollar[1].TypeValue,
				"fieldname":         ASNDollar[3].TypeValue,
			}
		}
	case 184:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1883
		{
			ASNVAL.TypeValue = MAP{
				"type":       ASNDollar[1].TypeValue,
				"constraint": ASNDollar[2].TypeValue,
			}
		}
	case 185:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1889
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 186:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1899
		{
			ASNVAL.TypeValue = MAP{
				"constraintSpec": ASNDollar[2].TypeValue,
				"exceptionSpec":  ASNDollar[3].TypeValue,
			}
		}
	case 187:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1913
		{
			ASNVAL.TypeValue = MAP{
				"subtypeConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 188:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1918
		{
			ASNVAL.TypeValue = MAP{
				"generalConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 189:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1930
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 190:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1942
		{
			ASNVAL.TypeValue = MAP{
				"rootElementSetSpec": ASNDollar[1].TypeValue,
			}
		}
	case 191:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1947
		{
			ASNVAL.TypeValue = MAP{
				"rootElementSetSpec": ASNDollar[1].TypeValue,
			}
		}
	case 192:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:1952
		{
			ASNVAL.TypeValue = MAP{
				"rootElementSetSpec":       ASNDollar[1].TypeValue,
				"additionalElementSetSpec": ASNDollar[2].TypeToken,
			}
		}
	case 193:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1965
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 194:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1975
		{
			ASNVAL.TypeValue = nil
		}
	case 195:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1986
		{
			ASNVAL.TypeValue = MAP{
				"unions": ASNDollar[1].TypeValue,
			}
		}
	case 196:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1991
		{
			ASNVAL.TypeValue = MAP{
				"exclusions": ASNDollar[1].TypeString,
			}
		}
	case 197:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2004
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 198:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2007
		{
			ASNVAL.TypeValue = MAP{
				"unions":        ASNDollar[1].TypeValue,
				"intersections": ASNDollar[3].TypeValue,
			}
		}
	case 199:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2021
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 200:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2024
		{
			ASNVAL.TypeValue = MAP{
				"intersections":        ASNDollar[1].TypeValue,
				"intersectionElements": ASNDollar[2].TypeValue,
			}
		}
	case 201:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2037
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 202:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2040
		{
			ASNVAL.TypeValue = MAP{
				"elements":   ASNDollar[1].TypeValue,
				"exclusions": ASNDollar[2].TypeValue,
			}
		}
	case 203:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2055
		{
			ASNVAL.TypeValue = MAP{
				"subtypeElements": ASNDollar[1].TypeValue,
			}
		}
	case 204:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2060
		{
			ASNVAL.TypeValue = MAP{
				"objectSetElements": ASNDollar[1].TypeValue,
			}
		}
	case 205:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2065
		{
			ASNVAL.TypeValue = MAP{
				"elementSetSpec": ASNDollar[1].TypeToken,
			}
		}
	case 206:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2077
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 207:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2098
		{
			ASNVAL.TypeValue = MAP{
				"singleValue": ASNDollar[1].TypeValue,
			}
		}
	case 208:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2103
		{
			ASNVAL.TypeValue = MAP{
				"containedSubtype": ASNDollar[1].TypeValue,
			}
		}
	case 209:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2108
		{
			ASNVAL.TypeValue = MAP{
				"valueRange": ASNDollar[1].TypeValue,
			}
		}
	case 210:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2113
		{
			ASNVAL.TypeValue = MAP{
				"permittedAlphabet": ASNDollar[1].TypeValue,
			}
		}
	case 211:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2118
		{
			ASNVAL.TypeValue = MAP{
				"sizeConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 212:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2123
		{
			ASNVAL.TypeValue = MAP{
				"typeConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 213:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2128
		{
			ASNVAL.TypeValue = MAP{
				"innerTypeConstraints": ASNDollar[1].TypeValue,
			}
		}
	case 214:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2133
		{
			ASNVAL.TypeValue = MAP{
				"patternConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 215:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2138
		{
			ASNVAL.TypeValue = MAP{
				"propertySettings": ASNDollar[1].TypeValue,
			}
		}
	case 216:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2143
		{
			ASNVAL.TypeValue = MAP{
				"durationRange": ASNDollar[1].TypeValue,
			}
		}
	case 217:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2148
		{
			ASNVAL.TypeValue = MAP{
				"timePointRange": ASNDollar[1].TypeValue,
			}
		}
	case 218:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2153
		{
			ASNVAL.TypeValue = MAP{
				"recurrenceRange": ASNDollar[1].TypeValue,
			}
		}
	case 219:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2165
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 220:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2175
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 221:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2185
		{
			ASNVAL.TypeValue = "INCLUDES"
		}
	case 222:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2188
		{
			ASNVAL.TypeValue = "INCLUDES"
		}
	case 223:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2198
		{
			ASNVAL.TypeValue = MAP{
				"lowerEndpoint": ASNDollar[1].TypeValue,
				"upperEndpoint": ASNDollar[2].TypeToken,
			}
		}
	case 224:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2211
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 225:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2214
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 226:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2224
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 227:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2227
		{
			ASNVAL.TypeValue = "MIN"
		}
	case 228:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2237
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 229:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2240
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 230:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2250
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 231:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2253
		{
			ASNVAL.TypeValue = "MAX"
		}
	case 232:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2263
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 233:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2273
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 234:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2283
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 235:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2294
		{
			ASNVAL.TypeValue = ASNDollar[3].TypeValue
		}
	case 236:
		ASNDollar = ASNS[ASNpt-7 : ASNpt+1]
//line asn.y:2297
		{
			ASNVAL.TypeValue = ASNDollar[3].TypeValue
		}
	case 237:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2307
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 238:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2318
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 239:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2321
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 240:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2331
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 241:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2342
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 242:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2345
		{
			ASNVAL.TypeValue = MAP{
				"nameConstraint":  ASNDollar[1].TypeValue,
				"typeConstraints": ASNDollar[3].TypeValue,
			}
		}
	case 243:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2358
		{
			ASNVAL.TypeValue = MAP{
				"identifier":          ASNDollar[1].TypeValue,
				"componentConstraint": ASNDollar[2].TypeValue,
			}
		}
	case 244:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2371
		{
			ASNVAL.TypeValue = MAP{
				"valueConstraint":    ASNDollar[1].TypeValue,
				"presenceConstraint": ASNDollar[2].TypeValue,
			}
		}
	case 245:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2384
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 246:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2387
		{
			ASNVAL.TypeValue = nil
		}
	case 247:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2397
		{
			ASNVAL.TypeValue = "PRESENT"
		}
	case 248:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2400
		{
			ASNVAL.TypeValue = "ABSENT"
		}
	case 249:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2403
		{
			ASNVAL.TypeValue = "OPTIONAL"
		}
	case 250:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2406
		{
			ASNVAL.TypeValue = nil
		}
	case 251:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:2416
		{
			ASNVAL.TypeValue = ASNDollar[4].TypeValue
		}
	case 252:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2426
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 253:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2436
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 254:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2446
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 255:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2456
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 256:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2466
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 257:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2479
		{
			ASNVAL.TypeValue = MAP{
				"object": ASNDollar[1].TypeValue,
			}
		}
	case 258:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2484
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 259:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2489
		{
			ASNVAL.TypeValue = MAP{
				"objectSetFromObjects": ASNDollar[1].TypeValue,
			}
		}
	case 260:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2494
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 261:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2506
		{
			ASNVAL.TypeValue = MAP{
				"referencedObjects": ASNDollar[1].TypeValue,
				"fieldName":         ASNDollar[2].TypeToken,
			}
		}
	case 262:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2519
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 263:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2529
		{
			ASNVAL.TypeValue = "INTERSECTION"
		}
	case 264:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2532
		{
			ASNVAL.TypeValue = "INTERSECTION"
		}
	case 265:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2542
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 266:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2548
		{
			ASNVAL.TypeValue = nil
		}
	case 267:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2554
		{
			ASNVAL.TypeValue = nil
		}
	case 268:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2560
		{
			ASNVAL.TypeValue = nil
		}
	case 269:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2566
		{
			ASNVAL.TypeValue = nil
		}
	case 270:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2572
		{
			ASNVAL.TypeValue = nil
		}
	case 271:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2578
		{
			ASNVAL.TypeValue = nil
		}
	case 272:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2584
		{
			ASNVAL.TypeValue = nil
		}
	case 273:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2590
		{
			ASNVAL.TypeValue = nil
		}
	case 274:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2596
		{
			ASNVAL.TypeValue = nil
		}
	case 275:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2602
		{
			ASNVAL.TypeValue = nil
		}
	case 276:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2608
		{
			ASNVAL.TypeValue = nil
		}
	case 277:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2614
		{
			ASNVAL.TypeValue = nil
		}
	case 278:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2620
		{
			ASNVAL.TypeValue = nil
		}
	case 279:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2626
		{
			ASNVAL.TypeValue = nil
		}
	case 280:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2632
		{
			ASNVAL.TypeValue = nil
		}
	case 281:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2638
		{
			ASNVAL.TypeValue = nil
		}
	case 282:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2644
		{
			ASNVAL.TypeValue = nil
		}
	case 283:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2650
		{
			ASNVAL.TypeValue = nil
		}
	case 284:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2656
		{
			ASNVAL.TypeValue = nil
		}
	case 285:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2662
		{
			ASNVAL.TypeValue = nil
		}
	case 286:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2668
		{
			ASNVAL.TypeValue = nil
		}
	case 287:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2674
		{
			ASNVAL.TypeValue = nil
		}
	case 288:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2680
		{
			ASNVAL.TypeValue = nil
		}
	case 289:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2686
		{
			ASNVAL.TypeValue = nil
		}
	case 290:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2692
		{
			ASNVAL.TypeValue = nil
		}
	case 291:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2698
		{
			ASNVAL.TypeValue = nil
		}
	case 292:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2704
		{
			ASNVAL.TypeValue = nil
		}
	case 293:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2710
		{
			ASNVAL.TypeValue = nil
		}
	case 294:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2716
		{
			ASNVAL.TypeValue = nil
		}
	case 295:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2722
		{
			ASNVAL.TypeValue = nil
		}
	case 296:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2728
		{
			ASNVAL.TypeValue = nil
		}
	case 297:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2734
		{
			ASNVAL.TypeValue = nil
		}
	case 298:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2740
		{
			ASNVAL.TypeValue = nil
		}
	case 299:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2745
		{
			ASNVAL.TypeValue = MAP{
				"bitString": ASNDollar[1].TypeValue,
			}
		}
	case 300:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2750
		{
			ASNVAL.TypeValue = MAP{
				"boolean": ASNDollar[1].TypeValue,
			}
		}
	case 301:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2755
		{
			ASNVAL.TypeValue = MAP{
				"characterString": ASNDollar[1].TypeValue,
			}
		}
	case 302:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2760
		{
			ASNVAL.TypeValue = MAP{
				"choice": ASNDollar[1].TypeValue,
			}
		}
	case 303:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2765
		{
			ASNVAL.TypeValue = MAP{
				"embeddedPDV": ASNDollar[1].TypeValue,
			}
		}
	case 304:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2770
		{
			ASNVAL.TypeValue = MAP{
				"enumerated": ASNDollar[1].TypeValue,
			}
		}
	case 305:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2775
		{
			ASNVAL.TypeValue = MAP{
				"external": ASNDollar[1].TypeValue,
			}
		}
	case 306:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2780
		{
			ASNVAL.TypeValue = MAP{
				"instanceOf": ASNDollar[1].TypeValue,
			}
		}
	case 307:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2785
		{
			ASNVAL.TypeValue = MAP{
				"integer": ASNDollar[1].TypeValue,
			}
		}
	case 308:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2790
		{
			ASNVAL.TypeValue = MAP{
				"iri": ASNDollar[1].TypeValue,
			}
		}
	case 309:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2795
		{
			ASNVAL.TypeValue = MAP{
				"null": ASNDollar[1].TypeValue,
			}
		}
	case 310:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2800
		{
			ASNVAL.TypeValue = MAP{
				"objectIdentifier": ASNDollar[1].TypeValue,
			}
		}
	case 311:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2805
		{
			ASNVAL.TypeValue = MAP{
				"octetString": ASNDollar[1].TypeValue,
			}
		}
	case 312:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2810
		{
			ASNVAL.TypeValue = MAP{
				"real": ASNDollar[1].TypeValue,
			}
		}
	case 313:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2815
		{
			ASNVAL.TypeValue = MAP{
				"relativeIRI": ASNDollar[1].TypeValue,
			}
		}
	case 314:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2820
		{
			ASNVAL.TypeValue = MAP{
				"relativeOID": ASNDollar[1].TypeValue,
			}
		}
	case 315:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2825
		{
			ASNVAL.TypeValue = MAP{
				"sequence": ASNDollar[1].TypeValue,
			}
		}
	case 316:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2830
		{
			ASNVAL.TypeValue = MAP{
				"sequenceOf": ASNDollar[1].TypeValue,
			}
		}
	case 317:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2835
		{
			ASNVAL.TypeValue = MAP{
				"set": ASNDollar[1].TypeValue,
			}
		}
	case 318:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2840
		{
			ASNVAL.TypeValue = MAP{
				"setOf": ASNDollar[1].TypeValue,
			}
		}
	case 319:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2845
		{
			ASNVAL.TypeValue = MAP{
				"prefixed": ASNDollar[1].TypeValue,
			}
		}
	case 320:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2850
		{
			ASNVAL.TypeValue = MAP{
				"time": ASNDollar[1].TypeValue,
			}
		}
	case 321:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2857
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 322:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2860
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 323:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2863
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 324:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2866
		{
			ASNVAL.TypeValue = nil
		}
	case 325:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2869
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 326:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2874
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 327:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2879
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeToken)
		}
	case 328:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2885
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 329:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2890
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 330:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2895
		{
			ASNVAL.TypeValue = nil
		}
	case 331:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2898
		{

		}
	case 332:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2903
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 333:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2906
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 334:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2909
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 335:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2912
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 336:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2917
		{
			ASNVAL.TypeValue = nil
		}
	case 337:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2922
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 338:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2927
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeToken)
		}
	case 339:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2933
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 340:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2936
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 341:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2939
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 342:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2942
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 343:
		ASNDollar = ASNS[ASNpt-9 : ASNpt+1]
//line asn.y:2947
		{
			ASNVAL.TypeValue = MAP{
				"group": ASNDollar[2].TypeValue,
				"plane": ASNDollar[4].TypeValue,
				"row":   ASNDollar[6].TypeValue,
				"cell":  ASNDollar[8].TypeValue,
			}
		}
	case 344:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2957
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 345:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2962
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 346:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2967
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 347:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2972
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 348:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:2977
		{
			ASNVAL.TypeValue = MAP{
				"tableColumn": ASNDollar[2].TypeValue,
				"tableRow":    ASNDollar[4].TypeValue,
			}
		}
	case 349:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2985
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 350:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2990
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 351:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2995
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 352:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3000
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"value":      ASNDollar[2].TypeToken,
			}
		}
	case 353:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3008
		{
			ASNVAL.TypeValue = nil
		}
	case 354:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3013
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 355:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3018
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 356:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3023
		{
			ASNVAL.TypeValue = nil
		}
	case 357:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3028
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 358:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3031
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 359:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3036
		{
			ASNVAL.TypeValue = "NULL"
		}
	case 360:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3042
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 361:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3045
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 362:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3048
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 363:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3053
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 364:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3056
		{
			ASNVAL.TypeValue = nil
		}
	case 365:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3061
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 366:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3064
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 367:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3069
		{
			ASNVAL.TypeValue = nil
		}
	case 368:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3072
		{
			ASNVAL.TypeValue = nil
		}
	case 369:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3075
		{
			ASNVAL.TypeValue = nil
		}
	case 370:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3080
		{
			ASNVAL.TypeValue = nil
		}
	case 371:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3085
		{
			ASNVAL.TypeValue = nil
		}
	case 372:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3090
		{
			ASNVAL.TypeValue = nil
		}
	case 373:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3095
		{
			ASNVAL.TypeValue = nil
		}
	case 374:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3098
		{
			ASNVAL.TypeValue = nil
		}
	case 375:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3103
		{
			ASNVAL.TypeValue = nil
		}
	case 376:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3106
		{
			ASNVAL.TypeValue = nil
		}
	case 377:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3109
		{
			ASNVAL.TypeValue = nil
		}
	case 378:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3114
		{
			ASNVAL.TypeValue = nil
		}
	case 379:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3119
		{
			ASNVAL.TypeValue = nil
		}
	case 380:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3124
		{
			ASNVAL.TypeValue = nil
		}
	case 381:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3129
		{
			ASNVAL.TypeValue = nil
		}
	case 382:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3134
		{
			ASNVAL.TypeValue = nil
		}
	case 383:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3139
		{
			ASNVAL.TypeValue = nil
		}
	case 384:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3144
		{
			ASNVAL.TypeValue = nil
		}
	case 385:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3149
		{
			ASNVAL.TypeValue = nil
		}
	case 386:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3154
		{
			ASNVAL.TypeValue = nil
		}
	case 387:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3159
		{
			ASNVAL.TypeValue = nil
		}
	case 388:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3164
		{
			ASNVAL.TypeValue = nil
		}
	case 389:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3169
		{
			ASNVAL.TypeValue = nil
		}
	case 390:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3174
		{
			ASNVAL.TypeValue = nil
		}
	case 391:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3179
		{
			ASNVAL.TypeValue = nil
		}
	case 392:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3184
		{
			ASNVAL.TypeValue = nil
		}
	case 393:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3189
		{
			ASNVAL.TypeValue = nil
		}
	case 394:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3194
		{
			ASNVAL.TypeValue = nil
		}
	case 395:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3199
		{
			ASNVAL.TypeValue = nil
		}
	case 396:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3204
		{
			ASNVAL.TypeValue = nil
		}
	case 397:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3209
		{
			ASNVAL.TypeValue = nil
		}
	case 398:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3214
		{
			ASNVAL.TypeValue = MAP{
				"type":  "EXTERNAL_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 399:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3220
		{
			ASNVAL.TypeValue = MAP{
				"type":  "STRING_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 400:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3226
		{
			ASNVAL.TypeValue = MAP{
				"type":  "NUMBER_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 401:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3232
		{
			ASNVAL.TypeValue = MAP{
				"type":  "PARAMETERIZED_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 402:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3240
		{
			ASNVAL.TypeValue = MAP{
				"module": ASNDollar[1].TypeValue,
				"value":  ASNDollar[3].TypeValue,
			}
		}
	case 403:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3248
		{
			ASNVAL.TypeValue = nil
		}
	case 404:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3253
		{
			ASNVAL.TypeValue = nil
		}
	case 405:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3258
		{
			ASNVAL.TypeValue = nil
		}
	case 406:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3263
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 407:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3266
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 408:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3271
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 409:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3274
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 410:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3279
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeNumber
		}
	case 411:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3282
		{
			ASNVAL.TypeValue = (-1) * ASNDollar[2].TypeNumber
		}
	case 412:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3285
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeNumber
		}
	case 413:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3288
		{
			ASNVAL.TypeValue = (-1) * ASNDollar[2].TypeNumber
		}
	case 414:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3293
		{
			ASNVAL.TypeValue = "::="
		}
	}
	goto ASNstack /* stack new state and value */
}
