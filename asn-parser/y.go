// Code generated by goyacc -p ASN asn.y. DO NOT EDIT.

//line asn.y:1

package main

import __yyfmt__ "fmt"

//line asn.y:3
import (
	"bytes"
	"encoding/json"
	"fmt"
)

var code bytes.Buffer

func AddLine(line string) {
	code.WriteString(line)
	code.WriteByte('\n')
}

func JSON(obj interface{}) string {
	data, err := json.MarshalIndent(obj, "", "    ")
	if nil != err {
		fmt.Println("Error: ", err)
		return ""
	}
	return string(data)
}

func Print(line string) {
	fmt.Println(line)
}

func Join(values ...string) string {
	var buffer bytes.Buffer
	for _, value := range values {
		buffer.WriteString(value)
	}
	return buffer.String()
}

func SetResult(l ASNLexer, v VALUE) {
	l.(*Parser).Result = JSON(&v)
}

type Empty struct{}
type (
	VALUE   interface{}
	STRING  string
	NUMBER  float64
	BOOLEAN bool
	LIST    []VALUE
	MAP     map[string]VALUE
)

//line asn.y:50
type ASNSymType struct {
	yys         int
	TypeToken   struct{}
	TypeString  STRING
	TypeNumber  NUMBER
	TypeValue   VALUE
	TypeBoolean BOOLEAN
	TypeMap     MAP
	TypeList    LIST
}

const CURLY_START = 57346
const CURLY_END = 57347
const SQUARE_START = 57348
const SQUARE_END = 57349
const DOUBLE_QUOTE = 57350
const SINGLE_QUOTE = 57351
const COMMA = 57352
const COLON = 57353
const MINUS = 57354
const GREATER_THAN = 57355
const LESS_THAN = 57356
const DOT = 57357
const SLASH = 57358
const ROUND_START = 57359
const ROUND_END = 57360
const EQUALITY = 57361
const APOSTROPHE = 57362
const SPACE = 57363
const PIPE = 57364
const AT_THE_RATE = 57365
const EXCLAMATION = 57366
const CARET = 57367
const SEMI_COMMA = 57368
const ELLIPSIS = 57369
const ABSENT_SYMBOL = 57370
const ABSTRACTSYNTAX_SYMBOL = 57371
const ALL_SYMBOL = 57372
const APPLICATION_SYMBOL = 57373
const AUTOMATIC_SYMBOL = 57374
const BEGIN_SYMBOL = 57375
const BIT_SYMBOL = 57376
const BMPSTRING_SYMBOL = 57377
const BOOLEAN_SYMBOL = 57378
const BY_SYMBOL = 57379
const CHARACTER_SYMBOL = 57380
const CHOICE_SYMBOL = 57381
const CLASS_SYMBOL = 57382
const COMPONENT_SYMBOL = 57383
const COMPONENTS_SYMBOL = 57384
const CONSTRAINED_SYMBOL = 57385
const CONTAINING_SYMBOL = 57386
const DATE_SYMBOL = 57387
const DATETIME_SYMBOL = 57388
const DEFAULT_SYMBOL = 57389
const DEFINITIONS_SYMBOL = 57390
const DURATION_SYMBOL = 57391
const EMBEDDED_SYMBOL = 57392
const ENCODED_SYMBOL = 57393
const ENCODINGCONTROL_SYMBOL = 57394
const END_SYMBOL = 57395
const ENUMERATED_SYMBOL = 57396
const EXCEPT_SYMBOL = 57397
const EXPLICIT_SYMBOL = 57398
const EXPORTS_SYMBOL = 57399
const EXTENSIBILITY_SYMBOL = 57400
const EXTERNEL_SYMBOL = 57401
const FALSE_SYMBOL = 57402
const FROM_SYMBOL = 57403
const GENERALIZEDTIME_SYMBOL = 57404
const GENERALSTRING_SYMBOL = 57405
const GRAPHICSTRING_SYMBOL = 57406
const IA5STRING_SYMBOL = 57407
const IDENTIFIER_SYMBOL = 57408
const IMPLICIT_SYMBOL = 57409
const IMPLIED_SYMBOL = 57410
const IMPORTS_SYMBOL = 57411
const INCLUDES_SYMBOL = 57412
const INSTANCE_SYMBOL = 57413
const INSTRUCTIONS_SYMBOL = 57414
const INTEGER_SYMBOL = 57415
const INTERSECTION_SYMBOL = 57416
const ISO646STRING_SYMBOL = 57417
const MAX_SYMBOL = 57418
const MIN_SYMBOL = 57419
const MINUSINFINITY_SYMBOL = 57420
const NOTANUMBER_SYMBOL = 57421
const NULL_SYMBOL = 57422
const NUMERICSTRING_SYMBOL = 57423
const OBJECT_SYMBOL = 57424
const OBJECTDESCRIPTOR_SYMBOL = 57425
const OCTET_SYMBOL = 57426
const OF_SYMBOL = 57427
const OIDIRI_SYMBOL = 57428
const OPTIONAL_SYMBOL = 57429
const PATTERN_SYMBOL = 57430
const PDV_SYMBOL = 57431
const PLUSINFINITY_SYMBOL = 57432
const PRESENT_SYMBOL = 57433
const PRINTABLESTRING_SYMBOL = 57434
const PRIVATE_SYMBOL = 57435
const REAL_SYMBOL = 57436
const RELATIVEOID_SYMBOL = 57437
const RELATIVEOIDIRI_SYMBOL = 57438
const SEQUENCE_SYMBOL = 57439
const SET_SYMBOL = 57440
const SETTINGS_SYMBOL = 57441
const SIZE_SYMBOL = 57442
const STRING_SYMBOL = 57443
const SYNTAX_SYMBOL = 57444
const T61STRING_SYMBOL = 57445
const TAGS_SYMBOL = 57446
const TELETEXSTRING_SYMBOL = 57447
const TIME_SYMBOL = 57448
const TIMEOFDAY_SYMBOL = 57449
const TRUE_SYMBOL = 57450
const TYPEIDENTIFIER_SYMBOL = 57451
const UNION_SYMBOL = 57452
const UNIQUE_SYMBOL = 57453
const UNIVERSAL_SYMBOL = 57454
const UNIVERSALSTRING_SYMBOL = 57455
const UTCTIME_SYMBOL = 57456
const UTF8STRING_SYMBOL = 57457
const VIDEOTEXSTRING_SYMBOL = 57458
const VISIBLESTRING_SYMBOL = 57459
const WITH_SYMBOL = 57460
const ASSIGNMENT_SYMBOL = 57461
const TokenCapitalString = 57462
const TokenString = 57463
const TokenNumber = 57464
const TokenInteger = 57465
const TokenFloat = 57466
const TokenBoolean = 57467
const TokenBString = 57468
const TokenHString = 57469
const TokenCString = 57470

var ASNToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"CURLY_START",
	"CURLY_END",
	"SQUARE_START",
	"SQUARE_END",
	"DOUBLE_QUOTE",
	"SINGLE_QUOTE",
	"COMMA",
	"COLON",
	"MINUS",
	"GREATER_THAN",
	"LESS_THAN",
	"DOT",
	"SLASH",
	"ROUND_START",
	"ROUND_END",
	"EQUALITY",
	"APOSTROPHE",
	"SPACE",
	"PIPE",
	"AT_THE_RATE",
	"EXCLAMATION",
	"CARET",
	"SEMI_COMMA",
	"ELLIPSIS",
	"ABSENT_SYMBOL",
	"ABSTRACTSYNTAX_SYMBOL",
	"ALL_SYMBOL",
	"APPLICATION_SYMBOL",
	"AUTOMATIC_SYMBOL",
	"BEGIN_SYMBOL",
	"BIT_SYMBOL",
	"BMPSTRING_SYMBOL",
	"BOOLEAN_SYMBOL",
	"BY_SYMBOL",
	"CHARACTER_SYMBOL",
	"CHOICE_SYMBOL",
	"CLASS_SYMBOL",
	"COMPONENT_SYMBOL",
	"COMPONENTS_SYMBOL",
	"CONSTRAINED_SYMBOL",
	"CONTAINING_SYMBOL",
	"DATE_SYMBOL",
	"DATETIME_SYMBOL",
	"DEFAULT_SYMBOL",
	"DEFINITIONS_SYMBOL",
	"DURATION_SYMBOL",
	"EMBEDDED_SYMBOL",
	"ENCODED_SYMBOL",
	"ENCODINGCONTROL_SYMBOL",
	"END_SYMBOL",
	"ENUMERATED_SYMBOL",
	"EXCEPT_SYMBOL",
	"EXPLICIT_SYMBOL",
	"EXPORTS_SYMBOL",
	"EXTENSIBILITY_SYMBOL",
	"EXTERNEL_SYMBOL",
	"FALSE_SYMBOL",
	"FROM_SYMBOL",
	"GENERALIZEDTIME_SYMBOL",
	"GENERALSTRING_SYMBOL",
	"GRAPHICSTRING_SYMBOL",
	"IA5STRING_SYMBOL",
	"IDENTIFIER_SYMBOL",
	"IMPLICIT_SYMBOL",
	"IMPLIED_SYMBOL",
	"IMPORTS_SYMBOL",
	"INCLUDES_SYMBOL",
	"INSTANCE_SYMBOL",
	"INSTRUCTIONS_SYMBOL",
	"INTEGER_SYMBOL",
	"INTERSECTION_SYMBOL",
	"ISO646STRING_SYMBOL",
	"MAX_SYMBOL",
	"MIN_SYMBOL",
	"MINUSINFINITY_SYMBOL",
	"NOTANUMBER_SYMBOL",
	"NULL_SYMBOL",
	"NUMERICSTRING_SYMBOL",
	"OBJECT_SYMBOL",
	"OBJECTDESCRIPTOR_SYMBOL",
	"OCTET_SYMBOL",
	"OF_SYMBOL",
	"OIDIRI_SYMBOL",
	"OPTIONAL_SYMBOL",
	"PATTERN_SYMBOL",
	"PDV_SYMBOL",
	"PLUSINFINITY_SYMBOL",
	"PRESENT_SYMBOL",
	"PRINTABLESTRING_SYMBOL",
	"PRIVATE_SYMBOL",
	"REAL_SYMBOL",
	"RELATIVEOID_SYMBOL",
	"RELATIVEOIDIRI_SYMBOL",
	"SEQUENCE_SYMBOL",
	"SET_SYMBOL",
	"SETTINGS_SYMBOL",
	"SIZE_SYMBOL",
	"STRING_SYMBOL",
	"SYNTAX_SYMBOL",
	"T61STRING_SYMBOL",
	"TAGS_SYMBOL",
	"TELETEXSTRING_SYMBOL",
	"TIME_SYMBOL",
	"TIMEOFDAY_SYMBOL",
	"TRUE_SYMBOL",
	"TYPEIDENTIFIER_SYMBOL",
	"UNION_SYMBOL",
	"UNIQUE_SYMBOL",
	"UNIVERSAL_SYMBOL",
	"UNIVERSALSTRING_SYMBOL",
	"UTCTIME_SYMBOL",
	"UTF8STRING_SYMBOL",
	"VIDEOTEXSTRING_SYMBOL",
	"VISIBLESTRING_SYMBOL",
	"WITH_SYMBOL",
	"ASSIGNMENT_SYMBOL",
	"TokenCapitalString",
	"TokenString",
	"TokenNumber",
	"TokenInteger",
	"TokenFloat",
	"TokenBoolean",
	"TokenBString",
	"TokenHString",
	"TokenCString",
}

var ASNStatenames = [...]string{}

const ASNEofCode = 1
const ASNErrCode = 2
const ASNInitialStackSize = 16

//line asn.y:3172

//line yacctab:1
var ASNExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 45,
	120, 36,
	121, 36,
	-2, 32,
	-1, 182,
	10, 393,
	-2, 259,
	-1, 248,
	10, 195,
	18, 195,
	-2, 253,
	-1, 298,
	17, 259,
	-2, 392,
	-1, 311,
	10, 330,
	-2, 65,
	-1, 318,
	10, 316,
	-2, 66,
	-1, 319,
	10, 332,
	-2, 67,
	-1, 347,
	10, 316,
	-2, 66,
	-1, 348,
	10, 332,
	-2, 67,
	-1, 349,
	10, 327,
	-2, 320,
	-1, 350,
	10, 328,
	-2, 322,
	-1, 351,
	10, 329,
	-2, 323,
	-1, 404,
	4, 136,
	5, 136,
	15, 173,
	17, 136,
	-2, 390,
}

const ASNPrivate = 57344

const ASNLast = 1007

var ASNAct = [...]int{
	281, 5, 422, 5, 398, 247, 320, 238, 237, 321,
	175, 306, 354, 290, 252, 271, 250, 302, 322, 288,
	299, 307, 333, 291, 297, 296, 229, 210, 384, 276,
	294, 23, 72, 223, 33, 34, 23, 6, 7, 21,
	14, 23, 21, 399, 411, 328, 312, 23, 39, 38,
	37, 65, 65, 23, 295, 30, 29, 83, 83, 40,
	65, 50, 23, 28, 43, 93, 62, 51, 60, 36,
	51, 73, 68, 224, 83, 328, 67, 74, 55, 50,
	55, 70, 61, 23, 140, 9, 358, 27, 423, 234,
	414, 83, 365, 71, 65, 169, 342, 45, 26, 23,
	374, 140, 97, 352, 48, 401, 96, 240, 241, 230,
	23, 301, 91, 101, 49, 52, 94, 405, 23, 239,
	330, 377, 373, 179, 383, 44, 356, 188, 92, 90,
	171, 308, 176, 356, 69, 23, 41, 233, 102, 6,
	7, 53, 22, 24, 6, 7, 23, 22, 24, 6,
	7, 99, 22, 24, 57, 221, 222, 235, 22, 24,
	167, 6, 7, 56, 22, 24, 6, 7, 99, 325,
	190, 20, 42, 22, 24, 228, 32, 16, 176, 284,
	140, 289, 187, 378, 181, 183, 344, 184, 339, 303,
	194, 6, 7, 31, 22, 24, 191, 186, 293, 325,
	308, 300, 283, 282, 180, 195, 343, 6, 7, 285,
	22, 24, 292, 179, 178, 304, 330, 309, 6, 7,
	100, 22, 24, 361, 318, 228, 6, 7, 362, 22,
	24, 327, 326, 42, 46, 323, 311, 359, 174, 177,
	329, 428, 360, 6, 7, 324, 22, 24, 330, 427,
	319, 179, 178, 415, 406, 20, 396, 22, 24, 364,
	363, 346, 332, 93, 337, 431, 426, 425, 407, 403,
	345, 170, 419, 140, 182, 95, 12, 3, 336, 310,
	8, 402, 1, 225, 424, 340, 341, 418, 417, 416,
	379, 397, 279, 273, 272, 270, 269, 268, 267, 347,
	303, 303, 338, 266, 265, 264, 351, 350, 263, 357,
	323, 311, 303, 262, 293, 261, 260, 353, 370, 259,
	324, 355, 257, 256, 255, 348, 304, 304, 292, 367,
	369, 228, 355, 254, 335, 253, 366, 334, 304, 368,
	251, 248, 408, 246, 304, 289, 372, 245, 244, 243,
	376, 375, 331, 380, 242, 371, 303, 190, 138, 228,
	382, 389, 293, 190, 381, 287, 166, 388, 385, 386,
	327, 326, 390, 353, 387, 391, 292, 165, 164, 228,
	223, 163, 304, 304, 404, 162, 161, 98, 23, 191,
	393, 395, 54, 258, 400, 286, 159, 160, 142, 141,
	228, 139, 409, 137, 410, 136, 249, 135, 134, 133,
	64, 154, 63, 317, 232, 400, 231, 394, 316, 420,
	224, 412, 392, 315, 314, 236, 313, 227, 226, 220,
	429, 430, 219, 413, 218, 217, 234, 274, 156, 150,
	144, 155, 421, 216, 215, 214, 278, 213, 212, 211,
	209, 148, 208, 280, 240, 241, 230, 145, 207, 158,
	206, 205, 204, 203, 202, 201, 239, 223, 147, 200,
	199, 198, 197, 196, 193, 23, 275, 192, 189, 151,
	258, 149, 132, 131, 233, 130, 129, 128, 127, 152,
	157, 143, 153, 146, 277, 126, 6, 7, 154, 22,
	24, 125, 221, 222, 235, 124, 123, 224, 122, 121,
	120, 119, 118, 117, 116, 114, 115, 113, 112, 111,
	110, 109, 108, 234, 274, 156, 150, 144, 155, 107,
	106, 105, 104, 278, 103, 89, 88, 87, 148, 86,
	280, 240, 241, 230, 145, 85, 158, 84, 173, 172,
	82, 81, 80, 239, 79, 147, 78, 298, 312, 77,
	76, 75, 305, 275, 185, 23, 151, 168, 149, 66,
	59, 233, 58, 47, 223, 35, 152, 157, 143, 153,
	146, 277, 23, 6, 7, 13, 22, 24, 154, 221,
	222, 235, 25, 19, 18, 17, 15, 224, 11, 10,
	4, 2, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 234, 224, 156, 150, 144, 155, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 148, 0,
	234, 240, 241, 230, 145, 0, 158, 0, 0, 0,
	0, 0, 0, 239, 223, 147, 401, 0, 240, 241,
	230, 0, 23, 0, 0, 0, 151, 0, 149, 0,
	239, 233, 0, 0, 0, 0, 152, 157, 143, 153,
	146, 0, 0, 6, 7, 154, 22, 24, 233, 221,
	222, 349, 0, 0, 224, 0, 0, 0, 0, 0,
	6, 7, 0, 22, 24, 0, 221, 222, 235, 0,
	234, 0, 156, 150, 144, 155, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 148, 0, 0, 240, 241,
	230, 145, 0, 158, 0, 0, 0, 0, 0, 0,
	239, 298, 147, 0, 0, 0, 0, 0, 0, 23,
	0, 0, 0, 151, 0, 149, 0, 0, 233, 0,
	0, 0, 0, 152, 157, 143, 153, 146, 0, 0,
	6, 7, 154, 22, 24, 0, 221, 222, 235, 0,
	0, 224, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 234, 0, 156,
	150, 144, 155, 223, 0, 0, 0, 0, 0, 0,
	0, 23, 148, 0, 0, 240, 241, 230, 145, 0,
	158, 0, 0, 0, 0, 0, 0, 239, 0, 147,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	151, 0, 149, 224, 0, 233, 0, 0, 0, 0,
	152, 157, 143, 153, 146, 0, 0, 6, 7, 234,
	22, 24, 0, 221, 222, 235, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 240, 241, 230,
	42, 0, 0, 0, 0, 0, 0, 0, 0, 239,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 0, 233, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 6,
	7, 0, 22, 24, 0, 221, 222, 235, 0, 0,
	154, 156, 150, 144, 155, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 148, 0, 0, 0, 0, 0,
	145, 0, 158, 0, 0, 0, 0, 156, 150, 144,
	155, 147, 0, 0, 0, 0, 0, 0, 0, 0,
	148, 0, 151, 0, 149, 0, 145, 0, 158, 0,
	0, 0, 152, 157, 143, 153, 146, 147, 0, 6,
	7, 0, 0, 0, 0, 0, 0, 0, 151, 0,
	149, 0, 0, 0, 0, 0, 0, 0, 152, 157,
	143, 153, 146, 0, 0, 6, 7,
}

var ASNPact = [...]int{
	-83, -1000, -83, -1000, 37, 272, -1000, -1000, -1000, -80,
	-1000, -1000, 134, 31, -16, 50, -1000, -1000, -1000, -1000,
	159, -1000, -1000, -89, -1000, 11, -54, -55, -56, -1000,
	-1000, -1000, 35, -1000, -1000, 222, -4, -1000, -1000, -1000,
	107, 64, 223, -1000, -1000, 10, 96, 26, 13, -8,
	-83, 46, -1000, 28, -1000, -88, -83, -83, 86, -83,
	-1000, 55, -1000, 271, -1000, -1000, 80, 76, -1000, 253,
	-1000, 26, -1000, -83, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 859, -1000, -1000, -1000, -1000, -1000, -1000,
	-83, -1000, -1000, -83, -83, 266, -1000, -1000, -1000, -1000,
	885, 161, 222, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	199, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 189,
	270, 270, -1000, 270, -1000, -1000, -1000, -1000, -1000, 123,
	-1000, 115, -1000, -1000, 789, -1000, 376, -1000, -83, 885,
	-83, -1000, 727, -1000, -1000, -1000, -1000, -1000, 106, -1000,
	185, -1000, -1000, 270, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 41, 789, -1000, -1000, -1000, 205, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 252, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 376, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 885, 173, 115, 115, 115, 54, -1000, 192,
	-1000, 237, -1000, -1000, -1000, 115, -1000, 171, -1000, -1000,
	265, 251, 115, -1000, -1000, -1000, -1000, -1000, 553, 98,
	19, -1000, -1000, 116, -1000, -1000, -1000, -1000, -83, -1000,
	42, 19, -1000, 232, 218, 250, 249, 87, 116, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 35, -1000,
	789, 104, 73, -1000, 463, 463, -1000, 103, 115, 168,
	-1000, -1000, 115, -1000, -83, -1000, 640, 109, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 24, 19, -1000, 789, -1000,
	-83, -1000, 71, 35, 35, -1000, -1000, -1000, -1000, -1000,
	116, -1000, -1000, -1000, 246, -1000, -1000, -1000, 29, -1000,
	-1000, -1000, 264, -83, -1000, 99, -1000, -1000, -1000, -1000,
	-1000, -1000, 244, -1000, 263, -1000, 376, -1000, -1000, 570,
	-1000, -1000, -74, -1000, -1000, -1000, 35, -1000, -1000, -1000,
	-1000, 48, 243, -1000, 268, 35, -1000, -1000, -1000, 61,
	262, -1000, 261, 239, 231, -1000, -1000, -1000, -1000, 260,
	-1000, -1000,
}

var ASNPgo = [...]int{
	0, 601, 277, 600, 599, 598, 596, 177, 595, 594,
	593, 592, 585, 575, 573, 104, 114, 572, 570, 68,
	569, 82, 66, 567, 564, 27, 20, 17, 562, 11,
	21, 71, 77, 12, 561, 560, 559, 556, 554, 552,
	551, 550, 29, 15, 30, 549, 548, 54, 25, 24,
	547, 545, 539, 537, 536, 535, 534, 532, 531, 530,
	529, 522, 521, 520, 519, 518, 517, 516, 515, 514,
	513, 512, 511, 510, 509, 508, 506, 505, 501, 495,
	488, 487, 486, 485, 483, 482, 478, 477, 474, 23,
	473, 472, 471, 470, 469, 465, 464, 463, 462, 461,
	460, 458, 452, 450, 449, 448, 447, 445, 444, 443,
	435, 434, 432, 429, 428, 427, 426, 6, 425, 8,
	7, 424, 9, 423, 422, 421, 419, 418, 417, 416,
	414, 413, 18, 93, 412, 410, 409, 408, 407, 405,
	403, 401, 399, 398, 397, 396, 395, 13, 392, 387,
	386, 385, 381, 378, 377, 366, 365, 19, 10, 358,
	354, 352, 349, 348, 347, 343, 342, 5, 341, 22,
	16, 340, 337, 14, 335, 334, 333, 324, 323, 322,
	319, 316, 315, 313, 308, 305, 304, 303, 298, 297,
	296, 295, 294, 293, 292, 291, 4, 290, 289, 288,
	287, 2, 284, 136, 0, 26, 283, 282, 281, 279,
}

var ASNR1 = [...]int{
	0, 207, 1, 1, 2, 133, 133, 133, 148, 149,
	3, 12, 12, 4, 4, 5, 6, 6, 7, 7,
	7, 8, 9, 10, 11, 11, 11, 11, 13, 13,
	14, 14, 14, 16, 16, 16, 16, 20, 20, 21,
	21, 22, 22, 134, 135, 135, 15, 15, 17, 17,
	18, 18, 19, 23, 24, 24, 24, 25, 25, 25,
	26, 26, 27, 27, 27, 27, 28, 29, 29, 30,
	31, 31, 31, 32, 32, 32, 32, 32, 32, 32,
	32, 34, 35, 36, 37, 38, 39, 40, 41, 41,
	41, 41, 41, 41, 42, 42, 42, 43, 43, 43,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 57, 57, 57,
	57, 57, 136, 136, 136, 136, 141, 142, 143, 144,
	144, 89, 89, 147, 147, 147, 147, 147, 147, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 138, 139, 145, 145, 145,
	145, 150, 150, 154, 151, 152, 152, 155, 153, 146,
	156, 156, 157, 140, 58, 58, 158, 160, 160, 162,
	164, 164, 164, 165, 166, 167, 167, 168, 168, 170,
	170, 173, 173, 176, 176, 176, 177, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 180,
	181, 192, 192, 182, 193, 193, 194, 194, 195, 195,
	196, 196, 183, 184, 185, 208, 186, 197, 198, 198,
	199, 201, 201, 202, 200, 187, 188, 189, 190, 191,
	179, 174, 175, 171, 172, 170, 169, 163, 161, 159,
	59, 60, 61, 62, 63, 64, 65, 66, 68, 67,
	69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
	79, 80, 81, 82, 83, 84, 85, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 93,
	93, 93, 93, 93, 116, 116, 117, 94, 95, 95,
	114, 114, 114, 114, 118, 121, 121, 122, 122, 122,
	122, 119, 123, 124, 125, 126, 120, 127, 128, 115,
	96, 97, 98, 99, 100, 101, 101, 103, 104, 209,
	104, 105, 105, 129, 129, 130, 130, 130, 102, 106,
	107, 131, 131, 132, 132, 132, 108, 109, 110, 111,
	112, 113, 91, 92, 45, 44, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 33, 33, 33, 33,
	86, 87, 88, 89, 206, 206, 204, 204, 205, 205,
	205, 205, 203,
}

var ASNR2 = [...]int{
	0, 1, 1, 2, 10, 1, 2, 0, 3, 0,
	2, 2, 0, 1, 0, 3, 1, 2, 1, 1,
	1, 1, 1, 4, 2, 2, 2, 0, 2, 0,
	3, 3, 0, 3, 3, 2, 0, 1, 0, 1,
	3, 1, 1, 1, 1, 3, 3, 0, 1, 0,
	1, 2, 3, 2, 1, 1, 0, 3, 4, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 4,
	1, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 4, 3, 4, 3, 4, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 2, 1,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 3, 2, 1, 1, 3, 2, 1,
	1, 3, 1, 3, 2, 1, 4, 1, 1, 1,
	1, 3, 5, 1, 1, 1, 2, 1, 3, 1,
	3, 1, 2, 1, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 0, 4, 1, 2, 1, 1, 1, 2,
	1, 1, 2, 2, 1, 0, 7, 1, 1, 1,
	3, 1, 3, 0, 5, 0, 0, 0, 0, 0,
	0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 2, 2, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 9, 1, 1, 1, 1, 5, 1, 1, 1,
	3, 1, 1, 1, 0, 1, 1, 1, 1, 0,
	4, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	3, 1, 2, 1, 1, 1, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1, 1, 1, 1,
	3, 2, 0, 0, 1, 1, 1, 1, 1, 2,
	1, 2, 3,
}

var ASNChk = [...]int{
	-1000, -207, -1, -2, -3, -204, 120, 121, -2, 48,
	-4, -5, 4, -12, 120, -6, -7, -8, -9, -10,
	121, -205, 123, 12, 124, -11, 67, 56, 32, 72,
	5, -7, 17, 123, 124, -13, 58, 104, 104, 104,
	-205, -203, 11, 68, 18, 33, 11, -14, -15, -16,
	69, 57, 19, -133, -148, 52, -16, -15, -17, -18,
	-19, -21, -22, -134, -135, -204, -20, 30, 26, -21,
	53, -133, 120, -31, -32, -34, -35, -36, -37, -38,
	-39, -40, -41, -204, -50, -51, -52, -53, -54, -55,
	-31, 26, -19, 10, 61, 4, 26, 26, -149, -32,
	-203, -42, -47, -56, -57, -58, -59, -60, -61, -62,
	-63, -64, -65, -66, -68, -67, -69, -70, -71, -72,
	-73, -74, -75, -76, -77, -78, -79, -80, -81, -82,
	-83, -84, -85, -136, -137, -138, -139, -140, -159, -141,
	-204, -142, -143, 115, 64, 81, 117, 92, 75, 105,
	63, 103, 113, 116, 35, 65, 62, 114, 83, -145,
	-144, -150, -151, -152, -153, -154, -155, -22, -23, -204,
	5, -42, -45, -46, -203, -158, 17, -203, 15, 14,
	15, -89, 4, -89, -89, -24, -25, -33, 4, -86,
	-204, -205, -87, -88, -43, -44, -90, -91, -92, -93,
	-94, -95, -96, -97, -98, -99, -100, -101, -102, -103,
	-25, -104, -105, -106, -107, -108, -109, -110, -111, -112,
	-113, 126, 127, 4, 44, -206, -114, -115, -204, -205,
	80, -129, -130, 108, 60, 128, -118, -119, -120, 90,
	78, 79, -160, -162, -163, -164, -165, -167, -168, 30,
	-170, -171, -173, -174, -176, -177, -178, -179, 17, -180,
	-181, -182, -183, -184, -185, -186, -187, -188, -189, -190,
	-191, -43, -192, -193, 61, 100, -42, 118, 70, -194,
	77, -204, -48, -49, -204, -42, -146, -156, -157, -204,
	-147, -89, -42, -43, -44, -47, -48, -49, 4, -26,
	-33, 5, -27, -204, -205, -28, -29, -30, 15, -89,
	-209, -33, 5, -116, -121, -123, -127, -131, -204, -205,
	-117, -122, -132, -29, -30, 128, -119, -120, 4, -43,
	11, -161, 10, -169, -172, -175, -169, -167, -42, 15,
	-158, -158, 42, 14, 15, 5, 10, -204, -205, 128,
	-119, -120, 5, -27, -33, -26, 17, -204, 44, 5,
	10, 5, 10, 10, 10, 5, -132, -29, -30, -33,
	-204, -205, -43, 18, 27, -170, -173, 18, 15, -197,
	-158, -157, -147, 15, 4, -29, -33, -43, -117, -204,
	-122, -33, -124, -205, -128, -205, 10, -195, -196, 14,
	-43, 76, -208, 5, -204, 18, 10, 5, -166, -167,
	-196, 118, -125, -205, 42, 10, -198, -199, -200, 4,
	-126, -205, -201, 27, -202, 5, 5, 10, 10, -201,
	-201, 5,
}

var ASNDef = [...]int{
	0, -2, 1, 2, 0, 14, 396, 397, 3, 12,
	10, 13, 0, 27, 0, 0, 16, 18, 19, 20,
	21, 22, 398, 0, 400, 29, 0, 0, 0, 11,
	15, 17, 0, 399, 401, 0, 0, 24, 25, 26,
	0, 0, 0, 28, 23, -2, 0, 7, 36, 47,
	49, 0, 402, 0, 5, 0, 72, 72, 0, 48,
	50, 0, 39, 41, 42, 43, 0, 0, 35, 37,
	4, 6, 9, 30, 70, 73, 74, 75, 76, 77,
	78, 79, 80, 259, 88, 89, 90, 91, 92, 93,
	31, 46, 51, 0, 0, 0, 33, 34, 8, 71,
	259, 0, 0, 94, 95, 96, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 185, 132,
	133, 134, 135, 149, 150, 151, 152, 153, 154, 155,
	156, 157, 158, 159, 160, 161, 162, 163, 164, 0,
	393, 167, 168, 169, 170, 171, 175, 40, 52, 56,
	45, 81, 83, 85, 344, 184, 222, 378, 0, 259,
	0, 137, -2, 174, 178, 53, 54, 55, 392, 386,
	387, 388, 389, 393, 82, 84, 97, 98, 99, 287,
	288, 289, 290, 291, 292, 293, 294, 295, 296, 297,
	298, 299, 300, 301, 302, 303, 304, 305, 306, 307,
	308, 309, 310, 392, 344, 317, 318, 319, 342, 345,
	347, 351, 352, 394, 395, 320, 321, 322, 323, 355,
	356, 357, 258, 187, 188, 189, 190, 193, -2, 256,
	197, 254, 199, 252, 201, 256, 203, 204, 222, 207,
	208, 209, 210, 211, 212, 213, 214, 215, 216, 217,
	218, 219, 259, 0, 0, 0, 234, 0, 221, 224,
	227, 133, 86, 87, 136, 165, 166, 179, 180, 182,
	0, 0, 143, 144, 145, 146, 147, 148, -2, 392,
	65, 59, 60, 66, 67, 62, 63, 64, 0, 391,
	0, -2, 59, 0, 0, 0, 0, 392, -2, -2,
	314, 325, 361, 63, 64, 327, 328, 329, 0, 313,
	344, 0, 0, 196, 222, 222, 202, 0, 220, 0,
	232, 233, 0, 225, 0, 141, 259, -2, -2, -2,
	-2, -2, 57, 61, 65, 0, 392, 390, 344, 311,
	0, 324, 392, 0, 0, 360, 362, 363, 364, 68,
	387, 332, 340, 186, 191, 198, 200, 205, 344, 235,
	237, 181, 0, 0, 58, 0, 68, 350, 315, 316,
	326, 330, 0, 333, 0, 338, 222, 223, 228, 344,
	230, 231, 0, 142, -2, 69, 0, 336, 192, 194,
	229, 0, 0, 334, 0, 0, 236, 238, 239, 243,
	0, 335, 0, 0, 241, 331, 240, 243, 243, 0,
	242, 244,
}

var ASNTok1 = [...]int{
	1,
}

var ASNTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128,
}

var ASNTok3 = [...]int{
	0,
}

var ASNErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	ASNDebug        = 0
	ASNErrorVerbose = false
)

type ASNLexer interface {
	Lex(lval *ASNSymType) int
	Error(s string)
}

type ASNParser interface {
	Parse(ASNLexer) int
	Lookahead() int
}

type ASNParserImpl struct {
	lval  ASNSymType
	stack [ASNInitialStackSize]ASNSymType
	char  int
}

func (p *ASNParserImpl) Lookahead() int {
	return p.char
}

func ASNNewParser() ASNParser {
	return &ASNParserImpl{}
}

const ASNFlag = -1000

func ASNTokname(c int) string {
	if c >= 1 && c-1 < len(ASNToknames) {
		if ASNToknames[c-1] != "" {
			return ASNToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func ASNStatname(s int) string {
	if s >= 0 && s < len(ASNStatenames) {
		if ASNStatenames[s] != "" {
			return ASNStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func ASNErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !ASNErrorVerbose {
		return "syntax error"
	}

	for _, e := range ASNErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + ASNTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := ASNPact[state]
	for tok := TOKSTART; tok-1 < len(ASNToknames); tok++ {
		if n := base + tok; n >= 0 && n < ASNLast && ASNChk[ASNAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if ASNDef[state] == -2 {
		i := 0
		for ASNExca[i] != -1 || ASNExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; ASNExca[i] >= 0; i += 2 {
			tok := ASNExca[i]
			if tok < TOKSTART || ASNExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if ASNExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += ASNTokname(tok)
	}
	return res
}

func ASNlex1(lex ASNLexer, lval *ASNSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = ASNTok1[0]
		goto out
	}
	if char < len(ASNTok1) {
		token = ASNTok1[char]
		goto out
	}
	if char >= ASNPrivate {
		if char < ASNPrivate+len(ASNTok2) {
			token = ASNTok2[char-ASNPrivate]
			goto out
		}
	}
	for i := 0; i < len(ASNTok3); i += 2 {
		token = ASNTok3[i+0]
		if token == char {
			token = ASNTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = ASNTok2[1] /* unknown char */
	}
	if ASNDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", ASNTokname(token), uint(char))
	}
	return char, token
}

func ASNParse(ASNlex ASNLexer) int {
	return ASNNewParser().Parse(ASNlex)
}

func (ASNrcvr *ASNParserImpl) Parse(ASNlex ASNLexer) int {
	var ASNn int
	var ASNVAL ASNSymType
	var ASNDollar []ASNSymType
	_ = ASNDollar // silence set and not used
	ASNS := ASNrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	ASNstate := 0
	ASNrcvr.char = -1
	ASNtoken := -1 // ASNrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		ASNstate = -1
		ASNrcvr.char = -1
		ASNtoken = -1
	}()
	ASNp := -1
	goto ASNstack

ret0:
	return 0

ret1:
	return 1

ASNstack:
	/* put a state and value onto the stack */
	if ASNDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", ASNTokname(ASNtoken), ASNStatname(ASNstate))
	}

	ASNp++
	if ASNp >= len(ASNS) {
		nyys := make([]ASNSymType, len(ASNS)*2)
		copy(nyys, ASNS)
		ASNS = nyys
	}
	ASNS[ASNp] = ASNVAL
	ASNS[ASNp].yys = ASNstate

ASNnewstate:
	ASNn = ASNPact[ASNstate]
	if ASNn <= ASNFlag {
		goto ASNdefault /* simple state */
	}
	if ASNrcvr.char < 0 {
		ASNrcvr.char, ASNtoken = ASNlex1(ASNlex, &ASNrcvr.lval)
	}
	ASNn += ASNtoken
	if ASNn < 0 || ASNn >= ASNLast {
		goto ASNdefault
	}
	ASNn = ASNAct[ASNn]
	if ASNChk[ASNn] == ASNtoken { /* valid shift */
		ASNrcvr.char = -1
		ASNtoken = -1
		ASNVAL = ASNrcvr.lval
		ASNstate = ASNn
		if Errflag > 0 {
			Errflag--
		}
		goto ASNstack
	}

ASNdefault:
	/* default state action */
	ASNn = ASNDef[ASNstate]
	if ASNn == -2 {
		if ASNrcvr.char < 0 {
			ASNrcvr.char, ASNtoken = ASNlex1(ASNlex, &ASNrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if ASNExca[xi+0] == -1 && ASNExca[xi+1] == ASNstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			ASNn = ASNExca[xi+0]
			if ASNn < 0 || ASNn == ASNtoken {
				break
			}
		}
		ASNn = ASNExca[xi+1]
		if ASNn < 0 {
			goto ret0
		}
	}
	if ASNn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			ASNlex.Error(ASNErrorMessage(ASNstate, ASNtoken))
			Nerrs++
			if ASNDebug >= 1 {
				__yyfmt__.Printf("%s", ASNStatname(ASNstate))
				__yyfmt__.Printf(" saw %s\n", ASNTokname(ASNtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for ASNp >= 0 {
				ASNn = ASNPact[ASNS[ASNp].yys] + ASNErrCode
				if ASNn >= 0 && ASNn < ASNLast {
					ASNstate = ASNAct[ASNn] /* simulate a shift of "error" */
					if ASNChk[ASNstate] == ASNErrCode {
						goto ASNstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if ASNDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", ASNS[ASNp].yys)
				}
				ASNp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if ASNDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", ASNTokname(ASNtoken))
			}
			if ASNtoken == ASNEofCode {
				goto ret1
			}
			ASNrcvr.char = -1
			ASNtoken = -1
			goto ASNnewstate /* try again in the same state */
		}
	}

	/* reduction by production ASNn */
	if ASNDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", ASNn, ASNStatname(ASNstate))
	}

	ASNnt := ASNn
	ASNpt := ASNp
	_ = ASNpt // guard against "declared and not used"

	ASNp -= ASNR2[ASNn]
	// ASNp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if ASNp+1 >= len(ASNS) {
		nyys := make([]ASNSymType, len(ASNS)*2)
		copy(nyys, ASNS)
		ASNS = nyys
	}
	ASNVAL = ASNS[ASNp+1]

	/* consult goto table to find next state */
	ASNn = ASNR1[ASNn]
	ASNg := ASNPgo[ASNn]
	ASNj := ASNg + ASNS[ASNp].yys + 1

	if ASNj >= ASNLast {
		ASNstate = ASNAct[ASNg]
	} else {
		ASNstate = ASNAct[ASNj]
		if ASNChk[ASNstate] != -ASNn {
			ASNstate = ASNAct[ASNg]
		}
	}
	// dummy call; replaced with literal code
	switch ASNnt {

	case 1:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:400
		{
			SetResult(ASNlex, ASNDollar[1].TypeValue)
			Print("Done")
			Print("--------------------------------------------------------------------------------")
			Print(JSON(&ASNDollar[1].TypeValue))
			Print("--------------------------------------------------------------------------------")
		}
	case 2:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:409
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 3:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:414
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 4:
		ASNDollar = ASNS[ASNpt-10 : ASNpt+1]
//line asn.y:444
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"encoding":   ASNDollar[3].TypeValue,
				"tag":        ASNDollar[4].TypeValue,
				"body":       ASNDollar[8].TypeValue,
			}
		}
	case 5:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:460
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 6:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:465
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 7:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:469
		{
			ASNVAL.TypeValue = nil
		}
	case 8:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:481
		{
			ASNVAL.TypeValue = MAP{
				"encodingReference":    ASNDollar[2].TypeString,
				"encodingInstructions": ASNDollar[3].TypeValue,
			}
		}
	case 9:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:496
		{
			ASNVAL.TypeValue = nil
		}
	case 10:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:509
		{
			ASNVAL.TypeValue = MAP{
				"reference":             ASNDollar[1].TypeValue,
				"definitiveIdentifiers": ASNDollar[2].TypeValue,
			}
		}
	case 11:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:523
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 12:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:526
		{
			ASNVAL.TypeValue = ""
		}
	case 13:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:538
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 14:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:541
		{
			ASNVAL.TypeValue = nil
		}
	case 15:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:551
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 16:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:562
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 17:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:567
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 18:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:580
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 19:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:583
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 20:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:586
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 21:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:595
		{
			ASNVAL.TypeValue = MAP{
				"name": ASNDollar[1].TypeString,
			}
		}
	case 22:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:606
		{
			ASNVAL.TypeValue = MAP{
				"number": ASNDollar[1].TypeValue,
			}
		}
	case 23:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:617
		{
			ASNVAL.TypeValue = MAP{
				"name":   ASNDollar[1].TypeString,
				"number": ASNDollar[3].TypeValue,
			}
		}
	case 24:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:633
		{
			ASNVAL.TypeValue = "Implicit"
		}
	case 25:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:636
		{
			ASNVAL.TypeValue = "Explicit"
		}
	case 26:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:639
		{
			ASNVAL.TypeValue = "Automatic"
		}
	case 27:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:642
		{
			ASNVAL.TypeValue = "Explicit"
		}
	case 28:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:653
		{
			ASNVAL.TypeValue = true
		}
	case 29:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:656
		{
			ASNVAL.TypeValue = false
		}
	case 30:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:669
		{
			ASNVAL.TypeValue = MAP{
				"imports":     ASNDollar[1].TypeValue,
				"exports":     ASNDollar[2].TypeValue,
				"assignments": ASNDollar[3].TypeValue,
			}
		}
	case 31:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:678
		{
			ASNVAL.TypeValue = MAP{
				"imports":     ASNDollar[2].TypeValue,
				"exports":     ASNDollar[1].TypeValue,
				"assignments": ASNDollar[3].TypeValue,
			}
		}
	case 32:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:685
		{
			ASNVAL.TypeValue = nil
		}
	case 33:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:697
		{
			ASNVAL.TypeValue = MAP{
				"all":     "false",
				"symbols": ASNDollar[2].TypeValue,
			}
		}
	case 34:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:703
		{
			ASNVAL.TypeValue = MAP{
				"all": "true",
			}
		}
	case 35:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:708
		{
			ASNVAL.TypeValue = MAP{
				"all": "false",
			}
		}
	case 36:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:713
		{
			ASNVAL.TypeValue = MAP{
				"all": "true",
			}
		}
	case 37:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:726
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 38:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:729
		{
			ASNVAL.TypeValue = nil
		}
	case 39:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:740
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 40:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:745
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 41:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:757
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
			}
		}
	case 42:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:762
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedReference": ASNDollar[1].TypeValue,
			}
		}
	case 43:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:781
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 44:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:791
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 45:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:794
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 46:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:805
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 47:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:808
		{
			ASNVAL.TypeValue = nil
		}
	case 48:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:819
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 49:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:822
		{
			ASNVAL.TypeValue = nil
		}
	case 50:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:833
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 51:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:838
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 52:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:849
		{
			ASNVAL.TypeValue = MAP{
				"symbols":   ASNDollar[1].TypeValue,
				"reference": ASNDollar[3].TypeValue,
			}
		}
	case 53:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:862
		{
			ASNVAL.TypeValue = MAP{
				"name":        ASNDollar[1].TypeValue,
				"identifiers": ASNDollar[2].TypeValue,
			}
		}
	case 54:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:877
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 55:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:880
		{
			ASNVAL.TypeValue = nil
		}
	case 56:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:883
		{
			ASNVAL.TypeValue = nil
		}
	case 57:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:894
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 58:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:897
		{
			ASNVAL.TypeValue = ASNDollar[3].TypeValue
		}
	case 59:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:900
		{
			ASNVAL.TypeValue = nil
		}
	case 60:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:911
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 61:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:916
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 62:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:930
		{
			ASNVAL.TypeValue = MAP{
				"name": ASNDollar[1].TypeValue,
			}
		}
	case 63:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:935
		{
			ASNVAL.TypeValue = MAP{
				"number": ASNDollar[1].TypeValue,
			}
		}
	case 64:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:940
		{
			ASNVAL.TypeValue = MAP{
				"nameAndNumber": ASNDollar[1].TypeValue,
			}
		}
	case 65:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:945
		{
			ASNVAL.TypeValue = MAP{
				"definedValue": ASNDollar[1].TypeValue,
			}
		}
	case 66:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:957
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 67:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:968
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 68:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:971
		{
			ASNVAL.TypeValue = MAP{
				"definedValue": ASNDollar[1].TypeValue,
			}
		}
	case 69:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:983
		{
			ASNVAL.TypeValue = MAP{
				"name":   ASNDollar[1].TypeValue,
				"number": ASNDollar[3].TypeValue,
			}
		}
	case 70:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:997
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 71:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1002
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 72:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1006
		{
			ASNVAL.TypeValue = nil
		}
	case 73:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1023
		{
			ASNVAL.TypeValue = MAP{
				"typeAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 74:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1028
		{
			ASNVAL.TypeValue = MAP{
				"valueAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 75:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1033
		{
			ASNVAL.TypeValue = MAP{
				"xmlValueAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 76:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1038
		{
			ASNVAL.TypeValue = MAP{
				"valueSetAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 77:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1043
		{
			ASNVAL.TypeValue = MAP{
				"objectClassAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 78:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1048
		{
			ASNVAL.TypeValue = MAP{
				"objectAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 79:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1053
		{
			ASNVAL.TypeValue = MAP{
				"objectSetAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 80:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1058
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 81:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1072
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"type":      ASNDollar[2].TypeValue,
			}
		}
	case 82:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1088
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"type":      ASNDollar[2].TypeValue,
				"value":     ASNDollar[4].TypeValue,
			}
		}
	case 83:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1104
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"value":     ASNDollar[3].TypeValue,
			}
		}
	case 84:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1120
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"type":      ASNDollar[2].TypeValue,
				"valueSet":  ASNDollar[4].TypeValue,
			}
		}
	case 85:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1136
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"class":     ASNDollar[3].TypeValue,
			}
		}
	case 86:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1152
		{
			ASNVAL.TypeValue = MAP{
				"reference":    ASNDollar[1].TypeValue,
				"definedClass": ASNDollar[2].TypeValue,
				"object":       ASNDollar[4].TypeValue,
			}
		}
	case 87:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1169
		{
			ASNVAL.TypeValue = MAP{
				"reference":    ASNDollar[1].TypeValue,
				"definedClass": ASNDollar[2].TypeValue,
				"objectSet":    ASNDollar[4].TypeValue,
			}
		}
	case 88:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1188
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 89:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1191
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 90:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1194
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 91:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1197
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 92:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1200
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 93:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1203
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 94:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1215
		{
			ASNVAL.TypeValue = MAP{
				"type":       "BUILTIN_TYPE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 95:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1221
		{
			ASNVAL.TypeValue = MAP{
				"type":       "REFERENCED_TYPE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 96:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1227
		{
			ASNVAL.TypeValue = MAP{
				"type":       "CONSTRAINED_TYPE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 97:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1242
		{
			ASNVAL.TypeValue = MAP{
				"type":       "BUILTIN_VALUE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 98:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1248
		{
			ASNVAL.TypeValue = MAP{
				"type":       "REFERENCED_VALUE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 99:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1254
		{
			ASNVAL.TypeValue = MAP{
				"type":       "OBJECT_CLASS_FIELD_VALUE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 100:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1292
		{
			ASNVAL.TypeValue = MAP{
				"bitStringType": ASNDollar[1].TypeValue,
			}
		}
	case 101:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1297
		{
			ASNVAL.TypeValue = MAP{
				"booleanType": ASNDollar[1].TypeValue,
			}
		}
	case 102:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1302
		{
			ASNVAL.TypeValue = MAP{
				"characterStringType": ASNDollar[1].TypeValue,
			}
		}
	case 103:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1307
		{
			ASNVAL.TypeValue = MAP{
				"choiceType": ASNDollar[1].TypeValue,
			}
		}
	case 104:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1312
		{
			ASNVAL.TypeValue = MAP{
				"dateType": ASNDollar[1].TypeValue,
			}
		}
	case 105:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1317
		{
			ASNVAL.TypeValue = MAP{
				"dataTimeType": ASNDollar[1].TypeValue,
			}
		}
	case 106:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1322
		{
			ASNVAL.TypeValue = MAP{
				"durationType": ASNDollar[1].TypeValue,
			}
		}
	case 107:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1327
		{
			ASNVAL.TypeValue = MAP{
				"embeddedPDVType": ASNDollar[1].TypeValue,
			}
		}
	case 108:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1332
		{
			ASNVAL.TypeValue = MAP{
				"enumeratedType": ASNDollar[1].TypeValue,
			}
		}
	case 109:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1337
		{
			ASNVAL.TypeValue = MAP{
				"externalType": ASNDollar[1].TypeValue,
			}
		}
	case 110:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1342
		{
			ASNVAL.TypeValue = MAP{
				"instanceOfType": ASNDollar[1].TypeValue,
			}
		}
	case 111:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1347
		{
			ASNVAL.TypeValue = MAP{
				"integerType": ASNDollar[1].TypeValue,
			}
		}
	case 112:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1352
		{
			ASNVAL.TypeValue = MAP{
				"iriType": ASNDollar[1].TypeValue,
			}
		}
	case 113:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1357
		{
			ASNVAL.TypeValue = MAP{
				"nullType": ASNDollar[1].TypeValue,
			}
		}
	case 114:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1362
		{
			ASNVAL.TypeValue = MAP{
				"objectClassFieldType": ASNDollar[1].TypeValue,
			}
		}
	case 115:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1367
		{
			ASNVAL.TypeValue = MAP{
				"objectIdentifierType": ASNDollar[1].TypeValue,
			}
		}
	case 116:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1372
		{
			ASNVAL.TypeValue = MAP{
				"octetStringType": ASNDollar[1].TypeValue,
			}
		}
	case 117:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1377
		{
			ASNVAL.TypeValue = MAP{
				"realType": ASNDollar[1].TypeValue,
			}
		}
	case 118:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1382
		{
			ASNVAL.TypeValue = MAP{
				"relativeIRIType": ASNDollar[1].TypeValue,
			}
		}
	case 119:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1387
		{
			ASNVAL.TypeValue = MAP{
				"relativeOIDType": ASNDollar[1].TypeValue,
			}
		}
	case 120:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1392
		{
			ASNVAL.TypeValue = MAP{
				"sequenceType": ASNDollar[1].TypeValue,
			}
		}
	case 121:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1397
		{
			ASNVAL.TypeValue = MAP{
				"sequenceOfType": ASNDollar[1].TypeValue,
			}
		}
	case 122:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1402
		{
			ASNVAL.TypeValue = MAP{
				"setType": ASNDollar[1].TypeValue,
			}
		}
	case 123:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1407
		{
			ASNVAL.TypeValue = MAP{
				"setOfType": ASNDollar[1].TypeValue,
			}
		}
	case 124:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1412
		{
			ASNVAL.TypeValue = MAP{
				"prefixedType": ASNDollar[1].TypeValue,
			}
		}
	case 125:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1417
		{
			ASNVAL.TypeValue = MAP{
				"timeType": ASNDollar[1].TypeValue,
			}
		}
	case 126:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1422
		{
			ASNVAL.TypeValue = MAP{
				"timeOfDayType": ASNDollar[1].TypeValue,
			}
		}
	case 127:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1438
		{
			ASNVAL.TypeValue = MAP{
				"definedType": ASNDollar[1].TypeValue,
			}
		}
	case 128:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1443
		{
			ASNVAL.TypeValue = MAP{
				"usefulType": ASNDollar[1].TypeValue,
			}
		}
	case 129:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1448
		{
			ASNVAL.TypeValue = MAP{
				"selectionType": ASNDollar[1].TypeValue,
			}
		}
	case 130:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1453
		{
			ASNVAL.TypeValue = MAP{
				"typeFromObject": ASNDollar[1].TypeValue,
			}
		}
	case 131:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1458
		{
			ASNVAL.TypeValue = MAP{
				"valueSetFromObjects": ASNDollar[1].TypeValue,
			}
		}
	case 132:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1473
		{
			ASNVAL.TypeValue = MAP{
				"externalTypeReference": ASNDollar[1].TypeValue,
			}
		}
	case 133:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1478
		{
			ASNVAL.TypeValue = MAP{
				"typeReference": ASNDollar[1].TypeValue,
			}
		}
	case 134:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1483
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedType": ASNDollar[1].TypeValue,
			}
		}
	case 135:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1488
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedValueSetType": ASNDollar[1].TypeValue,
			}
		}
	case 136:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1502
		{
			ASNVAL.TypeValue = MAP{
				"moduleReference": ASNDollar[1].TypeValue,
				"typeReference":   ASNDollar[2].TypeToken,
			}
		}
	case 137:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1516
		{
			ASNVAL.TypeValue = MAP{
				"simpleDefinedType":   ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 138:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1530
		{
			ASNVAL.TypeValue = MAP{
				"simpleDefinedType":   ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 139:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1544
		{
			ASNVAL.TypeValue = MAP{
				"externalTypeReference": ASNDollar[1].TypeValue,
			}
		}
	case 140:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1549
		{
			ASNVAL.TypeValue = MAP{
				"typeReference": ASNDollar[1].TypeValue,
			}
		}
	case 141:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1560
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[2].TypeValue,
			}
		}
	case 142:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:1565
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[4].TypeValue)
		}
	case 143:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1581
		{
			ASNVAL.TypeValue = MAP{
				"type": ASNDollar[1].TypeValue,
			}
		}
	case 144:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1586
		{
			ASNVAL.TypeValue = MAP{
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 145:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1591
		{
			ASNVAL.TypeValue = MAP{
				"valueSet": ASNDollar[1].TypeValue,
			}
		}
	case 146:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1596
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectClass": ASNDollar[1].TypeValue,
			}
		}
	case 147:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1601
		{
			ASNVAL.TypeValue = MAP{
				"object": ASNDollar[1].TypeValue,
			}
		}
	case 148:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1606
		{
			ASNVAL.TypeValue = MAP{
				"objectSet": ASNDollar[1].TypeValue,
			}
		}
	case 149:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1634
		{
			ASNVAL.TypeValue = STRING(UTF8String)
		}
	case 150:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1637
		{
			ASNVAL.TypeValue = STRING(GraphicString)
		}
	case 151:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1640
		{
			ASNVAL.TypeValue = STRING(NumericString)
		}
	case 152:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1643
		{
			ASNVAL.TypeValue = STRING(VisibleString)
		}
	case 153:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1646
		{
			ASNVAL.TypeValue = STRING(PrintableString)
		}
	case 154:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1649
		{
			ASNVAL.TypeValue = STRING(ISO646String)
		}
	case 155:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1652
		{
			ASNVAL.TypeValue = STRING(TeletexString)
		}
	case 156:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1655
		{
			ASNVAL.TypeValue = STRING(GeneralString)
		}
	case 157:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1658
		{
			ASNVAL.TypeValue = STRING(T61String)
		}
	case 158:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1661
		{
			ASNVAL.TypeValue = STRING(UniversalString)
		}
	case 159:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1664
		{
			ASNVAL.TypeValue = STRING(VideotexString)
		}
	case 160:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1667
		{
			ASNVAL.TypeValue = STRING(BMPString)
		}
	case 161:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1670
		{
			ASNVAL.TypeValue = STRING(IA5String)
		}
	case 162:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1673
		{
			ASNVAL.TypeValue = STRING(GeneralizedTime)
		}
	case 163:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1676
		{
			ASNVAL.TypeValue = STRING(UTCTime)
		}
	case 164:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1679
		{
			ASNVAL.TypeValue = STRING(ObjectDescriptor)
		}
	case 165:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1689
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"type":       ASNDollar[3].TypeValue,
			}
		}
	case 166:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1702
		{
			ASNVAL.TypeValue = MAP{
				"referencedObjects": ASNDollar[1].TypeValue,
				"fieldName":         ASNDollar[2].TypeToken,
			}
		}
	case 167:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1715
		{
			ASNVAL.TypeValue = MAP{
				"definedObject": ASNDollar[1].TypeValue,
			}
		}
	case 168:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1720
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedObject": ASNDollar[1].TypeValue,
			}
		}
	case 169:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1725
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 170:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1730
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 171:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1742
		{
			ASNVAL.TypeValue = MAP{
				"externalObjectReference": ASNDollar[1].TypeValue,
			}
		}
	case 172:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1747
		{
			ASNVAL.TypeValue = MAP{
				"objectReference": ASNDollar[1].TypeValue,
			}
		}
	case 173:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1759
		{
			ASNVAL.TypeValue = MAP{
				"moduleReference": ASNDollar[1].TypeValue,
				"objectReference": ASNDollar[3].TypeValue,
			}
		}
	case 174:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1772
		{
			ASNVAL.TypeValue = MAP{
				"definedObject":       ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 175:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1785
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 176:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1788
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 177:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1798
		{
			ASNVAL.TypeValue = MAP{
				"moduleReference":    ASNDollar[1].TypeValue,
				"objectSetReference": ASNDollar[3].TypeValue,
			}
		}
	case 178:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1811
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet":    ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 179:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1824
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 180:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1835
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 181:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1840
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 182:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1855
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 183:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1865
		{
			ASNVAL.TypeValue = MAP{
				"referencedObjects": ASNDollar[1].TypeValue,
				"fieldname":         ASNDollar[3].TypeValue,
			}
		}
	case 184:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1879
		{
			ASNVAL.TypeValue = MAP{
				"type":       ASNDollar[1].TypeValue,
				"constraint": ASNDollar[2].TypeValue,
			}
		}
	case 185:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1885
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 186:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1895
		{
			ASNVAL.TypeValue = MAP{
				"constraintSpec": ASNDollar[2].TypeValue,
				"exceptionSpec":  ASNDollar[3].TypeValue,
			}
		}
	case 187:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1909
		{
			ASNVAL.TypeValue = MAP{
				"subtypeConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 188:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1914
		{
			ASNVAL.TypeValue = MAP{
				"generalConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 189:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1926
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 190:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1938
		{
			ASNVAL.TypeValue = MAP{
				"rootElementSetSpec": ASNDollar[1].TypeValue,
			}
		}
	case 191:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1943
		{
			ASNVAL.TypeValue = MAP{
				"rootElementSetSpec": ASNDollar[1].TypeValue,
			}
		}
	case 192:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:1948
		{
			ASNVAL.TypeValue = MAP{
				"rootElementSetSpec":       ASNDollar[1].TypeValue,
				"additionalElementSetSpec": ASNDollar[2].TypeToken,
			}
		}
	case 193:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1961
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 194:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1971
		{
			ASNVAL.TypeValue = nil
		}
	case 195:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1982
		{
			ASNVAL.TypeValue = MAP{
				"unions": ASNDollar[1].TypeValue,
			}
		}
	case 196:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1987
		{
			ASNVAL.TypeValue = MAP{
				"exclusions": ASNDollar[1].TypeString,
			}
		}
	case 197:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2000
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 198:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2003
		{
			ASNVAL.TypeValue = MAP{
				"unions":        ASNDollar[1].TypeValue,
				"intersections": ASNDollar[3].TypeValue,
			}
		}
	case 199:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2017
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 200:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2020
		{
			ASNVAL.TypeValue = MAP{
				"intersections":        ASNDollar[1].TypeValue,
				"intersectionElements": ASNDollar[2].TypeValue,
			}
		}
	case 201:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2033
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 202:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2036
		{
			ASNVAL.TypeValue = MAP{
				"elements":   ASNDollar[1].TypeValue,
				"exclusions": ASNDollar[2].TypeValue,
			}
		}
	case 203:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2051
		{
			ASNVAL.TypeValue = MAP{
				"subtypeElements": ASNDollar[1].TypeValue,
			}
		}
	case 204:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2056
		{
			ASNVAL.TypeValue = MAP{
				"objectSetElements": ASNDollar[1].TypeValue,
			}
		}
	case 205:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2061
		{
			ASNVAL.TypeValue = MAP{
				"elementSetSpec": ASNDollar[1].TypeToken,
			}
		}
	case 206:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2073
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 207:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2094
		{
			ASNVAL.TypeValue = MAP{
				"singleValue": ASNDollar[1].TypeValue,
			}
		}
	case 208:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2099
		{
			ASNVAL.TypeValue = MAP{
				"containedSubtype": ASNDollar[1].TypeValue,
			}
		}
	case 209:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2104
		{
			ASNVAL.TypeValue = MAP{
				"valueRange": ASNDollar[1].TypeValue,
			}
		}
	case 210:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2109
		{
			ASNVAL.TypeValue = MAP{
				"permittedAlphabet": ASNDollar[1].TypeValue,
			}
		}
	case 211:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2114
		{
			ASNVAL.TypeValue = MAP{
				"sizeConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 212:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2119
		{
			ASNVAL.TypeValue = MAP{
				"typeConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 213:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2124
		{
			ASNVAL.TypeValue = MAP{
				"innerTypeConstraints": ASNDollar[1].TypeValue,
			}
		}
	case 214:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2129
		{
			ASNVAL.TypeValue = MAP{
				"patternConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 215:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2134
		{
			ASNVAL.TypeValue = MAP{
				"propertySettings": ASNDollar[1].TypeValue,
			}
		}
	case 216:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2139
		{
			ASNVAL.TypeValue = MAP{
				"durationRange": ASNDollar[1].TypeValue,
			}
		}
	case 217:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2144
		{
			ASNVAL.TypeValue = MAP{
				"timePointRange": ASNDollar[1].TypeValue,
			}
		}
	case 218:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2149
		{
			ASNVAL.TypeValue = MAP{
				"recurrenceRange": ASNDollar[1].TypeValue,
			}
		}
	case 219:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2161
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 220:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2171
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 221:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2181
		{
			ASNVAL.TypeValue = "INCLUDES"
		}
	case 222:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2184
		{
			ASNVAL.TypeValue = "INCLUDES"
		}
	case 223:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2194
		{
			ASNVAL.TypeValue = MAP{
				"lowerEndpoint": ASNDollar[1].TypeValue,
				"upperEndpoint": ASNDollar[2].TypeToken,
			}
		}
	case 224:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2207
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 225:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2210
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 226:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2220
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 227:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2223
		{
			ASNVAL.TypeValue = "MIN"
		}
	case 228:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2233
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 229:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2236
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 230:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2246
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 231:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2249
		{
			ASNVAL.TypeValue = "MAX"
		}
	case 232:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2259
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 233:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2269
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 234:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2279
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 235:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2290
		{
			ASNVAL.TypeValue = ASNDollar[3].TypeValue
		}
	case 236:
		ASNDollar = ASNS[ASNpt-7 : ASNpt+1]
//line asn.y:2293
		{
			ASNVAL.TypeValue = ASNDollar[3].TypeValue
		}
	case 237:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2303
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 238:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2314
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 239:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2317
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 240:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2327
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 241:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2338
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 242:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2341
		{
			ASNVAL.TypeValue = MAP{
				"nameConstraint":  ASNDollar[1].TypeValue,
				"typeConstraints": ASNDollar[3].TypeValue,
			}
		}
	case 243:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2350
		{
			ASNVAL.TypeValue = nil
		}
	case 244:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:2360
		{
			ASNVAL.TypeValue = ASNDollar[4].TypeValue
		}
	case 245:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2366
		{
			ASNVAL.TypeValue = nil
		}
	case 246:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2372
		{
			ASNVAL.TypeValue = nil
		}
	case 247:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2378
		{
			ASNVAL.TypeValue = nil
		}
	case 248:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2384
		{
			ASNVAL.TypeValue = nil
		}
	case 249:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2390
		{
			ASNVAL.TypeValue = nil
		}
	case 250:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2396
		{
			ASNVAL.TypeValue = nil
		}
	case 251:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2402
		{
			ASNVAL.TypeValue = nil
		}
	case 252:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2408
		{
			ASNVAL.TypeValue = nil
		}
	case 253:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2418
		{
			ASNVAL.TypeValue = nil
		}
	case 254:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2424
		{
			ASNVAL.TypeValue = nil
		}
	case 255:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2430
		{
			ASNVAL.TypeValue = nil
		}
	case 256:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2436
		{
			ASNVAL.TypeValue = nil
		}
	case 257:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2442
		{
			ASNVAL.TypeValue = nil
		}
	case 258:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2448
		{
			ASNVAL.TypeValue = nil
		}
	case 259:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2454
		{
			ASNVAL.TypeValue = nil
		}
	case 260:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2460
		{
			ASNVAL.TypeValue = nil
		}
	case 261:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2466
		{
			ASNVAL.TypeValue = nil
		}
	case 262:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2472
		{
			ASNVAL.TypeValue = nil
		}
	case 263:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2478
		{
			ASNVAL.TypeValue = nil
		}
	case 264:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2484
		{
			ASNVAL.TypeValue = nil
		}
	case 265:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2490
		{
			ASNVAL.TypeValue = nil
		}
	case 266:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2496
		{
			ASNVAL.TypeValue = nil
		}
	case 267:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2502
		{
			ASNVAL.TypeValue = nil
		}
	case 268:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2508
		{
			ASNVAL.TypeValue = nil
		}
	case 269:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2514
		{
			ASNVAL.TypeValue = nil
		}
	case 270:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2520
		{
			ASNVAL.TypeValue = nil
		}
	case 271:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2526
		{
			ASNVAL.TypeValue = nil
		}
	case 272:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2532
		{
			ASNVAL.TypeValue = nil
		}
	case 273:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2538
		{
			ASNVAL.TypeValue = nil
		}
	case 274:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2544
		{
			ASNVAL.TypeValue = nil
		}
	case 275:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2550
		{
			ASNVAL.TypeValue = nil
		}
	case 276:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2556
		{
			ASNVAL.TypeValue = nil
		}
	case 277:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2562
		{
			ASNVAL.TypeValue = nil
		}
	case 278:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2568
		{
			ASNVAL.TypeValue = nil
		}
	case 279:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2574
		{
			ASNVAL.TypeValue = nil
		}
	case 280:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2580
		{
			ASNVAL.TypeValue = nil
		}
	case 281:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2586
		{
			ASNVAL.TypeValue = nil
		}
	case 282:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2592
		{
			ASNVAL.TypeValue = nil
		}
	case 283:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2598
		{
			ASNVAL.TypeValue = nil
		}
	case 284:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2604
		{
			ASNVAL.TypeValue = nil
		}
	case 285:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2610
		{
			ASNVAL.TypeValue = nil
		}
	case 286:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2616
		{
			ASNVAL.TypeValue = nil
		}
	case 287:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2621
		{
			ASNVAL.TypeValue = MAP{
				"bitString": ASNDollar[1].TypeValue,
			}
		}
	case 288:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2626
		{
			ASNVAL.TypeValue = MAP{
				"boolean": ASNDollar[1].TypeValue,
			}
		}
	case 289:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2631
		{
			ASNVAL.TypeValue = MAP{
				"characterString": ASNDollar[1].TypeValue,
			}
		}
	case 290:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2636
		{
			ASNVAL.TypeValue = MAP{
				"choice": ASNDollar[1].TypeValue,
			}
		}
	case 291:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2641
		{
			ASNVAL.TypeValue = MAP{
				"embeddedPDV": ASNDollar[1].TypeValue,
			}
		}
	case 292:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2646
		{
			ASNVAL.TypeValue = MAP{
				"enumerated": ASNDollar[1].TypeValue,
			}
		}
	case 293:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2651
		{
			ASNVAL.TypeValue = MAP{
				"external": ASNDollar[1].TypeValue,
			}
		}
	case 294:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2656
		{
			ASNVAL.TypeValue = MAP{
				"instanceOf": ASNDollar[1].TypeValue,
			}
		}
	case 295:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2661
		{
			ASNVAL.TypeValue = MAP{
				"integer": ASNDollar[1].TypeValue,
			}
		}
	case 296:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2666
		{
			ASNVAL.TypeValue = MAP{
				"iri": ASNDollar[1].TypeValue,
			}
		}
	case 297:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2671
		{
			ASNVAL.TypeValue = MAP{
				"null": ASNDollar[1].TypeValue,
			}
		}
	case 298:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2676
		{
			ASNVAL.TypeValue = MAP{
				"objectIdentifier": ASNDollar[1].TypeValue,
			}
		}
	case 299:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2681
		{
			ASNVAL.TypeValue = MAP{
				"octetString": ASNDollar[1].TypeValue,
			}
		}
	case 300:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2686
		{
			ASNVAL.TypeValue = MAP{
				"real": ASNDollar[1].TypeValue,
			}
		}
	case 301:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2691
		{
			ASNVAL.TypeValue = MAP{
				"relativeIRI": ASNDollar[1].TypeValue,
			}
		}
	case 302:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2696
		{
			ASNVAL.TypeValue = MAP{
				"relativeOID": ASNDollar[1].TypeValue,
			}
		}
	case 303:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2701
		{
			ASNVAL.TypeValue = MAP{
				"sequence": ASNDollar[1].TypeValue,
			}
		}
	case 304:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2706
		{
			ASNVAL.TypeValue = MAP{
				"sequenceOf": ASNDollar[1].TypeValue,
			}
		}
	case 305:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2711
		{
			ASNVAL.TypeValue = MAP{
				"set": ASNDollar[1].TypeValue,
			}
		}
	case 306:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2716
		{
			ASNVAL.TypeValue = MAP{
				"setOf": ASNDollar[1].TypeValue,
			}
		}
	case 307:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2721
		{
			ASNVAL.TypeValue = MAP{
				"prefixed": ASNDollar[1].TypeValue,
			}
		}
	case 308:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2726
		{
			ASNVAL.TypeValue = MAP{
				"time": ASNDollar[1].TypeValue,
			}
		}
	case 309:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2733
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 310:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2736
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 311:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2739
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 312:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2742
		{
			ASNVAL.TypeValue = nil
		}
	case 313:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2745
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 314:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2750
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 315:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2755
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeToken)
		}
	case 316:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2761
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 317:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2766
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 318:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2771
		{
			ASNVAL.TypeValue = nil
		}
	case 319:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2774
		{

		}
	case 320:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2779
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 321:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2782
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 322:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2785
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 323:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2788
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 324:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2793
		{
			ASNVAL.TypeValue = nil
		}
	case 325:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2798
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 326:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2803
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeToken)
		}
	case 327:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2809
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 328:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2812
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 329:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2815
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 330:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2818
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 331:
		ASNDollar = ASNS[ASNpt-9 : ASNpt+1]
//line asn.y:2823
		{
			ASNVAL.TypeValue = MAP{
				"group": ASNDollar[2].TypeValue,
				"plane": ASNDollar[4].TypeValue,
				"row":   ASNDollar[6].TypeValue,
				"cell":  ASNDollar[8].TypeValue,
			}
		}
	case 332:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2833
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 333:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2838
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 334:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2843
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 335:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2848
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 336:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:2853
		{
			ASNVAL.TypeValue = MAP{
				"tableColumn": ASNDollar[2].TypeValue,
				"tableRow":    ASNDollar[4].TypeValue,
			}
		}
	case 337:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2861
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 338:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2866
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 339:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2871
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 340:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2876
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"value":      ASNDollar[2].TypeToken,
			}
		}
	case 341:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2884
		{
			ASNVAL.TypeValue = nil
		}
	case 342:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2889
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 343:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2894
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 344:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2899
		{
			ASNVAL.TypeValue = nil
		}
	case 345:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2904
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 346:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2907
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 347:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2912
		{
			ASNVAL.TypeValue = "NULL"
		}
	case 348:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2918
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 349:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2921
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 350:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2924
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 351:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2929
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 352:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2932
		{
			ASNVAL.TypeValue = nil
		}
	case 353:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2937
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 354:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2940
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 355:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2945
		{
			ASNVAL.TypeValue = nil
		}
	case 356:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2948
		{
			ASNVAL.TypeValue = nil
		}
	case 357:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2951
		{
			ASNVAL.TypeValue = nil
		}
	case 358:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2956
		{
			ASNVAL.TypeValue = nil
		}
	case 359:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2961
		{
			ASNVAL.TypeValue = nil
		}
	case 360:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2966
		{
			ASNVAL.TypeValue = nil
		}
	case 361:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2971
		{
			ASNVAL.TypeValue = nil
		}
	case 362:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2974
		{
			ASNVAL.TypeValue = nil
		}
	case 363:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2979
		{
			ASNVAL.TypeValue = nil
		}
	case 364:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2982
		{
			ASNVAL.TypeValue = nil
		}
	case 365:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2985
		{
			ASNVAL.TypeValue = nil
		}
	case 366:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2990
		{
			ASNVAL.TypeValue = nil
		}
	case 367:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2995
		{
			ASNVAL.TypeValue = nil
		}
	case 368:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3000
		{
			ASNVAL.TypeValue = nil
		}
	case 369:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3005
		{
			ASNVAL.TypeValue = nil
		}
	case 370:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3010
		{
			ASNVAL.TypeValue = nil
		}
	case 371:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3015
		{
			ASNVAL.TypeValue = nil
		}
	case 372:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3020
		{
			ASNVAL.TypeValue = nil
		}
	case 373:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3025
		{
			ASNVAL.TypeValue = nil
		}
	case 374:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3030
		{
			ASNVAL.TypeValue = nil
		}
	case 375:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3035
		{
			ASNVAL.TypeValue = nil
		}
	case 376:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3040
		{
			ASNVAL.TypeValue = nil
		}
	case 377:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3045
		{
			ASNVAL.TypeValue = nil
		}
	case 378:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3050
		{
			ASNVAL.TypeValue = nil
		}
	case 379:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3055
		{
			ASNVAL.TypeValue = nil
		}
	case 380:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3060
		{
			ASNVAL.TypeValue = nil
		}
	case 381:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3065
		{
			ASNVAL.TypeValue = nil
		}
	case 382:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3070
		{
			ASNVAL.TypeValue = nil
		}
	case 383:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3075
		{
			ASNVAL.TypeValue = nil
		}
	case 384:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3080
		{
			ASNVAL.TypeValue = nil
		}
	case 385:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3085
		{
			ASNVAL.TypeValue = nil
		}
	case 386:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3090
		{
			ASNVAL.TypeValue = MAP{
				"type":  "EXTERNAL_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 387:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3096
		{
			ASNVAL.TypeValue = MAP{
				"type":  "STRING_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 388:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3102
		{
			ASNVAL.TypeValue = MAP{
				"type":  "NUMBER_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 389:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3108
		{
			ASNVAL.TypeValue = MAP{
				"type":  "PARAMETERIZED_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 390:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3116
		{
			ASNVAL.TypeValue = MAP{
				"module": ASNDollar[1].TypeValue,
				"value":  ASNDollar[3].TypeValue,
			}
		}
	case 391:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3124
		{
			ASNVAL.TypeValue = nil
		}
	case 392:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3129
		{
			ASNVAL.TypeValue = nil
		}
	case 393:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3134
		{
			ASNVAL.TypeValue = nil
		}
	case 394:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3139
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 395:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3142
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 396:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3147
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 397:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3150
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 398:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3155
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeNumber
		}
	case 399:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3158
		{
			ASNVAL.TypeValue = (-1) * ASNDollar[2].TypeNumber
		}
	case 400:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3161
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeNumber
		}
	case 401:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3164
		{
			ASNVAL.TypeValue = (-1) * ASNDollar[2].TypeNumber
		}
	case 402:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3169
		{
			ASNVAL.TypeValue = "::="
		}
	}
	goto ASNstack /* stack new state and value */
}
