// Code generated by goyacc -p ASN asn.y. DO NOT EDIT.

//line asn.y:1

package main

import __yyfmt__ "fmt"

//line asn.y:3
import (
	"bytes"
	"encoding/json"
	"fmt"
)

var code bytes.Buffer

func AddLine(line string) {
	code.WriteString(line)
	code.WriteByte('\n')
}

func JSON(obj interface{}) string {
	data, err := json.MarshalIndent(obj, "", "    ")
	if nil != err {
		fmt.Println("Error: ", err)
		return ""
	}
	return string(data)
}

func Print(line string) {
	fmt.Println(line)
}

func Join(values ...string) string {
	var buffer bytes.Buffer
	for _, value := range values {
		buffer.WriteString(value)
	}
	return buffer.String()
}

func SetResult(l ASNLexer, v VALUE) {
	l.(*Parser).Result = JSON(&v)
}

type Empty struct{}
type (
	VALUE   interface{}
	STRING  string
	NUMBER  float64
	BOOLEAN bool
	LIST    []VALUE
	MAP     map[string]VALUE
)

//line asn.y:50
type ASNSymType struct {
	yys         int
	TypeToken   struct{}
	TypeString  STRING
	TypeNumber  NUMBER
	TypeValue   VALUE
	TypeBoolean BOOLEAN
	TypeMap     MAP
	TypeList    LIST
}

const CURLY_START = 57346
const CURLY_END = 57347
const SQUARE_START = 57348
const SQUARE_END = 57349
const DOUBLE_QUOTE = 57350
const SINGLE_QUOTE = 57351
const COMMA = 57352
const COLON = 57353
const MINUS = 57354
const GREATER_THAN = 57355
const LESS_THAN = 57356
const DOT = 57357
const SLASH = 57358
const ROUND_START = 57359
const ROUND_END = 57360
const EQUALITY = 57361
const APOSTROPHE = 57362
const SPACE = 57363
const PIPE = 57364
const AT_THE_RATE = 57365
const EXCLAMATION = 57366
const CARET = 57367
const SEMI_COMMA = 57368
const ELLIPSIS = 57369
const ABSENT_SYMBOL = 57370
const ABSTRACTSYNTAX_SYMBOL = 57371
const ALL_SYMBOL = 57372
const APPLICATION_SYMBOL = 57373
const AUTOMATIC_SYMBOL = 57374
const BEGIN_SYMBOL = 57375
const BIT_SYMBOL = 57376
const BMPSTRING_SYMBOL = 57377
const BOOLEAN_SYMBOL = 57378
const BY_SYMBOL = 57379
const CHARACTER_SYMBOL = 57380
const CHOICE_SYMBOL = 57381
const CLASS_SYMBOL = 57382
const COMPONENT_SYMBOL = 57383
const COMPONENTS_SYMBOL = 57384
const CONSTRAINED_SYMBOL = 57385
const CONTAINING_SYMBOL = 57386
const DATE_SYMBOL = 57387
const DATETIME_SYMBOL = 57388
const DEFAULT_SYMBOL = 57389
const DEFINITIONS_SYMBOL = 57390
const DURATION_SYMBOL = 57391
const EMBEDDED_SYMBOL = 57392
const ENCODED_SYMBOL = 57393
const ENCODINGCONTROL_SYMBOL = 57394
const END_SYMBOL = 57395
const ENUMERATED_SYMBOL = 57396
const EXCEPT_SYMBOL = 57397
const EXPLICIT_SYMBOL = 57398
const EXPORTS_SYMBOL = 57399
const EXTENSIBILITY_SYMBOL = 57400
const EXTERNEL_SYMBOL = 57401
const FALSE_SYMBOL = 57402
const FROM_SYMBOL = 57403
const GENERALIZEDTIME_SYMBOL = 57404
const GENERALSTRING_SYMBOL = 57405
const GRAPHICSTRING_SYMBOL = 57406
const IA5STRING_SYMBOL = 57407
const IDENTIFIER_SYMBOL = 57408
const IMPLICIT_SYMBOL = 57409
const IMPLIED_SYMBOL = 57410
const IMPORTS_SYMBOL = 57411
const INCLUDES_SYMBOL = 57412
const INSTANCE_SYMBOL = 57413
const INSTRUCTIONS_SYMBOL = 57414
const INTEGER_SYMBOL = 57415
const INTERSECTION_SYMBOL = 57416
const ISO646STRING_SYMBOL = 57417
const MAX_SYMBOL = 57418
const MIN_SYMBOL = 57419
const MINUSINFINITY_SYMBOL = 57420
const NOTANUMBER_SYMBOL = 57421
const NULL_SYMBOL = 57422
const NUMERICSTRING_SYMBOL = 57423
const OBJECT_SYMBOL = 57424
const OBJECTDESCRIPTOR_SYMBOL = 57425
const OCTET_SYMBOL = 57426
const OF_SYMBOL = 57427
const OIDIRI_SYMBOL = 57428
const OPTIONAL_SYMBOL = 57429
const PATTERN_SYMBOL = 57430
const PDV_SYMBOL = 57431
const PLUSINFINITY_SYMBOL = 57432
const PRESENT_SYMBOL = 57433
const PRINTABLESTRING_SYMBOL = 57434
const PRIVATE_SYMBOL = 57435
const REAL_SYMBOL = 57436
const RELATIVEOID_SYMBOL = 57437
const RELATIVEOIDIRI_SYMBOL = 57438
const SEQUENCE_SYMBOL = 57439
const SET_SYMBOL = 57440
const SETTINGS_SYMBOL = 57441
const SIZE_SYMBOL = 57442
const STRING_SYMBOL = 57443
const SYNTAX_SYMBOL = 57444
const T61STRING_SYMBOL = 57445
const TAGS_SYMBOL = 57446
const TELETEXSTRING_SYMBOL = 57447
const TIME_SYMBOL = 57448
const TIMEOFDAY_SYMBOL = 57449
const TRUE_SYMBOL = 57450
const TYPEIDENTIFIER_SYMBOL = 57451
const UNION_SYMBOL = 57452
const UNIQUE_SYMBOL = 57453
const UNIVERSAL_SYMBOL = 57454
const UNIVERSALSTRING_SYMBOL = 57455
const UTCTIME_SYMBOL = 57456
const UTF8STRING_SYMBOL = 57457
const VIDEOTEXSTRING_SYMBOL = 57458
const VISIBLESTRING_SYMBOL = 57459
const WITH_SYMBOL = 57460
const ASSIGNMENT_SYMBOL = 57461
const TokenCapitalString = 57462
const TokenString = 57463
const TokenNumber = 57464
const TokenInteger = 57465
const TokenFloat = 57466
const TokenBoolean = 57467
const TokenBString = 57468
const TokenHString = 57469
const TokenCString = 57470

var ASNToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"CURLY_START",
	"CURLY_END",
	"SQUARE_START",
	"SQUARE_END",
	"DOUBLE_QUOTE",
	"SINGLE_QUOTE",
	"COMMA",
	"COLON",
	"MINUS",
	"GREATER_THAN",
	"LESS_THAN",
	"DOT",
	"SLASH",
	"ROUND_START",
	"ROUND_END",
	"EQUALITY",
	"APOSTROPHE",
	"SPACE",
	"PIPE",
	"AT_THE_RATE",
	"EXCLAMATION",
	"CARET",
	"SEMI_COMMA",
	"ELLIPSIS",
	"ABSENT_SYMBOL",
	"ABSTRACTSYNTAX_SYMBOL",
	"ALL_SYMBOL",
	"APPLICATION_SYMBOL",
	"AUTOMATIC_SYMBOL",
	"BEGIN_SYMBOL",
	"BIT_SYMBOL",
	"BMPSTRING_SYMBOL",
	"BOOLEAN_SYMBOL",
	"BY_SYMBOL",
	"CHARACTER_SYMBOL",
	"CHOICE_SYMBOL",
	"CLASS_SYMBOL",
	"COMPONENT_SYMBOL",
	"COMPONENTS_SYMBOL",
	"CONSTRAINED_SYMBOL",
	"CONTAINING_SYMBOL",
	"DATE_SYMBOL",
	"DATETIME_SYMBOL",
	"DEFAULT_SYMBOL",
	"DEFINITIONS_SYMBOL",
	"DURATION_SYMBOL",
	"EMBEDDED_SYMBOL",
	"ENCODED_SYMBOL",
	"ENCODINGCONTROL_SYMBOL",
	"END_SYMBOL",
	"ENUMERATED_SYMBOL",
	"EXCEPT_SYMBOL",
	"EXPLICIT_SYMBOL",
	"EXPORTS_SYMBOL",
	"EXTENSIBILITY_SYMBOL",
	"EXTERNEL_SYMBOL",
	"FALSE_SYMBOL",
	"FROM_SYMBOL",
	"GENERALIZEDTIME_SYMBOL",
	"GENERALSTRING_SYMBOL",
	"GRAPHICSTRING_SYMBOL",
	"IA5STRING_SYMBOL",
	"IDENTIFIER_SYMBOL",
	"IMPLICIT_SYMBOL",
	"IMPLIED_SYMBOL",
	"IMPORTS_SYMBOL",
	"INCLUDES_SYMBOL",
	"INSTANCE_SYMBOL",
	"INSTRUCTIONS_SYMBOL",
	"INTEGER_SYMBOL",
	"INTERSECTION_SYMBOL",
	"ISO646STRING_SYMBOL",
	"MAX_SYMBOL",
	"MIN_SYMBOL",
	"MINUSINFINITY_SYMBOL",
	"NOTANUMBER_SYMBOL",
	"NULL_SYMBOL",
	"NUMERICSTRING_SYMBOL",
	"OBJECT_SYMBOL",
	"OBJECTDESCRIPTOR_SYMBOL",
	"OCTET_SYMBOL",
	"OF_SYMBOL",
	"OIDIRI_SYMBOL",
	"OPTIONAL_SYMBOL",
	"PATTERN_SYMBOL",
	"PDV_SYMBOL",
	"PLUSINFINITY_SYMBOL",
	"PRESENT_SYMBOL",
	"PRINTABLESTRING_SYMBOL",
	"PRIVATE_SYMBOL",
	"REAL_SYMBOL",
	"RELATIVEOID_SYMBOL",
	"RELATIVEOIDIRI_SYMBOL",
	"SEQUENCE_SYMBOL",
	"SET_SYMBOL",
	"SETTINGS_SYMBOL",
	"SIZE_SYMBOL",
	"STRING_SYMBOL",
	"SYNTAX_SYMBOL",
	"T61STRING_SYMBOL",
	"TAGS_SYMBOL",
	"TELETEXSTRING_SYMBOL",
	"TIME_SYMBOL",
	"TIMEOFDAY_SYMBOL",
	"TRUE_SYMBOL",
	"TYPEIDENTIFIER_SYMBOL",
	"UNION_SYMBOL",
	"UNIQUE_SYMBOL",
	"UNIVERSAL_SYMBOL",
	"UNIVERSALSTRING_SYMBOL",
	"UTCTIME_SYMBOL",
	"UTF8STRING_SYMBOL",
	"VIDEOTEXSTRING_SYMBOL",
	"VISIBLESTRING_SYMBOL",
	"WITH_SYMBOL",
	"ASSIGNMENT_SYMBOL",
	"TokenCapitalString",
	"TokenString",
	"TokenNumber",
	"TokenInteger",
	"TokenFloat",
	"TokenBoolean",
	"TokenBString",
	"TokenHString",
	"TokenCString",
}

var ASNStatenames = [...]string{}

const ASNEofCode = 1
const ASNErrCode = 2
const ASNInitialStackSize = 16

//line asn.y:3670

//line yacctab:1
var ASNExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 45,
	120, 36,
	121, 36,
	-2, 32,
	-1, 140,
	4, 139,
	-2, 132,
	-1, 141,
	4, 140,
	-2, 133,
	-1, 179,
	14, 398,
	15, 398,
	-2, 222,
	-1, 191,
	10, 447,
	-2, 315,
	-1, 231,
	44, 403,
	-2, 364,
	-1, 262,
	17, 315,
	18, 315,
	24, 315,
	51, 315,
	-2, 398,
	-1, 267,
	22, 265,
	110, 265,
	-2, 195,
	-1, 269,
	25, 262,
	74, 262,
	-2, 197,
	-1, 273,
	55, 206,
	-2, 201,
	-1, 277,
	14, 398,
	15, 398,
	-2, 222,
	-1, 291,
	15, 169,
	-2, 258,
	-1, 293,
	15, 170,
	-2, 260,
	-1, 294,
	14, 226,
	15, 226,
	-2, 219,
	-1, 302,
	4, 140,
	-2, 133,
	-1, 310,
	15, 173,
	-2, 136,
	-1, 329,
	17, 315,
	-2, 446,
	-1, 342,
	10, 384,
	-2, 65,
	-1, 349,
	10, 370,
	-2, 66,
	-1, 350,
	10, 386,
	-2, 67,
	-1, 363,
	11, 315,
	17, 315,
	-2, 446,
	-1, 369,
	10, 370,
	-2, 66,
	-1, 371,
	14, 398,
	15, 398,
	-2, 222,
	-1, 372,
	14, 398,
	15, 398,
	-2, 222,
	-1, 375,
	14, 398,
	15, 398,
	-2, 222,
	-1, 392,
	4, 140,
	-2, 133,
	-1, 401,
	10, 370,
	-2, 66,
	-1, 402,
	10, 386,
	-2, 67,
	-1, 403,
	10, 381,
	-2, 374,
	-1, 404,
	10, 382,
	-2, 376,
	-1, 405,
	10, 383,
	-2, 377,
	-1, 432,
	4, 140,
	18, 441,
	-2, 133,
	-1, 434,
	11, 315,
	17, 315,
	-2, 275,
	-1, 440,
	25, 262,
	74, 262,
	-2, 198,
	-1, 465,
	14, 398,
	15, 398,
	-2, 222,
	-1, 469,
	15, 169,
	-2, 278,
	-1, 470,
	11, 281,
	-2, 279,
	-1, 471,
	11, 282,
	-2, 280,
	-1, 474,
	5, 177,
	-2, 444,
	-1, 483,
	4, 136,
	5, 136,
	11, 136,
	15, 173,
	17, 136,
	-2, 444,
}

const ASNPrivate = 57344

const ASNLast = 1409

var ASNAct = [...]int{
	237, 5, 526, 5, 507, 515, 495, 178, 167, 326,
	476, 467, 290, 264, 238, 321, 314, 333, 312, 352,
	247, 294, 271, 160, 269, 246, 351, 21, 273, 370,
	21, 325, 193, 353, 330, 219, 166, 328, 391, 337,
	23, 139, 155, 282, 33, 34, 68, 40, 72, 23,
	67, 65, 65, 6, 7, 14, 498, 83, 83, 39,
	65, 38, 373, 23, 37, 447, 181, 23, 74, 157,
	151, 145, 156, 320, 83, 319, 508, 317, 316, 179,
	29, 50, 149, 62, 141, 139, 155, 43, 146, 376,
	159, 83, 36, 102, 65, 172, 527, 371, 51, 148,
	408, 141, 412, 359, 162, 161, 55, 51, 338, 452,
	152, 23, 150, 157, 151, 145, 156, 23, 30, 50,
	153, 158, 144, 154, 147, 23, 149, 6, 7, 9,
	419, 510, 146, 383, 159, 55, 70, 23, 377, 472,
	6, 7, 99, 148, 73, 359, 343, 367, 162, 161,
	374, 22, 24, 23, 152, 298, 150, 6, 7, 99,
	22, 24, 187, 93, 153, 158, 144, 154, 147, 185,
	188, 6, 7, 199, 22, 24, 20, 170, 22, 24,
	302, 6, 7, 310, 141, 315, 41, 200, 293, 6,
	7, 541, 302, 307, 406, 318, 190, 192, 334, 203,
	60, 23, 90, 303, 327, 186, 189, 197, 195, 204,
	179, 71, 335, 324, 94, 23, 291, 265, 308, 6,
	7, 48, 22, 24, 322, 6, 7, 356, 22, 24,
	61, 49, 365, 349, 20, 340, 22, 24, 388, 101,
	45, 433, 28, 97, 435, 6, 7, 350, 22, 24,
	542, 96, 91, 358, 540, 360, 174, 363, 357, 53,
	92, 6, 7, 302, 22, 24, 27, 369, 496, 356,
	100, 57, 354, 196, 52, 484, 442, 26, 302, 464,
	56, 350, 69, 427, 360, 179, 293, 358, 177, 180,
	44, 379, 357, 339, 42, 410, 141, 438, 331, 410,
	179, 303, 385, 368, 378, 382, 354, 179, 32, 6,
	7, 514, 22, 24, 291, 183, 451, 392, 392, 516,
	392, 392, 384, 6, 7, 361, 22, 24, 183, 182,
	401, 334, 334, 342, 183, 182, 16, 443, 389, 311,
	411, 355, 327, 334, 402, 335, 335, 323, 407, 424,
	405, 324, 31, 386, 381, 404, 394, 335, 396, 398,
	339, 184, 322, 335, 432, 387, 409, 342, 492, 354,
	361, 42, 302, 302, 425, 355, 302, 409, 429, 46,
	293, 293, 420, 426, 293, 533, 532, 315, 421, 436,
	315, 445, 512, 141, 485, 303, 303, 440, 441, 303,
	439, 302, 505, 465, 418, 446, 448, 506, 291, 291,
	334, 199, 291, 327, 490, 457, 450, 199, 366, 491,
	417, 415, 324, 413, 335, 335, 416, 407, 414, 400,
	342, 200, 461, 463, 455, 141, 458, 358, 355, 474,
	364, 456, 357, 93, 471, 543, 531, 530, 332, 423,
	453, 380, 483, 511, 486, 23, 361, 422, 482, 183,
	451, 437, 410, 399, 430, 478, 302, 173, 520, 191,
	481, 469, 390, 393, 293, 395, 397, 473, 434, 489,
	95, 12, 341, 309, 3, 323, 487, 8, 497, 303,
	480, 1, 141, 234, 493, 499, 428, 509, 494, 478,
	501, 471, 291, 502, 261, 504, 260, 468, 466, 257,
	256, 454, 255, 513, 503, 523, 509, 459, 292, 431,
	524, 529, 525, 539, 535, 534, 528, 522, 469, 519,
	518, 517, 444, 529, 529, 537, 538, 536, 475, 266,
	305, 296, 295, 289, 288, 287, 286, 23, 449, 285,
	284, 283, 277, 281, 280, 279, 323, 278, 276, 275,
	274, 375, 272, 6, 7, 268, 22, 24, 372, 139,
	155, 270, 267, 488, 258, 254, 253, 252, 259, 262,
	362, 251, 138, 313, 169, 168, 263, 165, 164, 98,
	470, 54, 163, 143, 142, 243, 297, 157, 151, 145,
	156, 140, 137, 136, 135, 304, 134, 133, 64, 63,
	149, 348, 306, 249, 250, 239, 146, 241, 159, 240,
	462, 347, 521, 300, 500, 248, 460, 148, 346, 345,
	245, 344, 162, 161, 301, 187, 236, 235, 152, 229,
	150, 228, 227, 242, 226, 225, 224, 470, 153, 158,
	144, 154, 147, 299, 223, 6, 7, 232, 22, 24,
	222, 230, 231, 244, 221, 23, 220, 218, 217, 216,
	277, 215, 214, 213, 212, 211, 210, 209, 208, 207,
	206, 205, 202, 268, 201, 198, 132, 139, 155, 131,
	130, 129, 128, 127, 126, 125, 124, 233, 123, 122,
	121, 120, 119, 118, 117, 116, 114, 115, 113, 112,
	111, 110, 109, 243, 297, 157, 151, 145, 156, 108,
	107, 106, 105, 304, 104, 103, 89, 88, 149, 87,
	306, 249, 250, 239, 146, 86, 159, 85, 84, 176,
	175, 300, 82, 248, 81, 148, 80, 79, 78, 77,
	162, 161, 301, 187, 76, 75, 152, 336, 150, 194,
	171, 242, 66, 59, 58, 47, 153, 158, 144, 154,
	147, 299, 35, 6, 7, 232, 22, 24, 13, 230,
	231, 244, 25, 23, 19, 18, 17, 15, 277, 11,
	10, 4, 2, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 155, 0, 0, 0,
	0, 0, 0, 0, 0, 233, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 243, 297, 157, 151, 145, 156, 0, 0, 0,
	0, 304, 0, 0, 0, 0, 149, 0, 306, 249,
	250, 239, 146, 0, 159, 0, 0, 0, 0, 300,
	0, 248, 0, 148, 0, 0, 0, 0, 162, 161,
	301, 187, 329, 343, 152, 0, 150, 0, 0, 242,
	23, 0, 0, 0, 153, 158, 144, 154, 147, 299,
	0, 6, 7, 0, 22, 24, 0, 230, 231, 244,
	0, 0, 139, 155, 0, 0, 0, 0, 0, 0,
	0, 0, 233, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 243, 0,
	157, 151, 145, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 149, 0, 0, 249, 250, 239, 146,
	0, 159, 0, 0, 0, 0, 0, 0, 248, 0,
	148, 0, 0, 0, 0, 162, 161, 232, 0, 0,
	0, 152, 0, 150, 0, 23, 242, 0, 0, 0,
	0, 153, 158, 144, 154, 147, 0, 0, 6, 7,
	0, 22, 24, 0, 230, 231, 403, 139, 155, 0,
	0, 0, 0, 0, 0, 0, 0, 233, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 243, 0, 157, 151, 145, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 149, 0,
	0, 249, 250, 239, 146, 0, 159, 0, 0, 0,
	0, 0, 0, 248, 0, 148, 0, 0, 0, 0,
	162, 161, 329, 0, 0, 0, 152, 0, 150, 0,
	23, 242, 0, 0, 0, 0, 153, 158, 144, 154,
	147, 0, 0, 6, 7, 0, 22, 24, 0, 230,
	231, 244, 139, 155, 0, 0, 0, 0, 0, 0,
	0, 0, 233, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 243, 0,
	157, 151, 145, 156, 232, 0, 0, 0, 0, 0,
	0, 0, 23, 149, 477, 0, 249, 250, 239, 146,
	0, 159, 0, 0, 0, 0, 0, 0, 248, 232,
	148, 0, 0, 0, 0, 162, 161, 23, 0, 0,
	0, 152, 0, 150, 233, 0, 242, 0, 0, 0,
	0, 153, 158, 144, 154, 147, 0, 0, 6, 7,
	243, 22, 24, 0, 230, 231, 244, 0, 0, 233,
	0, 0, 0, 0, 0, 0, 479, 0, 249, 250,
	239, 0, 0, 0, 0, 243, 0, 0, 0, 0,
	248, 232, 0, 0, 0, 0, 0, 0, 0, 23,
	0, 479, 0, 249, 250, 239, 0, 0, 242, 0,
	0, 0, 0, 0, 0, 248, 0, 0, 0, 0,
	6, 7, 0, 22, 24, 0, 230, 231, 244, 0,
	0, 233, 0, 242, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 6, 7, 243, 22, 24,
	0, 230, 231, 244, 0, 183, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 249, 250, 239, 0, 0,
	0, 0, 0, 0, 0, 139, 155, 248, 42, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 242, 0, 0, 0, 0,
	0, 139, 155, 157, 151, 145, 156, 6, 7, 0,
	22, 24, 0, 230, 231, 244, 149, 0, 0, 0,
	0, 0, 146, 0, 159, 0, 0, 0, 0, 157,
	151, 145, 156, 148, 0, 0, 0, 0, 162, 161,
	0, 0, 149, 0, 152, 0, 150, 0, 146, 0,
	159, 0, 0, 0, 153, 158, 144, 154, 147, 148,
	0, 6, 7, 0, 162, 161, 0, 0, 0, 0,
	152, 0, 150, 0, 0, 0, 0, 0, 0, 0,
	153, 158, 144, 154, 147, 0, 0, 6, 7,
}

var ASNPact = [...]int{
	-67, -1000, -67, -1000, 81, 477, -1000, -1000, -1000, -65,
	-1000, -1000, 55, 210, 8, 113, -1000, -1000, -1000, -1000,
	291, -1000, -1000, -79, -1000, 34, -40, -43, -45, -1000,
	-1000, -1000, 28, -1000, -1000, 360, 19, -1000, -1000, -1000,
	272, 207, 368, -1000, -1000, 50, 255, 54, 41, 12,
	-67, 20, -1000, 83, -1000, -72, -67, -67, 226, -67,
	-1000, 153, -1000, 476, -1000, -1000, 225, 217, -1000, 433,
	-1000, 54, -1000, -67, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1287, -1000, -1000, -1000, -1000, -1000, -1000,
	-67, -1000, -1000, -67, -67, 462, -1000, -1000, -1000, -1000,
	7, 283, 360, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -35,
	-1000, 320, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	346, 62, 62, 465, 465, -1000, 465, -1000, -1000, -1000,
	-1000, -1000, 203, -1000, 290, -1000, -1000, 1207, -1000, 535,
	-1000, -1000, -67, 7, -67, -7, -8, 290, -10, -12,
	-1000, 1058, -1000, -1000, -1000, -1000, -1000, 443, -1000, 345,
	-1000, -1000, 465, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 141, 1207, -1000, -1000, -1000, 359, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 233, -1000, -1000, -1000, -1000, -1000, -1000, 430, 195,
	-1000, -1000, 963, 110, -1000, -1000, 141, -1000, 42, -1000,
	40, -1000, 64, -1000, 42, -1000, -1000, 653, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 465, -1000, -1000, -1000, 7, 339, 290, 290, 91,
	1207, -67, 314, 338, -1000, 351, -1000, -1000, -1000, 204,
	-1000, 290, -1000, 323, -1000, -1000, 7, 7, -1000, 7,
	7, 458, 419, 290, -1000, -1000, -1000, -1000, -1000, 868,
	189, 37, -1000, -1000, 278, -1000, -1000, -1000, -1000, -67,
	-1000, 58, 37, -1000, 418, 416, 410, 394, 125, 278,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 28,
	-1000, 1207, 265, 51, 214, 474, 193, 1207, 456, 282,
	-1000, 771, 771, -1000, -1000, 771, -1000, -1000, -1000, 258,
	290, 322, -1000, 290, -1000, -1000, -67, -1000, -36, -67,
	290, -1000, 1261, 290, -1000, 290, -1000, 290, -1000, -1000,
	963, 445, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 105,
	37, -1000, 1207, -1000, -67, -1000, 99, 28, 28, -1000,
	-1000, -1000, -1000, -1000, 278, -1000, -1000, -1000, -1000, -1000,
	-1000, 268, 301, 393, 7, 102, -1000, 473, -67, -1000,
	-1000, -1000, -1000, 1120, -1000, -1000, -1000, 466, -1000, 290,
	453, -67, -1000, 257, -1000, -1000, -1000, -1000, -1000, -1000,
	384, -1000, 449, -1000, 1207, 653, 409, -1000, 357, 465,
	290, -1000, 1207, 245, -1000, -1000, -1000, 1145, -1000, -1000,
	-62, -1000, -1000, -1000, -1000, 28, -1000, -1000, -1000, -1000,
	-1000, 7, 1207, -1000, 397, -1000, 61, -1000, 89, 448,
	382, -1000, -1000, -1000, -1000, -1000, 245, 296, 304, -1000,
	464, -1000, 28, -1000, -67, -67, 304, -1000, -1000, -1000,
	69, 442, -1000, -1000, 296, -1000, 441, 376, 375, 290,
	-1000, -1000, -67, -67, -1000, 163, -1000, 440, -1000, -1000,
	-1000, -1000, -1000, -1000,
}

var ASNPgo = [...]int{
	0, 792, 484, 791, 790, 789, 787, 336, 786, 785,
	784, 782, 778, 772, 765, 221, 231, 764, 763, 200,
	762, 230, 83, 760, 759, 35, 34, 17, 757, 39,
	108, 144, 68, 100, 755, 754, 749, 748, 747, 746,
	744, 742, 155, 21, 31, 740, 739, 9, 12, 37,
	738, 737, 735, 729, 727, 726, 725, 724, 722, 721,
	720, 719, 712, 711, 710, 709, 708, 707, 706, 705,
	704, 703, 702, 701, 700, 699, 698, 696, 695, 694,
	693, 692, 691, 690, 689, 686, 685, 684, 682, 32,
	681, 680, 679, 678, 677, 676, 675, 674, 673, 672,
	671, 669, 668, 667, 666, 664, 660, 654, 646, 645,
	644, 642, 641, 639, 637, 636, 631, 26, 630, 25,
	20, 629, 19, 628, 626, 624, 622, 621, 620, 619,
	617, 611, 33, 211, 609, 608, 607, 606, 604, 603,
	602, 601, 594, 593, 592, 23, 18, 15, 591, 589,
	588, 587, 36, 8, 585, 584, 583, 16, 7, 582,
	581, 580, 577, 576, 575, 574, 573, 13, 572, 29,
	24, 571, 568, 22, 562, 561, 28, 560, 559, 558,
	557, 555, 554, 553, 43, 551, 550, 549, 546, 545,
	544, 543, 542, 541, 540, 538, 10, 532, 531, 530,
	529, 2, 526, 525, 524, 523, 518, 512, 510, 509,
	508, 11, 507, 506, 504, 498, 6, 4, 5, 496,
	38, 495, 186, 0, 14, 493, 491, 490, 483, 482,
}

var ASNR1 = [...]int{
	0, 226, 1, 1, 2, 133, 133, 133, 148, 149,
	3, 12, 12, 4, 4, 5, 6, 6, 7, 7,
	7, 8, 9, 10, 11, 11, 11, 11, 13, 13,
	14, 14, 14, 16, 16, 16, 16, 20, 20, 21,
	21, 22, 22, 134, 135, 135, 15, 15, 17, 17,
	18, 18, 19, 23, 24, 24, 24, 25, 25, 25,
	26, 26, 27, 27, 27, 27, 28, 29, 29, 30,
	31, 31, 31, 32, 32, 32, 32, 32, 32, 32,
	32, 34, 35, 36, 37, 38, 39, 40, 41, 41,
	41, 41, 41, 41, 42, 42, 42, 43, 43, 43,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 57, 57, 57,
	57, 57, 136, 136, 136, 136, 141, 142, 143, 144,
	144, 89, 89, 147, 147, 147, 147, 147, 147, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 138, 139, 145, 145, 145,
	145, 150, 150, 154, 151, 152, 152, 155, 153, 146,
	156, 156, 157, 140, 58, 58, 158, 160, 160, 162,
	164, 164, 164, 165, 166, 167, 167, 168, 168, 170,
	170, 173, 173, 176, 176, 176, 177, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 180,
	181, 192, 192, 182, 193, 193, 194, 194, 195, 195,
	196, 196, 183, 184, 185, 227, 186, 197, 198, 198,
	199, 201, 201, 202, 203, 204, 204, 205, 205, 205,
	205, 200, 187, 188, 189, 190, 191, 179, 179, 179,
	179, 206, 174, 175, 175, 171, 172, 172, 169, 163,
	163, 163, 207, 210, 210, 210, 211, 211, 211, 211,
	211, 212, 212, 208, 208, 213, 214, 215, 215, 216,
	216, 217, 217, 218, 218, 209, 209, 209, 161, 161,
	219, 219, 219, 159, 159, 159, 159, 159, 159, 159,
	159, 220, 228, 59, 221, 60, 61, 62, 63, 64,
	65, 66, 68, 67, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 93, 93, 93, 93, 93, 116, 116,
	117, 94, 95, 95, 114, 114, 114, 114, 118, 121,
	121, 122, 122, 122, 122, 119, 123, 124, 125, 126,
	120, 127, 128, 115, 96, 97, 98, 99, 100, 101,
	101, 103, 104, 229, 104, 105, 105, 129, 129, 130,
	130, 130, 102, 106, 107, 131, 131, 132, 132, 132,
	108, 109, 110, 111, 112, 113, 91, 92, 45, 44,
	46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
	33, 33, 33, 33, 86, 87, 88, 89, 225, 225,
	223, 223, 224, 224, 224, 224, 222,
}

var ASNR2 = [...]int{
	0, 1, 1, 2, 10, 1, 2, 0, 3, 0,
	2, 2, 0, 1, 0, 3, 1, 2, 1, 1,
	1, 1, 1, 4, 2, 2, 2, 0, 2, 0,
	3, 3, 0, 3, 3, 2, 0, 1, 0, 1,
	3, 1, 1, 1, 1, 3, 3, 0, 1, 0,
	1, 2, 3, 2, 1, 1, 0, 3, 4, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 4,
	1, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 4, 3, 4, 3, 4, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 2, 1,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 3, 2, 1, 1, 3, 2, 1,
	1, 3, 1, 3, 2, 1, 4, 1, 1, 1,
	1, 3, 5, 1, 1, 1, 2, 1, 3, 1,
	3, 1, 2, 1, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 0, 4, 1, 2, 1, 1, 1, 2,
	1, 1, 2, 2, 1, 0, 7, 1, 1, 1,
	3, 1, 3, 2, 2, 1, 0, 1, 1, 1,
	0, 5, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 2, 1,
	1, 1, 5, 1, 3, 0, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 6, 1, 3, 2,
	4, 1, 3, 2, 0, 2, 3, 5, 2, 0,
	1, 1, 3, 4, 4, 4, 4, 4, 4, 4,
	4, 2, 0, 8, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 2, 2, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 1, 9, 1, 1, 1, 1,
	5, 1, 1, 1, 3, 1, 1, 1, 0, 1,
	1, 1, 1, 0, 4, 1, 1, 1, 1, 1,
	1, 1, 0, 0, 3, 1, 2, 1, 1, 1,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1, 1, 1, 1, 3, 2, 0, 0, 1, 1,
	1, 1, 1, 2, 1, 2, 3,
}

var ASNChk = [...]int{
	-1000, -226, -1, -2, -3, -223, 120, 121, -2, 48,
	-4, -5, 4, -12, 120, -6, -7, -8, -9, -10,
	121, -224, 123, 12, 124, -11, 67, 56, 32, 72,
	5, -7, 17, 123, 124, -13, 58, 104, 104, 104,
	-224, -222, 11, 68, 18, 33, 11, -14, -15, -16,
	69, 57, 19, -133, -148, 52, -16, -15, -17, -18,
	-19, -21, -22, -134, -135, -223, -20, 30, 26, -21,
	53, -133, 120, -31, -32, -34, -35, -36, -37, -38,
	-39, -40, -41, -223, -50, -51, -52, -53, -54, -55,
	-31, 26, -19, 10, 61, 4, 26, 26, -149, -32,
	-222, -42, -47, -56, -57, -58, -59, -60, -61, -62,
	-63, -64, -65, -66, -68, -67, -69, -70, -71, -72,
	-73, -74, -75, -76, -77, -78, -79, -80, -81, -82,
	-83, -84, -85, -136, -137, -138, -139, -140, -159, 34,
	-141, -223, -142, -143, 115, 64, 81, 117, 92, 75,
	105, 63, 103, 113, 116, 35, 65, 62, 114, 83,
	-145, 98, 97, -144, -150, -151, -152, -153, -154, -155,
	-22, -23, -223, 5, -42, -45, -46, -222, -158, 17,
	-222, 101, 15, 14, 15, -158, -184, 100, -158, -184,
	-89, 4, -89, -89, -24, -25, -33, 4, -86, -223,
	-224, -87, -88, -43, -44, -90, -91, -92, -93, -94,
	-95, -96, -97, -98, -99, -100, -101, -102, -103, -25,
	-104, -105, -106, -107, -108, -109, -110, -111, -112, -113,
	126, 127, 4, 44, -225, -114, -115, -223, -224, 80,
	-129, -130, 108, 60, 128, -118, -119, -120, 90, 78,
	79, -160, -162, -163, -164, -207, -208, -209, -165, 43,
	-213, -214, 44, 51, -167, -49, 4, -168, 30, -170,
	-171, -173, -174, -176, -177, -178, -179, 17, -180, -181,
	-182, -183, -184, -185, -186, -187, -188, -189, -190, -191,
	-48, -152, -206, -153, -43, -192, -193, 61, -42, 118,
	88, 99, -223, -145, 70, -194, 77, -48, -49, -228,
	-223, -42, -146, -156, -157, -223, 85, 85, -158, 85,
	85, -147, -89, -42, -43, -44, -47, -48, -49, 4,
	-26, -33, 5, -27, -223, -224, -28, -29, -30, 15,
	-89, -229, -33, 5, -116, -121, -123, -127, -131, -223,
	-224, -117, -122, -132, -29, -30, 128, -119, -120, 4,
	-43, 11, -161, 24, 10, 37, -42, 37, -152, -223,
	-169, 55, -172, 22, 110, -175, 25, 74, -169, -167,
	-42, 15, -158, 42, -43, -223, 15, 14, 34, 15,
	-42, -220, -223, -42, -220, -42, -220, -42, -220, 5,
	10, -223, -224, 128, -119, -120, 5, -27, -33, -26,
	17, -223, 44, 5, 10, 5, 10, 10, 10, 5,
	-132, -29, -30, -33, -223, -224, -43, 18, -219, -224,
	-33, -42, -223, 27, 4, 51, -43, 5, 15, -176,
	-170, -173, 18, 15, -197, -158, -146, 101, -157, -42,
	-147, 15, 4, -29, -33, -43, -117, -223, -122, -33,
	-124, -224, -128, -224, 11, 10, -210, -211, -212, -152,
	-42, -47, 37, 4, -223, -195, -196, 14, -43, 76,
	-227, 4, 5, -223, 18, 10, 5, -43, -166, -167,
	5, 10, 11, -43, -215, -216, 23, -196, 118, -221,
	-125, -224, -211, -43, -48, 5, 10, -217, 15, -223,
	42, 5, 10, -216, 15, -218, 15, -198, -199, -200,
	4, -126, -224, -223, -217, -218, -201, 27, -202, -223,
	5, 5, 10, 10, -203, -204, -158, -201, -201, -205,
	91, 28, 87, 5,
}

var ASNDef = [...]int{
	0, -2, 1, 2, 0, 14, 450, 451, 3, 12,
	10, 13, 0, 27, 0, 0, 16, 18, 19, 20,
	21, 22, 452, 0, 454, 29, 0, 0, 0, 11,
	15, 17, 0, 453, 455, 0, 0, 24, 25, 26,
	0, 0, 0, 28, 23, -2, 0, 7, 36, 47,
	49, 0, 456, 0, 5, 0, 72, 72, 0, 48,
	50, 0, 39, 41, 42, 43, 0, 0, 35, 37,
	4, 6, 9, 30, 70, 73, 74, 75, 76, 77,
	78, 79, 80, 315, 88, 89, 90, 91, 92, 93,
	31, 46, 51, 0, 0, 0, 33, 34, 8, 71,
	315, 0, 0, 94, 95, 96, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 185, 0,
	-2, -2, 134, 135, 149, 150, 151, 152, 153, 154,
	155, 156, 157, 158, 159, 160, 161, 162, 163, 164,
	0, 0, 0, 447, 167, 168, 169, 170, 171, 175,
	40, 52, 56, 45, 81, 83, 85, 398, 184, -2,
	432, 312, 0, 315, 0, 0, 0, 0, 0, 0,
	137, -2, 174, 178, 53, 54, 55, 446, 440, 441,
	442, 443, 447, 82, 84, 97, 98, 99, 341, 342,
	343, 344, 345, 346, 347, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 358, 359, 360, 361, 362,
	363, -2, 446, 398, 371, 372, 373, 396, 399, 401,
	405, 406, 448, 449, 374, 375, 376, 377, 409, 410,
	411, 299, 187, 188, 189, 269, 270, 271, 190, 0,
	283, 284, -2, 0, 193, 285, 446, -2, 0, -2,
	0, 199, 0, -2, 0, 203, 204, -2, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	257, -2, 259, -2, -2, 315, 0, 0, 234, 0,
	398, 0, -2, 0, 221, 224, 227, 86, 87, 0,
	-2, 165, 166, 179, 180, 182, 315, 315, 233, 315,
	315, 0, 0, 143, 144, 145, 146, 147, 148, -2,
	446, 65, 59, 60, 66, 67, 62, 63, 64, 0,
	445, 0, -2, 59, 0, 0, 0, 0, 446, -2,
	-2, 368, 379, 415, 63, 64, 381, 382, 383, 0,
	367, 398, 0, -2, 0, 0, 295, 398, 0, -2,
	196, -2, -2, 266, 267, -2, 263, 264, 202, 0,
	220, 0, 232, 0, 252, 253, 0, 225, 0, 0,
	303, 307, -2, 304, 308, 305, 309, 306, 310, 141,
	315, -2, -2, -2, -2, -2, 57, 61, 65, 0,
	446, 444, 398, 365, 0, 378, 446, 0, 0, 414,
	416, 417, 418, 68, 441, 386, 394, 186, 298, 300,
	301, 0, -2, 191, -2, 0, 296, 0, 0, 268,
	-2, 200, 205, 398, 235, 237, 166, 0, 181, 311,
	0, 0, 58, 0, 68, 404, 369, 370, 380, 384,
	0, 387, 0, 392, 398, -2, 0, 273, 0, -2,
	-2, -2, 398, 0, -2, 223, 228, 398, 230, 231,
	0, 314, 142, -2, 69, 0, 390, 302, 192, 194,
	272, 315, 398, 297, 0, 287, 0, 229, 0, 0,
	0, 388, 274, 276, 277, 286, 0, 289, 294, 291,
	0, 313, 0, 288, 0, 0, 294, 236, 238, 239,
	0, 0, 389, 292, 290, 293, 0, 0, 241, 246,
	385, 240, 0, 0, 243, 250, 245, 0, 242, 244,
	247, 248, 249, 251,
}

var ASNTok1 = [...]int{
	1,
}

var ASNTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128,
}

var ASNTok3 = [...]int{
	0,
}

var ASNErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	ASNDebug        = 0
	ASNErrorVerbose = false
)

type ASNLexer interface {
	Lex(lval *ASNSymType) int
	Error(s string)
}

type ASNParser interface {
	Parse(ASNLexer) int
	Lookahead() int
}

type ASNParserImpl struct {
	lval  ASNSymType
	stack [ASNInitialStackSize]ASNSymType
	char  int
}

func (p *ASNParserImpl) Lookahead() int {
	return p.char
}

func ASNNewParser() ASNParser {
	return &ASNParserImpl{}
}

const ASNFlag = -1000

func ASNTokname(c int) string {
	if c >= 1 && c-1 < len(ASNToknames) {
		if ASNToknames[c-1] != "" {
			return ASNToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func ASNStatname(s int) string {
	if s >= 0 && s < len(ASNStatenames) {
		if ASNStatenames[s] != "" {
			return ASNStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func ASNErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !ASNErrorVerbose {
		return "syntax error"
	}

	for _, e := range ASNErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + ASNTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := ASNPact[state]
	for tok := TOKSTART; tok-1 < len(ASNToknames); tok++ {
		if n := base + tok; n >= 0 && n < ASNLast && ASNChk[ASNAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if ASNDef[state] == -2 {
		i := 0
		for ASNExca[i] != -1 || ASNExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; ASNExca[i] >= 0; i += 2 {
			tok := ASNExca[i]
			if tok < TOKSTART || ASNExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if ASNExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += ASNTokname(tok)
	}
	return res
}

func ASNlex1(lex ASNLexer, lval *ASNSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = ASNTok1[0]
		goto out
	}
	if char < len(ASNTok1) {
		token = ASNTok1[char]
		goto out
	}
	if char >= ASNPrivate {
		if char < ASNPrivate+len(ASNTok2) {
			token = ASNTok2[char-ASNPrivate]
			goto out
		}
	}
	for i := 0; i < len(ASNTok3); i += 2 {
		token = ASNTok3[i+0]
		if token == char {
			token = ASNTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = ASNTok2[1] /* unknown char */
	}
	if ASNDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", ASNTokname(token), uint(char))
	}
	return char, token
}

func ASNParse(ASNlex ASNLexer) int {
	return ASNNewParser().Parse(ASNlex)
}

func (ASNrcvr *ASNParserImpl) Parse(ASNlex ASNLexer) int {
	var ASNn int
	var ASNVAL ASNSymType
	var ASNDollar []ASNSymType
	_ = ASNDollar // silence set and not used
	ASNS := ASNrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	ASNstate := 0
	ASNrcvr.char = -1
	ASNtoken := -1 // ASNrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		ASNstate = -1
		ASNrcvr.char = -1
		ASNtoken = -1
	}()
	ASNp := -1
	goto ASNstack

ret0:
	return 0

ret1:
	return 1

ASNstack:
	/* put a state and value onto the stack */
	if ASNDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", ASNTokname(ASNtoken), ASNStatname(ASNstate))
	}

	ASNp++
	if ASNp >= len(ASNS) {
		nyys := make([]ASNSymType, len(ASNS)*2)
		copy(nyys, ASNS)
		ASNS = nyys
	}
	ASNS[ASNp] = ASNVAL
	ASNS[ASNp].yys = ASNstate

ASNnewstate:
	ASNn = ASNPact[ASNstate]
	if ASNn <= ASNFlag {
		goto ASNdefault /* simple state */
	}
	if ASNrcvr.char < 0 {
		ASNrcvr.char, ASNtoken = ASNlex1(ASNlex, &ASNrcvr.lval)
	}
	ASNn += ASNtoken
	if ASNn < 0 || ASNn >= ASNLast {
		goto ASNdefault
	}
	ASNn = ASNAct[ASNn]
	if ASNChk[ASNn] == ASNtoken { /* valid shift */
		ASNrcvr.char = -1
		ASNtoken = -1
		ASNVAL = ASNrcvr.lval
		ASNstate = ASNn
		if Errflag > 0 {
			Errflag--
		}
		goto ASNstack
	}

ASNdefault:
	/* default state action */
	ASNn = ASNDef[ASNstate]
	if ASNn == -2 {
		if ASNrcvr.char < 0 {
			ASNrcvr.char, ASNtoken = ASNlex1(ASNlex, &ASNrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if ASNExca[xi+0] == -1 && ASNExca[xi+1] == ASNstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			ASNn = ASNExca[xi+0]
			if ASNn < 0 || ASNn == ASNtoken {
				break
			}
		}
		ASNn = ASNExca[xi+1]
		if ASNn < 0 {
			goto ret0
		}
	}
	if ASNn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			ASNlex.Error(ASNErrorMessage(ASNstate, ASNtoken))
			Nerrs++
			if ASNDebug >= 1 {
				__yyfmt__.Printf("%s", ASNStatname(ASNstate))
				__yyfmt__.Printf(" saw %s\n", ASNTokname(ASNtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for ASNp >= 0 {
				ASNn = ASNPact[ASNS[ASNp].yys] + ASNErrCode
				if ASNn >= 0 && ASNn < ASNLast {
					ASNstate = ASNAct[ASNn] /* simulate a shift of "error" */
					if ASNChk[ASNstate] == ASNErrCode {
						goto ASNstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if ASNDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", ASNS[ASNp].yys)
				}
				ASNp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if ASNDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", ASNTokname(ASNtoken))
			}
			if ASNtoken == ASNEofCode {
				goto ret1
			}
			ASNrcvr.char = -1
			ASNtoken = -1
			goto ASNnewstate /* try again in the same state */
		}
	}

	/* reduction by production ASNn */
	if ASNDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", ASNn, ASNStatname(ASNstate))
	}

	ASNnt := ASNn
	ASNpt := ASNp
	_ = ASNpt // guard against "declared and not used"

	ASNp -= ASNR2[ASNn]
	// ASNp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if ASNp+1 >= len(ASNS) {
		nyys := make([]ASNSymType, len(ASNS)*2)
		copy(nyys, ASNS)
		ASNS = nyys
	}
	ASNVAL = ASNS[ASNp+1]

	/* consult goto table to find next state */
	ASNn = ASNR1[ASNn]
	ASNg := ASNPgo[ASNn]
	ASNj := ASNg + ASNS[ASNp].yys + 1

	if ASNj >= ASNLast {
		ASNstate = ASNAct[ASNg]
	} else {
		ASNstate = ASNAct[ASNj]
		if ASNChk[ASNstate] != -ASNn {
			ASNstate = ASNAct[ASNg]
		}
	}
	// dummy call; replaced with literal code
	switch ASNnt {

	case 1:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:419
		{
			SetResult(ASNlex, ASNDollar[1].TypeValue)
			Print("Done")
			Print("--------------------------------------------------------------------------------")
			Print(JSON(&ASNDollar[1].TypeValue))
			Print("--------------------------------------------------------------------------------")
		}
	case 2:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:428
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 3:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:433
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 4:
		ASNDollar = ASNS[ASNpt-10 : ASNpt+1]
//line asn.y:463
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"encoding":   ASNDollar[3].TypeValue,
				"tag":        ASNDollar[4].TypeValue,
				"body":       ASNDollar[8].TypeValue,
			}
		}
	case 5:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:479
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 6:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:484
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 7:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:488
		{
			ASNVAL.TypeValue = nil
		}
	case 8:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:500
		{
			ASNVAL.TypeValue = MAP{
				"encodingReference":    ASNDollar[2].TypeString,
				"encodingInstructions": ASNDollar[3].TypeValue,
			}
		}
	case 9:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:515
		{
			ASNVAL.TypeValue = nil
		}
	case 10:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:528
		{
			ASNVAL.TypeValue = MAP{
				"reference":             ASNDollar[1].TypeValue,
				"definitiveIdentifiers": ASNDollar[2].TypeValue,
			}
		}
	case 11:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:542
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 12:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:545
		{
			ASNVAL.TypeValue = ""
		}
	case 13:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:557
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 14:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:560
		{
			ASNVAL.TypeValue = nil
		}
	case 15:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:570
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 16:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:581
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 17:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:586
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 18:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:599
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 19:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:602
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 20:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:605
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 21:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:614
		{
			ASNVAL.TypeValue = MAP{
				"name": ASNDollar[1].TypeString,
			}
		}
	case 22:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:625
		{
			ASNVAL.TypeValue = MAP{
				"number": ASNDollar[1].TypeValue,
			}
		}
	case 23:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:636
		{
			ASNVAL.TypeValue = MAP{
				"name":   ASNDollar[1].TypeString,
				"number": ASNDollar[3].TypeValue,
			}
		}
	case 24:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:652
		{
			ASNVAL.TypeValue = "Implicit"
		}
	case 25:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:655
		{
			ASNVAL.TypeValue = "Explicit"
		}
	case 26:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:658
		{
			ASNVAL.TypeValue = "Automatic"
		}
	case 27:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:661
		{
			ASNVAL.TypeValue = "Explicit"
		}
	case 28:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:672
		{
			ASNVAL.TypeValue = true
		}
	case 29:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:675
		{
			ASNVAL.TypeValue = false
		}
	case 30:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:688
		{
			ASNVAL.TypeValue = MAP{
				"imports":     ASNDollar[1].TypeValue,
				"exports":     ASNDollar[2].TypeValue,
				"assignments": ASNDollar[3].TypeValue,
			}
		}
	case 31:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:697
		{
			ASNVAL.TypeValue = MAP{
				"imports":     ASNDollar[2].TypeValue,
				"exports":     ASNDollar[1].TypeValue,
				"assignments": ASNDollar[3].TypeValue,
			}
		}
	case 32:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:704
		{
			ASNVAL.TypeValue = nil
		}
	case 33:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:716
		{
			ASNVAL.TypeValue = MAP{
				"all":     "false",
				"symbols": ASNDollar[2].TypeValue,
			}
		}
	case 34:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:722
		{
			ASNVAL.TypeValue = MAP{
				"all": "true",
			}
		}
	case 35:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:727
		{
			ASNVAL.TypeValue = MAP{
				"all": "false",
			}
		}
	case 36:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:732
		{
			ASNVAL.TypeValue = MAP{
				"all": "true",
			}
		}
	case 37:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:745
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 38:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:748
		{
			ASNVAL.TypeValue = nil
		}
	case 39:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:759
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 40:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:764
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 41:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:776
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
			}
		}
	case 42:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:781
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedReference": ASNDollar[1].TypeValue,
			}
		}
	case 43:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:800
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 44:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:810
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 45:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:813
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 46:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:824
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 47:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:827
		{
			ASNVAL.TypeValue = nil
		}
	case 48:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:838
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 49:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:841
		{
			ASNVAL.TypeValue = nil
		}
	case 50:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:852
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 51:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:857
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 52:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:868
		{
			ASNVAL.TypeValue = MAP{
				"symbols":   ASNDollar[1].TypeValue,
				"reference": ASNDollar[3].TypeValue,
			}
		}
	case 53:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:881
		{
			ASNVAL.TypeValue = MAP{
				"name":        ASNDollar[1].TypeValue,
				"identifiers": ASNDollar[2].TypeValue,
			}
		}
	case 54:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:896
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 55:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:899
		{
			ASNVAL.TypeValue = nil
		}
	case 56:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:902
		{
			ASNVAL.TypeValue = nil
		}
	case 57:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:913
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 58:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:916
		{
			ASNVAL.TypeValue = ASNDollar[3].TypeValue
		}
	case 59:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:919
		{
			ASNVAL.TypeValue = nil
		}
	case 60:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:930
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 61:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:935
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 62:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:949
		{
			ASNVAL.TypeValue = MAP{
				"name": ASNDollar[1].TypeValue,
			}
		}
	case 63:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:954
		{
			ASNVAL.TypeValue = MAP{
				"number": ASNDollar[1].TypeValue,
			}
		}
	case 64:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:959
		{
			ASNVAL.TypeValue = MAP{
				"nameAndNumber": ASNDollar[1].TypeValue,
			}
		}
	case 65:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:964
		{
			ASNVAL.TypeValue = MAP{
				"definedValue": ASNDollar[1].TypeValue,
			}
		}
	case 66:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:976
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 67:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:987
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 68:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:990
		{
			ASNVAL.TypeValue = MAP{
				"definedValue": ASNDollar[1].TypeValue,
			}
		}
	case 69:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1002
		{
			ASNVAL.TypeValue = MAP{
				"name":   ASNDollar[1].TypeValue,
				"number": ASNDollar[3].TypeValue,
			}
		}
	case 70:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1016
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 71:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1021
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 72:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1025
		{
			ASNVAL.TypeValue = nil
		}
	case 73:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1042
		{
			ASNVAL.TypeValue = MAP{
				"typeAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 74:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1047
		{
			ASNVAL.TypeValue = MAP{
				"valueAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 75:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1052
		{
			ASNVAL.TypeValue = MAP{
				"xmlValueAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 76:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1057
		{
			ASNVAL.TypeValue = MAP{
				"valueSetAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 77:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1062
		{
			ASNVAL.TypeValue = MAP{
				"objectClassAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 78:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1067
		{
			ASNVAL.TypeValue = MAP{
				"objectAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 79:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1072
		{
			ASNVAL.TypeValue = MAP{
				"objectSetAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 80:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1077
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 81:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1091
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"type":      ASNDollar[2].TypeValue,
			}
		}
	case 82:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1107
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"type":      ASNDollar[2].TypeValue,
				"value":     ASNDollar[4].TypeValue,
			}
		}
	case 83:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1123
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"value":     ASNDollar[3].TypeValue,
			}
		}
	case 84:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1139
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"type":      ASNDollar[2].TypeValue,
				"valueSet":  ASNDollar[4].TypeValue,
			}
		}
	case 85:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1155
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"class":     ASNDollar[3].TypeValue,
			}
		}
	case 86:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1171
		{
			ASNVAL.TypeValue = MAP{
				"reference":    ASNDollar[1].TypeValue,
				"definedClass": ASNDollar[2].TypeValue,
				"object":       ASNDollar[4].TypeValue,
			}
		}
	case 87:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1188
		{
			ASNVAL.TypeValue = MAP{
				"reference":    ASNDollar[1].TypeValue,
				"definedClass": ASNDollar[2].TypeValue,
				"objectSet":    ASNDollar[4].TypeValue,
			}
		}
	case 88:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1207
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 89:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1210
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 90:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1213
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 91:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1216
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 92:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1219
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 93:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1222
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 94:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1234
		{
			ASNVAL.TypeValue = MAP{
				"type":       "BUILTIN_TYPE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 95:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1240
		{
			ASNVAL.TypeValue = MAP{
				"type":       "REFERENCED_TYPE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 96:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1246
		{
			ASNVAL.TypeValue = MAP{
				"type":       "CONSTRAINED_TYPE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 97:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1261
		{
			ASNVAL.TypeValue = MAP{
				"type":       "BUILTIN_VALUE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 98:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1267
		{
			ASNVAL.TypeValue = MAP{
				"type":       "REFERENCED_VALUE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 99:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1273
		{
			ASNVAL.TypeValue = MAP{
				"type":       "OBJECT_CLASS_FIELD_VALUE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 100:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1311
		{
			ASNVAL.TypeValue = MAP{
				"bitStringType": ASNDollar[1].TypeValue,
			}
		}
	case 101:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1316
		{
			ASNVAL.TypeValue = MAP{
				"booleanType": ASNDollar[1].TypeValue,
			}
		}
	case 102:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1321
		{
			ASNVAL.TypeValue = MAP{
				"characterStringType": ASNDollar[1].TypeValue,
			}
		}
	case 103:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1326
		{
			ASNVAL.TypeValue = MAP{
				"choiceType": ASNDollar[1].TypeValue,
			}
		}
	case 104:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1331
		{
			ASNVAL.TypeValue = MAP{
				"dateType": ASNDollar[1].TypeValue,
			}
		}
	case 105:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1336
		{
			ASNVAL.TypeValue = MAP{
				"dataTimeType": ASNDollar[1].TypeValue,
			}
		}
	case 106:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1341
		{
			ASNVAL.TypeValue = MAP{
				"durationType": ASNDollar[1].TypeValue,
			}
		}
	case 107:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1346
		{
			ASNVAL.TypeValue = MAP{
				"embeddedPDVType": ASNDollar[1].TypeValue,
			}
		}
	case 108:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1351
		{
			ASNVAL.TypeValue = MAP{
				"enumeratedType": ASNDollar[1].TypeValue,
			}
		}
	case 109:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1356
		{
			ASNVAL.TypeValue = MAP{
				"externalType": ASNDollar[1].TypeValue,
			}
		}
	case 110:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1361
		{
			ASNVAL.TypeValue = MAP{
				"instanceOfType": ASNDollar[1].TypeValue,
			}
		}
	case 111:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1366
		{
			ASNVAL.TypeValue = MAP{
				"integerType": ASNDollar[1].TypeValue,
			}
		}
	case 112:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1371
		{
			ASNVAL.TypeValue = MAP{
				"iriType": ASNDollar[1].TypeValue,
			}
		}
	case 113:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1376
		{
			ASNVAL.TypeValue = MAP{
				"nullType": ASNDollar[1].TypeValue,
			}
		}
	case 114:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1381
		{
			ASNVAL.TypeValue = MAP{
				"objectClassFieldType": ASNDollar[1].TypeValue,
			}
		}
	case 115:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1386
		{
			ASNVAL.TypeValue = MAP{
				"objectIdentifierType": ASNDollar[1].TypeValue,
			}
		}
	case 116:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1391
		{
			ASNVAL.TypeValue = MAP{
				"octetStringType": ASNDollar[1].TypeValue,
			}
		}
	case 117:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1396
		{
			ASNVAL.TypeValue = MAP{
				"realType": ASNDollar[1].TypeValue,
			}
		}
	case 118:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1401
		{
			ASNVAL.TypeValue = MAP{
				"relativeIRIType": ASNDollar[1].TypeValue,
			}
		}
	case 119:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1406
		{
			ASNVAL.TypeValue = MAP{
				"relativeOIDType": ASNDollar[1].TypeValue,
			}
		}
	case 120:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1411
		{
			ASNVAL.TypeValue = MAP{
				"sequenceType": ASNDollar[1].TypeValue,
			}
		}
	case 121:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1416
		{
			ASNVAL.TypeValue = MAP{
				"sequenceOfType": ASNDollar[1].TypeValue,
			}
		}
	case 122:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1421
		{
			ASNVAL.TypeValue = MAP{
				"setType": ASNDollar[1].TypeValue,
			}
		}
	case 123:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1426
		{
			ASNVAL.TypeValue = MAP{
				"setOfType": ASNDollar[1].TypeValue,
			}
		}
	case 124:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1431
		{
			ASNVAL.TypeValue = MAP{
				"prefixedType": ASNDollar[1].TypeValue,
			}
		}
	case 125:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1436
		{
			ASNVAL.TypeValue = MAP{
				"timeType": ASNDollar[1].TypeValue,
			}
		}
	case 126:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1441
		{
			ASNVAL.TypeValue = MAP{
				"timeOfDayType": ASNDollar[1].TypeValue,
			}
		}
	case 127:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1457
		{
			ASNVAL.TypeValue = MAP{
				"definedType": ASNDollar[1].TypeValue,
			}
		}
	case 128:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1462
		{
			ASNVAL.TypeValue = MAP{
				"usefulType": ASNDollar[1].TypeValue,
			}
		}
	case 129:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1467
		{
			ASNVAL.TypeValue = MAP{
				"selectionType": ASNDollar[1].TypeValue,
			}
		}
	case 130:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1472
		{
			ASNVAL.TypeValue = MAP{
				"typeFromObject": ASNDollar[1].TypeValue,
			}
		}
	case 131:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1477
		{
			ASNVAL.TypeValue = MAP{
				"valueSetFromObjects": ASNDollar[1].TypeValue,
			}
		}
	case 132:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1492
		{
			ASNVAL.TypeValue = MAP{
				"externalTypeReference": ASNDollar[1].TypeValue,
			}
		}
	case 133:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1497
		{
			ASNVAL.TypeValue = MAP{
				"typeReference": ASNDollar[1].TypeValue,
			}
		}
	case 134:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1502
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedType": ASNDollar[1].TypeValue,
			}
		}
	case 135:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1507
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedValueSetType": ASNDollar[1].TypeValue,
			}
		}
	case 136:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1521
		{
			ASNVAL.TypeValue = MAP{
				"moduleReference": ASNDollar[1].TypeValue,
				"typeReference":   ASNDollar[2].TypeToken,
			}
		}
	case 137:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1535
		{
			ASNVAL.TypeValue = MAP{
				"simpleDefinedType":   ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 138:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1549
		{
			ASNVAL.TypeValue = MAP{
				"simpleDefinedType":   ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 139:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1563
		{
			ASNVAL.TypeValue = MAP{
				"externalTypeReference": ASNDollar[1].TypeValue,
			}
		}
	case 140:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1568
		{
			ASNVAL.TypeValue = MAP{
				"typeReference": ASNDollar[1].TypeValue,
			}
		}
	case 141:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1579
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[2].TypeValue,
			}
		}
	case 142:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:1584
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[4].TypeValue)
		}
	case 143:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1600
		{
			ASNVAL.TypeValue = MAP{
				"type": ASNDollar[1].TypeValue,
			}
		}
	case 144:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1605
		{
			ASNVAL.TypeValue = MAP{
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 145:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1610
		{
			ASNVAL.TypeValue = MAP{
				"valueSet": ASNDollar[1].TypeValue,
			}
		}
	case 146:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1615
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectClass": ASNDollar[1].TypeValue,
			}
		}
	case 147:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1620
		{
			ASNVAL.TypeValue = MAP{
				"object": ASNDollar[1].TypeValue,
			}
		}
	case 148:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1625
		{
			ASNVAL.TypeValue = MAP{
				"objectSet": ASNDollar[1].TypeValue,
			}
		}
	case 149:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1653
		{
			ASNVAL.TypeValue = STRING(UTF8String)
		}
	case 150:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1656
		{
			ASNVAL.TypeValue = STRING(GraphicString)
		}
	case 151:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1659
		{
			ASNVAL.TypeValue = STRING(NumericString)
		}
	case 152:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1662
		{
			ASNVAL.TypeValue = STRING(VisibleString)
		}
	case 153:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1665
		{
			ASNVAL.TypeValue = STRING(PrintableString)
		}
	case 154:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1668
		{
			ASNVAL.TypeValue = STRING(ISO646String)
		}
	case 155:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1671
		{
			ASNVAL.TypeValue = STRING(TeletexString)
		}
	case 156:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1674
		{
			ASNVAL.TypeValue = STRING(GeneralString)
		}
	case 157:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1677
		{
			ASNVAL.TypeValue = STRING(T61String)
		}
	case 158:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1680
		{
			ASNVAL.TypeValue = STRING(UniversalString)
		}
	case 159:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1683
		{
			ASNVAL.TypeValue = STRING(VideotexString)
		}
	case 160:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1686
		{
			ASNVAL.TypeValue = STRING(BMPString)
		}
	case 161:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1689
		{
			ASNVAL.TypeValue = STRING(IA5String)
		}
	case 162:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1692
		{
			ASNVAL.TypeValue = STRING(GeneralizedTime)
		}
	case 163:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1695
		{
			ASNVAL.TypeValue = STRING(UTCTime)
		}
	case 164:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1698
		{
			ASNVAL.TypeValue = STRING(ObjectDescriptor)
		}
	case 165:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1708
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"type":       ASNDollar[3].TypeValue,
			}
		}
	case 166:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1721
		{
			ASNVAL.TypeValue = MAP{
				"referencedObjects": ASNDollar[1].TypeValue,
				"fieldName":         ASNDollar[2].TypeToken,
			}
		}
	case 167:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1734
		{
			ASNVAL.TypeValue = MAP{
				"definedObject": ASNDollar[1].TypeValue,
			}
		}
	case 168:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1739
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedObject": ASNDollar[1].TypeValue,
			}
		}
	case 169:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1744
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 170:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1749
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 171:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1761
		{
			ASNVAL.TypeValue = MAP{
				"externalObjectReference": ASNDollar[1].TypeValue,
			}
		}
	case 172:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1766
		{
			ASNVAL.TypeValue = MAP{
				"objectReference": ASNDollar[1].TypeValue,
			}
		}
	case 173:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1778
		{
			ASNVAL.TypeValue = MAP{
				"moduleReference": ASNDollar[1].TypeValue,
				"objectReference": ASNDollar[3].TypeValue,
			}
		}
	case 174:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1791
		{
			ASNVAL.TypeValue = MAP{
				"definedObject":       ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 175:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1804
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 176:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1807
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 177:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1817
		{
			ASNVAL.TypeValue = MAP{
				"moduleReference":    ASNDollar[1].TypeValue,
				"objectSetReference": ASNDollar[3].TypeValue,
			}
		}
	case 178:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1830
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet":    ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 179:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1843
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 180:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1854
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 181:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1859
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 182:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1874
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 183:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1884
		{
			ASNVAL.TypeValue = MAP{
				"referencedObjects": ASNDollar[1].TypeValue,
				"fieldname":         ASNDollar[3].TypeValue,
			}
		}
	case 184:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1898
		{
			ASNVAL.TypeValue = MAP{
				"type":       ASNDollar[1].TypeValue,
				"constraint": ASNDollar[2].TypeValue,
			}
		}
	case 185:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1904
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 186:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1914
		{
			ASNVAL.TypeValue = MAP{
				"constraintSpec": ASNDollar[2].TypeValue,
				"exceptionSpec":  ASNDollar[3].TypeValue,
			}
		}
	case 187:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1928
		{
			ASNVAL.TypeValue = MAP{
				"subtypeConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 188:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1933
		{
			ASNVAL.TypeValue = MAP{
				"generalConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 189:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1945
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 190:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1957
		{
			ASNVAL.TypeValue = MAP{
				"rootElementSetSpec": ASNDollar[1].TypeValue,
			}
		}
	case 191:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1962
		{
			ASNVAL.TypeValue = MAP{
				"rootElementSetSpec": ASNDollar[1].TypeValue,
			}
		}
	case 192:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:1967
		{
			ASNVAL.TypeValue = MAP{
				"rootElementSetSpec":       ASNDollar[1].TypeValue,
				"additionalElementSetSpec": ASNDollar[2].TypeToken,
			}
		}
	case 193:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1980
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 194:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1990
		{
			ASNVAL.TypeValue = nil
		}
	case 195:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2001
		{
			ASNVAL.TypeValue = MAP{
				"unions": ASNDollar[1].TypeValue,
			}
		}
	case 196:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2006
		{
			ASNVAL.TypeValue = MAP{
				"exclusions": ASNDollar[1].TypeString,
			}
		}
	case 197:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2019
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 198:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2022
		{
			ASNVAL.TypeValue = MAP{
				"unions":        ASNDollar[1].TypeValue,
				"intersections": ASNDollar[3].TypeValue,
			}
		}
	case 199:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2036
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 200:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2039
		{
			ASNVAL.TypeValue = MAP{
				"intersections":        ASNDollar[1].TypeValue,
				"intersectionElements": ASNDollar[2].TypeValue,
			}
		}
	case 201:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2052
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 202:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2055
		{
			ASNVAL.TypeValue = MAP{
				"elements":   ASNDollar[1].TypeValue,
				"exclusions": ASNDollar[2].TypeValue,
			}
		}
	case 203:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2070
		{
			ASNVAL.TypeValue = MAP{
				"subtypeElements": ASNDollar[1].TypeValue,
			}
		}
	case 204:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2075
		{
			ASNVAL.TypeValue = MAP{
				"objectSetElements": ASNDollar[1].TypeValue,
			}
		}
	case 205:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2080
		{
			ASNVAL.TypeValue = MAP{
				"elementSetSpec": ASNDollar[1].TypeToken,
			}
		}
	case 206:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2092
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 207:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2113
		{
			ASNVAL.TypeValue = MAP{
				"singleValue": ASNDollar[1].TypeValue,
			}
		}
	case 208:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2118
		{
			ASNVAL.TypeValue = MAP{
				"containedSubtype": ASNDollar[1].TypeValue,
			}
		}
	case 209:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2123
		{
			ASNVAL.TypeValue = MAP{
				"valueRange": ASNDollar[1].TypeValue,
			}
		}
	case 210:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2128
		{
			ASNVAL.TypeValue = MAP{
				"permittedAlphabet": ASNDollar[1].TypeValue,
			}
		}
	case 211:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2133
		{
			ASNVAL.TypeValue = MAP{
				"sizeConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 212:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2138
		{
			ASNVAL.TypeValue = MAP{
				"typeConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 213:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2143
		{
			ASNVAL.TypeValue = MAP{
				"innerTypeConstraints": ASNDollar[1].TypeValue,
			}
		}
	case 214:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2148
		{
			ASNVAL.TypeValue = MAP{
				"patternConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 215:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2153
		{
			ASNVAL.TypeValue = MAP{
				"propertySettings": ASNDollar[1].TypeValue,
			}
		}
	case 216:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2158
		{
			ASNVAL.TypeValue = MAP{
				"durationRange": ASNDollar[1].TypeValue,
			}
		}
	case 217:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2163
		{
			ASNVAL.TypeValue = MAP{
				"timePointRange": ASNDollar[1].TypeValue,
			}
		}
	case 218:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2168
		{
			ASNVAL.TypeValue = MAP{
				"recurrenceRange": ASNDollar[1].TypeValue,
			}
		}
	case 219:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2180
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 220:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2190
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 221:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2200
		{
			ASNVAL.TypeValue = "INCLUDES"
		}
	case 222:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2203
		{
			ASNVAL.TypeValue = "INCLUDES"
		}
	case 223:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2213
		{
			ASNVAL.TypeValue = MAP{
				"lowerEndpoint": ASNDollar[1].TypeValue,
				"upperEndpoint": ASNDollar[2].TypeToken,
			}
		}
	case 224:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2226
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 225:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2229
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 226:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2239
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 227:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2242
		{
			ASNVAL.TypeValue = "MIN"
		}
	case 228:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2252
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 229:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2255
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 230:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2265
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 231:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2268
		{
			ASNVAL.TypeValue = "MAX"
		}
	case 232:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2278
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 233:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2288
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 234:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2298
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 235:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2309
		{
			ASNVAL.TypeValue = ASNDollar[3].TypeValue
		}
	case 236:
		ASNDollar = ASNS[ASNpt-7 : ASNpt+1]
//line asn.y:2312
		{
			ASNVAL.TypeValue = ASNDollar[3].TypeValue
		}
	case 237:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2322
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 238:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2333
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 239:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2336
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 240:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2346
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 241:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2357
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 242:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2360
		{
			ASNVAL.TypeValue = MAP{
				"nameConstraint":  ASNDollar[1].TypeValue,
				"typeConstraints": ASNDollar[3].TypeValue,
			}
		}
	case 243:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2373
		{
			ASNVAL.TypeValue = MAP{
				"identifier":          ASNDollar[1].TypeValue,
				"componentConstraint": ASNDollar[2].TypeValue,
			}
		}
	case 244:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2386
		{
			ASNVAL.TypeValue = MAP{
				"valueConstraint":    ASNDollar[1].TypeValue,
				"presenceConstraint": ASNDollar[2].TypeValue,
			}
		}
	case 245:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2399
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 246:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2402
		{
			ASNVAL.TypeValue = nil
		}
	case 247:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2412
		{
			ASNVAL.TypeValue = "PRESENT"
		}
	case 248:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2415
		{
			ASNVAL.TypeValue = "ABSENT"
		}
	case 249:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2418
		{
			ASNVAL.TypeValue = "OPTIONAL"
		}
	case 250:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2421
		{
			ASNVAL.TypeValue = nil
		}
	case 251:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:2431
		{
			ASNVAL.TypeValue = ASNDollar[4].TypeValue
		}
	case 252:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2441
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 253:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2451
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 254:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2461
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 255:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2471
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 256:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2481
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 257:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2494
		{
			ASNVAL.TypeValue = MAP{
				"object": ASNDollar[1].TypeValue,
			}
		}
	case 258:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2499
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 259:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2504
		{
			ASNVAL.TypeValue = MAP{
				"objectSetFromObjects": ASNDollar[1].TypeValue,
			}
		}
	case 260:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2509
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 261:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2521
		{
			ASNVAL.TypeValue = MAP{
				"referencedObjects": ASNDollar[1].TypeValue,
				"fieldName":         ASNDollar[2].TypeToken,
			}
		}
	case 262:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2534
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 263:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2544
		{
			ASNVAL.TypeValue = "INTERSECTION"
		}
	case 264:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2547
		{
			ASNVAL.TypeValue = "INTERSECTION"
		}
	case 265:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2557
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 266:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2567
		{
			ASNVAL.TypeValue = "UNION"
		}
	case 267:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2570
		{
			ASNVAL.TypeValue = "UNION"
		}
	case 268:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2580
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 269:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2592
		{
			ASNVAL.TypeValue = MAP{
				"userDefinedConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 270:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2597
		{
			ASNVAL.TypeValue = MAP{
				"tableConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 271:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2602
		{
			ASNVAL.TypeValue = MAP{
				"contentsConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 272:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:2614
		{
			ASNVAL.TypeValue = ASNDollar[4].TypeValue
		}
	case 273:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2626
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 274:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2631
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 275:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2635
		{
			ASNVAL.TypeValue = nil
		}
	case 276:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2649
		{
			ASNVAL.TypeValue = MAP{
				"governor": ASNDollar[1].TypeValue,
				"value":    ASNDollar[3].TypeValue,
			}
		}
	case 277:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2655
		{
			ASNVAL.TypeValue = MAP{
				"governor": ASNDollar[1].TypeValue,
				"object":   ASNDollar[3].TypeValue,
			}
		}
	case 278:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2661
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 279:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2666
		{
			ASNVAL.TypeValue = MAP{
				"type": ASNDollar[1].TypeValue,
			}
		}
	case 280:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2671
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectClass": ASNDollar[1].TypeValue,
			}
		}
	case 281:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2683
		{
			ASNVAL.TypeValue = MAP{
				"type": ASNDollar[1].TypeValue,
			}
		}
	case 282:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2688
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectClass": ASNDollar[1].TypeValue,
			}
		}
	case 283:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2700
		{
			ASNVAL.TypeValue = MAP{
				"simpleTableConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 284:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2705
		{
			ASNVAL.TypeValue = MAP{
				"componentRelationConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 285:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2717
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 286:
		ASNDollar = ASNS[ASNpt-6 : ASNpt+1]
//line asn.y:2728
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet": ASNDollar[1].TypeToken,
				"atNotations":      ASNDollar[2].TypeValue,
			}
		}
	case 287:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2742
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 288:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2747
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 289:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2758
		{
			ASNVAL.TypeValue = MAP{
				"componentIdList": ASNDollar[2].TypeValue,
			}
		}
	case 290:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2763
		{
			ASNVAL.TypeValue = MAP{
				"componentIdList": ASNDollar[4].TypeValue,
			}
		}
	case 291:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2775
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 292:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2780
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 293:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2791
		{
			ASNVAL.TypeValue = nil
		}
	case 294:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2794
		{
			ASNVAL.TypeValue = nil
		}
	case 295:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2806
		{
			ASNVAL.TypeValue = MAP{
				"type": ASNDollar[2].TypeValue,
			}
		}
	case 296:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2811
		{
			ASNVAL.TypeValue = MAP{
				"value": ASNDollar[3].TypeValue,
			}
		}
	case 297:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:2816
		{
			ASNVAL.TypeValue = MAP{
				"type":  ASNDollar[2].TypeValue,
				"value": ASNDollar[5].TypeValue,
			}
		}
	case 298:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2829
		{

		}
	case 299:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2832
		{
			ASNVAL.TypeValue = nil
		}
	case 300:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2844
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 301:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2847
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 302:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2850
		{
			ASNVAL.TypeValue = MAP{
				"type":  ASNDollar[1].TypeValue,
				"value": ASNDollar[3].TypeValue,
			}
		}
	case 303:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2870
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence": "SET",
				"constraint":    ASNDollar[2].TypeValue,
				"type":          ASNDollar[4].TypeValue,
			}
		}
	case 304:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2877
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence":  "SET",
				"sizeConstraint": ASNDollar[2].TypeValue,
				"type":           ASNDollar[4].TypeValue,
			}
		}
	case 305:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2884
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence": "SEQUENCE",
				"constraint":    ASNDollar[2].TypeValue,
				"type":          ASNDollar[4].TypeValue,
			}
		}
	case 306:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2891
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence":  "SEQUENCE",
				"sizeConstraint": ASNDollar[2].TypeValue,
				"type":           ASNDollar[4].TypeValue,
			}
		}
	case 307:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2898
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence": "SET",
				"constraint":    ASNDollar[2].TypeValue,
				"namedType":     ASNDollar[4].TypeValue,
			}
		}
	case 308:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2905
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence":  "SET",
				"sizeConstraint": ASNDollar[2].TypeValue,
				"namedType":      ASNDollar[4].TypeValue,
			}
		}
	case 309:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2912
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence": "SEQUENCE",
				"constraint":    ASNDollar[2].TypeValue,
				"namedType":     ASNDollar[4].TypeValue,
			}
		}
	case 310:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2919
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence":  "SEQUENCE",
				"sizeConstraint": ASNDollar[2].TypeValue,
				"namedType":      ASNDollar[4].TypeValue,
			}
		}
	case 311:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2933
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"type":       ASNDollar[2].TypeValue,
			}
		}
	case 312:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2947
		{
			ASNVAL.TypeValue = LIST{
				// EMPTY NAMED BIT LIST ...
			}
		}
	case 313:
		ASNDollar = ASNS[ASNpt-8 : ASNpt+1]
//line asn.y:2952
		{
			ASNVAL.TypeValue = ASNDollar[4].TypeString
		}
	case 314:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2958
		{
			ASNVAL.TypeValue = nil
		}
	case 315:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2964
		{
			ASNVAL.TypeValue = nil
		}
	case 316:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2970
		{
			ASNVAL.TypeValue = nil
		}
	case 317:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2976
		{
			ASNVAL.TypeValue = nil
		}
	case 318:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2982
		{
			ASNVAL.TypeValue = nil
		}
	case 319:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2988
		{
			ASNVAL.TypeValue = nil
		}
	case 320:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2994
		{
			ASNVAL.TypeValue = nil
		}
	case 321:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3000
		{
			ASNVAL.TypeValue = nil
		}
	case 322:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3006
		{
			ASNVAL.TypeValue = nil
		}
	case 323:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3012
		{
			ASNVAL.TypeValue = nil
		}
	case 324:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3018
		{
			ASNVAL.TypeValue = nil
		}
	case 325:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3024
		{
			ASNVAL.TypeValue = nil
		}
	case 326:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3030
		{
			ASNVAL.TypeValue = nil
		}
	case 327:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3036
		{
			ASNVAL.TypeValue = nil
		}
	case 328:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3042
		{
			ASNVAL.TypeValue = nil
		}
	case 329:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3048
		{
			ASNVAL.TypeValue = nil
		}
	case 330:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3054
		{
			ASNVAL.TypeValue = nil
		}
	case 331:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3060
		{
			ASNVAL.TypeValue = nil
		}
	case 332:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3066
		{
			ASNVAL.TypeValue = nil
		}
	case 333:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3072
		{
			ASNVAL.TypeValue = nil
		}
	case 334:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3078
		{
			ASNVAL.TypeValue = nil
		}
	case 335:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3084
		{
			ASNVAL.TypeValue = nil
		}
	case 336:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3090
		{
			ASNVAL.TypeValue = nil
		}
	case 337:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3096
		{
			ASNVAL.TypeValue = nil
		}
	case 338:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3102
		{
			ASNVAL.TypeValue = nil
		}
	case 339:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3108
		{
			ASNVAL.TypeValue = nil
		}
	case 340:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3114
		{
			ASNVAL.TypeValue = nil
		}
	case 341:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3119
		{
			ASNVAL.TypeValue = MAP{
				"bitString": ASNDollar[1].TypeValue,
			}
		}
	case 342:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3124
		{
			ASNVAL.TypeValue = MAP{
				"boolean": ASNDollar[1].TypeValue,
			}
		}
	case 343:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3129
		{
			ASNVAL.TypeValue = MAP{
				"characterString": ASNDollar[1].TypeValue,
			}
		}
	case 344:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3134
		{
			ASNVAL.TypeValue = MAP{
				"choice": ASNDollar[1].TypeValue,
			}
		}
	case 345:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3139
		{
			ASNVAL.TypeValue = MAP{
				"embeddedPDV": ASNDollar[1].TypeValue,
			}
		}
	case 346:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3144
		{
			ASNVAL.TypeValue = MAP{
				"enumerated": ASNDollar[1].TypeValue,
			}
		}
	case 347:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3149
		{
			ASNVAL.TypeValue = MAP{
				"external": ASNDollar[1].TypeValue,
			}
		}
	case 348:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3154
		{
			ASNVAL.TypeValue = MAP{
				"instanceOf": ASNDollar[1].TypeValue,
			}
		}
	case 349:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3159
		{
			ASNVAL.TypeValue = MAP{
				"integer": ASNDollar[1].TypeValue,
			}
		}
	case 350:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3164
		{
			ASNVAL.TypeValue = MAP{
				"iri": ASNDollar[1].TypeValue,
			}
		}
	case 351:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3169
		{
			ASNVAL.TypeValue = MAP{
				"null": ASNDollar[1].TypeValue,
			}
		}
	case 352:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3174
		{
			ASNVAL.TypeValue = MAP{
				"objectIdentifier": ASNDollar[1].TypeValue,
			}
		}
	case 353:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3179
		{
			ASNVAL.TypeValue = MAP{
				"octetString": ASNDollar[1].TypeValue,
			}
		}
	case 354:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3184
		{
			ASNVAL.TypeValue = MAP{
				"real": ASNDollar[1].TypeValue,
			}
		}
	case 355:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3189
		{
			ASNVAL.TypeValue = MAP{
				"relativeIRI": ASNDollar[1].TypeValue,
			}
		}
	case 356:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3194
		{
			ASNVAL.TypeValue = MAP{
				"relativeOID": ASNDollar[1].TypeValue,
			}
		}
	case 357:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3199
		{
			ASNVAL.TypeValue = MAP{
				"sequence": ASNDollar[1].TypeValue,
			}
		}
	case 358:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3204
		{
			ASNVAL.TypeValue = MAP{
				"sequenceOf": ASNDollar[1].TypeValue,
			}
		}
	case 359:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3209
		{
			ASNVAL.TypeValue = MAP{
				"set": ASNDollar[1].TypeValue,
			}
		}
	case 360:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3214
		{
			ASNVAL.TypeValue = MAP{
				"setOf": ASNDollar[1].TypeValue,
			}
		}
	case 361:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3219
		{
			ASNVAL.TypeValue = MAP{
				"prefixed": ASNDollar[1].TypeValue,
			}
		}
	case 362:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3224
		{
			ASNVAL.TypeValue = MAP{
				"time": ASNDollar[1].TypeValue,
			}
		}
	case 363:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3231
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 364:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3234
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 365:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3237
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 366:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3240
		{
			ASNVAL.TypeValue = nil
		}
	case 367:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3243
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 368:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3248
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 369:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3253
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeToken)
		}
	case 370:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3259
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 371:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3264
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 372:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3269
		{
			ASNVAL.TypeValue = nil
		}
	case 373:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3272
		{

		}
	case 374:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3277
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 375:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3280
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 376:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3283
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 377:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3286
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 378:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3291
		{
			ASNVAL.TypeValue = nil
		}
	case 379:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3296
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 380:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3301
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeToken)
		}
	case 381:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3307
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 382:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3310
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 383:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3313
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 384:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3316
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 385:
		ASNDollar = ASNS[ASNpt-9 : ASNpt+1]
//line asn.y:3321
		{
			ASNVAL.TypeValue = MAP{
				"group": ASNDollar[2].TypeValue,
				"plane": ASNDollar[4].TypeValue,
				"row":   ASNDollar[6].TypeValue,
				"cell":  ASNDollar[8].TypeValue,
			}
		}
	case 386:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3331
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 387:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3336
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 388:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3341
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 389:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3346
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 390:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:3351
		{
			ASNVAL.TypeValue = MAP{
				"tableColumn": ASNDollar[2].TypeValue,
				"tableRow":    ASNDollar[4].TypeValue,
			}
		}
	case 391:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3359
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 392:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3364
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 393:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3369
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 394:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3374
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"value":      ASNDollar[2].TypeToken,
			}
		}
	case 395:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3382
		{
			ASNVAL.TypeValue = nil
		}
	case 396:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3387
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 397:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3392
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 398:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3397
		{
			ASNVAL.TypeValue = nil
		}
	case 399:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3402
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 400:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3405
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 401:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3410
		{
			ASNVAL.TypeValue = "NULL"
		}
	case 402:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3416
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 403:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3419
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 404:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3422
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 405:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3427
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 406:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3430
		{
			ASNVAL.TypeValue = nil
		}
	case 407:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3435
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 408:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3438
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 409:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3443
		{
			ASNVAL.TypeValue = nil
		}
	case 410:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3446
		{
			ASNVAL.TypeValue = nil
		}
	case 411:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3449
		{
			ASNVAL.TypeValue = nil
		}
	case 412:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3454
		{
			ASNVAL.TypeValue = nil
		}
	case 413:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3459
		{
			ASNVAL.TypeValue = nil
		}
	case 414:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3464
		{
			ASNVAL.TypeValue = nil
		}
	case 415:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3469
		{
			ASNVAL.TypeValue = nil
		}
	case 416:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3472
		{
			ASNVAL.TypeValue = nil
		}
	case 417:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3477
		{
			ASNVAL.TypeValue = nil
		}
	case 418:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3480
		{
			ASNVAL.TypeValue = nil
		}
	case 419:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3483
		{
			ASNVAL.TypeValue = nil
		}
	case 420:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3488
		{
			ASNVAL.TypeValue = nil
		}
	case 421:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3493
		{
			ASNVAL.TypeValue = nil
		}
	case 422:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3498
		{
			ASNVAL.TypeValue = nil
		}
	case 423:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3503
		{
			ASNVAL.TypeValue = nil
		}
	case 424:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3508
		{
			ASNVAL.TypeValue = nil
		}
	case 425:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3513
		{
			ASNVAL.TypeValue = nil
		}
	case 426:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3518
		{
			ASNVAL.TypeValue = nil
		}
	case 427:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3523
		{
			ASNVAL.TypeValue = nil
		}
	case 428:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3528
		{
			ASNVAL.TypeValue = nil
		}
	case 429:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3533
		{
			ASNVAL.TypeValue = nil
		}
	case 430:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3538
		{
			ASNVAL.TypeValue = nil
		}
	case 431:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3543
		{
			ASNVAL.TypeValue = nil
		}
	case 432:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3548
		{
			ASNVAL.TypeValue = nil
		}
	case 433:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3553
		{
			ASNVAL.TypeValue = nil
		}
	case 434:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3558
		{
			ASNVAL.TypeValue = nil
		}
	case 435:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3563
		{
			ASNVAL.TypeValue = nil
		}
	case 436:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3568
		{
			ASNVAL.TypeValue = nil
		}
	case 437:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3573
		{
			ASNVAL.TypeValue = nil
		}
	case 438:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3578
		{
			ASNVAL.TypeValue = nil
		}
	case 439:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3583
		{
			ASNVAL.TypeValue = nil
		}
	case 440:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3588
		{
			ASNVAL.TypeValue = MAP{
				"type":  "EXTERNAL_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 441:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3594
		{
			ASNVAL.TypeValue = MAP{
				"type":  "STRING_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 442:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3600
		{
			ASNVAL.TypeValue = MAP{
				"type":  "NUMBER_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 443:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3606
		{
			ASNVAL.TypeValue = MAP{
				"type":  "PARAMETERIZED_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 444:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3614
		{
			ASNVAL.TypeValue = MAP{
				"module": ASNDollar[1].TypeValue,
				"value":  ASNDollar[3].TypeValue,
			}
		}
	case 445:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3622
		{
			ASNVAL.TypeValue = nil
		}
	case 446:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3627
		{
			ASNVAL.TypeValue = nil
		}
	case 447:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3632
		{
			ASNVAL.TypeValue = nil
		}
	case 448:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3637
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 449:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3640
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 450:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3645
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 451:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3648
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 452:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3653
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeNumber
		}
	case 453:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3656
		{
			ASNVAL.TypeValue = (-1) * ASNDollar[2].TypeNumber
		}
	case 454:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3659
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeNumber
		}
	case 455:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3662
		{
			ASNVAL.TypeValue = (-1) * ASNDollar[2].TypeNumber
		}
	case 456:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3667
		{
			ASNVAL.TypeValue = "::="
		}
	}
	goto ASNstack /* stack new state and value */
}
