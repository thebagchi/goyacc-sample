// Code generated by goyacc -p ASN asn.y. DO NOT EDIT.

//line asn.y:1

package main

import __yyfmt__ "fmt"

//line asn.y:3
import (
	"bytes"
	"encoding/json"
	"fmt"
)

var code bytes.Buffer

func AddLine(line string) {
	code.WriteString(line)
	code.WriteByte('\n')
}

func JSON(obj interface{}) string {
	data, err := json.MarshalIndent(obj, "", "    ")
	if nil != err {
		fmt.Println("Error: ", err)
		return ""
	}
	return string(data)
}

func Print(line string) {
	fmt.Println(line)
}

func Join(values ...string) string {
	var buffer bytes.Buffer
	for _, value := range values {
		buffer.WriteString(value)
	}
	return buffer.String()
}

func SetResult(l ASNLexer, v VALUE) {
	l.(*Parser).Result = JSON(&v)
}

type Empty struct{}
type (
	VALUE   interface{}
	STRING  string
	NUMBER  float64
	BOOLEAN bool
	LIST    []VALUE
	MAP     map[string]VALUE
)

//line asn.y:50
type ASNSymType struct {
	yys         int
	TypeToken   struct{}
	TypeString  STRING
	TypeNumber  NUMBER
	TypeValue   VALUE
	TypeBoolean BOOLEAN
	TypeMap     MAP
	TypeList    LIST
}

const CURLY_START = 57346
const CURLY_END = 57347
const SQUARE_START = 57348
const SQUARE_END = 57349
const DOUBLE_QUOTE = 57350
const SINGLE_QUOTE = 57351
const COMMA = 57352
const COLON = 57353
const MINUS = 57354
const GREATER_THAN = 57355
const LESS_THAN = 57356
const DOT = 57357
const SLASH = 57358
const ROUND_START = 57359
const ROUND_END = 57360
const EQUALITY = 57361
const APOSTROPHE = 57362
const SPACE = 57363
const PIPE = 57364
const AT_THE_RATE = 57365
const EXCLAMATION = 57366
const CARET = 57367
const SEMI_COMMA = 57368
const ABSENT_SYMBOL = 57369
const ABSTRACTSYNTAX_SYMBOL = 57370
const ALL_SYMBOL = 57371
const APPLICATION_SYMBOL = 57372
const AUTOMATIC_SYMBOL = 57373
const BEGIN_SYMBOL = 57374
const BIT_SYMBOL = 57375
const BMPSTRING_SYMBOL = 57376
const BOOLEAN_SYMBOL = 57377
const BY_SYMBOL = 57378
const CHARACTER_SYMBOL = 57379
const CHOICE_SYMBOL = 57380
const CLASS_SYMBOL = 57381
const COMPONENT_SYMBOL = 57382
const COMPONENTS_SYMBOL = 57383
const CONSTRAINED_SYMBOL = 57384
const CONTAINING_SYMBOL = 57385
const DATE_SYMBOL = 57386
const DATETIME_SYMBOL = 57387
const DEFAULT_SYMBOL = 57388
const DEFINITIONS_SYMBOL = 57389
const DURATION_SYMBOL = 57390
const EMBEDDED_SYMBOL = 57391
const ENCODED_SYMBOL = 57392
const ENCODINGCONTROL_SYMBOL = 57393
const END_SYMBOL = 57394
const ENUMERATED_SYMBOL = 57395
const EXCEPT_SYMBOL = 57396
const EXPLICIT_SYMBOL = 57397
const EXPORTS_SYMBOL = 57398
const EXTENSIBILITY_SYMBOL = 57399
const EXTERNEL_SYMBOL = 57400
const FALSE_SYMBOL = 57401
const FROM_SYMBOL = 57402
const GENERALIZEDTIME_SYMBOL = 57403
const GENERALSTRING_SYMBOL = 57404
const GRAPHICSTRING_SYMBOL = 57405
const IA5STRING_SYMBOL = 57406
const IDENTIFIER_SYMBOL = 57407
const IMPLICIT_SYMBOL = 57408
const IMPLIED_SYMBOL = 57409
const IMPORTS_SYMBOL = 57410
const INCLUDES_SYMBOL = 57411
const INSTANCE_SYMBOL = 57412
const INSTRUCTIONS_SYMBOL = 57413
const INTEGER_SYMBOL = 57414
const INTERSECTION_SYMBOL = 57415
const ISO646STRING_SYMBOL = 57416
const MAX_SYMBOL = 57417
const MIN_SYMBOL = 57418
const MINUSINFINITY_SYMBOL = 57419
const NOTANUMBER_SYMBOL = 57420
const NULL_SYMBOL = 57421
const NUMERICSTRING_SYMBOL = 57422
const OBJECT_SYMBOL = 57423
const OBJECTDESCRIPTOR_SYMBOL = 57424
const OCTET_SYMBOL = 57425
const OF_SYMBOL = 57426
const OIDIRI_SYMBOL = 57427
const OPTIONAL_SYMBOL = 57428
const PATTERN_SYMBOL = 57429
const PDV_SYMBOL = 57430
const PLUSINFINITY_SYMBOL = 57431
const PRESENT_SYMBOL = 57432
const PRINTABLESTRING_SYMBOL = 57433
const PRIVATE_SYMBOL = 57434
const REAL_SYMBOL = 57435
const RELATIVEOID_SYMBOL = 57436
const RELATIVEOIDIRI_SYMBOL = 57437
const SEQUENCE_SYMBOL = 57438
const SET_SYMBOL = 57439
const SETTINGS_SYMBOL = 57440
const SIZE_SYMBOL = 57441
const STRING_SYMBOL = 57442
const SYNTAX_SYMBOL = 57443
const T61STRING_SYMBOL = 57444
const TAGS_SYMBOL = 57445
const TELETEXSTRING_SYMBOL = 57446
const TIME_SYMBOL = 57447
const TIMEOFDAY_SYMBOL = 57448
const TRUE_SYMBOL = 57449
const TYPEIDENTIFIER_SYMBOL = 57450
const UNION_SYMBOL = 57451
const UNIQUE_SYMBOL = 57452
const UNIVERSAL_SYMBOL = 57453
const UNIVERSALSTRING_SYMBOL = 57454
const UTCTIME_SYMBOL = 57455
const UTF8STRING_SYMBOL = 57456
const VIDEOTEXSTRING_SYMBOL = 57457
const VISIBLESTRING_SYMBOL = 57458
const WITH_SYMBOL = 57459
const ASSIGNMENT_SYMBOL = 57460
const TokenCapitalString = 57461
const TokenString = 57462
const TokenNumber = 57463
const TokenInteger = 57464
const TokenFloat = 57465
const TokenBoolean = 57466
const TokenBString = 57467
const TokenHString = 57468
const TokenCString = 57469

var ASNToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"CURLY_START",
	"CURLY_END",
	"SQUARE_START",
	"SQUARE_END",
	"DOUBLE_QUOTE",
	"SINGLE_QUOTE",
	"COMMA",
	"COLON",
	"MINUS",
	"GREATER_THAN",
	"LESS_THAN",
	"DOT",
	"SLASH",
	"ROUND_START",
	"ROUND_END",
	"EQUALITY",
	"APOSTROPHE",
	"SPACE",
	"PIPE",
	"AT_THE_RATE",
	"EXCLAMATION",
	"CARET",
	"SEMI_COMMA",
	"ABSENT_SYMBOL",
	"ABSTRACTSYNTAX_SYMBOL",
	"ALL_SYMBOL",
	"APPLICATION_SYMBOL",
	"AUTOMATIC_SYMBOL",
	"BEGIN_SYMBOL",
	"BIT_SYMBOL",
	"BMPSTRING_SYMBOL",
	"BOOLEAN_SYMBOL",
	"BY_SYMBOL",
	"CHARACTER_SYMBOL",
	"CHOICE_SYMBOL",
	"CLASS_SYMBOL",
	"COMPONENT_SYMBOL",
	"COMPONENTS_SYMBOL",
	"CONSTRAINED_SYMBOL",
	"CONTAINING_SYMBOL",
	"DATE_SYMBOL",
	"DATETIME_SYMBOL",
	"DEFAULT_SYMBOL",
	"DEFINITIONS_SYMBOL",
	"DURATION_SYMBOL",
	"EMBEDDED_SYMBOL",
	"ENCODED_SYMBOL",
	"ENCODINGCONTROL_SYMBOL",
	"END_SYMBOL",
	"ENUMERATED_SYMBOL",
	"EXCEPT_SYMBOL",
	"EXPLICIT_SYMBOL",
	"EXPORTS_SYMBOL",
	"EXTENSIBILITY_SYMBOL",
	"EXTERNEL_SYMBOL",
	"FALSE_SYMBOL",
	"FROM_SYMBOL",
	"GENERALIZEDTIME_SYMBOL",
	"GENERALSTRING_SYMBOL",
	"GRAPHICSTRING_SYMBOL",
	"IA5STRING_SYMBOL",
	"IDENTIFIER_SYMBOL",
	"IMPLICIT_SYMBOL",
	"IMPLIED_SYMBOL",
	"IMPORTS_SYMBOL",
	"INCLUDES_SYMBOL",
	"INSTANCE_SYMBOL",
	"INSTRUCTIONS_SYMBOL",
	"INTEGER_SYMBOL",
	"INTERSECTION_SYMBOL",
	"ISO646STRING_SYMBOL",
	"MAX_SYMBOL",
	"MIN_SYMBOL",
	"MINUSINFINITY_SYMBOL",
	"NOTANUMBER_SYMBOL",
	"NULL_SYMBOL",
	"NUMERICSTRING_SYMBOL",
	"OBJECT_SYMBOL",
	"OBJECTDESCRIPTOR_SYMBOL",
	"OCTET_SYMBOL",
	"OF_SYMBOL",
	"OIDIRI_SYMBOL",
	"OPTIONAL_SYMBOL",
	"PATTERN_SYMBOL",
	"PDV_SYMBOL",
	"PLUSINFINITY_SYMBOL",
	"PRESENT_SYMBOL",
	"PRINTABLESTRING_SYMBOL",
	"PRIVATE_SYMBOL",
	"REAL_SYMBOL",
	"RELATIVEOID_SYMBOL",
	"RELATIVEOIDIRI_SYMBOL",
	"SEQUENCE_SYMBOL",
	"SET_SYMBOL",
	"SETTINGS_SYMBOL",
	"SIZE_SYMBOL",
	"STRING_SYMBOL",
	"SYNTAX_SYMBOL",
	"T61STRING_SYMBOL",
	"TAGS_SYMBOL",
	"TELETEXSTRING_SYMBOL",
	"TIME_SYMBOL",
	"TIMEOFDAY_SYMBOL",
	"TRUE_SYMBOL",
	"TYPEIDENTIFIER_SYMBOL",
	"UNION_SYMBOL",
	"UNIQUE_SYMBOL",
	"UNIVERSAL_SYMBOL",
	"UNIVERSALSTRING_SYMBOL",
	"UTCTIME_SYMBOL",
	"UTF8STRING_SYMBOL",
	"VIDEOTEXSTRING_SYMBOL",
	"VISIBLESTRING_SYMBOL",
	"WITH_SYMBOL",
	"ASSIGNMENT_SYMBOL",
	"TokenCapitalString",
	"TokenString",
	"TokenNumber",
	"TokenInteger",
	"TokenFloat",
	"TokenBoolean",
	"TokenBString",
	"TokenHString",
	"TokenCString",
}

var ASNStatenames = [...]string{}

const ASNEofCode = 1
const ASNErrCode = 2
const ASNInitialStackSize = 16

//line asn.y:2429

//line yacctab:1
var ASNExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 45,
	119, 36,
	120, 36,
	-2, 32,
	-1, 100,
	15, 173,
	-2, 178,
	-1, 138,
	4, 139,
	-2, 132,
	-1, 139,
	4, 140,
	-2, 133,
	-1, 175,
	15, 173,
	-2, 178,
	-1, 178,
	10, 313,
	15, 173,
	-2, 178,
	-1, 216,
	43, 269,
	-2, 230,
	-1, 249,
	15, 173,
	-2, 312,
	-1, 250,
	5, 133,
	-2, 140,
	-1, 263,
	10, 250,
	-2, 65,
	-1, 270,
	10, 236,
	-2, 66,
	-1, 271,
	10, 252,
	-2, 67,
	-1, 284,
	15, 173,
	-2, 178,
	-1, 285,
	10, 236,
	-2, 66,
	-1, 286,
	10, 252,
	-2, 67,
	-1, 287,
	10, 247,
	-2, 240,
	-1, 288,
	10, 248,
	-2, 242,
	-1, 289,
	10, 249,
	-2, 243,
	-1, 326,
	4, 136,
	5, 136,
	-2, 310,
}

const ASNPrivate = 57344

const ASNLast = 665

var ASNAct = [...]int{
	256, 244, 241, 259, 292, 258, 232, 274, 231, 255,
	5, 273, 5, 21, 272, 242, 21, 254, 251, 248,
	247, 243, 245, 204, 217, 72, 23, 33, 34, 6,
	7, 14, 23, 40, 39, 38, 37, 246, 23, 29,
	313, 62, 51, 50, 43, 93, 36, 28, 23, 73,
	51, 55, 70, 55, 50, 9, 60, 45, 48, 97,
	65, 65, 296, 218, 96, 91, 83, 83, 52, 65,
	74, 27, 282, 61, 327, 175, 312, 44, 294, 228,
	49, 30, 26, 83, 153, 32, 280, 264, 23, 260,
	260, 294, 176, 139, 23, 94, 282, 234, 235, 224,
	83, 175, 174, 65, 167, 101, 23, 90, 57, 233,
	139, 155, 149, 143, 154, 280, 92, 68, 42, 71,
	67, 102, 169, 23, 147, 69, 303, 227, 46, 56,
	144, 290, 157, 23, 20, 165, 22, 24, 23, 6,
	7, 146, 22, 24, 99, 215, 216, 229, 22, 24,
	253, 332, 150, 328, 148, 6, 7, 23, 22, 24,
	16, 99, 151, 156, 142, 152, 145, 53, 185, 6,
	7, 302, 181, 223, 188, 177, 31, 184, 299, 223,
	301, 284, 222, 300, 238, 139, 282, 252, 250, 175,
	174, 180, 93, 237, 236, 189, 20, 239, 22, 24,
	335, 6, 7, 261, 22, 24, 329, 297, 325, 277,
	6, 7, 298, 6, 7, 283, 22, 24, 271, 223,
	281, 276, 263, 275, 279, 168, 278, 270, 222, 178,
	6, 7, 41, 22, 24, 95, 12, 262, 277, 3,
	6, 7, 8, 22, 24, 6, 7, 1, 22, 24,
	286, 219, 182, 276, 263, 275, 289, 164, 288, 285,
	23, 163, 162, 161, 6, 7, 160, 22, 24, 291,
	295, 293, 98, 306, 307, 305, 54, 304, 240, 308,
	158, 309, 293, 223, 310, 223, 159, 311, 249, 264,
	141, 140, 222, 138, 250, 137, 23, 223, 316, 315,
	314, 185, 322, 324, 184, 320, 222, 279, 318, 278,
	184, 291, 319, 317, 136, 135, 100, 134, 153, 133,
	64, 63, 326, 269, 226, 225, 323, 218, 268, 331,
	333, 330, 321, 334, 172, 173, 267, 266, 230, 265,
	221, 220, 214, 228, 213, 155, 149, 143, 154, 212,
	211, 210, 209, 208, 207, 206, 205, 203, 147, 202,
	201, 234, 235, 224, 144, 200, 157, 6, 7, 199,
	22, 24, 198, 233, 197, 146, 196, 195, 194, 193,
	192, 191, 217, 190, 187, 186, 150, 183, 148, 132,
	23, 227, 131, 130, 129, 128, 151, 156, 142, 152,
	145, 127, 126, 6, 7, 125, 22, 24, 124, 215,
	216, 287, 153, 123, 122, 121, 120, 119, 118, 117,
	116, 218, 114, 115, 113, 112, 111, 110, 109, 108,
	107, 106, 105, 104, 103, 89, 88, 228, 87, 155,
	149, 143, 154, 86, 85, 84, 171, 170, 82, 81,
	80, 79, 147, 78, 77, 234, 235, 224, 144, 76,
	157, 75, 257, 179, 166, 66, 59, 233, 58, 146,
	47, 35, 13, 25, 19, 18, 249, 17, 15, 11,
	150, 10, 148, 4, 23, 227, 2, 0, 0, 0,
	151, 156, 142, 152, 145, 0, 0, 6, 7, 0,
	22, 24, 0, 215, 216, 229, 153, 0, 0, 0,
	0, 0, 0, 0, 0, 218, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 155, 149, 143, 154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 147, 0, 0, 234,
	235, 224, 144, 0, 157, 42, 0, 0, 0, 0,
	0, 233, 0, 146, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 150, 0, 148, 0, 153, 227,
	0, 0, 0, 0, 151, 156, 142, 152, 145, 0,
	0, 6, 7, 0, 22, 24, 0, 215, 216, 229,
	0, 0, 0, 0, 0, 155, 149, 143, 154, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 0,
	0, 0, 0, 0, 144, 0, 157, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 150, 0, 148, 0,
	0, 0, 0, 0, 0, 0, 151, 156, 142, 152,
	145, 0, 0, 6, 7,
}

var ASNPact = [...]int{
	-90, -1000, -90, -1000, 8, 232, -1000, -1000, -1000, -88,
	-1000, -1000, 14, 16, -32, 76, -1000, -1000, -1000, -1000,
	68, -1000, -1000, -95, -1000, -11, -67, -68, -69, -1000,
	-1000, -1000, 26, -1000, -1000, 107, -23, -1000, -1000, -1000,
	59, 25, 117, -1000, -1000, -14, 49, 2, -6, -25,
	-90, 91, -1000, 0, -1000, -94, -90, -90, 39, -90,
	-1000, 35, -1000, 231, -1000, -1000, 38, 33, -1000, 182,
	-1000, 2, -1000, -90, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 544, -1000, -1000, -1000, -1000, -1000, -1000,
	-90, -1000, -1000, -90, -90, 220, -1000, -1000, -1000, -1000,
	50, 107, 107, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 87,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 77, 225,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 248, -1000, -1000,
	-1000, -1000, 20, -1000, -90, 50, -1000, -1000, 472, -1000,
	-1000, -1000, 145, -1000, 75, -1000, -1000, 225, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 82, 20, -1000,
	-1000, -1000, 85, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 210, 171, -1000, -1000, -1000, -1000, -1000, -1000, 284,
	175, 126, 94, -1000, -1000, 74, -1000, -1000, -1000, -1000,
	-90, -1000, 19, 94, -1000, 202, 173, 170, 161, 121,
	74, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	26, -1000, 20, -1000, 378, 61, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 36, 94, -1000, 20, -1000, -90, -1000,
	111, 26, 26, -1000, -1000, -1000, -1000, -1000, 74, -1000,
	-1000, 203, -90, -1000, 56, -1000, -1000, -1000, -1000, -1000,
	-1000, 143, -1000, 201, -1000, -1000, -1000, -1000, 26, -1000,
	141, -1000, 26, 195, -1000, -1000,
}

var ASNPgo = [...]int{
	0, 486, 239, 483, 481, 479, 478, 160, 477, 475,
	474, 473, 472, 471, 470, 58, 80, 468, 466, 56,
	465, 73, 41, 464, 463, 23, 18, 17, 462, 5,
	3, 49, 70, 4, 461, 459, 454, 453, 451, 450,
	449, 448, 21, 1, 22, 447, 446, 37, 20, 19,
	445, 444, 443, 438, 436, 435, 434, 433, 432, 431,
	430, 429, 428, 427, 426, 425, 424, 423, 422, 420,
	419, 418, 417, 416, 415, 414, 413, 408, 405, 402,
	401, 395, 394, 393, 392, 389, 387, 385, 384, 15,
	383, 381, 380, 379, 378, 377, 376, 374, 372, 369,
	365, 360, 359, 357, 356, 355, 354, 353, 352, 351,
	350, 349, 344, 342, 341, 340, 339, 14, 338, 8,
	6, 337, 11, 336, 332, 331, 330, 328, 326, 325,
	324, 323, 7, 119, 321, 320, 319, 317, 315, 314,
	295, 293, 291, 290, 286, 280, 278, 2, 276, 272,
	266, 263, 262, 261, 257, 232, 9, 0, 251, 247,
	237,
}

var ASNR1 = [...]int{
	0, 159, 1, 1, 2, 133, 133, 133, 148, 149,
	3, 12, 12, 4, 4, 5, 6, 6, 7, 7,
	7, 8, 9, 10, 11, 11, 11, 11, 13, 13,
	14, 14, 14, 16, 16, 16, 16, 20, 20, 21,
	21, 22, 22, 134, 135, 135, 15, 15, 17, 17,
	18, 18, 19, 23, 24, 24, 24, 25, 25, 25,
	26, 26, 27, 27, 27, 27, 28, 29, 29, 30,
	31, 31, 31, 32, 32, 32, 32, 32, 32, 32,
	32, 34, 35, 36, 37, 38, 39, 40, 41, 41,
	41, 41, 41, 41, 42, 42, 42, 43, 43, 43,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 57, 57, 57,
	57, 57, 136, 136, 136, 136, 141, 142, 143, 144,
	144, 89, 89, 147, 147, 147, 147, 147, 147, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 138, 139, 145, 145, 145,
	145, 150, 150, 154, 151, 152, 153, 146, 140, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 68, 67,
	69, 70, 71, 72, 73, 74, 75, 76, 77, 78,
	79, 80, 81, 82, 83, 84, 85, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 93,
	93, 93, 93, 93, 116, 116, 117, 94, 95, 95,
	114, 114, 114, 114, 118, 121, 121, 122, 122, 122,
	122, 119, 123, 124, 125, 126, 120, 127, 128, 115,
	96, 97, 98, 99, 100, 101, 101, 103, 104, 160,
	104, 105, 105, 129, 129, 130, 130, 130, 102, 106,
	107, 131, 131, 132, 132, 132, 108, 109, 110, 111,
	112, 113, 91, 92, 45, 44, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 33, 33, 33, 33,
	86, 87, 88, 89, 158, 158, 156, 156, 157, 157,
	157, 157, 155,
}

var ASNR2 = [...]int{
	0, 1, 1, 2, 10, 1, 2, 0, 3, 0,
	2, 2, 0, 1, 0, 3, 1, 2, 1, 1,
	1, 1, 1, 4, 2, 2, 2, 0, 2, 0,
	3, 3, 0, 3, 3, 2, 0, 1, 0, 1,
	3, 1, 1, 1, 1, 3, 3, 0, 1, 0,
	1, 2, 3, 2, 1, 1, 0, 3, 4, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 4,
	1, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 4, 3, 4, 3, 4, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 2, 1,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 2, 2, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 9, 1, 1, 1, 1, 5, 1, 1, 1,
	3, 1, 1, 1, 0, 1, 1, 1, 1, 0,
	4, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	3, 1, 2, 1, 1, 1, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1, 1, 1, 1,
	3, 2, 0, 0, 1, 1, 1, 1, 1, 2,
	1, 2, 3,
}

var ASNChk = [...]int{
	-1000, -159, -1, -2, -3, -156, 119, 120, -2, 47,
	-4, -5, 4, -12, 119, -6, -7, -8, -9, -10,
	120, -157, 122, 12, 123, -11, 66, 55, 31, 71,
	5, -7, 17, 122, 123, -13, 57, 103, 103, 103,
	-157, -155, 11, 67, 18, 32, 11, -14, -15, -16,
	68, 56, 19, -133, -148, 51, -16, -15, -17, -18,
	-19, -21, -22, -134, -135, -156, -20, 29, 26, -21,
	52, -133, 119, -31, -32, -34, -35, -36, -37, -38,
	-39, -40, -41, -156, -50, -51, -52, -53, -54, -55,
	-31, 26, -19, 10, 60, 4, 26, 26, -149, -32,
	-155, -42, -47, -56, -57, -58, -59, -60, -61, -62,
	-63, -64, -65, -66, -68, -67, -69, -70, -71, -72,
	-73, -74, -75, -76, -77, -78, -79, -80, -81, -82,
	-83, -84, -85, -136, -137, -138, -139, -140, -141, -156,
	-142, -143, 114, 63, 80, 116, 91, 74, 104, 62,
	102, 112, 115, 34, 64, 61, 113, 82, -145, -144,
	-150, -151, -152, -153, -154, -22, -23, -156, 5, -42,
	-45, -46, -155, -155, 15, 14, 15, -89, 4, -24,
	-25, -33, 4, -86, -156, -157, -87, -88, -43, -44,
	-90, -91, -92, -93, -94, -95, -96, -97, -98, -99,
	-100, -101, -102, -103, -25, -104, -105, -106, -107, -108,
	-109, -110, -111, -112, -113, 125, 126, 4, 43, -158,
	-114, -115, -156, -157, 79, -129, -130, 107, 59, 127,
	-118, -119, -120, 89, 77, 78, -48, -49, -156, -42,
	-146, -147, -89, -42, -43, -44, -47, -48, -49, 4,
	-156, -26, -33, 5, -27, -156, -157, -28, -29, -30,
	15, -89, -160, -33, 5, -116, -121, -123, -127, -131,
	-156, -157, -117, -122, -132, -29, -30, 127, -119, -120,
	4, -43, 11, 5, 10, -156, -157, 127, -119, -120,
	5, -27, -33, -26, 17, -156, 43, 5, 10, 5,
	10, 10, 10, 5, -132, -29, -30, -33, -156, -157,
	-43, -147, 15, 4, -29, -33, -43, -117, -156, -122,
	-33, -124, -157, -128, -157, 5, -156, 18, 10, 5,
	-125, -157, 10, -126, -157, 5,
}

var ASNDef = [...]int{
	0, -2, 1, 2, 0, 14, 316, 317, 3, 12,
	10, 13, 0, 27, 0, 0, 16, 18, 19, 20,
	21, 22, 318, 0, 320, 29, 0, 0, 0, 11,
	15, 17, 0, 319, 321, 0, 0, 24, 25, 26,
	0, 0, 0, 28, 23, -2, 0, 7, 36, 47,
	49, 0, 322, 0, 5, 0, 72, 72, 0, 48,
	50, 0, 39, 41, 42, 43, 0, 0, 35, 37,
	4, 6, 9, 30, 70, 73, 74, 75, 76, 77,
	78, 79, 80, 173, 88, 89, 90, 91, 92, 93,
	31, 46, 51, 0, 0, 0, 33, 34, 8, 71,
	-2, 0, 0, 94, 95, 96, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, -2, -2,
	134, 135, 149, 150, 151, 152, 153, 154, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 164, 0, 313,
	167, 168, 169, 170, 171, 40, 52, 56, 45, 81,
	83, 85, 264, 298, 0, -2, 177, 137, -2, 53,
	54, 55, 312, 306, 307, 308, 309, 313, 82, 84,
	97, 98, 99, 207, 208, 209, 210, 211, 212, 213,
	214, 215, 216, 217, 218, 219, 220, 221, 222, 223,
	224, 225, 226, 227, 228, 229, -2, 312, 264, 237,
	238, 239, 262, 265, 267, 271, 272, 314, 315, 240,
	241, 242, 243, 275, 276, 277, 86, 87, 136, 165,
	166, 0, 0, 143, 144, 145, 146, 147, 148, -2,
	-2, 312, 65, 59, 60, 66, 67, 62, 63, 64,
	0, 311, 0, -2, 59, 0, 0, 0, 0, 312,
	-2, -2, 234, 245, 281, 63, 64, 247, 248, 249,
	0, 233, 264, 141, -2, -2, -2, -2, -2, -2,
	57, 61, 65, 0, 312, 310, 264, 231, 0, 244,
	312, 0, 0, 280, 282, 283, 284, 68, 307, 252,
	260, 0, 0, 58, 0, 68, 270, 235, 236, 246,
	250, 0, 253, 0, 258, 142, -2, 69, 0, 256,
	0, 254, 0, 0, 255, 251,
}

var ASNTok1 = [...]int{
	1,
}

var ASNTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127,
}

var ASNTok3 = [...]int{
	0,
}

var ASNErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	ASNDebug        = 0
	ASNErrorVerbose = false
)

type ASNLexer interface {
	Lex(lval *ASNSymType) int
	Error(s string)
}

type ASNParser interface {
	Parse(ASNLexer) int
	Lookahead() int
}

type ASNParserImpl struct {
	lval  ASNSymType
	stack [ASNInitialStackSize]ASNSymType
	char  int
}

func (p *ASNParserImpl) Lookahead() int {
	return p.char
}

func ASNNewParser() ASNParser {
	return &ASNParserImpl{}
}

const ASNFlag = -1000

func ASNTokname(c int) string {
	if c >= 1 && c-1 < len(ASNToknames) {
		if ASNToknames[c-1] != "" {
			return ASNToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func ASNStatname(s int) string {
	if s >= 0 && s < len(ASNStatenames) {
		if ASNStatenames[s] != "" {
			return ASNStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func ASNErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !ASNErrorVerbose {
		return "syntax error"
	}

	for _, e := range ASNErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + ASNTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := ASNPact[state]
	for tok := TOKSTART; tok-1 < len(ASNToknames); tok++ {
		if n := base + tok; n >= 0 && n < ASNLast && ASNChk[ASNAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if ASNDef[state] == -2 {
		i := 0
		for ASNExca[i] != -1 || ASNExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; ASNExca[i] >= 0; i += 2 {
			tok := ASNExca[i]
			if tok < TOKSTART || ASNExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if ASNExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += ASNTokname(tok)
	}
	return res
}

func ASNlex1(lex ASNLexer, lval *ASNSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = ASNTok1[0]
		goto out
	}
	if char < len(ASNTok1) {
		token = ASNTok1[char]
		goto out
	}
	if char >= ASNPrivate {
		if char < ASNPrivate+len(ASNTok2) {
			token = ASNTok2[char-ASNPrivate]
			goto out
		}
	}
	for i := 0; i < len(ASNTok3); i += 2 {
		token = ASNTok3[i+0]
		if token == char {
			token = ASNTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = ASNTok2[1] /* unknown char */
	}
	if ASNDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", ASNTokname(token), uint(char))
	}
	return char, token
}

func ASNParse(ASNlex ASNLexer) int {
	return ASNNewParser().Parse(ASNlex)
}

func (ASNrcvr *ASNParserImpl) Parse(ASNlex ASNLexer) int {
	var ASNn int
	var ASNVAL ASNSymType
	var ASNDollar []ASNSymType
	_ = ASNDollar // silence set and not used
	ASNS := ASNrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	ASNstate := 0
	ASNrcvr.char = -1
	ASNtoken := -1 // ASNrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		ASNstate = -1
		ASNrcvr.char = -1
		ASNtoken = -1
	}()
	ASNp := -1
	goto ASNstack

ret0:
	return 0

ret1:
	return 1

ASNstack:
	/* put a state and value onto the stack */
	if ASNDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", ASNTokname(ASNtoken), ASNStatname(ASNstate))
	}

	ASNp++
	if ASNp >= len(ASNS) {
		nyys := make([]ASNSymType, len(ASNS)*2)
		copy(nyys, ASNS)
		ASNS = nyys
	}
	ASNS[ASNp] = ASNVAL
	ASNS[ASNp].yys = ASNstate

ASNnewstate:
	ASNn = ASNPact[ASNstate]
	if ASNn <= ASNFlag {
		goto ASNdefault /* simple state */
	}
	if ASNrcvr.char < 0 {
		ASNrcvr.char, ASNtoken = ASNlex1(ASNlex, &ASNrcvr.lval)
	}
	ASNn += ASNtoken
	if ASNn < 0 || ASNn >= ASNLast {
		goto ASNdefault
	}
	ASNn = ASNAct[ASNn]
	if ASNChk[ASNn] == ASNtoken { /* valid shift */
		ASNrcvr.char = -1
		ASNtoken = -1
		ASNVAL = ASNrcvr.lval
		ASNstate = ASNn
		if Errflag > 0 {
			Errflag--
		}
		goto ASNstack
	}

ASNdefault:
	/* default state action */
	ASNn = ASNDef[ASNstate]
	if ASNn == -2 {
		if ASNrcvr.char < 0 {
			ASNrcvr.char, ASNtoken = ASNlex1(ASNlex, &ASNrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if ASNExca[xi+0] == -1 && ASNExca[xi+1] == ASNstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			ASNn = ASNExca[xi+0]
			if ASNn < 0 || ASNn == ASNtoken {
				break
			}
		}
		ASNn = ASNExca[xi+1]
		if ASNn < 0 {
			goto ret0
		}
	}
	if ASNn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			ASNlex.Error(ASNErrorMessage(ASNstate, ASNtoken))
			Nerrs++
			if ASNDebug >= 1 {
				__yyfmt__.Printf("%s", ASNStatname(ASNstate))
				__yyfmt__.Printf(" saw %s\n", ASNTokname(ASNtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for ASNp >= 0 {
				ASNn = ASNPact[ASNS[ASNp].yys] + ASNErrCode
				if ASNn >= 0 && ASNn < ASNLast {
					ASNstate = ASNAct[ASNn] /* simulate a shift of "error" */
					if ASNChk[ASNstate] == ASNErrCode {
						goto ASNstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if ASNDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", ASNS[ASNp].yys)
				}
				ASNp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if ASNDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", ASNTokname(ASNtoken))
			}
			if ASNtoken == ASNEofCode {
				goto ret1
			}
			ASNrcvr.char = -1
			ASNtoken = -1
			goto ASNnewstate /* try again in the same state */
		}
	}

	/* reduction by production ASNn */
	if ASNDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", ASNn, ASNStatname(ASNstate))
	}

	ASNnt := ASNn
	ASNpt := ASNp
	_ = ASNpt // guard against "declared and not used"

	ASNp -= ASNR2[ASNn]
	// ASNp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if ASNp+1 >= len(ASNS) {
		nyys := make([]ASNSymType, len(ASNS)*2)
		copy(nyys, ASNS)
		ASNS = nyys
	}
	ASNVAL = ASNS[ASNp+1]

	/* consult goto table to find next state */
	ASNn = ASNR1[ASNn]
	ASNg := ASNPgo[ASNn]
	ASNj := ASNg + ASNS[ASNp].yys + 1

	if ASNj >= ASNLast {
		ASNstate = ASNAct[ASNg]
	} else {
		ASNstate = ASNAct[ASNj]
		if ASNChk[ASNstate] != -ASNn {
			ASNstate = ASNAct[ASNg]
		}
	}
	// dummy call; replaced with literal code
	switch ASNnt {

	case 1:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:351
		{
			SetResult(ASNlex, ASNDollar[1].TypeValue)
			Print("Done")
			Print("--------------------------------------------------------------------------------")
			Print(JSON(&ASNDollar[1].TypeValue))
			Print("--------------------------------------------------------------------------------")
		}
	case 2:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:360
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 3:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:365
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 4:
		ASNDollar = ASNS[ASNpt-10 : ASNpt+1]
//line asn.y:395
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"encoding":   ASNDollar[3].TypeValue,
				"tag":        ASNDollar[4].TypeValue,
				"body":       ASNDollar[8].TypeValue,
			}
		}
	case 5:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:411
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 6:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:416
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 7:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:420
		{
			ASNVAL.TypeValue = nil
		}
	case 8:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:432
		{
			ASNVAL.TypeValue = MAP{
				"encodingReference":    ASNDollar[2].TypeString,
				"encodingInstructions": ASNDollar[3].TypeValue,
			}
		}
	case 9:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:447
		{
			ASNVAL.TypeValue = nil
		}
	case 10:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:460
		{
			ASNVAL.TypeValue = MAP{
				"reference":             ASNDollar[1].TypeValue,
				"definitiveIdentifiers": ASNDollar[2].TypeValue,
			}
		}
	case 11:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:474
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 12:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:477
		{
			ASNVAL.TypeValue = ""
		}
	case 13:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:489
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 14:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:492
		{
			ASNVAL.TypeValue = nil
		}
	case 15:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:502
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 16:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:513
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 17:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:518
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 18:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:531
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 19:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:534
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 20:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:537
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 21:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:546
		{
			ASNVAL.TypeValue = MAP{
				"name": ASNDollar[1].TypeString,
			}
		}
	case 22:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:557
		{
			ASNVAL.TypeValue = MAP{
				"number": ASNDollar[1].TypeValue,
			}
		}
	case 23:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:568
		{
			ASNVAL.TypeValue = MAP{
				"name":   ASNDollar[1].TypeString,
				"number": ASNDollar[3].TypeValue,
			}
		}
	case 24:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:584
		{
			ASNVAL.TypeValue = "Implicit"
		}
	case 25:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:587
		{
			ASNVAL.TypeValue = "Explicit"
		}
	case 26:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:590
		{
			ASNVAL.TypeValue = "Automatic"
		}
	case 27:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:593
		{
			ASNVAL.TypeValue = "Explicit"
		}
	case 28:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:604
		{
			ASNVAL.TypeValue = true
		}
	case 29:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:607
		{
			ASNVAL.TypeValue = false
		}
	case 30:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:620
		{
			ASNVAL.TypeValue = MAP{
				"imports":     ASNDollar[1].TypeValue,
				"exports":     ASNDollar[2].TypeValue,
				"assignments": ASNDollar[3].TypeValue,
			}
		}
	case 31:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:629
		{
			ASNVAL.TypeValue = MAP{
				"imports":     ASNDollar[2].TypeValue,
				"exports":     ASNDollar[1].TypeValue,
				"assignments": ASNDollar[3].TypeValue,
			}
		}
	case 32:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:636
		{
			ASNVAL.TypeValue = nil
		}
	case 33:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:648
		{
			ASNVAL.TypeValue = MAP{
				"all":     "false",
				"symbols": ASNDollar[2].TypeValue,
			}
		}
	case 34:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:654
		{
			ASNVAL.TypeValue = MAP{
				"all": "true",
			}
		}
	case 35:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:659
		{
			ASNVAL.TypeValue = MAP{
				"all": "false",
			}
		}
	case 36:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:664
		{
			ASNVAL.TypeValue = MAP{
				"all": "true",
			}
		}
	case 37:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:677
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 38:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:680
		{
			ASNVAL.TypeValue = nil
		}
	case 39:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:691
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 40:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:696
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 41:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:708
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
			}
		}
	case 42:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:713
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedReference": ASNDollar[1].TypeValue,
			}
		}
	case 43:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:732
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 44:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:742
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 45:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:745
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 46:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:756
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 47:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:759
		{
			ASNVAL.TypeValue = nil
		}
	case 48:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:770
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 49:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:773
		{
			ASNVAL.TypeValue = nil
		}
	case 50:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:784
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 51:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:789
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 52:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:800
		{
			ASNVAL.TypeValue = MAP{
				"symbols":   ASNDollar[1].TypeValue,
				"reference": ASNDollar[3].TypeValue,
			}
		}
	case 53:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:813
		{
			ASNVAL.TypeValue = MAP{
				"name":        ASNDollar[1].TypeValue,
				"identifiers": ASNDollar[2].TypeValue,
			}
		}
	case 54:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:828
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 55:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:831
		{
			ASNVAL.TypeValue = nil
		}
	case 56:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:834
		{
			ASNVAL.TypeValue = nil
		}
	case 57:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:845
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 58:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:848
		{
			ASNVAL.TypeValue = ASNDollar[3].TypeValue
		}
	case 59:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:851
		{
			ASNVAL.TypeValue = nil
		}
	case 60:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:862
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 61:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:867
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 62:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:881
		{
			ASNVAL.TypeValue = MAP{
				"name": ASNDollar[1].TypeValue,
			}
		}
	case 63:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:886
		{
			ASNVAL.TypeValue = MAP{
				"number": ASNDollar[1].TypeValue,
			}
		}
	case 64:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:891
		{
			ASNVAL.TypeValue = MAP{
				"nameAndNumber": ASNDollar[1].TypeValue,
			}
		}
	case 65:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:896
		{
			ASNVAL.TypeValue = MAP{
				"definedValue": ASNDollar[1].TypeValue,
			}
		}
	case 66:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:908
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 67:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:919
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 68:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:922
		{
			ASNVAL.TypeValue = MAP{
				"definedValue": ASNDollar[1].TypeValue,
			}
		}
	case 69:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:934
		{
			ASNVAL.TypeValue = MAP{
				"name":   ASNDollar[1].TypeValue,
				"number": ASNDollar[3].TypeValue,
			}
		}
	case 70:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:948
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 71:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:953
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 72:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:957
		{
			ASNVAL.TypeValue = nil
		}
	case 73:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:974
		{
			ASNVAL.TypeValue = MAP{
				"typeAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 74:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:979
		{
			ASNVAL.TypeValue = MAP{
				"valueAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 75:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:984
		{
			ASNVAL.TypeValue = MAP{
				"xmlValueAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 76:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:989
		{
			ASNVAL.TypeValue = MAP{
				"valueSetAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 77:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:994
		{
			ASNVAL.TypeValue = MAP{
				"objectClassAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 78:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:999
		{
			ASNVAL.TypeValue = MAP{
				"objectAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 79:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1004
		{
			ASNVAL.TypeValue = MAP{
				"objectSetAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 80:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1009
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 81:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1023
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"type":      ASNDollar[2].TypeValue,
			}
		}
	case 82:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1039
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"type":      ASNDollar[2].TypeValue,
				"value":     ASNDollar[4].TypeValue,
			}
		}
	case 83:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1055
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"value":     ASNDollar[3].TypeValue,
			}
		}
	case 84:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1071
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"type":      ASNDollar[2].TypeValue,
				"valueSet":  ASNDollar[4].TypeValue,
			}
		}
	case 85:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1087
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"class":     ASNDollar[3].TypeValue,
			}
		}
	case 86:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1103
		{
			ASNVAL.TypeValue = MAP{
				"reference":    ASNDollar[1].TypeValue,
				"definedClass": ASNDollar[2].TypeValue,
				"object":       ASNDollar[4].TypeValue,
			}
		}
	case 87:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1120
		{
			ASNVAL.TypeValue = MAP{
				"reference":    ASNDollar[1].TypeValue,
				"definedClass": ASNDollar[2].TypeValue,
				"objectSet":    ASNDollar[4].TypeValue,
			}
		}
	case 88:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1139
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 89:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1142
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 90:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1145
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 91:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1148
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 92:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1151
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 93:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1154
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 94:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1166
		{
			ASNVAL.TypeValue = MAP{
				"type":       "BUILTIN_TYPE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 95:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1172
		{
			ASNVAL.TypeValue = MAP{
				"type":       "REFERENCED_TYPE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 96:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1178
		{
			ASNVAL.TypeValue = MAP{
				"type":       "CONSTRAINED_TYPE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 97:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1193
		{
			ASNVAL.TypeValue = MAP{
				"type":       "BUILTIN_VALUE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 98:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1199
		{
			ASNVAL.TypeValue = MAP{
				"type":       "REFERENCED_VALUE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 99:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1205
		{
			ASNVAL.TypeValue = MAP{
				"type":       "OBJECT_CLASS_FIELD_VALUE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 100:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1243
		{
			ASNVAL.TypeValue = MAP{
				"bitStringType": ASNDollar[1].TypeValue,
			}
		}
	case 101:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1248
		{
			ASNVAL.TypeValue = MAP{
				"booleanType": ASNDollar[1].TypeValue,
			}
		}
	case 102:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1253
		{
			ASNVAL.TypeValue = MAP{
				"characterStringType": ASNDollar[1].TypeValue,
			}
		}
	case 103:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1258
		{
			ASNVAL.TypeValue = MAP{
				"choiceType": ASNDollar[1].TypeValue,
			}
		}
	case 104:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1263
		{
			ASNVAL.TypeValue = MAP{
				"dateType": ASNDollar[1].TypeValue,
			}
		}
	case 105:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1268
		{
			ASNVAL.TypeValue = MAP{
				"dataTimeType": ASNDollar[1].TypeValue,
			}
		}
	case 106:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1273
		{
			ASNVAL.TypeValue = MAP{
				"durationType": ASNDollar[1].TypeValue,
			}
		}
	case 107:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1278
		{
			ASNVAL.TypeValue = MAP{
				"embeddedPDVType": ASNDollar[1].TypeValue,
			}
		}
	case 108:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1283
		{
			ASNVAL.TypeValue = MAP{
				"enumeratedType": ASNDollar[1].TypeValue,
			}
		}
	case 109:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1288
		{
			ASNVAL.TypeValue = MAP{
				"externalType": ASNDollar[1].TypeValue,
			}
		}
	case 110:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1293
		{
			ASNVAL.TypeValue = MAP{
				"instanceOfType": ASNDollar[1].TypeValue,
			}
		}
	case 111:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1298
		{
			ASNVAL.TypeValue = MAP{
				"integerType": ASNDollar[1].TypeValue,
			}
		}
	case 112:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1303
		{
			ASNVAL.TypeValue = MAP{
				"iriType": ASNDollar[1].TypeValue,
			}
		}
	case 113:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1308
		{
			ASNVAL.TypeValue = MAP{
				"nullType": ASNDollar[1].TypeValue,
			}
		}
	case 114:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1313
		{
			ASNVAL.TypeValue = MAP{
				"objectClassFieldType": ASNDollar[1].TypeValue,
			}
		}
	case 115:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1318
		{
			ASNVAL.TypeValue = MAP{
				"objectIdentifierType": ASNDollar[1].TypeValue,
			}
		}
	case 116:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1323
		{
			ASNVAL.TypeValue = MAP{
				"octetStringType": ASNDollar[1].TypeValue,
			}
		}
	case 117:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1328
		{
			ASNVAL.TypeValue = MAP{
				"realType": ASNDollar[1].TypeValue,
			}
		}
	case 118:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1333
		{
			ASNVAL.TypeValue = MAP{
				"relativeIRIType": ASNDollar[1].TypeValue,
			}
		}
	case 119:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1338
		{
			ASNVAL.TypeValue = MAP{
				"relativeOIDType": ASNDollar[1].TypeValue,
			}
		}
	case 120:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1343
		{
			ASNVAL.TypeValue = MAP{
				"sequenceType": ASNDollar[1].TypeValue,
			}
		}
	case 121:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1348
		{
			ASNVAL.TypeValue = MAP{
				"sequenceOfType": ASNDollar[1].TypeValue,
			}
		}
	case 122:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1353
		{
			ASNVAL.TypeValue = MAP{
				"setType": ASNDollar[1].TypeValue,
			}
		}
	case 123:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1358
		{
			ASNVAL.TypeValue = MAP{
				"setOfType": ASNDollar[1].TypeValue,
			}
		}
	case 124:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1363
		{
			ASNVAL.TypeValue = MAP{
				"prefixedType": ASNDollar[1].TypeValue,
			}
		}
	case 125:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1368
		{
			ASNVAL.TypeValue = MAP{
				"timeType": ASNDollar[1].TypeValue,
			}
		}
	case 126:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1373
		{
			ASNVAL.TypeValue = MAP{
				"timeOfDayType": ASNDollar[1].TypeValue,
			}
		}
	case 127:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1389
		{
			ASNVAL.TypeValue = MAP{
				"definedType": ASNDollar[1].TypeValue,
			}
		}
	case 128:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1394
		{
			ASNVAL.TypeValue = MAP{
				"usefulType": ASNDollar[1].TypeValue,
			}
		}
	case 129:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1399
		{
			ASNVAL.TypeValue = MAP{
				"selectionType": ASNDollar[1].TypeValue,
			}
		}
	case 130:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1404
		{
			ASNVAL.TypeValue = MAP{
				"typeFromObject": ASNDollar[1].TypeValue,
			}
		}
	case 131:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1409
		{
			ASNVAL.TypeValue = MAP{
				"valueSetFromObjects": ASNDollar[1].TypeValue,
			}
		}
	case 132:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1424
		{
			ASNVAL.TypeValue = MAP{
				"externalTypeReference": ASNDollar[1].TypeValue,
			}
		}
	case 133:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1429
		{
			ASNVAL.TypeValue = MAP{
				"typeReference": ASNDollar[1].TypeValue,
			}
		}
	case 134:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1434
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedType": ASNDollar[1].TypeValue,
			}
		}
	case 135:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1439
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedValueSetType": ASNDollar[1].TypeValue,
			}
		}
	case 136:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1453
		{
			ASNVAL.TypeValue = MAP{
				"moduleReference": ASNDollar[1].TypeValue,
				"typeReference":   ASNDollar[2].TypeToken,
			}
		}
	case 137:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1467
		{
			ASNVAL.TypeValue = MAP{
				"simpleDefinedType":   ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 138:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1481
		{
			ASNVAL.TypeValue = MAP{
				"simpleDefinedType":   ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 139:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1495
		{
			ASNVAL.TypeValue = MAP{
				"externalTypeReference": ASNDollar[1].TypeValue,
			}
		}
	case 140:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1500
		{
			ASNVAL.TypeValue = MAP{
				"typeReference": ASNDollar[1].TypeValue,
			}
		}
	case 141:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1511
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeToken,
			}
		}
	case 142:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:1516
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeToken
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 143:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1532
		{
			ASNVAL.TypeValue = MAP{
				"type": ASNDollar[1].TypeValue,
			}
		}
	case 144:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1537
		{
			ASNVAL.TypeValue = MAP{
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 145:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1542
		{
			ASNVAL.TypeValue = MAP{
				"valueSet": ASNDollar[1].TypeValue,
			}
		}
	case 146:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1547
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectClass": ASNDollar[1].TypeValue,
			}
		}
	case 147:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1552
		{
			ASNVAL.TypeValue = MAP{
				"object": ASNDollar[1].TypeValue,
			}
		}
	case 148:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1557
		{
			ASNVAL.TypeValue = MAP{
				"objectSet": ASNDollar[1].TypeValue,
			}
		}
	case 149:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1585
		{
			ASNVAL.TypeValue = STRING(UTF8String)
		}
	case 150:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1588
		{
			ASNVAL.TypeValue = STRING(GraphicString)
		}
	case 151:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1591
		{
			ASNVAL.TypeValue = STRING(NumericString)
		}
	case 152:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1594
		{
			ASNVAL.TypeValue = STRING(VisibleString)
		}
	case 153:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1597
		{
			ASNVAL.TypeValue = STRING(PrintableString)
		}
	case 154:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1600
		{
			ASNVAL.TypeValue = STRING(ISO646String)
		}
	case 155:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1603
		{
			ASNVAL.TypeValue = STRING(TeletexString)
		}
	case 156:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1606
		{
			ASNVAL.TypeValue = STRING(GeneralString)
		}
	case 157:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1609
		{
			ASNVAL.TypeValue = STRING(T61String)
		}
	case 158:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1612
		{
			ASNVAL.TypeValue = STRING(UniversalString)
		}
	case 159:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1615
		{
			ASNVAL.TypeValue = STRING(VideotexString)
		}
	case 160:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1618
		{
			ASNVAL.TypeValue = STRING(BMPString)
		}
	case 161:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1621
		{
			ASNVAL.TypeValue = STRING(IA5String)
		}
	case 162:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1624
		{
			ASNVAL.TypeValue = STRING(GeneralizedTime)
		}
	case 163:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1627
		{
			ASNVAL.TypeValue = STRING(UTCTime)
		}
	case 164:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1630
		{
			ASNVAL.TypeValue = STRING(ObjectDescriptor)
		}
	case 165:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1640
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"type":       ASNDollar[3].TypeValue,
			}
		}
	case 166:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1653
		{
			ASNVAL.TypeValue = MAP{
				"referencedObjects": ASNDollar[1].TypeValue,
				"fieldName":         ASNDollar[2].TypeToken,
			}
		}
	case 167:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1666
		{
			ASNVAL.TypeValue = MAP{
				"definedObject": ASNDollar[1].TypeValue,
			}
		}
	case 168:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1671
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedObject": ASNDollar[1].TypeValue,
			}
		}
	case 169:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1676
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 170:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1681
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 171:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1693
		{
			ASNVAL.TypeValue = MAP{
				"externalObjectReference": ASNDollar[1].TypeValue,
			}
		}
	case 172:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1698
		{
			ASNVAL.TypeValue = MAP{
				"objectReference": ASNDollar[1].TypeValue,
			}
		}
	case 173:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1706
		{
			ASNVAL.TypeValue = nil
		}
	case 174:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1711
		{
			ASNVAL.TypeValue = nil
		}
	case 175:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1717
		{
			ASNVAL.TypeValue = nil
		}
	case 176:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1723
		{
			ASNVAL.TypeValue = nil
		}
	case 177:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1729
		{
			ASNVAL.TypeValue = nil
		}
	case 178:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1735
		{
			ASNVAL.TypeValue = nil
		}
	case 179:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1741
		{
			ASNVAL.TypeValue = nil
		}
	case 180:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1746
		{
			ASNVAL.TypeValue = nil
		}
	case 181:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1751
		{
			ASNVAL.TypeValue = nil
		}
	case 182:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1756
		{
			ASNVAL.TypeValue = nil
		}
	case 183:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1760
		{
			ASNVAL.TypeValue = nil
		}
	case 184:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1765
		{
			ASNVAL.TypeValue = nil
		}
	case 185:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1769
		{
			ASNVAL.TypeValue = nil
		}
	case 186:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1773
		{
			ASNVAL.TypeValue = nil
		}
	case 187:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1778
		{
			ASNVAL.TypeValue = nil
		}
	case 188:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1783
		{
			ASNVAL.TypeValue = nil
		}
	case 189:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1788
		{
			ASNVAL.TypeValue = nil
		}
	case 190:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1793
		{
			ASNVAL.TypeValue = nil
		}
	case 191:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1798
		{
			ASNVAL.TypeValue = nil
		}
	case 192:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1803
		{
			ASNVAL.TypeValue = nil
		}
	case 193:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1808
		{
			ASNVAL.TypeValue = nil
		}
	case 194:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1813
		{
			ASNVAL.TypeValue = nil
		}
	case 195:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1818
		{
			ASNVAL.TypeValue = nil
		}
	case 196:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1823
		{
			ASNVAL.TypeValue = nil
		}
	case 197:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1828
		{
			ASNVAL.TypeValue = nil
		}
	case 198:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1833
		{
			ASNVAL.TypeValue = nil
		}
	case 199:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1838
		{
			ASNVAL.TypeValue = nil
		}
	case 200:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1843
		{
			ASNVAL.TypeValue = nil
		}
	case 201:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1848
		{
			ASNVAL.TypeValue = nil
		}
	case 202:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1853
		{
			ASNVAL.TypeValue = nil
		}
	case 203:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1858
		{
			ASNVAL.TypeValue = nil
		}
	case 204:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1863
		{
			ASNVAL.TypeValue = nil
		}
	case 205:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1868
		{
			ASNVAL.TypeValue = nil
		}
	case 206:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1873
		{
			ASNVAL.TypeValue = nil
		}
	case 207:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1878
		{
			ASNVAL.TypeValue = MAP{
				"bitString": ASNDollar[1].TypeValue,
			}
		}
	case 208:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1883
		{
			ASNVAL.TypeValue = MAP{
				"boolean": ASNDollar[1].TypeValue,
			}
		}
	case 209:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1888
		{
			ASNVAL.TypeValue = MAP{
				"characterString": ASNDollar[1].TypeValue,
			}
		}
	case 210:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1893
		{
			ASNVAL.TypeValue = MAP{
				"choice": ASNDollar[1].TypeValue,
			}
		}
	case 211:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1898
		{
			ASNVAL.TypeValue = MAP{
				"embeddedPDV": ASNDollar[1].TypeValue,
			}
		}
	case 212:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1903
		{
			ASNVAL.TypeValue = MAP{
				"enumerated": ASNDollar[1].TypeValue,
			}
		}
	case 213:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1908
		{
			ASNVAL.TypeValue = MAP{
				"external": ASNDollar[1].TypeValue,
			}
		}
	case 214:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1913
		{
			ASNVAL.TypeValue = MAP{
				"instanceOf": ASNDollar[1].TypeValue,
			}
		}
	case 215:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1918
		{
			ASNVAL.TypeValue = MAP{
				"integer": ASNDollar[1].TypeValue,
			}
		}
	case 216:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1923
		{
			ASNVAL.TypeValue = MAP{
				"iri": ASNDollar[1].TypeValue,
			}
		}
	case 217:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1928
		{
			ASNVAL.TypeValue = MAP{
				"null": ASNDollar[1].TypeValue,
			}
		}
	case 218:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1933
		{
			ASNVAL.TypeValue = MAP{
				"objectIdentifier": ASNDollar[1].TypeValue,
			}
		}
	case 219:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1938
		{
			ASNVAL.TypeValue = MAP{
				"octetString": ASNDollar[1].TypeValue,
			}
		}
	case 220:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1943
		{
			ASNVAL.TypeValue = MAP{
				"real": ASNDollar[1].TypeValue,
			}
		}
	case 221:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1948
		{
			ASNVAL.TypeValue = MAP{
				"relativeIRI": ASNDollar[1].TypeValue,
			}
		}
	case 222:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1953
		{
			ASNVAL.TypeValue = MAP{
				"relativeOID": ASNDollar[1].TypeValue,
			}
		}
	case 223:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1958
		{
			ASNVAL.TypeValue = MAP{
				"sequence": ASNDollar[1].TypeValue,
			}
		}
	case 224:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1963
		{
			ASNVAL.TypeValue = MAP{
				"sequenceOf": ASNDollar[1].TypeValue,
			}
		}
	case 225:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1968
		{
			ASNVAL.TypeValue = MAP{
				"set": ASNDollar[1].TypeValue,
			}
		}
	case 226:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1973
		{
			ASNVAL.TypeValue = MAP{
				"setOf": ASNDollar[1].TypeValue,
			}
		}
	case 227:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1978
		{
			ASNVAL.TypeValue = MAP{
				"prefixed": ASNDollar[1].TypeValue,
			}
		}
	case 228:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1983
		{
			ASNVAL.TypeValue = MAP{
				"time": ASNDollar[1].TypeValue,
			}
		}
	case 229:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1990
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 230:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1993
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 231:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1996
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 232:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1999
		{
			ASNVAL.TypeValue = nil
		}
	case 233:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2002
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 234:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2007
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 235:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2012
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeToken)
		}
	case 236:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2018
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 237:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2023
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 238:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2028
		{
			ASNVAL.TypeValue = nil
		}
	case 239:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2031
		{

		}
	case 240:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2036
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 241:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2039
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 242:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2042
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 243:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2045
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 244:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2050
		{
			ASNVAL.TypeValue = nil
		}
	case 245:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2055
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 246:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2060
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeToken)
		}
	case 247:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2066
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 248:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2069
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 249:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2072
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 250:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2075
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 251:
		ASNDollar = ASNS[ASNpt-9 : ASNpt+1]
//line asn.y:2080
		{
			ASNVAL.TypeValue = MAP{
				"group": ASNDollar[2].TypeValue,
				"plane": ASNDollar[4].TypeValue,
				"row":   ASNDollar[6].TypeValue,
				"cell":  ASNDollar[8].TypeValue,
			}
		}
	case 252:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2090
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 253:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2095
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 254:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2100
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 255:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2105
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 256:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:2110
		{
			ASNVAL.TypeValue = MAP{
				"tableColumn": ASNDollar[2].TypeValue,
				"tableRow":    ASNDollar[4].TypeValue,
			}
		}
	case 257:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2118
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 258:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2123
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 259:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2128
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 260:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2133
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"value":      ASNDollar[2].TypeToken,
			}
		}
	case 261:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2141
		{
			ASNVAL.TypeValue = nil
		}
	case 262:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2146
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 263:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2151
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 264:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2156
		{
			ASNVAL.TypeValue = nil
		}
	case 265:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2161
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 266:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2164
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 267:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2169
		{
			ASNVAL.TypeValue = "NULL"
		}
	case 268:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2175
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 269:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2178
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 270:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2181
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 271:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2186
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 272:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2189
		{
			ASNVAL.TypeValue = nil
		}
	case 273:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2194
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 274:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2197
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 275:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2202
		{
			ASNVAL.TypeValue = nil
		}
	case 276:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2205
		{
			ASNVAL.TypeValue = nil
		}
	case 277:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2208
		{
			ASNVAL.TypeValue = nil
		}
	case 278:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2213
		{
			ASNVAL.TypeValue = nil
		}
	case 279:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2218
		{
			ASNVAL.TypeValue = nil
		}
	case 280:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2223
		{
			ASNVAL.TypeValue = nil
		}
	case 281:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2228
		{
			ASNVAL.TypeValue = nil
		}
	case 282:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2231
		{
			ASNVAL.TypeValue = nil
		}
	case 283:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2236
		{
			ASNVAL.TypeValue = nil
		}
	case 284:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2239
		{
			ASNVAL.TypeValue = nil
		}
	case 285:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2242
		{
			ASNVAL.TypeValue = nil
		}
	case 286:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2247
		{
			ASNVAL.TypeValue = nil
		}
	case 287:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2252
		{
			ASNVAL.TypeValue = nil
		}
	case 288:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2257
		{
			ASNVAL.TypeValue = nil
		}
	case 289:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2262
		{
			ASNVAL.TypeValue = nil
		}
	case 290:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2267
		{
			ASNVAL.TypeValue = nil
		}
	case 291:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2272
		{
			ASNVAL.TypeValue = nil
		}
	case 292:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2277
		{
			ASNVAL.TypeValue = nil
		}
	case 293:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2282
		{
			ASNVAL.TypeValue = nil
		}
	case 294:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2287
		{
			ASNVAL.TypeValue = nil
		}
	case 295:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2292
		{
			ASNVAL.TypeValue = nil
		}
	case 296:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2297
		{
			ASNVAL.TypeValue = nil
		}
	case 297:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2302
		{
			ASNVAL.TypeValue = nil
		}
	case 298:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2307
		{
			ASNVAL.TypeValue = nil
		}
	case 299:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2312
		{
			ASNVAL.TypeValue = nil
		}
	case 300:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2317
		{
			ASNVAL.TypeValue = nil
		}
	case 301:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2322
		{
			ASNVAL.TypeValue = nil
		}
	case 302:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2327
		{
			ASNVAL.TypeValue = nil
		}
	case 303:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2332
		{
			ASNVAL.TypeValue = nil
		}
	case 304:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2337
		{
			ASNVAL.TypeValue = nil
		}
	case 305:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2342
		{
			ASNVAL.TypeValue = nil
		}
	case 306:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2347
		{
			ASNVAL.TypeValue = MAP{
				"type":  "EXTERNAL_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 307:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2353
		{
			ASNVAL.TypeValue = MAP{
				"type":  "STRING_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 308:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2359
		{
			ASNVAL.TypeValue = MAP{
				"type":  "NUMBER_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 309:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2365
		{
			ASNVAL.TypeValue = MAP{
				"type":  "PARAMETERIZED_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 310:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2373
		{
			ASNVAL.TypeValue = MAP{
				"module": ASNDollar[1].TypeValue,
				"value":  ASNDollar[3].TypeValue,
			}
		}
	case 311:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2381
		{
			ASNVAL.TypeValue = nil
		}
	case 312:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2386
		{
			ASNVAL.TypeValue = nil
		}
	case 313:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2391
		{
			ASNVAL.TypeValue = nil
		}
	case 314:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2396
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 315:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2399
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 316:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2404
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 317:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2407
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 318:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2412
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeNumber
		}
	case 319:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2415
		{
			ASNVAL.TypeValue = (-1) * ASNDollar[2].TypeNumber
		}
	case 320:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2418
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeNumber
		}
	case 321:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2421
		{
			ASNVAL.TypeValue = (-1) * ASNDollar[2].TypeNumber
		}
	case 322:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2426
		{
			ASNVAL.TypeValue = "::="
		}
	}
	goto ASNstack /* stack new state and value */
}
