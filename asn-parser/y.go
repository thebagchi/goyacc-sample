// Code generated by goyacc -p ASN asn.y. DO NOT EDIT.

//line asn.y:1

package main

import __yyfmt__ "fmt"

//line asn.y:3
import (
	"bytes"
	"encoding/json"
	"fmt"
)

var code bytes.Buffer

func AddLine(line string) {
	code.WriteString(line)
	code.WriteByte('\n')
}

func JSON(obj interface{}) string {
	data, err := json.MarshalIndent(obj, "", "    ")
	if nil != err {
		fmt.Println("Error: ", err)
		return ""
	}
	return string(data)
}

func Print(line string) {
	fmt.Println(line)
}

func Join(values ...string) string {
	var buffer bytes.Buffer
	for _, value := range values {
		buffer.WriteString(value)
	}
	return buffer.String()
}

func SkipBlock() {
	parser.ExpectBlock = true
}

func SetResult(l ASNLexer, v VALUE) {
	l.(*Parser).Result = JSON(&v)
}

type Empty struct{}
type (
	VALUE   interface{}
	STRING  string
	NUMBER  float64
	BOOLEAN bool
	LIST    []VALUE
	MAP     map[string]VALUE
)

//line asn.y:56
type ASNSymType struct {
	yys         int
	TypeToken   struct{}
	TypeString  STRING
	TypeNumber  NUMBER
	TypeValue   VALUE
	TypeBoolean BOOLEAN
	TypeMap     MAP
	TypeList    LIST
}

const CURLY_START = 57346
const CURLY_END = 57347
const SQUARE_START = 57348
const SQUARE_END = 57349
const DOUBLE_QUOTE = 57350
const SINGLE_QUOTE = 57351
const COMMA = 57352
const COLON = 57353
const MINUS = 57354
const GREATER_THAN = 57355
const LESS_THAN = 57356
const DOT = 57357
const SLASH = 57358
const ROUND_START = 57359
const ROUND_END = 57360
const EQUALITY = 57361
const APOSTROPHE = 57362
const SPACE = 57363
const PIPE = 57364
const AT_THE_RATE = 57365
const EXCLAMATION = 57366
const CARET = 57367
const SEMI_COMMA = 57368
const ELLIPSIS = 57369
const ABSENT_SYMBOL = 57370
const ABSTRACTSYNTAX_SYMBOL = 57371
const ALL_SYMBOL = 57372
const APPLICATION_SYMBOL = 57373
const AUTOMATIC_SYMBOL = 57374
const BEGIN_SYMBOL = 57375
const BIT_SYMBOL = 57376
const BMPSTRING_SYMBOL = 57377
const BOOLEAN_SYMBOL = 57378
const BY_SYMBOL = 57379
const CHARACTER_SYMBOL = 57380
const CHOICE_SYMBOL = 57381
const CLASS_SYMBOL = 57382
const COMPONENT_SYMBOL = 57383
const COMPONENTS_SYMBOL = 57384
const CONSTRAINED_SYMBOL = 57385
const CONTAINING_SYMBOL = 57386
const DATE_SYMBOL = 57387
const DATETIME_SYMBOL = 57388
const DEFAULT_SYMBOL = 57389
const DEFINITIONS_SYMBOL = 57390
const DURATION_SYMBOL = 57391
const EMBEDDED_SYMBOL = 57392
const ENCODED_SYMBOL = 57393
const ENCODINGCONTROL_SYMBOL = 57394
const END_SYMBOL = 57395
const ENUMERATED_SYMBOL = 57396
const EXCEPT_SYMBOL = 57397
const EXPLICIT_SYMBOL = 57398
const EXPORTS_SYMBOL = 57399
const EXTENSIBILITY_SYMBOL = 57400
const EXTERNEL_SYMBOL = 57401
const FALSE_SYMBOL = 57402
const FROM_SYMBOL = 57403
const GENERALIZEDTIME_SYMBOL = 57404
const GENERALSTRING_SYMBOL = 57405
const GRAPHICSTRING_SYMBOL = 57406
const IA5STRING_SYMBOL = 57407
const IDENTIFIER_SYMBOL = 57408
const IMPLICIT_SYMBOL = 57409
const IMPLIED_SYMBOL = 57410
const IMPORTS_SYMBOL = 57411
const INCLUDES_SYMBOL = 57412
const INSTANCE_SYMBOL = 57413
const INSTRUCTIONS_SYMBOL = 57414
const INTEGER_SYMBOL = 57415
const INTERSECTION_SYMBOL = 57416
const ISO646STRING_SYMBOL = 57417
const MAX_SYMBOL = 57418
const MIN_SYMBOL = 57419
const MINUSINFINITY_SYMBOL = 57420
const NOTANUMBER_SYMBOL = 57421
const NULL_SYMBOL = 57422
const NUMERICSTRING_SYMBOL = 57423
const OBJECT_SYMBOL = 57424
const OBJECTDESCRIPTOR_SYMBOL = 57425
const OCTET_SYMBOL = 57426
const OF_SYMBOL = 57427
const OIDIRI_SYMBOL = 57428
const OPTIONAL_SYMBOL = 57429
const PATTERN_SYMBOL = 57430
const PDV_SYMBOL = 57431
const PLUSINFINITY_SYMBOL = 57432
const PRESENT_SYMBOL = 57433
const PRINTABLESTRING_SYMBOL = 57434
const PRIVATE_SYMBOL = 57435
const REAL_SYMBOL = 57436
const RELATIVEOID_SYMBOL = 57437
const RELATIVEOIDIRI_SYMBOL = 57438
const SEQUENCE_SYMBOL = 57439
const SET_SYMBOL = 57440
const SETTINGS_SYMBOL = 57441
const SIZE_SYMBOL = 57442
const STRING_SYMBOL = 57443
const SYNTAX_SYMBOL = 57444
const T61STRING_SYMBOL = 57445
const TAGS_SYMBOL = 57446
const TELETEXSTRING_SYMBOL = 57447
const TIME_SYMBOL = 57448
const TIMEOFDAY_SYMBOL = 57449
const TRUE_SYMBOL = 57450
const TYPEIDENTIFIER_SYMBOL = 57451
const UNION_SYMBOL = 57452
const UNIQUE_SYMBOL = 57453
const UNIVERSAL_SYMBOL = 57454
const UNIVERSALSTRING_SYMBOL = 57455
const UTCTIME_SYMBOL = 57456
const UTF8STRING_SYMBOL = 57457
const VIDEOTEXSTRING_SYMBOL = 57458
const VISIBLESTRING_SYMBOL = 57459
const WITH_SYMBOL = 57460
const ASSIGNMENT_SYMBOL = 57461
const TAG_SYMBOL = 57462
const XER_SYMBOL = 57463
const PER_SYMBOL = 57464
const TokenCapitalString = 57465
const TokenString = 57466
const TokenNumber = 57467
const TokenInteger = 57468
const TokenFloat = 57469
const TokenBoolean = 57470
const TokenBString = 57471
const TokenHString = 57472
const TokenCString = 57473
const TokenBlock = 57474

var ASNToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"CURLY_START",
	"CURLY_END",
	"SQUARE_START",
	"SQUARE_END",
	"DOUBLE_QUOTE",
	"SINGLE_QUOTE",
	"COMMA",
	"COLON",
	"MINUS",
	"GREATER_THAN",
	"LESS_THAN",
	"DOT",
	"SLASH",
	"ROUND_START",
	"ROUND_END",
	"EQUALITY",
	"APOSTROPHE",
	"SPACE",
	"PIPE",
	"AT_THE_RATE",
	"EXCLAMATION",
	"CARET",
	"SEMI_COMMA",
	"ELLIPSIS",
	"ABSENT_SYMBOL",
	"ABSTRACTSYNTAX_SYMBOL",
	"ALL_SYMBOL",
	"APPLICATION_SYMBOL",
	"AUTOMATIC_SYMBOL",
	"BEGIN_SYMBOL",
	"BIT_SYMBOL",
	"BMPSTRING_SYMBOL",
	"BOOLEAN_SYMBOL",
	"BY_SYMBOL",
	"CHARACTER_SYMBOL",
	"CHOICE_SYMBOL",
	"CLASS_SYMBOL",
	"COMPONENT_SYMBOL",
	"COMPONENTS_SYMBOL",
	"CONSTRAINED_SYMBOL",
	"CONTAINING_SYMBOL",
	"DATE_SYMBOL",
	"DATETIME_SYMBOL",
	"DEFAULT_SYMBOL",
	"DEFINITIONS_SYMBOL",
	"DURATION_SYMBOL",
	"EMBEDDED_SYMBOL",
	"ENCODED_SYMBOL",
	"ENCODINGCONTROL_SYMBOL",
	"END_SYMBOL",
	"ENUMERATED_SYMBOL",
	"EXCEPT_SYMBOL",
	"EXPLICIT_SYMBOL",
	"EXPORTS_SYMBOL",
	"EXTENSIBILITY_SYMBOL",
	"EXTERNEL_SYMBOL",
	"FALSE_SYMBOL",
	"FROM_SYMBOL",
	"GENERALIZEDTIME_SYMBOL",
	"GENERALSTRING_SYMBOL",
	"GRAPHICSTRING_SYMBOL",
	"IA5STRING_SYMBOL",
	"IDENTIFIER_SYMBOL",
	"IMPLICIT_SYMBOL",
	"IMPLIED_SYMBOL",
	"IMPORTS_SYMBOL",
	"INCLUDES_SYMBOL",
	"INSTANCE_SYMBOL",
	"INSTRUCTIONS_SYMBOL",
	"INTEGER_SYMBOL",
	"INTERSECTION_SYMBOL",
	"ISO646STRING_SYMBOL",
	"MAX_SYMBOL",
	"MIN_SYMBOL",
	"MINUSINFINITY_SYMBOL",
	"NOTANUMBER_SYMBOL",
	"NULL_SYMBOL",
	"NUMERICSTRING_SYMBOL",
	"OBJECT_SYMBOL",
	"OBJECTDESCRIPTOR_SYMBOL",
	"OCTET_SYMBOL",
	"OF_SYMBOL",
	"OIDIRI_SYMBOL",
	"OPTIONAL_SYMBOL",
	"PATTERN_SYMBOL",
	"PDV_SYMBOL",
	"PLUSINFINITY_SYMBOL",
	"PRESENT_SYMBOL",
	"PRINTABLESTRING_SYMBOL",
	"PRIVATE_SYMBOL",
	"REAL_SYMBOL",
	"RELATIVEOID_SYMBOL",
	"RELATIVEOIDIRI_SYMBOL",
	"SEQUENCE_SYMBOL",
	"SET_SYMBOL",
	"SETTINGS_SYMBOL",
	"SIZE_SYMBOL",
	"STRING_SYMBOL",
	"SYNTAX_SYMBOL",
	"T61STRING_SYMBOL",
	"TAGS_SYMBOL",
	"TELETEXSTRING_SYMBOL",
	"TIME_SYMBOL",
	"TIMEOFDAY_SYMBOL",
	"TRUE_SYMBOL",
	"TYPEIDENTIFIER_SYMBOL",
	"UNION_SYMBOL",
	"UNIQUE_SYMBOL",
	"UNIVERSAL_SYMBOL",
	"UNIVERSALSTRING_SYMBOL",
	"UTCTIME_SYMBOL",
	"UTF8STRING_SYMBOL",
	"VIDEOTEXSTRING_SYMBOL",
	"VISIBLESTRING_SYMBOL",
	"WITH_SYMBOL",
	"ASSIGNMENT_SYMBOL",
	"TAG_SYMBOL",
	"XER_SYMBOL",
	"PER_SYMBOL",
	"TokenCapitalString",
	"TokenString",
	"TokenNumber",
	"TokenInteger",
	"TokenFloat",
	"TokenBoolean",
	"TokenBString",
	"TokenHString",
	"TokenCString",
	"TokenBlock",
}

var ASNStatenames = [...]string{}

const ASNEofCode = 1
const ASNErrCode = 2
const ASNInitialStackSize = 16

//line asn.y:5009

//line yacctab:1
var ASNExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 45,
	123, 36,
	124, 36,
	-2, 32,
	-1, 100,
	15, 531,
	-2, 528,
	-1, 165,
	4, 139,
	-2, 132,
	-1, 166,
	4, 140,
	-2, 133,
	-1, 207,
	15, 222,
	-2, 521,
	-1, 234,
	10, 547,
	15, 531,
	-2, 521,
	-1, 312,
	22, 265,
	110, 265,
	-2, 195,
	-1, 314,
	25, 262,
	74, 262,
	-2, 197,
	-1, 318,
	55, 206,
	-2, 201,
	-1, 322,
	15, 222,
	-2, 521,
	-1, 336,
	15, 169,
	-2, 258,
	-1, 338,
	15, 170,
	-2, 260,
	-1, 339,
	14, 226,
	15, 226,
	-2, 219,
	-1, 347,
	4, 140,
	-2, 133,
	-1, 352,
	14, 492,
	15, 492,
	-2, 377,
	-1, 380,
	4, 140,
	-2, 133,
	-1, 386,
	15, 173,
	-2, 136,
	-1, 398,
	15, 531,
	-2, 546,
	-1, 419,
	10, 477,
	-2, 65,
	-1, 427,
	10, 461,
	-2, 66,
	-1, 428,
	10, 479,
	-2, 67,
	-1, 446,
	15, 531,
	-2, 546,
	-1, 452,
	10, 461,
	-2, 66,
	-1, 454,
	15, 222,
	-2, 521,
	-1, 455,
	15, 222,
	-2, 521,
	-1, 458,
	15, 222,
	-2, 521,
	-1, 499,
	15, 531,
	-2, 521,
	-1, 500,
	10, 461,
	-2, 66,
	-1, 501,
	10, 479,
	-2, 67,
	-1, 502,
	10, 474,
	-2, 467,
	-1, 503,
	10, 475,
	-2, 469,
	-1, 504,
	10, 476,
	-2, 470,
	-1, 539,
	4, 140,
	11, 133,
	17, 133,
	-2, 541,
	-1, 541,
	11, 531,
	15, 531,
	-2, 275,
	-1, 547,
	25, 262,
	74, 262,
	-2, 198,
	-1, 588,
	15, 222,
	-2, 521,
	-1, 592,
	15, 169,
	-2, 278,
	-1, 593,
	11, 281,
	-2, 279,
	-1, 594,
	11, 282,
	-2, 280,
	-1, 597,
	5, 177,
	-2, 544,
	-1, 618,
	4, 136,
	5, 136,
	11, 136,
	15, 173,
	17, 136,
	-2, 544,
	-1, 748,
	10, 406,
	-2, 352,
}

const ASNPrivate = 57344

const ASNLast = 1943

var ASNAct = [...]int{
	166, 5, 678, 5, 718, 721, 720, 284, 727, 739,
	719, 717, 688, 637, 362, 671, 735, 656, 640, 631,
	21, 367, 206, 21, 187, 599, 309, 590, 530, 442,
	473, 445, 357, 390, 429, 339, 411, 370, 335, 314,
	40, 204, 415, 193, 237, 722, 318, 416, 316, 292,
	192, 65, 65, 430, 355, 408, 397, 83, 83, 291,
	65, 368, 264, 327, 238, 453, 394, 68, 398, 420,
	194, 67, 285, 72, 83, 14, 23, 30, 236, 33,
	34, 634, 436, 420, 23, 6, 7, 456, 39, 38,
	23, 83, 723, 37, 65, 199, 230, 217, 139, 180,
	140, 210, 186, 143, 706, 23, 568, 185, 278, 144,
	145, 23, 567, 146, 147, 742, 705, 566, 148, 212,
	732, 643, 615, 149, 280, 102, 182, 176, 170, 181,
	383, 382, 376, 62, 375, 150, 214, 151, 29, 174,
	50, 43, 294, 295, 352, 171, 154, 184, 155, 569,
	152, 723, 689, 343, 293, 74, 173, 731, 156, 158,
	157, 159, 160, 216, 6, 7, 459, 177, 436, 175,
	163, 164, 279, 6, 7, 457, 23, 178, 183, 169,
	179, 172, 218, 223, 574, 23, 36, 6, 7, 441,
	22, 24, 23, 275, 276, 502, 20, 730, 22, 24,
	244, 6, 7, 60, 22, 24, 283, 245, 347, 433,
	358, 521, 364, 657, 369, 460, 374, 20, 23, 22,
	24, 559, 380, 219, 224, 22, 24, 197, 386, 99,
	358, 28, 6, 7, 73, 347, 723, 101, 6, 7,
	51, 248, 711, 412, 51, 381, 99, 353, 6, 7,
	413, 338, 50, 373, 201, 27, 371, 363, 336, 682,
	93, 55, 240, 92, 310, 354, 26, 379, 233, 235,
	393, 454, 249, 396, 509, 23, 395, 402, 427, 283,
	9, 23, 55, 70, 388, 428, 444, 6, 7, 49,
	22, 24, 90, 443, 207, 433, 6, 7, 61, 22,
	24, 712, 659, 6, 7, 710, 22, 24, 347, 466,
	41, 94, 452, 391, 437, 348, 71, 6, 7, 428,
	431, 6, 7, 347, 48, 432, 418, 435, 542, 6,
	7, 595, 22, 24, 450, 448, 45, 434, 56, 403,
	748, 231, 232, 437, 559, 410, 283, 468, 660, 462,
	69, 561, 23, 540, 431, 97, 96, 225, 401, 432,
	474, 435, 451, 91, 53, 465, 338, 446, 632, 511,
	207, 434, 636, 336, 57, 378, 380, 380, 52, 635,
	385, 467, 387, 380, 380, 461, 6, 7, 392, 22,
	24, 619, 6, 7, 100, 22, 24, 612, 438, 500,
	244, 228, 572, 611, 513, 587, 501, 506, 549, 412,
	412, 207, 205, 208, 496, 534, 413, 413, 514, 44,
	412, 486, 488, 417, 207, 513, 526, 413, 491, 493,
	348, 557, 482, 413, 393, 32, 531, 396, 226, 283,
	395, 431, 444, 670, 528, 510, 432, 539, 504, 443,
	672, 283, 242, 222, 536, 347, 347, 209, 503, 347,
	23, 449, 550, 6, 7, 512, 22, 24, 523, 532,
	358, 533, 358, 524, 529, 512, 16, 391, 364, 522,
	228, 572, 369, 244, 42, 374, 543, 558, 209, 552,
	563, 545, 31, 513, 463, 547, 228, 227, 338, 338,
	347, 546, 338, 220, 554, 336, 336, 548, 438, 336,
	471, 228, 227, 412, 244, 469, 207, 577, 478, 244,
	413, 413, 565, 560, 553, 42, 245, 581, 583, 485,
	487, 207, 444, 571, 478, 393, 490, 492, 396, 443,
	464, 395, 570, 562, 417, 229, 597, 470, 693, 510,
	654, 283, 392, 578, 628, 655, 575, 474, 244, 402,
	438, 585, 348, 348, 759, 605, 348, 729, 435, 241,
	407, 6, 7, 618, 22, 24, 704, 626, 434, 477,
	555, 46, 627, 594, 221, 556, 601, 604, 283, 347,
	517, 609, 592, 610, 42, 518, 283, 515, 483, 222,
	538, 283, 516, 484, 756, 737, 749, 747, 728, 364,
	729, 726, 409, 700, 622, 625, 364, 699, 481, 668,
	638, 403, 661, 623, 645, 646, 633, 644, 650, 283,
	620, 629, 338, 658, 608, 588, 601, 520, 519, 336,
	401, 499, 480, 477, 476, 369, 447, 419, 404, 405,
	406, 93, 586, 392, 642, 651, 584, 760, 713, 665,
	666, 647, 364, 573, 652, 508, 664, 653, 750, 594,
	679, 685, 658, 667, 497, 669, 684, 691, 592, 364,
	677, 419, 662, 733, 725, 716, 698, 697, 687, 686,
	681, 680, 621, 692, 617, 593, 348, 544, 277, 715,
	691, 691, 285, 527, 498, 479, 23, 642, 600, 475,
	384, 377, 707, 708, 703, 364, 364, 200, 714, 676,
	234, 614, 613, 616, 363, 596, 541, 724, 359, 364,
	364, 215, 283, 213, 740, 743, 211, 734, 278, 95,
	12, 736, 3, 746, 648, 8, 389, 495, 364, 695,
	364, 494, 753, 755, 280, 740, 364, 364, 679, 754,
	751, 758, 757, 752, 694, 489, 603, 744, 419, 507,
	602, 1, 294, 295, 286, 426, 440, 439, 400, 188,
	505, 593, 399, 162, 293, 161, 741, 738, 372, 663,
	366, 365, 641, 639, 607, 525, 361, 360, 142, 141,
	472, 535, 279, 630, 306, 305, 591, 589, 302, 301,
	300, 337, 709, 702, 701, 690, 537, 6, 7, 675,
	22, 24, 674, 275, 276, 289, 673, 551, 598, 350,
	341, 340, 334, 333, 332, 331, 696, 330, 329, 328,
	326, 325, 324, 323, 321, 320, 319, 458, 317, 455,
	315, 312, 564, 624, 303, 299, 298, 297, 296, 311,
	138, 194, 356, 285, 196, 195, 191, 23, 190, 98,
	54, 189, 322, 168, 167, 165, 137, 136, 135, 134,
	133, 64, 63, 576, 425, 313, 745, 288, 579, 139,
	180, 140, 287, 186, 143, 582, 424, 683, 304, 307,
	144, 145, 649, 580, 146, 147, 308, 423, 422, 148,
	290, 421, 282, 281, 149, 280, 342, 182, 176, 170,
	181, 274, 273, 272, 271, 349, 150, 606, 151, 270,
	174, 269, 351, 294, 295, 352, 171, 154, 184, 155,
	268, 152, 267, 345, 266, 293, 265, 173, 263, 156,
	158, 157, 159, 160, 346, 222, 262, 261, 177, 260,
	175, 163, 164, 279, 259, 258, 257, 256, 178, 183,
	169, 179, 172, 344, 255, 254, 253, 252, 6, 7,
	251, 22, 24, 250, 275, 276, 289, 277, 247, 194,
	246, 285, 243, 132, 131, 23, 130, 129, 128, 127,
	322, 126, 125, 124, 123, 122, 121, 120, 119, 118,
	117, 116, 114, 313, 115, 113, 112, 139, 180, 140,
	111, 186, 143, 110, 109, 108, 107, 278, 144, 145,
	106, 105, 146, 147, 104, 103, 89, 148, 88, 87,
	86, 85, 149, 280, 342, 182, 176, 170, 181, 84,
	203, 202, 82, 349, 150, 81, 151, 80, 174, 79,
	351, 294, 295, 352, 171, 154, 184, 155, 78, 152,
	77, 345, 76, 293, 75, 173, 414, 156, 158, 157,
	159, 160, 346, 222, 239, 198, 177, 66, 175, 163,
	164, 279, 59, 58, 47, 35, 178, 183, 169, 179,
	172, 344, 13, 25, 19, 18, 6, 7, 17, 22,
	24, 15, 275, 276, 289, 277, 11, 194, 10, 285,
	4, 2, 0, 23, 0, 0, 0, 0, 322, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 180, 140, 0, 186,
	143, 0, 0, 0, 0, 278, 144, 145, 0, 0,
	146, 147, 0, 0, 0, 148, 0, 0, 0, 0,
	149, 280, 342, 182, 176, 170, 181, 0, 0, 0,
	0, 349, 150, 0, 151, 0, 174, 0, 351, 294,
	295, 352, 171, 154, 184, 155, 0, 152, 0, 345,
	0, 293, 0, 173, 0, 156, 158, 157, 159, 160,
	346, 222, 0, 0, 177, 0, 175, 163, 164, 279,
	0, 0, 0, 0, 178, 183, 169, 179, 172, 344,
	0, 0, 0, 0, 6, 7, 0, 22, 24, 0,
	275, 276, 289, 277, 0, 194, 0, 285, 0, 0,
	0, 23, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 180, 140, 0, 186, 143, 0,
	0, 0, 0, 278, 144, 145, 0, 0, 146, 147,
	0, 0, 0, 148, 0, 0, 0, 0, 149, 280,
	0, 182, 176, 170, 181, 0, 0, 0, 0, 0,
	150, 0, 151, 0, 174, 0, 0, 294, 295, 352,
	171, 154, 184, 155, 0, 152, 0, 0, 0, 293,
	0, 173, 0, 156, 158, 157, 159, 160, 0, 0,
	0, 0, 177, 0, 175, 163, 164, 279, 0, 0,
	0, 0, 178, 183, 169, 179, 172, 0, 0, 0,
	0, 0, 6, 7, 0, 22, 24, 0, 275, 276,
	289, 398, 0, 194, 0, 285, 0, 0, 0, 23,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 180, 140, 0, 186, 143, 0, 0, 0,
	0, 278, 144, 145, 0, 0, 146, 147, 0, 0,
	0, 148, 0, 0, 0, 0, 149, 280, 0, 182,
	176, 170, 181, 0, 0, 0, 0, 0, 150, 0,
	151, 0, 174, 0, 0, 294, 295, 352, 171, 154,
	184, 155, 0, 152, 0, 0, 0, 293, 0, 173,
	0, 156, 158, 157, 159, 160, 0, 0, 0, 0,
	177, 194, 175, 163, 164, 279, 0, 23, 0, 0,
	178, 183, 169, 179, 172, 0, 0, 0, 0, 0,
	6, 7, 0, 22, 24, 0, 275, 276, 289, 139,
	180, 140, 0, 186, 143, 0, 0, 0, 0, 0,
	144, 145, 0, 0, 146, 147, 0, 0, 0, 148,
	0, 0, 0, 0, 149, 0, 0, 182, 176, 170,
	181, 0, 0, 0, 0, 0, 150, 0, 151, 0,
	174, 0, 0, 0, 0, 153, 171, 154, 184, 155,
	0, 152, 0, 0, 0, 0, 0, 173, 0, 156,
	158, 157, 159, 160, 0, 194, 0, 0, 177, 0,
	175, 163, 164, 228, 227, 0, 0, 0, 178, 183,
	169, 179, 172, 0, 0, 0, 0, 0, 6, 7,
	0, 22, 24, 139, 180, 140, 0, 186, 143, 0,
	0, 0, 0, 0, 144, 145, 0, 0, 146, 147,
	0, 0, 0, 148, 0, 0, 0, 0, 149, 0,
	0, 182, 176, 170, 181, 0, 0, 0, 0, 0,
	150, 0, 151, 0, 174, 0, 0, 0, 0, 153,
	171, 154, 184, 155, 0, 152, 0, 0, 0, 0,
	0, 173, 0, 156, 158, 157, 159, 160, 194, 0,
	0, 0, 177, 42, 175, 163, 164, 0, 0, 0,
	0, 0, 178, 183, 169, 179, 172, 0, 0, 0,
	0, 0, 6, 7, 0, 0, 139, 180, 140, 0,
	186, 143, 0, 0, 0, 0, 0, 144, 145, 0,
	0, 146, 147, 0, 0, 0, 148, 0, 0, 0,
	0, 149, 0, 0, 182, 176, 170, 181, 0, 0,
	0, 0, 0, 150, 0, 151, 0, 174, 0, 0,
	0, 0, 153, 171, 154, 184, 155, 0, 152, 0,
	0, 0, 0, 0, 173, 0, 156, 158, 157, 159,
	160, 194, 0, 0, 0, 177, 0, 175, 163, 164,
	0, 0, 0, 0, 0, 178, 183, 169, 179, 172,
	0, 0, 0, 0, 0, 6, 7, 0, 0, 139,
	180, 140, 0, 186, 143, 0, 0, 0, 0, 0,
	144, 145, 0, 0, 146, 147, 0, 0, 277, 148,
	0, 0, 285, 0, 149, 0, 23, 182, 176, 170,
	181, 0, 0, 0, 0, 277, 150, 0, 151, 285,
	174, 0, 0, 23, 0, 153, 171, 154, 184, 155,
	0, 152, 0, 0, 0, 0, 0, 173, 278, 156,
	158, 157, 159, 160, 0, 0, 0, 0, 177, 0,
	175, 163, 164, 0, 280, 278, 0, 0, 178, 183,
	169, 179, 172, 0, 0, 0, 0, 0, 6, 7,
	602, 280, 294, 295, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 0, 0, 0, 0, 294,
	295, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 6, 7, 279,
	22, 24, 0, 275, 276, 289, 0, 0, 0, 0,
	0, 0, 0, 0, 6, 7, 0, 22, 24, 0,
	275, 276, 289,
}

var ASNPact = [...]int{
	-38, -1000, -38, -1000, 232, 736, -1000, -1000, -1000, -48,
	-1000, -1000, 93, 199, 66, 72, -1000, -1000, -1000, -1000,
	418, -1000, -1000, -47, -1000, 128, -11, -15, -16, -1000,
	-1000, -1000, 99, -1000, -1000, 583, 73, -1000, -1000, -1000,
	401, 303, 570, -1000, -1000, 183, 359, 209, 187, 71,
	-38, 41, -1000, 230, -1000, -50, -38, -38, 337, -38,
	-1000, 250, -1000, 735, -1000, -1000, 330, 329, -1000, 641,
	-1000, 209, -1000, -38, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1652, -1000, -1000, -1000, -1000, -1000, -1000,
	-38, -1000, -1000, -38, -38, 712, -1000, -1000, -1000, -1000,
	1745, 514, 473, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 0,
	-1000, -1000, -1000, 732, -1000, -1000, -1000, 30, 729, -1000,
	51, 727, -1000, -1000, 97, -4, -1000, -1000, -1000, 499,
	353, -1000, -1000, -1000, -1000, -1000, 482, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 530, -5, 1745, 1745, 716,
	716, -1000, 716, -1000, -59, -1000, -1000, -1000, -1000, 448,
	-1000, 407, -1000, -1000, 442, 1811, -1000, 855, -1000, -38,
	724, -38, -1000, -38, -1000, -38, -1000, -1000, 49, 47,
	706, 1745, 407, 46, 45, 705, 1745, -38, 1745, -38,
	-1000, 407, 407, -1000, 1367, -1000, -1000, 528, 559, -1000,
	-1000, -1000, 340, -1000, 529, -1000, -1000, 716, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 78, 1811, -1000,
	-1000, -1000, -1000, 549, -1000, 173, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 343, -1000, -1000, -1000,
	-1000, -1000, -1000, 636, 298, -1000, -1000, 1239, 297, -1000,
	-1000, 78, -1000, 216, -1000, 65, -1000, 141, -1000, 216,
	-1000, -1000, 983, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 716, -1000, -1000, -1000,
	1745, 525, 407, 407, 267, 1811, -38, 497, 500, -1000,
	533, -1000, -1000, -1000, -1000, -1000, 495, -1000, -1000, -38,
	704, 634, 633, -1000, 1745, 700, 632, 608, -1000, 415,
	-1000, -1000, 593, -1000, 415, 1745, 1745, -1000, 407, -1000,
	1559, -1000, 1745, 1745, -1000, 407, -1000, 407, -1000, 668,
	699, 631, 407, -1000, -1000, 442, -1000, -1000, 64, 263,
	658, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 269, 263,
	-1000, -1000, 408, -1000, -1000, -1000, -1000, -38, -1000, 263,
	-1000, 592, 585, 628, 627, 206, 698, 408, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 99, -1000, 1811, 420,
	420, 263, -1000, -1000, -1000, 397, 1465, 326, 722, 277,
	1811, 692, 476, -1000, 1111, 1111, -1000, -1000, 1111, -1000,
	-1000, -1000, 390, 407, 447, -1000, 407, -1000, -1000, -38,
	-1000, -38, 575, -1000, 414, -1000, 317, -38, 407, -1000,
	324, -38, 263, -1000, -38, 407, -1000, 407, -1000, 20,
	407, -1000, 407, -1000, 14, 8, 82, -59, -1000, 1239,
	387, -1000, -1000, -1000, -1000, 656, -1000, -1000, -1000, -1000,
	-1000, -1000, 180, 263, -1000, -1000, -38, -1000, 164, 99,
	99, -1000, -1000, -1000, -1000, -1000, 408, -1000, -1000, -1000,
	648, 263, 644, -1000, -1000, -1000, -1000, -1000, 394, 466,
	625, 1745, 294, -1000, 721, -38, -1000, -1000, -1000, -1000,
	694, -1000, -1000, -1000, -1000, -1000, -38, 263, 624, 343,
	-1000, 343, -1000, 385, 379, -1000, 718, 717, 37, 1745,
	246, 689, -38, -1000, -1000, 373, -1000, -1000, -1000, -1000,
	620, -1000, 687, -1000, -1000, 420, -1000, 1811, 983, 572,
	-1000, 543, 716, 407, 442, 1811, 345, -1000, -1000, -1000,
	1794, -1000, -1000, -37, -1000, 361, 354, 610, 115, -1000,
	617, -1000, -1000, 317, 317, -38, 407, -1000, -1000, -1000,
	99, -1000, -1000, -1000, -1000, -1000, -1000, 1745, 1811, -1000,
	545, -1000, 198, -1000, 260, -1000, -1000, -1000, 321, 612,
	-1000, -1000, -1000, 676, -38, 610, 610, -1000, 668, 609,
	-1000, -1000, -1000, -1000, -1000, 345, 428, 435, -1000, 715,
	-1000, 115, 99, -1000, 608, 686, 685, 203, 99, -1000,
	-38, -38, 435, -1000, -1000, -1000, 125, -1000, -38, 537,
	-1000, -1000, 1745, 682, -1000, -1000, 428, -1000, 681, 607,
	603, 407, 569, -1000, 19, 6, 407, -1000, -1000, -38,
	-38, -1000, 214, -1000, 651, 714, 695, 680, -1000, -1000,
	-1000, -1000, -1000, -1000, 194, 194, -1000, 679, 601, 598,
	600, -1000, 110, 35, 678, -1000, 317, 595, 109, 50,
	-1000, 1811, 1745, -1000, 598, 597, -1000, 313, 596, -1000,
	-1000, -1000, 662, -1000, -1000, 407, 595, 50, -1000, 109,
	99, -1000, 594, -1000, -1000, 50, 50, 557, -1000, 650,
	-1000,
}

var ASNPgo = [...]int{
	0, 1121, 742, 1120, 1118, 1116, 1111, 476, 1108, 1105,
	1104, 1103, 1102, 1095, 1094, 324, 289, 1093, 1092, 203,
	1087, 298, 133, 1085, 1084, 62, 55, 36, 1076, 42,
	47, 234, 155, 369, 1074, 1072, 1070, 1068, 1059, 1057,
	1055, 1052, 153, 35, 66, 1051, 1050, 41, 38, 56,
	1049, 1041, 1040, 1039, 1038, 1036, 1035, 1034, 1031, 1030,
	1026, 1025, 1024, 1023, 1020, 1016, 1015, 1014, 1012, 1011,
	1010, 1009, 1008, 1007, 1006, 1005, 1004, 1003, 1002, 1001,
	999, 998, 997, 996, 994, 993, 992, 990, 988, 78,
	983, 980, 977, 976, 975, 974, 967, 966, 965, 964,
	959, 957, 956, 948, 946, 944, 942, 940, 931, 929,
	924, 923, 922, 921, 913, 912, 911, 910, 59, 49,
	908, 34, 907, 903, 902, 897, 896, 895, 892, 887,
	884, 53, 316, 882, 881, 880, 879, 878, 877, 876,
	875, 874, 873, 871, 107, 54, 33, 870, 869, 868,
	866, 50, 43, 865, 864, 862, 32, 22, 860, 858,
	31, 857, 856, 855, 854, 853, 26, 851, 65, 39,
	850, 849, 48, 848, 847, 46, 846, 845, 844, 843,
	842, 841, 840, 63, 839, 838, 837, 835, 834, 833,
	832, 831, 830, 829, 828, 25, 827, 826, 822, 819,
	12, 815, 814, 813, 812, 811, 810, 809, 808, 807,
	27, 806, 805, 804, 803, 19, 17, 15, 801, 45,
	800, 30, 799, 798, 797, 796, 10, 794, 13, 14,
	793, 18, 792, 791, 2, 790, 789, 21, 61, 37,
	788, 11, 4, 8, 16, 6, 5, 787, 9, 786,
	785, 783, 24, 44, 782, 780, 779, 778, 777, 28,
	29, 776, 775, 310, 0, 7, 775, 771, 766, 765,
	764, 751, 749, 747, 746, 744, 744,
}

var ASNR1 = [...]int{
	0, 267, 1, 1, 2, 132, 132, 132, 147, 148,
	3, 12, 12, 4, 4, 5, 6, 6, 7, 7,
	7, 8, 9, 10, 11, 11, 11, 11, 13, 13,
	14, 14, 14, 16, 16, 16, 16, 20, 20, 21,
	21, 22, 22, 133, 134, 134, 15, 15, 17, 17,
	18, 18, 19, 23, 24, 24, 24, 25, 25, 25,
	26, 26, 27, 27, 27, 27, 28, 29, 29, 30,
	31, 31, 31, 32, 32, 32, 32, 32, 32, 32,
	32, 34, 35, 36, 37, 38, 39, 40, 41, 41,
	41, 41, 41, 41, 42, 42, 42, 43, 43, 43,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 57, 57, 57,
	57, 57, 135, 135, 135, 135, 140, 141, 142, 143,
	143, 89, 89, 146, 146, 146, 146, 146, 146, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 137, 138, 144, 144, 144,
	144, 149, 149, 153, 150, 151, 151, 154, 152, 145,
	155, 155, 156, 139, 58, 58, 157, 159, 159, 161,
	163, 163, 163, 164, 165, 166, 166, 167, 167, 169,
	169, 172, 172, 175, 175, 175, 176, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 179,
	180, 191, 191, 181, 192, 192, 193, 193, 194, 194,
	195, 195, 182, 183, 184, 268, 185, 196, 197, 197,
	198, 200, 200, 201, 202, 203, 203, 204, 204, 204,
	204, 199, 186, 187, 188, 189, 190, 178, 178, 178,
	178, 205, 173, 174, 174, 170, 171, 171, 168, 162,
	162, 162, 206, 209, 209, 209, 210, 210, 210, 210,
	210, 211, 211, 207, 207, 212, 213, 214, 214, 215,
	215, 216, 216, 217, 217, 208, 208, 208, 160, 160,
	218, 218, 218, 158, 158, 158, 158, 158, 158, 158,
	158, 219, 59, 59, 220, 220, 221, 221, 60, 61,
	61, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 223, 62, 224, 224, 225, 229,
	229, 226, 226, 227, 227, 230, 230, 231, 231, 232,
	234, 234, 228, 228, 63, 64, 65, 66, 68, 233,
	233, 233, 235, 236, 237, 237, 238, 238, 239, 239,
	67, 69, 70, 70, 240, 240, 71, 72, 73, 74,
	75, 76, 77, 78, 269, 270, 79, 241, 241, 241,
	241, 241, 242, 245, 245, 246, 246, 246, 246, 243,
	243, 247, 247, 248, 248, 249, 244, 80, 80, 271,
	272, 81, 273, 82, 84, 85, 83, 83, 274, 275,
	250, 252, 253, 254, 254, 254, 254, 255, 255, 251,
	256, 257, 257, 257, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 93, 93, 93, 93,
	93, 116, 116, 94, 94, 95, 95, 114, 114, 114,
	114, 117, 120, 120, 121, 121, 121, 121, 118, 122,
	123, 124, 125, 119, 126, 127, 115, 96, 97, 98,
	99, 101, 103, 104, 104, 104, 105, 105, 128, 128,
	129, 129, 129, 100, 102, 258, 260, 260, 259, 259,
	106, 261, 107, 130, 130, 131, 131, 131, 108, 108,
	262, 109, 110, 111, 112, 113, 91, 92, 45, 44,
	46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
	33, 33, 33, 33, 86, 87, 88, 89, 264, 264,
	265, 265, 265, 265, 263, 276, 266,
}

var ASNR2 = [...]int{
	0, 1, 1, 2, 10, 1, 2, 0, 3, 0,
	2, 2, 0, 1, 0, 3, 1, 2, 1, 1,
	1, 1, 1, 4, 2, 2, 2, 0, 2, 0,
	3, 3, 0, 3, 3, 2, 0, 1, 0, 1,
	3, 1, 1, 1, 1, 3, 3, 0, 1, 0,
	1, 2, 3, 2, 1, 1, 0, 3, 4, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 4,
	1, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 4, 3, 4, 3, 4, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 2, 1,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 3, 2, 1, 1, 3, 2, 1,
	1, 3, 1, 3, 2, 1, 4, 1, 1, 1,
	1, 3, 5, 1, 1, 1, 2, 1, 3, 1,
	3, 1, 2, 1, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 0, 4, 1, 2, 1, 1, 1, 2,
	1, 1, 2, 2, 1, 0, 7, 1, 1, 1,
	3, 1, 3, 2, 2, 1, 0, 1, 1, 1,
	0, 5, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 2, 1,
	1, 1, 5, 1, 3, 0, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 6, 1, 3, 2,
	4, 1, 3, 2, 0, 2, 3, 5, 2, 0,
	1, 1, 3, 4, 4, 4, 4, 4, 4, 4,
	4, 2, 2, 5, 1, 3, 4, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 4, 1, 5, 1, 1,
	3, 1, 2, 2, 0, 1, 3, 1, 1, 6,
	2, 0, 2, 0, 1, 1, 1, 2, 4, 1,
	4, 6, 1, 1, 1, 3, 1, 1, 4, 4,
	1, 3, 1, 4, 1, 3, 1, 1, 3, 2,
	2, 1, 1, 1, 0, 0, 14, 1, 5, 7,
	5, 3, 1, 1, 3, 1, 2, 3, 3, 2,
	0, 1, 3, 1, 1, 6, 2, 3, 3, 0,
	0, 14, 0, 7, 1, 1, 1, 1, 0, 0,
	10, 5, 2, 1, 1, 1, 0, 1, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	2, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 9, 1,
	1, 1, 1, 5, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 2, 1, 1, 3, 0,
	4, 1, 3, 1, 2, 1, 1, 1, 3, 2,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1, 1, 1, 1, 3, 2, 0, 0, 1, 1,
	1, 2, 1, 2, 3, 0, 2,
}

var ASNChk = [...]int{
	-1000, -267, -1, -2, -3, -264, 123, 124, -2, 48,
	-4, -5, 4, -12, 123, -6, -7, -8, -9, -10,
	124, -265, 126, 12, 127, -11, 67, 56, 32, 72,
	5, -7, 17, 126, 127, -13, 58, 104, 104, 104,
	-265, -263, 11, 68, 18, 33, 11, -14, -15, -16,
	69, 57, 19, -132, -147, 52, -16, -15, -17, -18,
	-19, -21, -22, -133, -134, -264, -20, 30, 26, -21,
	53, -132, 123, -31, -32, -34, -35, -36, -37, -38,
	-39, -40, -41, -264, -50, -51, -52, -53, -54, -55,
	-31, 26, -19, 10, 61, 4, 26, 26, -148, -32,
	-263, -42, -47, -56, -57, -58, -59, -60, -61, -62,
	-63, -64, -65, -66, -68, -67, -69, -70, -71, -72,
	-73, -74, -75, -76, -77, -78, -79, -80, -81, -82,
	-83, -84, -85, -135, -136, -137, -138, -139, -158, 34,
	36, -222, -223, 39, 45, 46, 49, 50, 54, 59,
	71, 73, 86, 80, 82, 84, 94, 96, 95, 97,
	98, -250, -251, 106, 107, -140, -264, -141, -142, 115,
	64, 81, 117, 92, 75, 105, 63, 103, 113, 116,
	35, 65, 62, 114, 83, -144, 38, -252, -256, -143,
	-149, -150, -151, -152, 6, -153, -154, -22, -23, -264,
	5, -42, -45, -46, -47, -263, -157, 17, -263, 15,
	101, 4, 89, 4, 85, 4, 66, 101, -157, -183,
	4, 85, 100, -157, -183, 4, 85, 15, 14, 15,
	101, -42, -42, -89, 4, -89, -89, -253, 123, -24,
	-25, -33, 4, -86, -264, -265, -87, -88, -43, -44,
	-90, -91, -92, -93, -94, -95, -96, -97, -98, -99,
	-100, -101, -102, -103, -25, -104, -105, -106, -107, -108,
	-109, -110, -111, -112, -113, 129, 130, 4, 44, 108,
	60, -114, -115, -264, -265, 8, 80, -128, -129, 131,
	-117, -118, -119, 90, 78, 79, -159, -161, -162, -163,
	-206, -207, -208, -164, 43, -212, -213, 44, 51, -166,
	-49, 4, -167, 30, -169, -170, -172, -173, -175, -176,
	-177, -178, 17, -179, -180, -181, -182, -183, -184, -185,
	-186, -187, -188, -189, -190, -48, -151, -205, -152, -43,
	-191, -192, 61, -42, 118, 88, 99, -264, -144, 70,
	-193, 77, 80, -48, -49, -145, -155, -156, -264, 4,
	-224, -225, -229, -219, -264, -233, -235, -237, -238, -264,
	-239, -47, -240, -239, -264, 85, 85, 5, -42, -219,
	-264, -157, 85, 85, 5, -42, -264, -42, -145, -274,
	-146, -89, -42, -43, -44, -47, -48, -49, 4, -254,
	-257, 112, 31, 93, 120, 121, 122, 11, -26, -33,
	5, -27, -264, -265, -28, -29, -30, 15, -89, -33,
	5, -116, -120, -122, -126, -130, -262, -264, -265, -121,
	-131, -29, -30, 131, -118, -119, 4, -43, 11, -258,
	-261, 16, -260, -265, -264, -160, 24, 10, 37, -42,
	37, -151, -264, -168, 55, -171, 22, 110, -174, 25,
	74, -168, -166, -42, 15, -157, 42, -43, -264, 15,
	14, 15, -220, -221, -264, 5, 10, 10, -42, 5,
	10, 10, 17, 5, 10, -42, -219, -42, -219, -269,
	-42, -219, -42, -219, -271, -273, -252, 6, 5, 10,
	-264, -265, 131, -118, -119, -255, -265, -33, 7, 5,
	-27, -33, -26, 17, -264, 5, 10, 5, 10, 10,
	10, 5, -131, -29, -30, -33, -264, 5, -265, -43,
	-259, 16, -259, -260, 18, -218, -265, -33, -42, -264,
	27, 4, 51, -43, 5, 15, -175, -169, -172, 18,
	15, -196, -157, -145, -156, 5, 10, 17, -226, 27,
	-219, 27, -238, -265, -33, -239, 97, 98, 98, 67,
	-253, -146, 15, 7, 4, -29, -33, -264, -121, -33,
	-123, -265, -127, -265, 8, -260, 8, 11, 10, -209,
	-210, -211, -151, -42, -47, 37, 4, -264, -194, -195,
	14, -43, 76, -268, -221, -265, -33, -227, 10, -160,
	-160, 18, 18, 4, 4, 85, -42, 5, -264, 18,
	10, 5, -259, -43, -165, -166, 5, 10, 11, -43,
	-214, -215, 23, -195, 118, 18, 18, -228, 10, -230,
	-231, -232, -219, 6, 10, -226, -226, -219, -275, -124,
	-265, -210, -43, -48, 5, 10, -216, 15, -264, 42,
	27, 10, 6, -236, -237, -228, -228, -252, 10, -215,
	15, -217, 15, -197, -198, -199, 4, -231, -234, -265,
	5, 5, 56, -125, -265, -264, -216, -217, -200, 27,
	-201, -264, -229, 11, -270, -272, -42, 5, 5, 10,
	10, -202, -203, -157, 7, 97, 98, -200, -200, -204,
	91, 28, 87, 7, 4, 4, 5, -241, -242, -226,
	-245, -246, -219, 42, -241, 5, 10, -243, 10, 10,
	87, 47, 85, 5, -226, -244, -228, 10, -247, -248,
	-246, -249, 6, -246, -43, -42, -243, 10, 27, 10,
	6, -228, -244, -242, -248, -234, 10, -245, -242, 7,
	7,
}

var ASNDef = [...]int{
	0, -2, 1, 2, 0, 14, 548, 549, 3, 12,
	10, 13, 0, 27, 0, 0, 16, 18, 19, 20,
	21, 22, 550, 0, 552, 29, 0, 0, 0, 11,
	15, 17, 0, 551, 553, 0, 0, 24, 25, 26,
	0, 0, 0, 28, 23, -2, 0, 7, 36, 47,
	49, 0, 554, 0, 5, 0, 72, 72, 0, 48,
	50, 0, 39, 41, 42, 43, 0, 0, 35, 37,
	4, 6, 9, 30, 70, 73, 74, 75, 76, 77,
	78, 79, 80, 531, 88, 89, 90, 91, 92, 93,
	31, 46, 51, 0, 0, 0, 33, 34, 8, 71,
	-2, 0, 0, 94, 95, 96, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 185, 0,
	318, 319, 320, 0, 354, 355, 356, 0, 0, 370,
	0, 372, 376, 377, 0, 0, 381, 382, 383, 0,
	0, 416, 417, 414, 415, -2, -2, 134, 135, 149,
	150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
	160, 161, 162, 163, 164, 0, 0, 531, 531, 547,
	167, 168, 169, 170, 0, 171, 175, 40, 52, 56,
	45, 81, 83, 85, 0, 521, 184, -2, 532, 0,
	312, 0, 357, 0, 531, 0, 379, 380, 0, 0,
	0, 531, 0, 0, 0, 0, 531, 0, 531, 0,
	334, 418, 429, 137, -2, 174, 178, 426, 0, 53,
	54, 55, 546, 540, 541, 542, 543, 547, 82, 84,
	97, 98, 99, 434, 435, 436, 437, 438, 439, 440,
	441, 442, 443, 444, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 455, 456, 457, 546, 521, 463,
	464, 465, 466, 489, 491, 0, 492, 496, 497, 467,
	468, 469, 470, 500, 501, 502, 299, 187, 188, 189,
	269, 270, 271, 190, 0, 283, 284, 521, 0, 193,
	285, 546, -2, 0, -2, 0, 199, 0, -2, 0,
	203, 204, -2, 207, 208, 209, 210, 211, 212, 213,
	214, 215, 216, 217, 218, 257, -2, 259, -2, -2,
	531, 0, 0, 234, 0, 521, 0, -2, 0, 221,
	224, 227, -2, 86, 87, 378, 179, 180, 182, 0,
	0, 336, 338, 339, 531, 0, 359, 362, 364, 366,
	367, 371, 0, 374, 0, 531, 531, 384, 407, 408,
	-2, 233, 531, 531, 409, 412, -2, 165, 166, 0,
	0, 0, 143, 144, 145, 146, 147, 148, -2, 546,
	0, 423, 424, 425, 431, 432, 433, 422, 546, 65,
	59, 60, 66, 67, 62, 63, 64, 0, 545, -2,
	59, 0, 0, 0, 0, 546, 0, -2, -2, 472,
	513, 63, 64, 474, 475, 476, 0, 460, 521, 509,
	509, 0, 511, 506, 507, 0, -2, 0, 0, 295,
	521, 0, -2, 196, -2, -2, 266, 267, -2, 263,
	264, 202, 0, 220, 0, 232, 0, 252, 253, 0,
	225, 0, 0, 314, 0, 335, 0, 0, 311, 358,
	0, 0, 546, 373, 0, 305, 309, 306, 310, 0,
	303, 307, 304, 308, 0, 0, 0, 0, 141, -2,
	-2, -2, -2, -2, -2, 0, 427, 428, 430, 57,
	61, 65, 0, 546, 544, 458, 0, 471, 546, 0,
	0, 512, 514, 515, 516, 68, 541, 518, 479, 487,
	0, 0, 0, 505, 186, 298, 300, 301, 0, -2,
	191, -2, 0, 296, 0, 0, 268, -2, 200, 205,
	521, 235, 237, 166, 181, 313, 0, 546, 344, 299,
	340, 299, 365, 0, 0, 375, 0, 0, 0, 531,
	426, 0, 0, 421, 58, 0, 68, 462, 473, 477,
	0, 480, 0, 485, 504, 509, 510, 521, -2, 0,
	273, 0, -2, -2, -2, 521, 0, -2, 223, 228,
	521, 230, 231, 0, 315, 0, 0, 353, 0, 342,
	360, 368, 369, 0, 0, 0, 419, 142, -2, 69,
	0, 483, 508, 302, 192, 194, 272, 531, 521, 297,
	0, 287, 0, 229, 0, 316, 317, 337, 0, 343,
	345, 347, 348, 0, 0, 353, 353, 413, 0, 0,
	481, 274, 276, 277, 286, 0, 289, 294, 291, 0,
	352, 0, 351, 361, 363, 0, 0, 0, 0, 288,
	0, 0, 294, 236, 238, 239, 0, 346, 0, 0,
	385, 410, 531, 0, 482, 292, 290, 293, 0, 0,
	241, 246, 0, 350, 0, 0, 420, 478, 240, 0,
	0, 243, 250, 245, 0, 0, 0, 0, 242, 244,
	247, 248, 249, 349, 0, 0, 251, 0, 387, 400,
	392, 393, 395, 0, 0, 386, 0, 353, 0, 0,
	396, 521, 531, 411, 400, 0, 391, 0, 399, 401,
	403, 404, 0, 394, 397, 398, 353, 0, -2, 0,
	351, 388, 0, 390, 402, 0, 0, 0, 389, 0,
	405,
}

var ASNTok1 = [...]int{
	1,
}

var ASNTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132,
}

var ASNTok3 = [...]int{
	0,
}

var ASNErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	ASNDebug        = 0
	ASNErrorVerbose = false
)

type ASNLexer interface {
	Lex(lval *ASNSymType) int
	Error(s string)
}

type ASNParser interface {
	Parse(ASNLexer) int
	Lookahead() int
}

type ASNParserImpl struct {
	lval  ASNSymType
	stack [ASNInitialStackSize]ASNSymType
	char  int
}

func (p *ASNParserImpl) Lookahead() int {
	return p.char
}

func ASNNewParser() ASNParser {
	return &ASNParserImpl{}
}

const ASNFlag = -1000

func ASNTokname(c int) string {
	if c >= 1 && c-1 < len(ASNToknames) {
		if ASNToknames[c-1] != "" {
			return ASNToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func ASNStatname(s int) string {
	if s >= 0 && s < len(ASNStatenames) {
		if ASNStatenames[s] != "" {
			return ASNStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func ASNErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !ASNErrorVerbose {
		return "syntax error"
	}

	for _, e := range ASNErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + ASNTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := ASNPact[state]
	for tok := TOKSTART; tok-1 < len(ASNToknames); tok++ {
		if n := base + tok; n >= 0 && n < ASNLast && ASNChk[ASNAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if ASNDef[state] == -2 {
		i := 0
		for ASNExca[i] != -1 || ASNExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; ASNExca[i] >= 0; i += 2 {
			tok := ASNExca[i]
			if tok < TOKSTART || ASNExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if ASNExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += ASNTokname(tok)
	}
	return res
}

func ASNlex1(lex ASNLexer, lval *ASNSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = ASNTok1[0]
		goto out
	}
	if char < len(ASNTok1) {
		token = ASNTok1[char]
		goto out
	}
	if char >= ASNPrivate {
		if char < ASNPrivate+len(ASNTok2) {
			token = ASNTok2[char-ASNPrivate]
			goto out
		}
	}
	for i := 0; i < len(ASNTok3); i += 2 {
		token = ASNTok3[i+0]
		if token == char {
			token = ASNTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = ASNTok2[1] /* unknown char */
	}
	if ASNDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", ASNTokname(token), uint(char))
	}
	return char, token
}

func ASNParse(ASNlex ASNLexer) int {
	return ASNNewParser().Parse(ASNlex)
}

func (ASNrcvr *ASNParserImpl) Parse(ASNlex ASNLexer) int {
	var ASNn int
	var ASNVAL ASNSymType
	var ASNDollar []ASNSymType
	_ = ASNDollar // silence set and not used
	ASNS := ASNrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	ASNstate := 0
	ASNrcvr.char = -1
	ASNtoken := -1 // ASNrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		ASNstate = -1
		ASNrcvr.char = -1
		ASNtoken = -1
	}()
	ASNp := -1
	goto ASNstack

ret0:
	return 0

ret1:
	return 1

ASNstack:
	/* put a state and value onto the stack */
	if ASNDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", ASNTokname(ASNtoken), ASNStatname(ASNstate))
	}

	ASNp++
	if ASNp >= len(ASNS) {
		nyys := make([]ASNSymType, len(ASNS)*2)
		copy(nyys, ASNS)
		ASNS = nyys
	}
	ASNS[ASNp] = ASNVAL
	ASNS[ASNp].yys = ASNstate

ASNnewstate:
	ASNn = ASNPact[ASNstate]
	if ASNn <= ASNFlag {
		goto ASNdefault /* simple state */
	}
	if ASNrcvr.char < 0 {
		ASNrcvr.char, ASNtoken = ASNlex1(ASNlex, &ASNrcvr.lval)
	}
	ASNn += ASNtoken
	if ASNn < 0 || ASNn >= ASNLast {
		goto ASNdefault
	}
	ASNn = ASNAct[ASNn]
	if ASNChk[ASNn] == ASNtoken { /* valid shift */
		ASNrcvr.char = -1
		ASNtoken = -1
		ASNVAL = ASNrcvr.lval
		ASNstate = ASNn
		if Errflag > 0 {
			Errflag--
		}
		goto ASNstack
	}

ASNdefault:
	/* default state action */
	ASNn = ASNDef[ASNstate]
	if ASNn == -2 {
		if ASNrcvr.char < 0 {
			ASNrcvr.char, ASNtoken = ASNlex1(ASNlex, &ASNrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if ASNExca[xi+0] == -1 && ASNExca[xi+1] == ASNstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			ASNn = ASNExca[xi+0]
			if ASNn < 0 || ASNn == ASNtoken {
				break
			}
		}
		ASNn = ASNExca[xi+1]
		if ASNn < 0 {
			goto ret0
		}
	}
	if ASNn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			ASNlex.Error(ASNErrorMessage(ASNstate, ASNtoken))
			Nerrs++
			if ASNDebug >= 1 {
				__yyfmt__.Printf("%s", ASNStatname(ASNstate))
				__yyfmt__.Printf(" saw %s\n", ASNTokname(ASNtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for ASNp >= 0 {
				ASNn = ASNPact[ASNS[ASNp].yys] + ASNErrCode
				if ASNn >= 0 && ASNn < ASNLast {
					ASNstate = ASNAct[ASNn] /* simulate a shift of "error" */
					if ASNChk[ASNstate] == ASNErrCode {
						goto ASNstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if ASNDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", ASNS[ASNp].yys)
				}
				ASNp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if ASNDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", ASNTokname(ASNtoken))
			}
			if ASNtoken == ASNEofCode {
				goto ret1
			}
			ASNrcvr.char = -1
			ASNtoken = -1
			goto ASNnewstate /* try again in the same state */
		}
	}

	/* reduction by production ASNn */
	if ASNDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", ASNn, ASNStatname(ASNstate))
	}

	ASNnt := ASNn
	ASNpt := ASNp
	_ = ASNpt // guard against "declared and not used"

	ASNp -= ASNR2[ASNn]
	// ASNp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if ASNp+1 >= len(ASNS) {
		nyys := make([]ASNSymType, len(ASNS)*2)
		copy(nyys, ASNS)
		ASNS = nyys
	}
	ASNVAL = ASNS[ASNp+1]

	/* consult goto table to find next state */
	ASNn = ASNR1[ASNn]
	ASNg := ASNPgo[ASNn]
	ASNj := ASNg + ASNS[ASNp].yys + 1

	if ASNj >= ASNLast {
		ASNstate = ASNAct[ASNg]
	} else {
		ASNstate = ASNAct[ASNj]
		if ASNChk[ASNstate] != -ASNn {
			ASNstate = ASNAct[ASNg]
		}
	}
	// dummy call; replaced with literal code
	switch ASNnt {

	case 1:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:470
		{
			SetResult(ASNlex, ASNDollar[1].TypeValue)
			Print("Done")
			Print("--------------------------------------------------------------------------------")
			Print(JSON(&ASNDollar[1].TypeValue))
			Print("--------------------------------------------------------------------------------")
		}
	case 2:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:479
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 3:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:484
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 4:
		ASNDollar = ASNS[ASNpt-10 : ASNpt+1]
//line asn.y:514
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"encoding":   ASNDollar[3].TypeValue,
				"tag":        ASNDollar[4].TypeValue,
				"body":       ASNDollar[8].TypeValue,
			}
		}
	case 5:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:530
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 6:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:535
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 7:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:539
		{
			ASNVAL.TypeValue = nil
		}
	case 8:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:551
		{
			ASNVAL.TypeValue = MAP{
				"encodingReference":    ASNDollar[2].TypeString,
				"encodingInstructions": ASNDollar[3].TypeValue,
			}
		}
	case 9:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:566
		{
			ASNVAL.TypeValue = nil
		}
	case 10:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:579
		{
			ASNVAL.TypeValue = MAP{
				"reference":             ASNDollar[1].TypeValue,
				"definitiveIdentifiers": ASNDollar[2].TypeValue,
			}
		}
	case 11:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:593
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 12:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:596
		{
			ASNVAL.TypeValue = STRING("")
		}
	case 13:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:608
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 14:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:611
		{
			ASNVAL.TypeValue = nil
		}
	case 15:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:621
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 16:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:632
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 17:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:637
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 18:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:650
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 19:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:653
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 20:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:656
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 21:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:665
		{
			ASNVAL.TypeValue = MAP{
				"name": ASNDollar[1].TypeString,
			}
		}
	case 22:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:676
		{
			ASNVAL.TypeValue = MAP{
				"number": ASNDollar[1].TypeValue,
			}
		}
	case 23:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:687
		{
			ASNVAL.TypeValue = MAP{
				"name":   ASNDollar[1].TypeString,
				"number": ASNDollar[3].TypeValue,
			}
		}
	case 24:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:703
		{
			ASNVAL.TypeValue = STRING("IMPLICIT")
		}
	case 25:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:706
		{
			ASNVAL.TypeValue = STRING("EXPLICIT")
		}
	case 26:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:709
		{
			ASNVAL.TypeValue = STRING("AUTOMATIC")
		}
	case 27:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:712
		{
			ASNVAL.TypeValue = STRING("EXPLICIT")
		}
	case 28:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:723
		{
			ASNVAL.TypeValue = true
		}
	case 29:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:726
		{
			ASNVAL.TypeValue = false
		}
	case 30:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:739
		{
			ASNVAL.TypeValue = MAP{
				"imports":     ASNDollar[1].TypeValue,
				"exports":     ASNDollar[2].TypeValue,
				"assignments": ASNDollar[3].TypeValue,
			}
		}
	case 31:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:748
		{
			ASNVAL.TypeValue = MAP{
				"imports":     ASNDollar[2].TypeValue,
				"exports":     ASNDollar[1].TypeValue,
				"assignments": ASNDollar[3].TypeValue,
			}
		}
	case 32:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:755
		{
			ASNVAL.TypeValue = nil
		}
	case 33:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:767
		{
			ASNVAL.TypeValue = MAP{
				"all":     "false",
				"symbols": ASNDollar[2].TypeValue,
			}
		}
	case 34:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:773
		{
			ASNVAL.TypeValue = MAP{
				"all": "true",
			}
		}
	case 35:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:778
		{
			ASNVAL.TypeValue = MAP{
				"all": "false",
			}
		}
	case 36:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:783
		{
			ASNVAL.TypeValue = MAP{
				"all": "true",
			}
		}
	case 37:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:796
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 38:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:799
		{
			ASNVAL.TypeValue = nil
		}
	case 39:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:810
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 40:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:815
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 41:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:827
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
			}
		}
	case 42:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:832
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedReference": ASNDollar[1].TypeValue,
			}
		}
	case 43:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:851
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 44:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:861
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 45:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:864
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 46:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:875
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 47:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:878
		{
			ASNVAL.TypeValue = nil
		}
	case 48:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:889
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 49:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:892
		{
			ASNVAL.TypeValue = nil
		}
	case 50:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:903
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 51:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:908
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 52:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:919
		{
			ASNVAL.TypeValue = MAP{
				"symbols":   ASNDollar[1].TypeValue,
				"reference": ASNDollar[3].TypeValue,
			}
		}
	case 53:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:932
		{
			ASNVAL.TypeValue = MAP{
				"name":        ASNDollar[1].TypeValue,
				"identifiers": ASNDollar[2].TypeValue,
			}
		}
	case 54:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:947
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 55:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:950
		{
			ASNVAL.TypeValue = nil
		}
	case 56:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:953
		{
			ASNVAL.TypeValue = nil
		}
	case 57:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:964
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 58:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:967
		{
			ASNVAL.TypeValue = ASNDollar[3].TypeValue
		}
	case 59:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:970
		{
			ASNVAL.TypeValue = nil
		}
	case 60:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:981
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 61:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:986
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 62:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1000
		{
			ASNVAL.TypeValue = MAP{
				"name": ASNDollar[1].TypeValue,
			}
		}
	case 63:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1005
		{
			ASNVAL.TypeValue = MAP{
				"number": ASNDollar[1].TypeValue,
			}
		}
	case 64:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1010
		{
			ASNVAL.TypeValue = MAP{
				"nameAndNumber": ASNDollar[1].TypeValue,
			}
		}
	case 65:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1015
		{
			ASNVAL.TypeValue = MAP{
				"definedValue": ASNDollar[1].TypeValue,
			}
		}
	case 66:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1027
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 67:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1038
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 68:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1041
		{
			ASNVAL.TypeValue = MAP{
				"definedValue": ASNDollar[1].TypeValue,
			}
		}
	case 69:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1053
		{
			ASNVAL.TypeValue = MAP{
				"name":   ASNDollar[1].TypeValue,
				"number": ASNDollar[3].TypeValue,
			}
		}
	case 70:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1067
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 71:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1072
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 72:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1076
		{
			ASNVAL.TypeValue = nil
		}
	case 73:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1093
		{
			ASNVAL.TypeValue = MAP{
				"typeAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 74:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1098
		{
			ASNVAL.TypeValue = MAP{
				"valueAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 75:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1103
		{
			ASNVAL.TypeValue = MAP{
				"xmlValueAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 76:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1108
		{
			ASNVAL.TypeValue = MAP{
				"valueSetAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 77:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1113
		{
			ASNVAL.TypeValue = MAP{
				"objectClassAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 78:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1118
		{
			ASNVAL.TypeValue = MAP{
				"objectAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 79:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1123
		{
			ASNVAL.TypeValue = MAP{
				"objectSetAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 80:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1128
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 81:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1142
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"typename":  ASNDollar[2].TypeValue,
			}
		}
	case 82:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1158
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"typename":  ASNDollar[2].TypeValue,
				"value":     ASNDollar[4].TypeValue,
			}
		}
	case 83:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1174
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"value":     ASNDollar[3].TypeValue,
			}
		}
	case 84:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1190
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"typename":  ASNDollar[2].TypeValue,
				"valueSet":  ASNDollar[4].TypeValue,
			}
		}
	case 85:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1206
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"class":     ASNDollar[3].TypeValue,
			}
		}
	case 86:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1222
		{
			ASNVAL.TypeValue = MAP{
				"reference":    ASNDollar[1].TypeValue,
				"definedClass": ASNDollar[2].TypeValue,
				"object":       ASNDollar[4].TypeValue,
			}
		}
	case 87:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1239
		{
			ASNVAL.TypeValue = MAP{
				"reference":    ASNDollar[1].TypeValue,
				"definedClass": ASNDollar[2].TypeValue,
				"objectSet":    ASNDollar[4].TypeValue,
			}
		}
	case 88:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1258
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 89:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1261
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 90:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1264
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 91:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1267
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 92:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1270
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 93:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1273
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 94:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1285
		{
			ASNVAL.TypeValue = MAP{
				"type":       "BUILTIN_TYPE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 95:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1291
		{
			ASNVAL.TypeValue = MAP{
				"type":       "REFERENCED_TYPE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 96:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1297
		{
			ASNVAL.TypeValue = MAP{
				"type":       "CONSTRAINED_TYPE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 97:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1312
		{
			ASNVAL.TypeValue = MAP{
				"type":       "BUILTIN_VALUE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 98:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1318
		{
			ASNVAL.TypeValue = MAP{
				"type":       "REFERENCED_VALUE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 99:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1324
		{
			ASNVAL.TypeValue = MAP{
				"type":       "OBJECT_CLASS_FIELD_VALUE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 100:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1362
		{
			ASNVAL.TypeValue = MAP{
				"bitStringType": ASNDollar[1].TypeValue,
			}
		}
	case 101:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1367
		{
			ASNVAL.TypeValue = MAP{
				"booleanType": ASNDollar[1].TypeValue,
			}
		}
	case 102:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1372
		{
			ASNVAL.TypeValue = MAP{
				"characterStringType": ASNDollar[1].TypeValue,
			}
		}
	case 103:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1377
		{
			ASNVAL.TypeValue = MAP{
				"choiceType": ASNDollar[1].TypeValue,
			}
		}
	case 104:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1382
		{
			ASNVAL.TypeValue = MAP{
				"dateType": ASNDollar[1].TypeValue,
			}
		}
	case 105:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1387
		{
			ASNVAL.TypeValue = MAP{
				"dataTimeType": ASNDollar[1].TypeValue,
			}
		}
	case 106:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1392
		{
			ASNVAL.TypeValue = MAP{
				"durationType": ASNDollar[1].TypeValue,
			}
		}
	case 107:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1397
		{
			ASNVAL.TypeValue = MAP{
				"embeddedPDVType": ASNDollar[1].TypeValue,
			}
		}
	case 108:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1402
		{
			ASNVAL.TypeValue = MAP{
				"enumeratedType": ASNDollar[1].TypeValue,
			}
		}
	case 109:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1407
		{
			ASNVAL.TypeValue = MAP{
				"externalType": ASNDollar[1].TypeValue,
			}
		}
	case 110:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1412
		{
			ASNVAL.TypeValue = MAP{
				"instanceOfType": ASNDollar[1].TypeValue,
			}
		}
	case 111:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1417
		{
			ASNVAL.TypeValue = MAP{
				"integerType": ASNDollar[1].TypeValue,
			}
		}
	case 112:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1422
		{
			ASNVAL.TypeValue = MAP{
				"iriType": ASNDollar[1].TypeValue,
			}
		}
	case 113:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1427
		{
			ASNVAL.TypeValue = MAP{
				"nullType": ASNDollar[1].TypeValue,
			}
		}
	case 114:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1432
		{
			ASNVAL.TypeValue = MAP{
				"objectClassFieldType": ASNDollar[1].TypeValue,
			}
		}
	case 115:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1437
		{
			ASNVAL.TypeValue = MAP{
				"objectIdentifierType": ASNDollar[1].TypeValue,
			}
		}
	case 116:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1442
		{
			ASNVAL.TypeValue = MAP{
				"octetStringType": ASNDollar[1].TypeValue,
			}
		}
	case 117:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1447
		{
			ASNVAL.TypeValue = MAP{
				"realType": ASNDollar[1].TypeValue,
			}
		}
	case 118:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1452
		{
			ASNVAL.TypeValue = MAP{
				"relativeIRIType": ASNDollar[1].TypeValue,
			}
		}
	case 119:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1457
		{
			ASNVAL.TypeValue = MAP{
				"relativeOIDType": ASNDollar[1].TypeValue,
			}
		}
	case 120:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1462
		{
			ASNVAL.TypeValue = MAP{
				"sequenceType": ASNDollar[1].TypeValue,
			}
		}
	case 121:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1467
		{
			ASNVAL.TypeValue = MAP{
				"sequenceOfType": ASNDollar[1].TypeValue,
			}
		}
	case 122:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1472
		{
			ASNVAL.TypeValue = MAP{
				"setType": ASNDollar[1].TypeValue,
			}
		}
	case 123:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1477
		{
			ASNVAL.TypeValue = MAP{
				"setOfType": ASNDollar[1].TypeValue,
			}
		}
	case 124:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1482
		{
			ASNVAL.TypeValue = MAP{
				"prefixedType": ASNDollar[1].TypeValue,
			}
		}
	case 125:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1487
		{
			ASNVAL.TypeValue = MAP{
				"timeType": ASNDollar[1].TypeValue,
			}
		}
	case 126:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1492
		{
			ASNVAL.TypeValue = MAP{
				"timeOfDayType": ASNDollar[1].TypeValue,
			}
		}
	case 127:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1508
		{
			ASNVAL.TypeValue = MAP{
				"definedType": ASNDollar[1].TypeValue,
			}
		}
	case 128:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1513
		{
			ASNVAL.TypeValue = MAP{
				"usefulType": ASNDollar[1].TypeValue,
			}
		}
	case 129:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1518
		{
			ASNVAL.TypeValue = MAP{
				"selectionType": ASNDollar[1].TypeValue,
			}
		}
	case 130:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1523
		{
			ASNVAL.TypeValue = MAP{
				"typeFromObject": ASNDollar[1].TypeValue,
			}
		}
	case 131:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1528
		{
			ASNVAL.TypeValue = MAP{
				"valueSetFromObjects": ASNDollar[1].TypeValue,
			}
		}
	case 132:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1543
		{
			ASNVAL.TypeValue = MAP{
				"externalTypeReference": ASNDollar[1].TypeValue,
			}
		}
	case 133:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1548
		{
			ASNVAL.TypeValue = MAP{
				"typeReference": ASNDollar[1].TypeValue,
			}
		}
	case 134:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1553
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedType": ASNDollar[1].TypeValue,
			}
		}
	case 135:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1558
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedValueSetType": ASNDollar[1].TypeValue,
			}
		}
	case 136:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1572
		{
			ASNVAL.TypeValue = MAP{
				"moduleReference": ASNDollar[1].TypeValue,
				"typeReference":   ASNDollar[2].TypeToken,
			}
		}
	case 137:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1586
		{
			ASNVAL.TypeValue = MAP{
				"simpleDefinedType":   ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 138:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1600
		{
			ASNVAL.TypeValue = MAP{
				"simpleDefinedType":   ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 139:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1614
		{
			ASNVAL.TypeValue = MAP{
				"externalTypeReference": ASNDollar[1].TypeValue,
			}
		}
	case 140:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1619
		{
			ASNVAL.TypeValue = MAP{
				"typeReference": ASNDollar[1].TypeValue,
			}
		}
	case 141:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1630
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[2].TypeValue,
			}
		}
	case 142:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:1635
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[4].TypeValue)
		}
	case 143:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1651
		{
			ASNVAL.TypeValue = MAP{
				"type": ASNDollar[1].TypeValue,
			}
		}
	case 144:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1656
		{
			ASNVAL.TypeValue = MAP{
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 145:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1661
		{
			ASNVAL.TypeValue = MAP{
				"valueSet": ASNDollar[1].TypeValue,
			}
		}
	case 146:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1666
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectClass": ASNDollar[1].TypeValue,
			}
		}
	case 147:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1671
		{
			ASNVAL.TypeValue = MAP{
				"object": ASNDollar[1].TypeValue,
			}
		}
	case 148:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1676
		{
			ASNVAL.TypeValue = MAP{
				"objectSet": ASNDollar[1].TypeValue,
			}
		}
	case 149:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1704
		{
			ASNVAL.TypeValue = STRING(UTF8String)
		}
	case 150:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1707
		{
			ASNVAL.TypeValue = STRING(GraphicString)
		}
	case 151:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1710
		{
			ASNVAL.TypeValue = STRING(NumericString)
		}
	case 152:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1713
		{
			ASNVAL.TypeValue = STRING(VisibleString)
		}
	case 153:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1716
		{
			ASNVAL.TypeValue = STRING(PrintableString)
		}
	case 154:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1719
		{
			ASNVAL.TypeValue = STRING(ISO646String)
		}
	case 155:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1722
		{
			ASNVAL.TypeValue = STRING(TeletexString)
		}
	case 156:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1725
		{
			ASNVAL.TypeValue = STRING(GeneralString)
		}
	case 157:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1728
		{
			ASNVAL.TypeValue = STRING(T61String)
		}
	case 158:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1731
		{
			ASNVAL.TypeValue = STRING(UniversalString)
		}
	case 159:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1734
		{
			ASNVAL.TypeValue = STRING(VideotexString)
		}
	case 160:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1737
		{
			ASNVAL.TypeValue = STRING(BMPString)
		}
	case 161:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1740
		{
			ASNVAL.TypeValue = STRING(IA5String)
		}
	case 162:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1743
		{
			ASNVAL.TypeValue = STRING(GeneralizedTime)
		}
	case 163:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1746
		{
			ASNVAL.TypeValue = STRING(UTCTime)
		}
	case 164:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1749
		{
			ASNVAL.TypeValue = STRING(ObjectDescriptor)
		}
	case 165:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1759
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"typename":   ASNDollar[3].TypeValue,
			}
		}
	case 166:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1772
		{
			ASNVAL.TypeValue = MAP{
				"referencedObjects": ASNDollar[1].TypeValue,
				"fieldName":         ASNDollar[2].TypeToken,
			}
		}
	case 167:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1785
		{
			ASNVAL.TypeValue = MAP{
				"definedObject": ASNDollar[1].TypeValue,
			}
		}
	case 168:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1790
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedObject": ASNDollar[1].TypeValue,
			}
		}
	case 169:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1795
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 170:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1800
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 171:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1812
		{
			ASNVAL.TypeValue = MAP{
				"externalObjectReference": ASNDollar[1].TypeValue,
			}
		}
	case 172:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1817
		{
			ASNVAL.TypeValue = MAP{
				"objectReference": ASNDollar[1].TypeValue,
			}
		}
	case 173:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1829
		{
			ASNVAL.TypeValue = MAP{
				"moduleReference": ASNDollar[1].TypeValue,
				"objectReference": ASNDollar[3].TypeValue,
			}
		}
	case 174:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1842
		{
			ASNVAL.TypeValue = MAP{
				"definedObject":       ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 175:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1855
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 176:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1858
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 177:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1868
		{
			ASNVAL.TypeValue = MAP{
				"moduleReference":    ASNDollar[1].TypeValue,
				"objectSetReference": ASNDollar[3].TypeValue,
			}
		}
	case 178:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1881
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet":    ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 179:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1894
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 180:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1905
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 181:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1910
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 182:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1925
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 183:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1935
		{
			ASNVAL.TypeValue = MAP{
				"referencedObjects": ASNDollar[1].TypeValue,
				"fieldname":         ASNDollar[3].TypeValue,
			}
		}
	case 184:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1949
		{
			ASNVAL.TypeValue = MAP{
				"typename":   ASNDollar[1].TypeValue,
				"constraint": ASNDollar[2].TypeValue,
			}
		}
	case 185:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1955
		{
			ASNVAL.TypeValue = MAP{
				"typename": ASNDollar[1].TypeValue,
			}
		}
	case 186:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1967
		{
			ASNVAL.TypeValue = MAP{
				"constraintSpec": ASNDollar[2].TypeValue,
				"exceptionSpec":  ASNDollar[3].TypeValue,
			}
		}
	case 187:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1981
		{
			ASNVAL.TypeValue = MAP{
				"subtypeConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 188:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1986
		{
			ASNVAL.TypeValue = MAP{
				"generalConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 189:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1998
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 190:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2010
		{
			ASNVAL.TypeValue = MAP{
				"rootElementSetSpec": ASNDollar[1].TypeValue,
			}
		}
	case 191:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2015
		{
			ASNVAL.TypeValue = MAP{
				"rootElementSetSpec": ASNDollar[1].TypeValue,
			}
		}
	case 192:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:2020
		{
			ASNVAL.TypeValue = MAP{
				"rootElementSetSpec":       ASNDollar[1].TypeValue,
				"additionalElementSetSpec": ASNDollar[2].TypeToken,
			}
		}
	case 193:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2033
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 194:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2043
		{
			ASNVAL.TypeValue = nil
		}
	case 195:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2054
		{
			ASNVAL.TypeValue = MAP{
				"unions": ASNDollar[1].TypeValue,
			}
		}
	case 196:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2059
		{
			ASNVAL.TypeValue = MAP{
				"exclusions": ASNDollar[1].TypeString,
			}
		}
	case 197:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2072
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 198:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2075
		{
			ASNVAL.TypeValue = MAP{
				"unions":        ASNDollar[1].TypeValue,
				"intersections": ASNDollar[3].TypeValue,
			}
		}
	case 199:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2089
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 200:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2092
		{
			ASNVAL.TypeValue = MAP{
				"intersections":        ASNDollar[1].TypeValue,
				"intersectionElements": ASNDollar[2].TypeValue,
			}
		}
	case 201:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2105
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 202:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2108
		{
			ASNVAL.TypeValue = MAP{
				"elements":   ASNDollar[1].TypeValue,
				"exclusions": ASNDollar[2].TypeValue,
			}
		}
	case 203:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2123
		{
			ASNVAL.TypeValue = MAP{
				"subtypeElements": ASNDollar[1].TypeValue,
			}
		}
	case 204:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2128
		{
			ASNVAL.TypeValue = MAP{
				"objectSetElements": ASNDollar[1].TypeValue,
			}
		}
	case 205:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2133
		{
			ASNVAL.TypeValue = MAP{
				"elementSetSpec": ASNDollar[1].TypeToken,
			}
		}
	case 206:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2145
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 207:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2166
		{
			ASNVAL.TypeValue = MAP{
				"singleValue": ASNDollar[1].TypeValue,
			}
		}
	case 208:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2171
		{
			ASNVAL.TypeValue = MAP{
				"containedSubtype": ASNDollar[1].TypeValue,
			}
		}
	case 209:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2176
		{
			ASNVAL.TypeValue = MAP{
				"valueRange": ASNDollar[1].TypeValue,
			}
		}
	case 210:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2181
		{
			ASNVAL.TypeValue = MAP{
				"permittedAlphabet": ASNDollar[1].TypeValue,
			}
		}
	case 211:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2186
		{
			ASNVAL.TypeValue = MAP{
				"sizeConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 212:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2191
		{
			ASNVAL.TypeValue = MAP{
				"typeConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 213:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2196
		{
			ASNVAL.TypeValue = MAP{
				"innerTypeConstraints": ASNDollar[1].TypeValue,
			}
		}
	case 214:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2201
		{
			ASNVAL.TypeValue = MAP{
				"patternConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 215:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2206
		{
			ASNVAL.TypeValue = MAP{
				"propertySettings": ASNDollar[1].TypeValue,
			}
		}
	case 216:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2211
		{
			ASNVAL.TypeValue = MAP{
				"durationRange": ASNDollar[1].TypeValue,
			}
		}
	case 217:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2216
		{
			ASNVAL.TypeValue = MAP{
				"timePointRange": ASNDollar[1].TypeValue,
			}
		}
	case 218:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2221
		{
			ASNVAL.TypeValue = MAP{
				"recurrenceRange": ASNDollar[1].TypeValue,
			}
		}
	case 219:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2233
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 220:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2243
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 221:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2253
		{
			ASNVAL.TypeValue = STRING("INCLUDES")
		}
	case 222:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2256
		{
			ASNVAL.TypeValue = STRING("INCLUDES")
		}
	case 223:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2266
		{
			ASNVAL.TypeValue = MAP{
				"lowerEndpoint": ASNDollar[1].TypeValue,
				"upperEndpoint": ASNDollar[2].TypeToken,
			}
		}
	case 224:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2279
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 225:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2282
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 226:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2292
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 227:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2295
		{
			ASNVAL.TypeValue = STRING("MIN")
		}
	case 228:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2305
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 229:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2308
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 230:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2318
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 231:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2321
		{
			ASNVAL.TypeValue = STRING("MAX")
		}
	case 232:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2331
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 233:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2341
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 234:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2351
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 235:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2362
		{
			ASNVAL.TypeValue = ASNDollar[3].TypeValue
		}
	case 236:
		ASNDollar = ASNS[ASNpt-7 : ASNpt+1]
//line asn.y:2365
		{
			ASNVAL.TypeValue = ASNDollar[3].TypeValue
		}
	case 237:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2375
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 238:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2386
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 239:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2389
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 240:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2399
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 241:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2410
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 242:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2413
		{
			ASNVAL.TypeValue = MAP{
				"nameConstraint":  ASNDollar[1].TypeValue,
				"typeConstraints": ASNDollar[3].TypeValue,
			}
		}
	case 243:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2426
		{
			ASNVAL.TypeValue = MAP{
				"identifier":          ASNDollar[1].TypeValue,
				"componentConstraint": ASNDollar[2].TypeValue,
			}
		}
	case 244:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2439
		{
			ASNVAL.TypeValue = MAP{
				"valueConstraint":    ASNDollar[1].TypeValue,
				"presenceConstraint": ASNDollar[2].TypeValue,
			}
		}
	case 245:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2452
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 246:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2455
		{
			ASNVAL.TypeValue = nil
		}
	case 247:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2465
		{
			ASNVAL.TypeValue = STRING("PRESENT")
		}
	case 248:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2468
		{
			ASNVAL.TypeValue = STRING("ABSENT")
		}
	case 249:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2471
		{
			ASNVAL.TypeValue = STRING("OPTIONAL")
		}
	case 250:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2474
		{
			ASNVAL.TypeValue = nil
		}
	case 251:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:2484
		{
			ASNVAL.TypeValue = ASNDollar[4].TypeValue
		}
	case 252:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2494
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 253:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2504
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 254:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2514
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 255:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2524
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 256:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2534
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 257:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2547
		{
			ASNVAL.TypeValue = MAP{
				"object": ASNDollar[1].TypeValue,
			}
		}
	case 258:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2552
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 259:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2557
		{
			ASNVAL.TypeValue = MAP{
				"objectSetFromObjects": ASNDollar[1].TypeValue,
			}
		}
	case 260:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2562
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 261:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2574
		{
			ASNVAL.TypeValue = MAP{
				"referencedObjects": ASNDollar[1].TypeValue,
				"fieldName":         ASNDollar[2].TypeToken,
			}
		}
	case 262:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2587
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 263:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2597
		{
			ASNVAL.TypeValue = STRING("INTERSECTION")
		}
	case 264:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2600
		{
			ASNVAL.TypeValue = STRING("INTERSECTION")
		}
	case 265:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2610
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 266:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2620
		{
			ASNVAL.TypeValue = STRING("UNION")
		}
	case 267:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2623
		{
			ASNVAL.TypeValue = STRING("UNION")
		}
	case 268:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2633
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 269:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2645
		{
			ASNVAL.TypeValue = MAP{
				"userDefinedConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 270:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2650
		{
			ASNVAL.TypeValue = MAP{
				"tableConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 271:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2655
		{
			ASNVAL.TypeValue = MAP{
				"contentsConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 272:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:2667
		{
			ASNVAL.TypeValue = ASNDollar[4].TypeValue
		}
	case 273:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2679
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 274:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2684
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 275:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2688
		{
			ASNVAL.TypeValue = nil
		}
	case 276:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2702
		{
			ASNVAL.TypeValue = MAP{
				"governor": ASNDollar[1].TypeValue,
				"value":    ASNDollar[3].TypeValue,
			}
		}
	case 277:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2708
		{
			ASNVAL.TypeValue = MAP{
				"governor": ASNDollar[1].TypeValue,
				"object":   ASNDollar[3].TypeValue,
			}
		}
	case 278:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2714
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 279:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2719
		{
			ASNVAL.TypeValue = MAP{
				"type": ASNDollar[1].TypeValue,
			}
		}
	case 280:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2724
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectClass": ASNDollar[1].TypeValue,
			}
		}
	case 281:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2736
		{
			ASNVAL.TypeValue = MAP{
				"typename": ASNDollar[1].TypeValue,
			}
		}
	case 282:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2741
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectClass": ASNDollar[1].TypeValue,
			}
		}
	case 283:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2753
		{
			ASNVAL.TypeValue = MAP{
				"simpleTableConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 284:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2758
		{
			ASNVAL.TypeValue = MAP{
				"componentRelationConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 285:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2770
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 286:
		ASNDollar = ASNS[ASNpt-6 : ASNpt+1]
//line asn.y:2781
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet": ASNDollar[1].TypeToken,
				"atNotations":      ASNDollar[2].TypeValue,
			}
		}
	case 287:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2795
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 288:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2800
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 289:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2811
		{
			ASNVAL.TypeValue = MAP{
				"componentIdList": ASNDollar[2].TypeValue,
			}
		}
	case 290:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2816
		{
			ASNVAL.TypeValue = MAP{
				"componentIdList": ASNDollar[4].TypeValue,
			}
		}
	case 291:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2828
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 292:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2833
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 293:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2844
		{
			ASNVAL.TypeValue = nil
		}
	case 294:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2847
		{
			ASNVAL.TypeValue = nil
		}
	case 295:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2859
		{
			ASNVAL.TypeValue = MAP{
				"typename": ASNDollar[2].TypeValue,
			}
		}
	case 296:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2864
		{
			ASNVAL.TypeValue = MAP{
				"value": ASNDollar[3].TypeValue,
			}
		}
	case 297:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:2869
		{
			ASNVAL.TypeValue = MAP{
				"typename": ASNDollar[2].TypeValue,
				"value":    ASNDollar[5].TypeValue,
			}
		}
	case 298:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2882
		{
			ASNVAL.TypeValue = MAP{
				"exceptionIdentification": ASNDollar[1].TypeToken,
			}
		}
	case 299:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2887
		{
			ASNVAL.TypeValue = nil
		}
	case 300:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2899
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 301:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2902
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 302:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2905
		{
			ASNVAL.TypeValue = MAP{
				"typename": ASNDollar[1].TypeValue,
				"value":    ASNDollar[3].TypeValue,
			}
		}
	case 303:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2925
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence": "SET",
				"constraint":    ASNDollar[2].TypeValue,
				"typename":      ASNDollar[4].TypeValue,
			}
		}
	case 304:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2932
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence":  "SET",
				"sizeConstraint": ASNDollar[2].TypeValue,
				"typename":       ASNDollar[4].TypeValue,
			}
		}
	case 305:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2939
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence": "SEQUENCE",
				"constraint":    ASNDollar[2].TypeValue,
				"typename":      ASNDollar[4].TypeValue,
			}
		}
	case 306:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2946
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence":  "SEQUENCE",
				"sizeConstraint": ASNDollar[2].TypeValue,
				"typename":       ASNDollar[4].TypeValue,
			}
		}
	case 307:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2953
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence": "SET",
				"constraint":    ASNDollar[2].TypeValue,
				"namedType":     ASNDollar[4].TypeValue,
			}
		}
	case 308:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2960
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence":  "SET",
				"sizeConstraint": ASNDollar[2].TypeValue,
				"namedType":      ASNDollar[4].TypeValue,
			}
		}
	case 309:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2967
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence": "SEQUENCE",
				"constraint":    ASNDollar[2].TypeValue,
				"namedType":     ASNDollar[4].TypeValue,
			}
		}
	case 310:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2974
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence":  "SEQUENCE",
				"sizeConstraint": ASNDollar[2].TypeValue,
				"namedType":      ASNDollar[4].TypeValue,
			}
		}
	case 311:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2988
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"typename":   ASNDollar[2].TypeValue,
			}
		}
	case 312:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3002
		{
			ASNVAL.TypeValue = MAP{
				"type": "BIT_STRING",
			}
		}
	case 313:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:3007
		{
			ASNVAL.TypeValue = MAP{
				"type":      "BIT_STRING",
				"namedBits": ASNDollar[4].TypeValue,
			}
		}
	case 314:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3021
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 315:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3026
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 316:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3038
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"number":     ASNDollar[3].TypeValue,
			}
		}
	case 317:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3044
		{
			ASNVAL.TypeValue = MAP{
				"identifier":   ASNDollar[1].TypeValue,
				"definedValue": ASNDollar[3].TypeValue,
			}
		}
	case 318:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3057
		{
			ASNVAL.TypeValue = MAP{
				"type": "BOOLEAN",
			}
		}
	case 319:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3070
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 320:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3073
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 321:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3095
		{
			ASNVAL.TypeValue = MAP{
				"type": "BMP_STRING",
			}
		}
	case 322:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3100
		{
			ASNVAL.TypeValue = MAP{
				"type": "GENERAL_STRING",
			}
		}
	case 323:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3105
		{
			ASNVAL.TypeValue = MAP{
				"type": "GRAPHIC_STRING",
			}
		}
	case 324:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3110
		{
			ASNVAL.TypeValue = MAP{
				"type": "IA5_STRING",
			}
		}
	case 325:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3115
		{
			ASNVAL.TypeValue = MAP{
				"type": "ISO646_STRING",
			}
		}
	case 326:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3120
		{
			ASNVAL.TypeValue = MAP{
				"type": "NUMERIC_STRING",
			}
		}
	case 327:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3125
		{
			ASNVAL.TypeValue = MAP{
				"type": "PRINTABLE_STRING",
			}
		}
	case 328:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3130
		{
			ASNVAL.TypeValue = MAP{
				"type": "TELETEX_STRING",
			}
		}
	case 329:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3135
		{
			ASNVAL.TypeValue = MAP{
				"type": "T61_STRING",
			}
		}
	case 330:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3140
		{
			ASNVAL.TypeValue = MAP{
				"type": "UNIVERSAL_STRING",
			}
		}
	case 331:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3145
		{
			ASNVAL.TypeValue = MAP{
				"type": "UTF8_STRING",
			}
		}
	case 332:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3150
		{
			ASNVAL.TypeValue = MAP{
				"type": "VIDEO_TEX_STRING",
			}
		}
	case 333:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3155
		{
			ASNVAL.TypeValue = MAP{
				"type": "VISIBLE_STRING",
			}
		}
	case 334:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3167
		{
			ASNVAL.TypeValue = MAP{
				"type": "CHARACTER_STRING",
			}
		}
	case 335:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3179
		{
			ASNVAL.TypeValue = MAP{
				"type":           "CHOICE",
				"alternateTypes": ASNDollar[3].TypeValue,
			}
		}
	case 336:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3193
		{
			ASNVAL.TypeValue = MAP{
				"alternativeTypes": ASNDollar[1].TypeValue,
			}
		}
	case 337:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:3198
		{
			ASNVAL.TypeValue = MAP{
				"alternativeTypes":              ASNDollar[1].TypeValue,
				"extensionAndException":         ASNDollar[3].TypeValue,
				"extensionAdditionAlternatives": ASNDollar[4].TypeValue,
			}
		}
	case 338:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3212
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 339:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3223
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 340:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3228
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 341:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3240
		{
			ASNVAL.TypeValue = nil
		}
	case 342:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3243
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 343:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3254
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 344:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3257
		{
			ASNVAL.TypeValue = nil
		}
	case 345:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3268
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 346:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3273
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 347:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3285
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 348:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3288
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 349:
		ASNDollar = ASNS[ASNpt-6 : ASNpt+1]
//line asn.y:3298
		{
			ASNVAL.TypeValue = MAP{
				"version":          ASNDollar[3].TypeValue,
				"alternativeTypes": ASNDollar[4].TypeValue,
			}
		}
	case 350:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3311
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 351:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3314
		{
			ASNVAL.TypeValue = nil
		}
	case 352:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3325
		{
			ASNVAL.TypeValue = true
		}
	case 353:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3328
		{
			ASNVAL.TypeValue = nil
		}
	case 354:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3338
		{
			ASNVAL.TypeValue = MAP{
				"type": "DATE",
			}
		}
	case 355:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3350
		{
			ASNVAL.TypeValue = MAP{
				"type": "DATE_TIME",
			}
		}
	case 356:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3362
		{
			ASNVAL.TypeValue = MAP{
				"type": "DURATION",
			}
		}
	case 357:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3374
		{
			ASNVAL.TypeValue = MAP{
				"type": "EMBEDDED_PDV",
			}
		}
	case 358:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3386
		{
			ASNVAL.TypeValue = MAP{
				"type":         "ENUMERATED",
				"enumerations": ASNDollar[3].TypeValue,
			}
		}
	case 359:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3401
		{
			ASNVAL.TypeValue = MAP{
				"enumeration": ASNDollar[1].TypeValue,
			}
		}
	case 360:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3406
		{
			ASNVAL.TypeValue = MAP{
				"enumeration": ASNDollar[1].TypeValue,
				"exception":   ASNDollar[4].TypeValue,
			}
		}
	case 361:
		ASNDollar = ASNS[ASNpt-6 : ASNpt+1]
//line asn.y:3412
		{
			ASNVAL.TypeValue = MAP{
				"enumeration":           ASNDollar[1].TypeValue,
				"exception":             ASNDollar[4].TypeValue,
				"additionalEnumeration": ASNDollar[6].TypeValue,
			}
		}
	case 362:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3426
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 363:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3436
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 364:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3447
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 365:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3452
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 366:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3463
		{
			ASNVAL.TypeValue = MAP{
				"name": ASNDollar[1].TypeValue,
			}
		}
	case 367:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3468
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 368:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3480
		{
			ASNVAL.TypeValue = MAP{
				"name":   ASNDollar[1].TypeValue,
				"number": ASNDollar[3].TypeValue,
			}
		}
	case 369:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3486
		{
			ASNVAL.TypeValue = MAP{
				"name":         ASNDollar[1].TypeValue,
				"definedValue": ASNDollar[3].TypeValue,
			}
		}
	case 370:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3499
		{
			ASNVAL.TypeValue = MAP{
				"type": "EXTERNAL",
			}
		}
	case 371:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3511
		{
			ASNVAL.TypeValue = MAP{
				"type":               "INSTANCE_OF",
				"definedObjectClass": ASNDollar[3].TypeValue,
			}
		}
	case 372:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3525
		{
			ASNVAL.TypeValue = MAP{
				"type": "INTEGER",
			}
		}
	case 373:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3530
		{
			ASNVAL.TypeValue = MAP{
				"type":    "INTEGER",
				"numbers": ASNDollar[3].TypeValue,
			}
		}
	case 374:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3544
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 375:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3549
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 376:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3560
		{
			ASNVAL.TypeValue = MAP{
				"type": "OID_IRI",
			}
		}
	case 377:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3572
		{
			ASNVAL.TypeValue = MAP{
				"type": "NULL",
			}
		}
	case 378:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3584
		{
			ASNVAL.TypeValue = MAP{
				"type":               "OBJECT_FIELD",
				"definedObjectClass": ASNDollar[1].TypeValue,
				"fieldName":          ASNDollar[3].TypeValue,
			}
		}
	case 379:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3598
		{
			ASNVAL.TypeValue = MAP{
				"type": "OBJECT_IDENTIFIER",
			}
		}
	case 380:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3610
		{
			ASNVAL.TypeValue = MAP{
				"type": "OCTET_STRING",
			}
		}
	case 381:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3622
		{
			ASNVAL.TypeValue = MAP{
				"type": "REAL",
			}
		}
	case 382:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3634
		{
			ASNVAL.TypeValue = MAP{
				"type": "RELATIVE_OID_IRI",
			}
		}
	case 383:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3646
		{
			ASNVAL.TypeValue = MAP{
				"type": "RELATIVE_OID",
			}
		}
	case 384:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3660
		{
			ASNVAL.TypeValue = MAP{
				"type": "SEQUENCE",
			}
		}
	case 385:
		ASNDollar = ASNS[ASNpt-9 : ASNpt+1]
//line asn.y:3665
		{
			ASNVAL.TypeValue = MAP{
				"type":                  "SEQUENCE",
				"extensionAndException": ASNDollar[3].TypeToken,
			}
		}
	case 386:
		ASNDollar = ASNS[ASNpt-14 : ASNpt+1]
//line asn.y:3671
		{
			ASNVAL.TypeValue = MAP{
				"type":           "SEQUENCE",
				"componentTypes": ASNDollar[3].TypeToken,
			}
		}
	case 387:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3688
		{
			ASNVAL.TypeValue = MAP{
				"rootComponentTypes": ASNDollar[1].TypeValue,
			}
		}
	case 388:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:3693
		{
			ASNVAL.TypeValue = MAP{
				"extensionAndException": ASNDollar[3].TypeValue,
				"extensionAdditions":    ASNDollar[4].TypeValue,
				"rootComponentTypes":    ASNDollar[1].TypeValue,
			}
		}
	case 389:
		ASNDollar = ASNS[ASNpt-7 : ASNpt+1]
//line asn.y:3700
		{
			ASNVAL.TypeValue = MAP{
				"extensionAndException": ASNDollar[3].TypeValue,
				"extensionAdditions":    ASNDollar[4].TypeValue,
				"rootComponentTypes":    append(ASNDollar[1].TypeValue.(LIST), ASNDollar[7].TypeValue.(LIST)),
			}
		}
	case 390:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:3707
		{
			ASNVAL.TypeValue = MAP{
				"extensionAndException": ASNDollar[1].TypeValue,
				"extensionAdditions":    ASNDollar[2].TypeValue,
				"rootComponentTypes":    ASNDollar[5].TypeValue,
			}
		}
	case 391:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3714
		{
			ASNVAL.TypeValue = MAP{
				"extensionAndException": ASNDollar[1].TypeValue,
				"extensionAdditions":    ASNDollar[2].TypeValue,
			}
		}
	case 392:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3727
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 393:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3738
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 394:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3743
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 395:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3757
		{
			ASNVAL.TypeValue = MAP{
				"type":      "COMPONENTS",
				"namedType": ASNDollar[1].TypeValue,
			}
		}
	case 396:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3763
		{
			ASNVAL.TypeValue = MAP{
				"type":      "COMPONENTS",
				"namedType": ASNDollar[1].TypeValue,
				"optional":  true,
			}
		}
	case 397:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3770
		{
			ASNVAL.TypeValue = MAP{
				"type":         "COMPONENTS",
				"namedType":    ASNDollar[1].TypeValue,
				"defaultValue": ASNDollar[3].TypeValue,
			}
		}
	case 398:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3777
		{
			ASNVAL.TypeValue = MAP{
				"type":     "COMPONENTS",
				"typename": ASNDollar[3].TypeValue,
			}
		}
	case 399:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3791
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 400:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3794
		{
			ASNVAL.TypeValue = nil
		}
	case 401:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3805
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 402:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3810
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 403:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3822
		{
			ASNVAL.TypeValue = MAP{
				"componentType": ASNDollar[1].TypeValue,
			}
		}
	case 404:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3827
		{
			ASNVAL.TypeValue = MAP{
				"extensionAdditionGroup": ASNDollar[1].TypeValue,
			}
		}
	case 405:
		ASNDollar = ASNS[ASNpt-6 : ASNpt+1]
//line asn.y:3839
		{
			ASNVAL.TypeValue = MAP{
				"version":        ASNDollar[3].TypeValue,
				"componentTypes": ASNDollar[4].TypeValue,
			}
		}
	case 406:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3852
		{
			ASNVAL.TypeValue = true
		}
	case 407:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3863
		{
			ASNVAL.TypeValue = MAP{
				"type":     "SEQUENCE_OF",
				"typename": ASNDollar[3].TypeValue,
			}
		}
	case 408:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3869
		{
			ASNVAL.TypeValue = MAP{
				"type":      "SEQUENCE_OF",
				"namedType": ASNDollar[3].TypeValue,
			}
		}
	case 409:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3884
		{
			ASNVAL.TypeValue = MAP{
				"type": "SET",
			}
		}
	case 410:
		ASNDollar = ASNS[ASNpt-9 : ASNpt+1]
//line asn.y:3889
		{
			ASNVAL.TypeValue = MAP{
				"type":                  "SET",
				"extensionAndException": ASNDollar[3].TypeToken,
			}
		}
	case 411:
		ASNDollar = ASNS[ASNpt-14 : ASNpt+1]
//line asn.y:3895
		{
			ASNVAL.TypeValue = MAP{
				"type":           "SET",
				"componentTypes": ASNDollar[3].TypeToken,
			}
		}
	case 412:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3909
		{
			ASNVAL.TypeValue = MAP{
				"type":     "SET_OF",
				"typename": ASNDollar[3].TypeValue,
			}
		}
	case 413:
		ASNDollar = ASNS[ASNpt-7 : ASNpt+1]
//line asn.y:3915
		{
			ASNVAL.TypeValue = MAP{
				"type":      "SET_OF",
				"namedType": ASNDollar[3].TypeValue,
			}
		}
	case 414:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3928
		{
			ASNVAL.TypeValue = MAP{
				"type": "TIME",
			}
		}
	case 415:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3940
		{
			ASNVAL.TypeValue = MAP{
				"type": "TIME_OF_DAY",
			}
		}
	case 416:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3953
		{
			ASNVAL.TypeValue = MAP{
				"type":       "PREFIXED",
				"taggedType": ASNDollar[1].TypeValue,
			}
		}
	case 417:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3959
		{
			ASNVAL.TypeValue = MAP{
				"type":                 "PREFIXED",
				"encodingPrefixedType": ASNDollar[1].TypeValue,
			}
		}
	case 418:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3974
		{
			ASNVAL.TypeValue = MAP{
				"tag":      ASNDollar[1].TypeValue,
				"typename": ASNDollar[2].TypeValue,
			}
		}
	case 419:
		ASNDollar = ASNS[ASNpt-6 : ASNpt+1]
//line asn.y:3980
		{
			ASNVAL.TypeValue = MAP{
				"tag":      ASNDollar[1].TypeValue,
				"typename": ASNDollar[2].TypeValue,
				"implicit": true,
			}
		}
	case 420:
		ASNDollar = ASNS[ASNpt-10 : ASNpt+1]
//line asn.y:3987
		{
			ASNVAL.TypeValue = MAP{
				"tag":      ASNDollar[1].TypeValue,
				"typename": ASNDollar[2].TypeValue,
				"explicit": true,
			}
		}
	case 421:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:4001
		{
			ASNVAL.TypeValue = MAP{
				"encodingReference": ASNDollar[2].TypeValue,
				"class":             ASNDollar[3].TypeValue,
				"classNumber":       ASNDollar[4].TypeValue,
			}
		}
	case 422:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4016
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 423:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4029
		{
			ASNVAL.TypeValue = STRING("UNIVERSAL")
		}
	case 424:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4032
		{
			ASNVAL.TypeValue = STRING("APPLICATION")
		}
	case 425:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4035
		{
			ASNVAL.TypeValue = STRING("PRIVATE")
		}
	case 426:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4038
		{
			ASNVAL.TypeValue = nil
		}
	case 427:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4049
		{
			ASNVAL.TypeValue = MAP{
				"number": ASNDollar[1].TypeValue,
			}
		}
	case 428:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4054
		{
			ASNVAL.TypeValue = MAP{
				"definedValue": ASNDollar[1].TypeValue,
			}
		}
	case 429:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4066
		{
			ASNVAL.TypeValue = MAP{
				"encodingPrefix": ASNDollar[1].TypeValue,
				"typename":       ASNDollar[2].TypeValue,
			}
		}
	case 430:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:4079
		{
			ASNVAL.TypeValue = MAP{
				"encodingReference":   ASNDollar[2].TypeValue,
				"encodingInstruction": ASNDollar[3].TypeValue,
			}
		}
	case 431:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4092
		{
			ASNVAL.TypeValue = STRING("TAG")
		}
	case 432:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4095
		{
			ASNVAL.TypeValue = STRING("XER")
		}
	case 433:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4098
		{
			ASNVAL.TypeValue = STRING("PER")
		}
	case 434:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4129
		{
			ASNVAL.TypeValue = MAP{
				"bitString": ASNDollar[1].TypeValue,
			}
		}
	case 435:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4134
		{
			ASNVAL.TypeValue = MAP{
				"boolean": ASNDollar[1].TypeValue,
			}
		}
	case 436:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4139
		{
			ASNVAL.TypeValue = MAP{
				"characterString": ASNDollar[1].TypeValue,
			}
		}
	case 437:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4144
		{
			ASNVAL.TypeValue = MAP{
				"choice": ASNDollar[1].TypeValue,
			}
		}
	case 438:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4149
		{
			ASNVAL.TypeValue = MAP{
				"embeddedPDV": ASNDollar[1].TypeValue,
			}
		}
	case 439:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4154
		{
			ASNVAL.TypeValue = MAP{
				"enumerated": ASNDollar[1].TypeValue,
			}
		}
	case 440:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4159
		{
			ASNVAL.TypeValue = MAP{
				"external": ASNDollar[1].TypeValue,
			}
		}
	case 441:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4164
		{
			ASNVAL.TypeValue = MAP{
				"instanceOf": ASNDollar[1].TypeValue,
			}
		}
	case 442:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4169
		{
			ASNVAL.TypeValue = MAP{
				"integer": ASNDollar[1].TypeValue,
			}
		}
	case 443:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4174
		{
			ASNVAL.TypeValue = MAP{
				"iri": ASNDollar[1].TypeValue,
			}
		}
	case 444:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4179
		{
			ASNVAL.TypeValue = MAP{
				"null": ASNDollar[1].TypeValue,
			}
		}
	case 445:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4184
		{
			ASNVAL.TypeValue = MAP{
				"objectIdentifier": ASNDollar[1].TypeValue,
			}
		}
	case 446:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4189
		{
			ASNVAL.TypeValue = MAP{
				"octetString": ASNDollar[1].TypeValue,
			}
		}
	case 447:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4194
		{
			ASNVAL.TypeValue = MAP{
				"real": ASNDollar[1].TypeValue,
			}
		}
	case 448:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4199
		{
			ASNVAL.TypeValue = MAP{
				"relativeIRI": ASNDollar[1].TypeValue,
			}
		}
	case 449:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4204
		{
			ASNVAL.TypeValue = MAP{
				"relativeOID": ASNDollar[1].TypeValue,
			}
		}
	case 450:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4209
		{
			ASNVAL.TypeValue = MAP{
				"sequence": ASNDollar[1].TypeValue,
			}
		}
	case 451:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4214
		{
			ASNVAL.TypeValue = MAP{
				"sequenceOf": ASNDollar[1].TypeValue,
			}
		}
	case 452:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4219
		{
			ASNVAL.TypeValue = MAP{
				"set": ASNDollar[1].TypeValue,
			}
		}
	case 453:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4224
		{
			ASNVAL.TypeValue = MAP{
				"setOf": ASNDollar[1].TypeValue,
			}
		}
	case 454:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4229
		{
			ASNVAL.TypeValue = MAP{
				"prefixed": ASNDollar[1].TypeValue,
			}
		}
	case 455:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4234
		{
			ASNVAL.TypeValue = MAP{
				"time": ASNDollar[1].TypeValue,
			}
		}
	case 456:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4250
		{
			ASNVAL.TypeValue = MAP{
				"bstring": ASNDollar[1].TypeString,
			}
		}
	case 457:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4255
		{
			ASNVAL.TypeValue = MAP{
				"hstring": ASNDollar[1].TypeString,
			}
		}
	case 458:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4260
		{
			ASNVAL.TypeValue = MAP{
				"indentifiers": ASNDollar[2].TypeValue,
			}
		}
	case 459:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4265
		{
			ASNVAL.TypeValue = nil
		}
	case 460:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4268
		{
			ASNVAL.TypeValue = MAP{
				"bstring": ASNDollar[2].TypeValue,
			}
		}
	case 461:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4281
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 462:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4286
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeToken)
		}
	case 463:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4297
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 464:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4300
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 465:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4311
		{
			ASNVAL.TypeValue = MAP{
				"restrictedCharacterString": ASNDollar[1].TypeValue,
			}
		}
	case 466:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4316
		{
			ASNVAL.TypeValue = MAP{
				"unrestrictedCharacterString": ASNDollar[1].TypeValue,
			}
		}
	case 467:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4331
		{
			ASNVAL.TypeValue = MAP{
				"cstring": ASNDollar[1].TypeString,
			}
		}
	case 468:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4336
		{
			ASNVAL.TypeValue = MAP{
				"characterStringList": ASNDollar[1].TypeValue,
			}
		}
	case 469:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4341
		{
			ASNVAL.TypeValue = MAP{
				"quadruple": ASNDollar[1].TypeValue,
			}
		}
	case 470:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4346
		{
			ASNVAL.TypeValue = MAP{
				"tuple": ASNDollar[1].TypeValue,
			}
		}
	case 471:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4357
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 472:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4368
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 473:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4373
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeToken)
		}
	case 474:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4387
		{
			ASNVAL.TypeValue = MAP{
				"cstring": ASNDollar[1].TypeString,
			}
		}
	case 475:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4392
		{
			ASNVAL.TypeValue = MAP{
				"quadruple": ASNDollar[1].TypeValue,
			}
		}
	case 476:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4397
		{
			ASNVAL.TypeValue = MAP{
				"tuple": ASNDollar[1].TypeValue,
			}
		}
	case 477:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4402
		{
			ASNVAL.TypeValue = MAP{
				"definedValue": ASNDollar[1].TypeValue,
			}
		}
	case 478:
		ASNDollar = ASNS[ASNpt-9 : ASNpt+1]
//line asn.y:4413
		{
			ASNVAL.TypeValue = MAP{
				"group": ASNDollar[2].TypeValue,
				"plane": ASNDollar[4].TypeValue,
				"row":   ASNDollar[6].TypeValue,
				"cell":  ASNDollar[8].TypeValue,
			}
		}
	case 479:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4427
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 480:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4436
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 481:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4445
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 482:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4454
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 483:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:4463
		{
			ASNVAL.TypeValue = MAP{
				"tableColumn": ASNDollar[2].TypeValue,
				"tableRow":    ASNDollar[4].TypeValue,
			}
		}
	case 484:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4475
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 485:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4484
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 486:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4493
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 487:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4502
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"value":      ASNDollar[2].TypeToken,
			}
		}
	case 488:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4514
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 489:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4523
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 490:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4532
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 491:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4543
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 492:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4552
		{
			ASNVAL.TypeValue = STRING("NULL")
		}
	case 493:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4564
		{
			ASNVAL.TypeValue = MAP{
				"bstring": ASNDollar[1].TypeString,
			}
		}
	case 494:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4569
		{
			ASNVAL.TypeValue = MAP{
				"hstring": ASNDollar[1].TypeString,
			}
		}
	case 495:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4574
		{
			ASNVAL.TypeValue = MAP{
				"value": ASNDollar[2].TypeValue,
			}
		}
	case 496:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4587
		{
			ASNVAL.TypeValue = MAP{
				"numericRealValue": ASNDollar[1].TypeValue,
			}
		}
	case 497:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4592
		{
			ASNVAL.TypeValue = MAP{
				"specialRealValue": ASNDollar[1].TypeValue,
			}
		}
	case 498:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4606
		{
			ASNVAL.TypeValue = MAP{
				"realNumber": ASNDollar[1].TypeValue,
			}
		}
	case 499:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4611
		{
			ASNVAL.TypeValue = MAP{
				"sequenceValue": ASNDollar[1].TypeValue,
			}
		}
	case 500:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4625
		{
			ASNVAL.TypeValue = STRING("PLUS_INFINITY")
		}
	case 501:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4628
		{
			ASNVAL.TypeValue = STRING("MINUS_INFINITY")
		}
	case 502:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4631
		{
			ASNVAL.TypeValue = STRING("NOT_A_NUMBER")
		}
	case 503:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4640
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 504:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:4653
		{
			ASNVAL.TypeValue = MAP{
				"firstArcIdentifier":       ASNDollar[2].TypeValue,
				"subsequentArcIndentifier": ASNDollar[3].TypeValue,
			}
		}
	case 505:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4666
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 506:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4677
		{
			ASNVAL.TypeValue = MAP{
				"integerUnicodeLabel": ASNDollar[1].TypeValue,
			}
		}
	case 507:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4682
		{
			ASNVAL.TypeValue = MAP{
				"nonintegerUnicodeLabel": ASNDollar[1].TypeValue,
			}
		}
	case 508:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4695
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[2].TypeValue,
			}
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 509:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4701
		{
			ASNVAL.TypeValue = LIST{}
		}
	case 510:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:4715
		{
			ASNVAL.TypeValue = MAP{
				"firstRelativeArcIdentifier": ASNDollar[2].TypeValue,
				"subsequentArcIdentifier":    ASNDollar[3].TypeValue,
			}
		}
	case 511:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4728
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 512:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4738
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 513:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4749
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 514:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4754
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 515:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4767
		{
			ASNVAL.TypeValue = MAP{
				"number": ASNDollar[1].TypeValue,
			}
		}
	case 516:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4772
		{
			ASNVAL.TypeValue = MAP{
				"nameAndNumber": ASNDollar[1].TypeValue,
			}
		}
	case 517:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4777
		{
			ASNVAL.TypeValue = MAP{
				"definedValue": ASNDollar[1].TypeValue,
			}
		}
	case 518:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4790
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 519:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4793
		{
			ASNVAL.TypeValue = nil
		}
	case 520:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4799
		{
			ASNVAL.TypeValue = nil
		}
	case 521:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4805
		{
			ASNVAL.TypeValue = nil
		}
	case 522:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4811
		{
			ASNVAL.TypeValue = nil
		}
	case 523:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4817
		{
			ASNVAL.TypeValue = nil
		}
	case 524:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4823
		{
			ASNVAL.TypeValue = nil
		}
	case 525:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4829
		{
			ASNVAL.TypeValue = nil
		}
	case 526:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4835
		{
			ASNVAL.TypeValue = nil
		}
	case 527:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4841
		{
			ASNVAL.TypeValue = nil
		}
	case 528:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4847
		{
			ASNVAL.TypeValue = nil
		}
	case 529:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4853
		{
			ASNVAL.TypeValue = nil
		}
	case 530:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4859
		{
			ASNVAL.TypeValue = nil
		}
	case 531:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4865
		{
			ASNVAL.TypeValue = nil
		}
	case 532:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4871
		{
			ASNVAL.TypeValue = nil
		}
	case 533:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4877
		{
			ASNVAL.TypeValue = nil
		}
	case 534:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4883
		{
			ASNVAL.TypeValue = nil
		}
	case 535:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4889
		{
			ASNVAL.TypeValue = nil
		}
	case 536:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4895
		{
			ASNVAL.TypeValue = nil
		}
	case 537:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4901
		{
			ASNVAL.TypeValue = nil
		}
	case 538:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4907
		{
			ASNVAL.TypeValue = nil
		}
	case 539:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4913
		{
			ASNVAL.TypeValue = nil
		}
	case 540:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4919
		{
			ASNVAL.TypeValue = MAP{
				"type":  "EXTERNAL_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 541:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4925
		{
			ASNVAL.TypeValue = MAP{
				"type":  "STRING_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 542:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4931
		{
			ASNVAL.TypeValue = MAP{
				"type":  "NUMBER_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 543:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4937
		{
			ASNVAL.TypeValue = MAP{
				"type":  "PARAMETERIZED_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 544:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4946
		{
			ASNVAL.TypeValue = MAP{
				"module": ASNDollar[1].TypeValue,
				"value":  ASNDollar[3].TypeValue,
			}
		}
	case 545:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4955
		{
			ASNVAL.TypeValue = nil
		}
	case 546:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4961
		{
			ASNVAL.TypeValue = nil
		}
	case 547:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4967
		{
			ASNVAL.TypeValue = nil
		}
	case 548:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4973
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 549:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4976
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 550:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4982
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeNumber
		}
	case 551:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4985
		{
			ASNVAL.TypeValue = (-1) * ASNDollar[2].TypeNumber
		}
	case 552:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4988
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeNumber
		}
	case 553:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4991
		{
			ASNVAL.TypeValue = (-1) * ASNDollar[2].TypeNumber
		}
	case 554:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4997
		{
			ASNVAL.TypeValue = STRING("::=")
		}
	case 555:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:5003
		{
			SkipBlock()
		}
	case 556:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:5006
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeString
		}
	}
	goto ASNstack /* stack new state and value */
}
