// Code generated by goyacc -p ASN asn.y. DO NOT EDIT.

//line asn.y:1

package main

import __yyfmt__ "fmt"

//line asn.y:3
import (
	"bytes"
	"encoding/json"
	"fmt"
)

var code bytes.Buffer

func AddLine(line string) {
	code.WriteString(line)
	code.WriteByte('\n')
}

func JSON(obj interface{}) string {
	data, err := json.MarshalIndent(obj, "", "    ")
	if nil != err {
		fmt.Println("Error: ", err)
		return ""
	}
	return string(data)
}

func Print(line string) {
	fmt.Println(line)
}

func Join(values ...string) string {
	var buffer bytes.Buffer
	for _, value := range values {
		buffer.WriteString(value)
	}
	return buffer.String()
}

func SetResult(l ASNLexer, v VALUE) {
	l.(*Parser).Result = JSON(&v)
}

type Empty struct{}
type (
	VALUE   interface{}
	STRING  string
	NUMBER  float64
	BOOLEAN bool
	LIST    []VALUE
	MAP     map[string]VALUE
)

//line asn.y:50
type ASNSymType struct {
	yys         int
	TypeToken   struct{}
	TypeString  STRING
	TypeNumber  NUMBER
	TypeValue   VALUE
	TypeBoolean BOOLEAN
	TypeMap     MAP
	TypeList    LIST
}

const CURLY_START = 57346
const CURLY_END = 57347
const SQUARE_START = 57348
const SQUARE_END = 57349
const DOUBLE_QUOTE = 57350
const SINGLE_QUOTE = 57351
const COMMA = 57352
const COLON = 57353
const MINUS = 57354
const GREATER_THAN = 57355
const LESS_THAN = 57356
const DOT = 57357
const SLASH = 57358
const ROUND_START = 57359
const ROUND_END = 57360
const EQUALITY = 57361
const APOSTROPHE = 57362
const SPACE = 57363
const PIPE = 57364
const AT_THE_RATE = 57365
const EXCLAMATION = 57366
const CARET = 57367
const SEMI_COMMA = 57368
const ABSENT_SYMBOL = 57369
const ABSTRACTSYNTAX_SYMBOL = 57370
const ALL_SYMBOL = 57371
const APPLICATION_SYMBOL = 57372
const AUTOMATIC_SYMBOL = 57373
const BEGIN_SYMBOL = 57374
const BIT_SYMBOL = 57375
const BMPSTRING_SYMBOL = 57376
const BOOLEAN_SYMBOL = 57377
const BY_SYMBOL = 57378
const CHARACTER_SYMBOL = 57379
const CHOICE_SYMBOL = 57380
const CLASS_SYMBOL = 57381
const COMPONENT_SYMBOL = 57382
const COMPONENTS_SYMBOL = 57383
const CONSTRAINED_SYMBOL = 57384
const CONTAINING_SYMBOL = 57385
const DATE_SYMBOL = 57386
const DATETIME_SYMBOL = 57387
const DEFAULT_SYMBOL = 57388
const DEFINITIONS_SYMBOL = 57389
const DURATION_SYMBOL = 57390
const EMBEDDED_SYMBOL = 57391
const ENCODED_SYMBOL = 57392
const ENCODINGCONTROL_SYMBOL = 57393
const END_SYMBOL = 57394
const ENUMERATED_SYMBOL = 57395
const EXCEPT_SYMBOL = 57396
const EXPLICIT_SYMBOL = 57397
const EXPORTS_SYMBOL = 57398
const EXTENSIBILITY_SYMBOL = 57399
const EXTERNEL_SYMBOL = 57400
const FALSE_SYMBOL = 57401
const FROM_SYMBOL = 57402
const GENERALIZEDTIME_SYMBOL = 57403
const GENERALSTRING_SYMBOL = 57404
const GRAPHICSTRING_SYMBOL = 57405
const IA5STRING_SYMBOL = 57406
const IDENTIFIER_SYMBOL = 57407
const IMPLICIT_SYMBOL = 57408
const IMPLIED_SYMBOL = 57409
const IMPORTS_SYMBOL = 57410
const INCLUDES_SYMBOL = 57411
const INSTANCE_SYMBOL = 57412
const INSTRUCTIONS_SYMBOL = 57413
const INTEGER_SYMBOL = 57414
const INTERSECTION_SYMBOL = 57415
const ISO646STRING_SYMBOL = 57416
const MAX_SYMBOL = 57417
const MIN_SYMBOL = 57418
const MINUSINFINITY_SYMBOL = 57419
const NOTANUMBER_SYMBOL = 57420
const NULL_SYMBOL = 57421
const NUMERICSTRING_SYMBOL = 57422
const OBJECT_SYMBOL = 57423
const OBJECTDESCRIPTOR_SYMBOL = 57424
const OCTET_SYMBOL = 57425
const OF_SYMBOL = 57426
const OIDIRI_SYMBOL = 57427
const OPTIONAL_SYMBOL = 57428
const PATTERN_SYMBOL = 57429
const PDV_SYMBOL = 57430
const PLUSINFINITY_SYMBOL = 57431
const PRESENT_SYMBOL = 57432
const PRINTABLESTRING_SYMBOL = 57433
const PRIVATE_SYMBOL = 57434
const REAL_SYMBOL = 57435
const RELATIVEOID_SYMBOL = 57436
const RELATIVEOIDIRI_SYMBOL = 57437
const SEQUENCE_SYMBOL = 57438
const SET_SYMBOL = 57439
const SETTINGS_SYMBOL = 57440
const SIZE_SYMBOL = 57441
const STRING_SYMBOL = 57442
const SYNTAX_SYMBOL = 57443
const T61STRING_SYMBOL = 57444
const TAGS_SYMBOL = 57445
const TELETEXSTRING_SYMBOL = 57446
const TIME_SYMBOL = 57447
const TIMEOFDAY_SYMBOL = 57448
const TRUE_SYMBOL = 57449
const TYPEIDENTIFIER_SYMBOL = 57450
const UNION_SYMBOL = 57451
const UNIQUE_SYMBOL = 57452
const UNIVERSAL_SYMBOL = 57453
const UNIVERSALSTRING_SYMBOL = 57454
const UTCTIME_SYMBOL = 57455
const UTF8STRING_SYMBOL = 57456
const VIDEOTEXSTRING_SYMBOL = 57457
const VISIBLESTRING_SYMBOL = 57458
const WITH_SYMBOL = 57459
const ASSIGNMENT_SYMBOL = 57460
const TokenCapitalString = 57461
const TokenString = 57462
const TokenNumber = 57463
const TokenInteger = 57464
const TokenFloat = 57465
const TokenBoolean = 57466
const TokenBString = 57467
const TokenHString = 57468
const TokenCString = 57469

var ASNToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"CURLY_START",
	"CURLY_END",
	"SQUARE_START",
	"SQUARE_END",
	"DOUBLE_QUOTE",
	"SINGLE_QUOTE",
	"COMMA",
	"COLON",
	"MINUS",
	"GREATER_THAN",
	"LESS_THAN",
	"DOT",
	"SLASH",
	"ROUND_START",
	"ROUND_END",
	"EQUALITY",
	"APOSTROPHE",
	"SPACE",
	"PIPE",
	"AT_THE_RATE",
	"EXCLAMATION",
	"CARET",
	"SEMI_COMMA",
	"ABSENT_SYMBOL",
	"ABSTRACTSYNTAX_SYMBOL",
	"ALL_SYMBOL",
	"APPLICATION_SYMBOL",
	"AUTOMATIC_SYMBOL",
	"BEGIN_SYMBOL",
	"BIT_SYMBOL",
	"BMPSTRING_SYMBOL",
	"BOOLEAN_SYMBOL",
	"BY_SYMBOL",
	"CHARACTER_SYMBOL",
	"CHOICE_SYMBOL",
	"CLASS_SYMBOL",
	"COMPONENT_SYMBOL",
	"COMPONENTS_SYMBOL",
	"CONSTRAINED_SYMBOL",
	"CONTAINING_SYMBOL",
	"DATE_SYMBOL",
	"DATETIME_SYMBOL",
	"DEFAULT_SYMBOL",
	"DEFINITIONS_SYMBOL",
	"DURATION_SYMBOL",
	"EMBEDDED_SYMBOL",
	"ENCODED_SYMBOL",
	"ENCODINGCONTROL_SYMBOL",
	"END_SYMBOL",
	"ENUMERATED_SYMBOL",
	"EXCEPT_SYMBOL",
	"EXPLICIT_SYMBOL",
	"EXPORTS_SYMBOL",
	"EXTENSIBILITY_SYMBOL",
	"EXTERNEL_SYMBOL",
	"FALSE_SYMBOL",
	"FROM_SYMBOL",
	"GENERALIZEDTIME_SYMBOL",
	"GENERALSTRING_SYMBOL",
	"GRAPHICSTRING_SYMBOL",
	"IA5STRING_SYMBOL",
	"IDENTIFIER_SYMBOL",
	"IMPLICIT_SYMBOL",
	"IMPLIED_SYMBOL",
	"IMPORTS_SYMBOL",
	"INCLUDES_SYMBOL",
	"INSTANCE_SYMBOL",
	"INSTRUCTIONS_SYMBOL",
	"INTEGER_SYMBOL",
	"INTERSECTION_SYMBOL",
	"ISO646STRING_SYMBOL",
	"MAX_SYMBOL",
	"MIN_SYMBOL",
	"MINUSINFINITY_SYMBOL",
	"NOTANUMBER_SYMBOL",
	"NULL_SYMBOL",
	"NUMERICSTRING_SYMBOL",
	"OBJECT_SYMBOL",
	"OBJECTDESCRIPTOR_SYMBOL",
	"OCTET_SYMBOL",
	"OF_SYMBOL",
	"OIDIRI_SYMBOL",
	"OPTIONAL_SYMBOL",
	"PATTERN_SYMBOL",
	"PDV_SYMBOL",
	"PLUSINFINITY_SYMBOL",
	"PRESENT_SYMBOL",
	"PRINTABLESTRING_SYMBOL",
	"PRIVATE_SYMBOL",
	"REAL_SYMBOL",
	"RELATIVEOID_SYMBOL",
	"RELATIVEOIDIRI_SYMBOL",
	"SEQUENCE_SYMBOL",
	"SET_SYMBOL",
	"SETTINGS_SYMBOL",
	"SIZE_SYMBOL",
	"STRING_SYMBOL",
	"SYNTAX_SYMBOL",
	"T61STRING_SYMBOL",
	"TAGS_SYMBOL",
	"TELETEXSTRING_SYMBOL",
	"TIME_SYMBOL",
	"TIMEOFDAY_SYMBOL",
	"TRUE_SYMBOL",
	"TYPEIDENTIFIER_SYMBOL",
	"UNION_SYMBOL",
	"UNIQUE_SYMBOL",
	"UNIVERSAL_SYMBOL",
	"UNIVERSALSTRING_SYMBOL",
	"UTCTIME_SYMBOL",
	"UTF8STRING_SYMBOL",
	"VIDEOTEXSTRING_SYMBOL",
	"VISIBLESTRING_SYMBOL",
	"WITH_SYMBOL",
	"ASSIGNMENT_SYMBOL",
	"TokenCapitalString",
	"TokenString",
	"TokenNumber",
	"TokenInteger",
	"TokenFloat",
	"TokenBoolean",
	"TokenBString",
	"TokenHString",
	"TokenCString",
}

var ASNStatenames = [...]string{}

const ASNEofCode = 1
const ASNErrCode = 2
const ASNInitialStackSize = 16

//line asn.y:2262

//line yacctab:1
var ASNExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 45,
	52, 28,
	-2, 32,
	-1, 95,
	52, 135,
	-2, 155,
	-1, 165,
	15, 155,
	-2, 135,
	-1, 205,
	43, 248,
	-2, 209,
	-1, 231,
	5, 61,
	-2, 291,
	-1, 242,
	5, 61,
	10, 229,
	-2, 291,
	-1, 249,
	4, 286,
	10, 215,
	-2, 62,
	-1, 250,
	4, 287,
	10, 231,
	-2, 63,
}

const ASNPrivate = 57344

const ASNLast = 408

var ASNAct = [...]int{
	235, 251, 233, 237, 221, 238, 220, 253, 252, 234,
	5, 167, 5, 21, 230, 96, 21, 206, 264, 193,
	23, 177, 33, 34, 14, 23, 6, 7, 39, 38,
	37, 23, 29, 40, 259, 243, 60, 51, 70, 50,
	43, 36, 23, 58, 89, 28, 51, 69, 68, 50,
	283, 9, 268, 45, 66, 93, 207, 65, 23, 48,
	63, 63, 59, 92, 79, 79, 49, 63, 87, 27,
	52, 295, 217, 239, 30, 266, 261, 44, 32, 79,
	26, 23, 165, 164, 42, 239, 166, 46, 300, 134,
	223, 224, 213, 42, 90, 296, 79, 16, 274, 63,
	157, 88, 222, 86, 259, 134, 273, 41, 94, 55,
	303, 159, 23, 31, 67, 54, 148, 275, 271, 89,
	216, 297, 262, 272, 23, 94, 155, 232, 20, 23,
	22, 24, 6, 7, 23, 22, 24, 158, 204, 205,
	218, 22, 24, 150, 144, 138, 149, 6, 7, 6,
	7, 91, 22, 24, 269, 12, 142, 256, 174, 270,
	241, 1, 139, 212, 152, 6, 7, 173, 22, 24,
	208, 229, 211, 141, 227, 134, 170, 169, 153, 3,
	154, 228, 8, 136, 145, 23, 143, 95, 240, 20,
	231, 22, 24, 135, 146, 151, 137, 147, 140, 133,
	132, 6, 7, 131, 162, 163, 171, 250, 212, 130,
	254, 258, 255, 257, 23, 129, 249, 211, 128, 6,
	7, 62, 22, 24, 61, 242, 53, 256, 248, 260,
	215, 6, 7, 263, 22, 24, 6, 7, 214, 22,
	24, 6, 7, 293, 22, 24, 265, 247, 301, 267,
	298, 291, 277, 246, 278, 245, 276, 265, 280, 148,
	281, 219, 212, 244, 210, 209, 203, 279, 263, 212,
	284, 211, 287, 174, 292, 294, 173, 258, 211, 257,
	288, 289, 173, 282, 202, 285, 150, 144, 138, 149,
	286, 290, 6, 7, 201, 22, 24, 299, 200, 142,
	199, 302, 198, 197, 196, 139, 195, 152, 194, 192,
	191, 190, 189, 188, 187, 186, 141, 185, 184, 183,
	182, 6, 7, 181, 22, 24, 180, 145, 179, 143,
	176, 175, 172, 127, 126, 125, 124, 146, 151, 137,
	147, 140, 123, 122, 6, 7, 121, 120, 119, 118,
	117, 116, 115, 114, 113, 112, 111, 109, 110, 108,
	107, 106, 105, 104, 103, 102, 101, 100, 99, 98,
	85, 84, 83, 82, 81, 80, 226, 225, 97, 161,
	160, 178, 78, 77, 76, 75, 74, 73, 72, 71,
	236, 168, 156, 64, 57, 56, 47, 35, 13, 25,
	19, 18, 17, 15, 11, 10, 4, 2,
}

var ASNPact = [...]int{
	-93, -1000, -93, -1000, 4, 151, -1000, -1000, -1000, -95,
	-1000, -1000, 8, 14, -39, 69, -1000, -1000, -1000, -1000,
	61, -1000, -1000, -100, -1000, -16, -73, -74, -75, -1000,
	-1000, -1000, 19, -1000, -1000, 73, -27, -1000, -1000, -1000,
	59, 21, 76, -1000, -1000, -19, 51, -1000, -10, -29,
	-93, 28, -1000, -4, -93, -93, 42, -93, -1000, 34,
	-1000, 147, -1000, -1000, 37, 29, -1000, 109, -1000, -93,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 82,
	-1000, -1000, -1000, -1000, -1000, -1000, -93, -1000, -1000, -93,
	-93, 132, -1000, -1000, -1000, 225, 73, 73, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 68, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 71, -1000, -1000, -1000, 202, -1000, -1000,
	-1000, -1000, 13, -1000, -93, 225, -1000, -1000, -1000, -1000,
	-1000, 122, -1000, 70, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 30, 13, -1000, -1000,
	-1000, 65, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	117, 173, -1000, -1000, 58, -1000, -1000, -1000, -1000, -93,
	-1000, 9, 173, -1000, 149, 113, 96, 88, 112, 58,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 19,
	-1000, 13, -1000, -1000, -1000, 46, 173, -1000, 13, -1000,
	-93, -1000, 100, 19, 19, -1000, -1000, -1000, -1000, -1000,
	58, -1000, -1000, -1000, 53, -1000, -1000, -1000, -1000, -1000,
	-1000, 85, -1000, 116, -1000, -1000, 19, -1000, 78, -1000,
	19, 105, -1000, -1000,
}

var ASNPgo = [...]int{
	0, 407, 179, 406, 405, 404, 403, 97, 402, 401,
	400, 399, 398, 397, 396, 59, 66, 395, 394, 43,
	393, 62, 36, 392, 391, 19, 14, 2, 390, 3,
	5, 47, 38, 18, 389, 388, 387, 386, 385, 384,
	383, 382, 15, 21, 381, 380, 379, 378, 377, 376,
	375, 374, 373, 372, 371, 370, 369, 368, 367, 366,
	365, 364, 363, 362, 361, 360, 359, 358, 357, 356,
	355, 354, 353, 352, 351, 350, 349, 348, 347, 346,
	343, 342, 336, 335, 334, 333, 332, 331, 330, 11,
	328, 326, 323, 320, 319, 318, 317, 315, 314, 313,
	312, 311, 310, 309, 308, 306, 304, 303, 302, 300,
	298, 294, 284, 266, 265, 264, 263, 1, 261, 6,
	4, 255, 8, 253, 251, 250, 248, 247, 243, 238,
	230, 228, 7, 226, 224, 221, 218, 215, 209, 203,
	200, 199, 193, 183, 180, 178, 171, 107, 9, 0,
	170, 161, 160,
}

var ASNR1 = [...]int{
	0, 151, 1, 1, 2, 133, 3, 12, 12, 4,
	4, 5, 6, 6, 7, 7, 7, 8, 9, 10,
	11, 11, 11, 11, 13, 13, 14, 14, 14, 16,
	16, 16, 16, 20, 20, 21, 21, 22, 22, 134,
	135, 135, 15, 15, 17, 17, 18, 18, 19, 23,
	24, 24, 24, 25, 25, 25, 26, 26, 27, 27,
	27, 27, 28, 29, 29, 30, 31, 31, 31, 32,
	32, 32, 32, 32, 32, 32, 32, 34, 35, 36,
	37, 38, 39, 40, 41, 41, 41, 41, 41, 41,
	42, 42, 42, 43, 43, 43, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 57, 57, 57, 57, 57, 136, 136,
	136, 136, 141, 142, 143, 144, 89, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 138, 139, 145, 146, 140, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 68, 67, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
	80, 81, 82, 83, 84, 85, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 93, 93,
	93, 93, 93, 116, 116, 117, 94, 95, 95, 114,
	114, 114, 114, 118, 121, 121, 122, 122, 122, 122,
	119, 123, 124, 125, 126, 120, 127, 128, 115, 96,
	97, 98, 99, 100, 101, 101, 103, 104, 152, 104,
	105, 105, 129, 129, 130, 130, 130, 102, 106, 107,
	131, 131, 132, 132, 132, 108, 109, 110, 111, 112,
	113, 91, 92, 45, 44, 46, 47, 48, 49, 50,
	51, 52, 53, 54, 55, 33, 33, 33, 33, 86,
	87, 88, 89, 150, 150, 148, 148, 149, 149, 149,
	149, 147,
}

var ASNR2 = [...]int{
	0, 1, 1, 2, 10, 0, 2, 2, 0, 1,
	0, 3, 1, 2, 1, 1, 1, 1, 1, 4,
	2, 2, 2, 0, 2, 0, 3, 3, 0, 3,
	3, 2, 0, 1, 0, 1, 3, 1, 1, 1,
	1, 3, 3, 0, 1, 0, 1, 2, 3, 2,
	1, 1, 0, 3, 4, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 4, 1, 2, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 4, 3,
	4, 3, 4, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 2, 0, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 2, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	9, 1, 1, 1, 1, 5, 1, 1, 1, 3,
	1, 1, 1, 0, 1, 1, 1, 1, 0, 4,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 3,
	1, 2, 1, 1, 1, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1, 1, 1, 1, 3,
	2, 0, 0, 1, 1, 1, 1, 1, 2, 1,
	2, 3,
}

var ASNChk = [...]int{
	-1000, -151, -1, -2, -3, -148, 119, 120, -2, 47,
	-4, -5, 4, -12, 119, -6, -7, -8, -9, -10,
	120, -149, 122, 12, 123, -11, 66, 55, 31, 71,
	5, -7, 17, 122, 123, -13, 57, 103, 103, 103,
	-149, -147, 11, 67, 18, 32, 11, -14, -15, -16,
	68, 56, 19, -133, -16, -15, -17, -18, -19, -21,
	-22, -134, -135, -148, -20, 29, 26, -21, 52, -31,
	-32, -34, -35, -36, -37, -38, -39, -40, -41, -148,
	-50, -51, -52, -53, -54, -55, -31, 26, -19, 10,
	60, 4, 26, 26, -32, -147, -42, -47, -56, -57,
	-58, -59, -60, -61, -62, -63, -64, -65, -66, -68,
	-67, -69, -70, -71, -72, -73, -74, -75, -76, -77,
	-78, -79, -80, -81, -82, -83, -84, -85, -136, -137,
	-138, -139, -140, -141, -148, -142, -143, 114, 63, 80,
	116, 91, 74, 104, 62, 102, 112, 115, 34, 64,
	61, 113, 82, -145, -144, -22, -23, -148, 5, -42,
	-45, -46, -147, -147, 15, 14, 15, -89, -24, -25,
	-33, 4, -86, -148, -149, -87, -88, -43, -44, -90,
	-91, -92, -93, -94, -95, -96, -97, -98, -99, -100,
	-101, -102, -103, -25, -104, -105, -106, -107, -108, -109,
	-110, -111, -112, -113, 125, 126, 4, 43, -150, -114,
	-115, -148, -149, 79, -129, -130, 107, 59, 127, -118,
	-119, -120, 89, 77, 78, -48, -49, -148, -42, -146,
	-26, -33, 5, -27, -148, -149, -28, -29, -30, 15,
	-89, -152, -33, 5, -116, -121, -123, -127, -131, -148,
	-149, -117, -122, -132, -29, -30, 127, -119, -120, 4,
	-43, 11, 5, -27, -33, -26, 17, -148, 43, 5,
	10, 5, 10, 10, 10, 5, -132, -29, -30, -33,
	-148, -149, -43, 4, -29, -33, -43, -117, -148, -122,
	-33, -124, -149, -128, -149, 18, 10, 5, -125, -149,
	10, -126, -149, 5,
}

var ASNDef = [...]int{
	0, -2, 1, 2, 0, 10, 295, 296, 3, 8,
	6, 9, 0, 23, 0, 0, 12, 14, 15, 16,
	17, 18, 297, 0, 299, 25, 0, 0, 0, 7,
	11, 13, 0, 298, 300, 0, 0, 20, 21, 22,
	0, 0, 0, 24, 19, -2, 0, 5, 32, 43,
	45, 0, 301, 0, 68, 68, 0, 44, 46, 0,
	35, 37, 38, 39, 0, 0, 31, 33, 4, 26,
	66, 69, 70, 71, 72, 73, 74, 75, 76, 155,
	84, 85, 86, 87, 88, 89, 27, 42, 47, 0,
	0, 0, 29, 30, 67, -2, 0, 0, 90, 91,
	92, 96, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 137, 138, 139,
	140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
	150, 151, 152, 0, 136, 36, 48, 52, 41, 77,
	79, 81, 243, 277, 0, -2, 156, 133, 49, 50,
	51, 291, 285, 286, 287, 288, 136, 78, 80, 93,
	94, 95, 186, 187, 188, 189, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 206, 207, 208, -2, 291, 243, 216, 217,
	218, 241, 244, 246, 250, 251, 293, 294, 219, 220,
	221, 222, 254, 255, 256, 82, 83, 132, 153, 154,
	0, -2, 55, 56, 62, 63, 58, 59, 60, 0,
	290, 0, -2, 55, 0, 0, 0, 0, 0, -2,
	-2, 213, 224, 260, 59, 60, 226, 227, 228, 0,
	212, 243, 53, 57, 61, 0, 291, 289, 243, 210,
	0, 223, 291, 0, 0, 259, 261, 262, 263, 64,
	286, 231, 239, 54, 0, 64, 249, 214, 215, 225,
	229, 0, 232, 0, 237, 65, 0, 235, 0, 233,
	0, 0, 234, 230,
}

var ASNTok1 = [...]int{
	1,
}

var ASNTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127,
}

var ASNTok3 = [...]int{
	0,
}

var ASNErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	ASNDebug        = 0
	ASNErrorVerbose = false
)

type ASNLexer interface {
	Lex(lval *ASNSymType) int
	Error(s string)
}

type ASNParser interface {
	Parse(ASNLexer) int
	Lookahead() int
}

type ASNParserImpl struct {
	lval  ASNSymType
	stack [ASNInitialStackSize]ASNSymType
	char  int
}

func (p *ASNParserImpl) Lookahead() int {
	return p.char
}

func ASNNewParser() ASNParser {
	return &ASNParserImpl{}
}

const ASNFlag = -1000

func ASNTokname(c int) string {
	if c >= 1 && c-1 < len(ASNToknames) {
		if ASNToknames[c-1] != "" {
			return ASNToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func ASNStatname(s int) string {
	if s >= 0 && s < len(ASNStatenames) {
		if ASNStatenames[s] != "" {
			return ASNStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func ASNErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !ASNErrorVerbose {
		return "syntax error"
	}

	for _, e := range ASNErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + ASNTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := ASNPact[state]
	for tok := TOKSTART; tok-1 < len(ASNToknames); tok++ {
		if n := base + tok; n >= 0 && n < ASNLast && ASNChk[ASNAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if ASNDef[state] == -2 {
		i := 0
		for ASNExca[i] != -1 || ASNExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; ASNExca[i] >= 0; i += 2 {
			tok := ASNExca[i]
			if tok < TOKSTART || ASNExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if ASNExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += ASNTokname(tok)
	}
	return res
}

func ASNlex1(lex ASNLexer, lval *ASNSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = ASNTok1[0]
		goto out
	}
	if char < len(ASNTok1) {
		token = ASNTok1[char]
		goto out
	}
	if char >= ASNPrivate {
		if char < ASNPrivate+len(ASNTok2) {
			token = ASNTok2[char-ASNPrivate]
			goto out
		}
	}
	for i := 0; i < len(ASNTok3); i += 2 {
		token = ASNTok3[i+0]
		if token == char {
			token = ASNTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = ASNTok2[1] /* unknown char */
	}
	if ASNDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", ASNTokname(token), uint(char))
	}
	return char, token
}

func ASNParse(ASNlex ASNLexer) int {
	return ASNNewParser().Parse(ASNlex)
}

func (ASNrcvr *ASNParserImpl) Parse(ASNlex ASNLexer) int {
	var ASNn int
	var ASNVAL ASNSymType
	var ASNDollar []ASNSymType
	_ = ASNDollar // silence set and not used
	ASNS := ASNrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	ASNstate := 0
	ASNrcvr.char = -1
	ASNtoken := -1 // ASNrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		ASNstate = -1
		ASNrcvr.char = -1
		ASNtoken = -1
	}()
	ASNp := -1
	goto ASNstack

ret0:
	return 0

ret1:
	return 1

ASNstack:
	/* put a state and value onto the stack */
	if ASNDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", ASNTokname(ASNtoken), ASNStatname(ASNstate))
	}

	ASNp++
	if ASNp >= len(ASNS) {
		nyys := make([]ASNSymType, len(ASNS)*2)
		copy(nyys, ASNS)
		ASNS = nyys
	}
	ASNS[ASNp] = ASNVAL
	ASNS[ASNp].yys = ASNstate

ASNnewstate:
	ASNn = ASNPact[ASNstate]
	if ASNn <= ASNFlag {
		goto ASNdefault /* simple state */
	}
	if ASNrcvr.char < 0 {
		ASNrcvr.char, ASNtoken = ASNlex1(ASNlex, &ASNrcvr.lval)
	}
	ASNn += ASNtoken
	if ASNn < 0 || ASNn >= ASNLast {
		goto ASNdefault
	}
	ASNn = ASNAct[ASNn]
	if ASNChk[ASNn] == ASNtoken { /* valid shift */
		ASNrcvr.char = -1
		ASNtoken = -1
		ASNVAL = ASNrcvr.lval
		ASNstate = ASNn
		if Errflag > 0 {
			Errflag--
		}
		goto ASNstack
	}

ASNdefault:
	/* default state action */
	ASNn = ASNDef[ASNstate]
	if ASNn == -2 {
		if ASNrcvr.char < 0 {
			ASNrcvr.char, ASNtoken = ASNlex1(ASNlex, &ASNrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if ASNExca[xi+0] == -1 && ASNExca[xi+1] == ASNstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			ASNn = ASNExca[xi+0]
			if ASNn < 0 || ASNn == ASNtoken {
				break
			}
		}
		ASNn = ASNExca[xi+1]
		if ASNn < 0 {
			goto ret0
		}
	}
	if ASNn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			ASNlex.Error(ASNErrorMessage(ASNstate, ASNtoken))
			Nerrs++
			if ASNDebug >= 1 {
				__yyfmt__.Printf("%s", ASNStatname(ASNstate))
				__yyfmt__.Printf(" saw %s\n", ASNTokname(ASNtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for ASNp >= 0 {
				ASNn = ASNPact[ASNS[ASNp].yys] + ASNErrCode
				if ASNn >= 0 && ASNn < ASNLast {
					ASNstate = ASNAct[ASNn] /* simulate a shift of "error" */
					if ASNChk[ASNstate] == ASNErrCode {
						goto ASNstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if ASNDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", ASNS[ASNp].yys)
				}
				ASNp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if ASNDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", ASNTokname(ASNtoken))
			}
			if ASNtoken == ASNEofCode {
				goto ret1
			}
			ASNrcvr.char = -1
			ASNtoken = -1
			goto ASNnewstate /* try again in the same state */
		}
	}

	/* reduction by production ASNn */
	if ASNDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", ASNn, ASNStatname(ASNstate))
	}

	ASNnt := ASNn
	ASNpt := ASNp
	_ = ASNpt // guard against "declared and not used"

	ASNp -= ASNR2[ASNn]
	// ASNp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if ASNp+1 >= len(ASNS) {
		nyys := make([]ASNSymType, len(ASNS)*2)
		copy(nyys, ASNS)
		ASNS = nyys
	}
	ASNVAL = ASNS[ASNp+1]

	/* consult goto table to find next state */
	ASNn = ASNR1[ASNn]
	ASNg := ASNPgo[ASNn]
	ASNj := ASNg + ASNS[ASNp].yys + 1

	if ASNj >= ASNLast {
		ASNstate = ASNAct[ASNg]
	} else {
		ASNstate = ASNAct[ASNj]
		if ASNChk[ASNstate] != -ASNn {
			ASNstate = ASNAct[ASNg]
		}
	}
	// dummy call; replaced with literal code
	switch ASNnt {

	case 1:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:343
		{
			SetResult(ASNlex, ASNDollar[1].TypeValue)
			Print("Done")
			Print("--------------------------------------------------------------------------------")
			Print(JSON(&ASNDollar[1].TypeValue))
			Print("--------------------------------------------------------------------------------")
		}
	case 2:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:352
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 3:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:357
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 4:
		ASNDollar = ASNS[ASNpt-10 : ASNpt+1]
//line asn.y:387
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"encoding":   ASNDollar[3].TypeValue,
				"tag":        ASNDollar[4].TypeValue,
				"body":       ASNDollar[8].TypeValue,
			}
		}
	case 5:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:404
		{
			ASNVAL.TypeValue = nil
		}
	case 6:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:417
		{
			ASNVAL.TypeValue = MAP{
				"reference":             ASNDollar[1].TypeValue,
				"definitiveIdentifiers": ASNDollar[2].TypeValue,
			}
		}
	case 7:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:431
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 8:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:434
		{
			ASNVAL.TypeValue = ""
		}
	case 9:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:446
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 10:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:449
		{
			ASNVAL.TypeValue = nil
		}
	case 11:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:459
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 12:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:470
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 13:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:475
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 14:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:488
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 15:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:491
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 16:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:494
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 17:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:503
		{
			ASNVAL.TypeValue = MAP{
				"name": ASNDollar[1].TypeString,
			}
		}
	case 18:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:514
		{
			ASNVAL.TypeValue = MAP{
				"number": ASNDollar[1].TypeValue,
			}
		}
	case 19:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:525
		{
			ASNVAL.TypeValue = MAP{
				"name":   ASNDollar[1].TypeString,
				"number": ASNDollar[3].TypeValue,
			}
		}
	case 20:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:541
		{
			ASNVAL.TypeValue = "Implicit"
		}
	case 21:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:544
		{
			ASNVAL.TypeValue = "Explicit"
		}
	case 22:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:547
		{
			ASNVAL.TypeValue = "Automatic"
		}
	case 23:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:550
		{
			ASNVAL.TypeValue = "Explicit"
		}
	case 24:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:561
		{
			ASNVAL.TypeValue = true
		}
	case 25:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:564
		{
			ASNVAL.TypeValue = false
		}
	case 26:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:577
		{
			ASNVAL.TypeValue = MAP{
				"imports":     ASNDollar[1].TypeValue,
				"exports":     ASNDollar[2].TypeValue,
				"assignments": ASNDollar[3].TypeValue,
			}
		}
	case 27:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:586
		{
			ASNVAL.TypeValue = MAP{
				"imports":     ASNDollar[2].TypeValue,
				"exports":     ASNDollar[1].TypeValue,
				"assignments": ASNDollar[3].TypeValue,
			}
		}
	case 28:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:593
		{
			ASNVAL.TypeValue = nil
		}
	case 29:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:605
		{
			ASNVAL.TypeValue = MAP{
				"all":     "false",
				"symbols": ASNDollar[2].TypeValue,
			}
		}
	case 30:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:611
		{
			ASNVAL.TypeValue = MAP{
				"all": "true",
			}
		}
	case 31:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:616
		{
			ASNVAL.TypeValue = MAP{
				"all": "false",
			}
		}
	case 32:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:621
		{
			ASNVAL.TypeValue = MAP{
				"all": "true",
			}
		}
	case 33:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:634
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 34:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:637
		{
			ASNVAL.TypeValue = nil
		}
	case 35:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:648
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 36:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:653
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 37:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:665
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
			}
		}
	case 38:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:670
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedReference": ASNDollar[1].TypeValue,
			}
		}
	case 39:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:689
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 40:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:699
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 41:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:702
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 42:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:713
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 43:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:716
		{
			ASNVAL.TypeValue = nil
		}
	case 44:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:727
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 45:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:730
		{
			ASNVAL.TypeValue = nil
		}
	case 46:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:741
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 47:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:746
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 48:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:757
		{
			ASNVAL.TypeValue = MAP{
				"symbols":   ASNDollar[1].TypeValue,
				"reference": ASNDollar[3].TypeValue,
			}
		}
	case 49:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:770
		{
			ASNVAL.TypeValue = MAP{
				"name":        ASNDollar[1].TypeValue,
				"identifiers": ASNDollar[2].TypeValue,
			}
		}
	case 50:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:785
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 51:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:788
		{
			ASNVAL.TypeValue = nil
		}
	case 52:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:791
		{
			ASNVAL.TypeValue = nil
		}
	case 53:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:802
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 54:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:805
		{
			ASNVAL.TypeValue = ASNDollar[3].TypeValue
		}
	case 55:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:808
		{
			ASNVAL.TypeValue = nil
		}
	case 56:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:819
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 57:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:824
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 58:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:838
		{
			ASNVAL.TypeValue = MAP{
				"name": ASNDollar[1].TypeValue,
			}
		}
	case 59:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:843
		{
			ASNVAL.TypeValue = MAP{
				"number": ASNDollar[1].TypeValue,
			}
		}
	case 60:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:848
		{
			ASNVAL.TypeValue = MAP{
				"nameAndNumber": ASNDollar[1].TypeValue,
			}
		}
	case 61:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:853
		{
			ASNVAL.TypeValue = MAP{
				"definedValue": ASNDollar[1].TypeValue,
			}
		}
	case 62:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:865
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 63:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:876
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 64:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:879
		{
			ASNVAL.TypeValue = MAP{
				"definedValue": ASNDollar[1].TypeValue,
			}
		}
	case 65:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:891
		{
			ASNVAL.TypeValue = MAP{
				"name":   ASNDollar[1].TypeValue,
				"number": ASNDollar[3].TypeValue,
			}
		}
	case 66:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:905
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 67:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:910
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 68:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:914
		{
			ASNVAL.TypeValue = nil
		}
	case 69:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:931
		{
			ASNVAL.TypeValue = MAP{
				"typeAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 70:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:936
		{
			ASNVAL.TypeValue = MAP{
				"valueAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 71:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:941
		{
			ASNVAL.TypeValue = MAP{
				"xmlValueAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 72:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:946
		{
			ASNVAL.TypeValue = MAP{
				"valueSetAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 73:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:951
		{
			ASNVAL.TypeValue = MAP{
				"objectClassAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 74:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:956
		{
			ASNVAL.TypeValue = MAP{
				"objectAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 75:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:961
		{
			ASNVAL.TypeValue = MAP{
				"objectSetAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 76:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:966
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 77:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:980
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"type":      ASNDollar[2].TypeValue,
			}
		}
	case 78:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:996
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"type":      ASNDollar[2].TypeValue,
				"value":     ASNDollar[4].TypeValue,
			}
		}
	case 79:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1012
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"value":     ASNDollar[3].TypeValue,
			}
		}
	case 80:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1028
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"type":      ASNDollar[2].TypeValue,
				"valueSet":  ASNDollar[4].TypeValue,
			}
		}
	case 81:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1044
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"class":     ASNDollar[3].TypeValue,
			}
		}
	case 82:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1060
		{
			ASNVAL.TypeValue = MAP{
				"reference":    ASNDollar[1].TypeValue,
				"definedClass": ASNDollar[2].TypeValue,
				"object":       ASNDollar[4].TypeValue,
			}
		}
	case 83:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1077
		{
			ASNVAL.TypeValue = MAP{
				"reference":    ASNDollar[1].TypeValue,
				"definedClass": ASNDollar[2].TypeValue,
				"objectSet":    ASNDollar[4].TypeValue,
			}
		}
	case 84:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1096
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 85:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1099
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 86:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1102
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 87:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1105
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 88:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1108
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 89:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1111
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 90:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1123
		{
			ASNVAL.TypeValue = MAP{
				"type":       "BUILTIN_TYPE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 91:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1129
		{
			ASNVAL.TypeValue = MAP{
				"type":       "REFERENCED_TYPE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 92:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1135
		{
			ASNVAL.TypeValue = MAP{
				"type":       "CONSTRAINED_TYPE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 93:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1150
		{
			ASNVAL.TypeValue = MAP{
				"type":       "BUILTIN_VALUE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 94:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1156
		{
			ASNVAL.TypeValue = MAP{
				"type":       "REFERENCED_VALUE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 95:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1162
		{
			ASNVAL.TypeValue = MAP{
				"type":       "OBJECT_CLASS_FIELD_VALUE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 96:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1200
		{
			ASNVAL.TypeValue = MAP{
				"bitStringType": ASNDollar[1].TypeValue,
			}
		}
	case 97:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1205
		{
			ASNVAL.TypeValue = MAP{
				"booleanType": ASNDollar[1].TypeValue,
			}
		}
	case 98:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1210
		{
			ASNVAL.TypeValue = MAP{
				"characterStringType": ASNDollar[1].TypeValue,
			}
		}
	case 99:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1215
		{
			ASNVAL.TypeValue = MAP{
				"choiceType": ASNDollar[1].TypeValue,
			}
		}
	case 100:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1220
		{
			ASNVAL.TypeValue = MAP{
				"dateType": ASNDollar[1].TypeValue,
			}
		}
	case 101:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1225
		{
			ASNVAL.TypeValue = MAP{
				"dataTimeType": ASNDollar[1].TypeValue,
			}
		}
	case 102:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1230
		{
			ASNVAL.TypeValue = MAP{
				"durationType": ASNDollar[1].TypeValue,
			}
		}
	case 103:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1235
		{
			ASNVAL.TypeValue = MAP{
				"embeddedPDVType": ASNDollar[1].TypeValue,
			}
		}
	case 104:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1240
		{
			ASNVAL.TypeValue = MAP{
				"enumeratedType": ASNDollar[1].TypeValue,
			}
		}
	case 105:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1245
		{
			ASNVAL.TypeValue = MAP{
				"externalType": ASNDollar[1].TypeValue,
			}
		}
	case 106:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1250
		{
			ASNVAL.TypeValue = MAP{
				"instanceOfType": ASNDollar[1].TypeValue,
			}
		}
	case 107:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1255
		{
			ASNVAL.TypeValue = MAP{
				"integerType": ASNDollar[1].TypeValue,
			}
		}
	case 108:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1260
		{
			ASNVAL.TypeValue = MAP{
				"iriType": ASNDollar[1].TypeValue,
			}
		}
	case 109:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1265
		{
			ASNVAL.TypeValue = MAP{
				"nullType": ASNDollar[1].TypeValue,
			}
		}
	case 110:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1270
		{
			ASNVAL.TypeValue = MAP{
				"objectClassFieldType": ASNDollar[1].TypeValue,
			}
		}
	case 111:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1275
		{
			ASNVAL.TypeValue = MAP{
				"objectIdentifierType": ASNDollar[1].TypeValue,
			}
		}
	case 112:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1280
		{
			ASNVAL.TypeValue = MAP{
				"octetStringType": ASNDollar[1].TypeValue,
			}
		}
	case 113:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1285
		{
			ASNVAL.TypeValue = MAP{
				"realType": ASNDollar[1].TypeValue,
			}
		}
	case 114:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1290
		{
			ASNVAL.TypeValue = MAP{
				"relativeIRIType": ASNDollar[1].TypeValue,
			}
		}
	case 115:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1295
		{
			ASNVAL.TypeValue = MAP{
				"relativeOIDType": ASNDollar[1].TypeValue,
			}
		}
	case 116:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1300
		{
			ASNVAL.TypeValue = MAP{
				"sequenceType": ASNDollar[1].TypeValue,
			}
		}
	case 117:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1305
		{
			ASNVAL.TypeValue = MAP{
				"sequenceOfType": ASNDollar[1].TypeValue,
			}
		}
	case 118:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1310
		{
			ASNVAL.TypeValue = MAP{
				"setType": ASNDollar[1].TypeValue,
			}
		}
	case 119:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1315
		{
			ASNVAL.TypeValue = MAP{
				"setOfType": ASNDollar[1].TypeValue,
			}
		}
	case 120:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1320
		{
			ASNVAL.TypeValue = MAP{
				"prefixedType": ASNDollar[1].TypeValue,
			}
		}
	case 121:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1325
		{
			ASNVAL.TypeValue = MAP{
				"timeType": ASNDollar[1].TypeValue,
			}
		}
	case 122:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1330
		{
			ASNVAL.TypeValue = MAP{
				"timeOfDayType": ASNDollar[1].TypeValue,
			}
		}
	case 123:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1346
		{
			ASNVAL.TypeValue = MAP{
				"definedType": ASNDollar[1].TypeValue,
			}
		}
	case 124:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1351
		{
			ASNVAL.TypeValue = MAP{
				"usefulType": ASNDollar[1].TypeValue,
			}
		}
	case 125:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1356
		{
			ASNVAL.TypeValue = MAP{
				"selectionType": ASNDollar[1].TypeValue,
			}
		}
	case 126:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1361
		{
			ASNVAL.TypeValue = MAP{
				"typeFromObject": ASNDollar[1].TypeValue,
			}
		}
	case 127:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1366
		{
			ASNVAL.TypeValue = MAP{
				"valueSetFromObjects": ASNDollar[1].TypeValue,
			}
		}
	case 128:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1381
		{
			ASNVAL.TypeValue = MAP{
				"externalTypeReference": ASNDollar[1].TypeValue,
			}
		}
	case 129:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1386
		{
			ASNVAL.TypeValue = MAP{
				"typeReference": ASNDollar[1].TypeValue,
			}
		}
	case 130:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1391
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedType": ASNDollar[1].TypeValue,
			}
		}
	case 131:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1396
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedValueSetType": ASNDollar[1].TypeValue,
			}
		}
	case 132:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1410
		{
			ASNVAL.TypeValue = MAP{
				"moduleReference": ASNDollar[1].TypeValue,
				"typeReference":   ASNDollar[2].TypeToken,
			}
		}
	case 133:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1424
		{
			ASNVAL.TypeValue = MAP{
				"simpleDefinedType":   ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 134:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1438
		{
			ASNVAL.TypeValue = MAP{
				"simpleDefinedType":   ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 135:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1447
		{
			ASNVAL.TypeValue = nil
		}
	case 136:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1453
		{
			ASNVAL.TypeValue = nil
		}
	case 137:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1479
		{
			ASNVAL.TypeValue = STRING(UTF8String)
		}
	case 138:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1482
		{
			ASNVAL.TypeValue = STRING(GraphicString)
		}
	case 139:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1485
		{
			ASNVAL.TypeValue = STRING(NumericString)
		}
	case 140:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1488
		{
			ASNVAL.TypeValue = STRING(VisibleString)
		}
	case 141:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1491
		{
			ASNVAL.TypeValue = STRING(PrintableString)
		}
	case 142:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1494
		{
			ASNVAL.TypeValue = STRING(ISO646String)
		}
	case 143:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1497
		{
			ASNVAL.TypeValue = STRING(TeletexString)
		}
	case 144:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1500
		{
			ASNVAL.TypeValue = STRING(GeneralString)
		}
	case 145:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1503
		{
			ASNVAL.TypeValue = STRING(T61String)
		}
	case 146:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1506
		{
			ASNVAL.TypeValue = STRING(UniversalString)
		}
	case 147:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1509
		{
			ASNVAL.TypeValue = STRING(VideotexString)
		}
	case 148:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1512
		{
			ASNVAL.TypeValue = STRING(BMPString)
		}
	case 149:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1515
		{
			ASNVAL.TypeValue = STRING(IA5String)
		}
	case 150:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1518
		{
			ASNVAL.TypeValue = STRING(GeneralizedTime)
		}
	case 151:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1521
		{
			ASNVAL.TypeValue = STRING(UTCTime)
		}
	case 152:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1524
		{
			ASNVAL.TypeValue = STRING(ObjectDescriptor)
		}
	case 153:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1534
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"type":       ASNDollar[3].TypeValue,
			}
		}
	case 154:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1547
		{
			ASNVAL.TypeValue = MAP{
				"referencedObjects": ASNDollar[1].TypeValue,
				"fieldName":         ASNDollar[2].TypeToken,
			}
		}
	case 155:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1556
		{
			ASNVAL.TypeValue = nil
		}
	case 156:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1562
		{
			ASNVAL.TypeValue = nil
		}
	case 157:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1568
		{
			ASNVAL.TypeValue = nil
		}
	case 158:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1574
		{
			ASNVAL.TypeValue = nil
		}
	case 159:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1579
		{
			ASNVAL.TypeValue = nil
		}
	case 160:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1584
		{
			ASNVAL.TypeValue = nil
		}
	case 161:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1589
		{
			ASNVAL.TypeValue = nil
		}
	case 162:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1593
		{
			ASNVAL.TypeValue = nil
		}
	case 163:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1598
		{
			ASNVAL.TypeValue = nil
		}
	case 164:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1602
		{
			ASNVAL.TypeValue = nil
		}
	case 165:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1606
		{
			ASNVAL.TypeValue = nil
		}
	case 166:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1611
		{
			ASNVAL.TypeValue = nil
		}
	case 167:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1616
		{
			ASNVAL.TypeValue = nil
		}
	case 168:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1621
		{
			ASNVAL.TypeValue = nil
		}
	case 169:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1626
		{
			ASNVAL.TypeValue = nil
		}
	case 170:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1631
		{
			ASNVAL.TypeValue = nil
		}
	case 171:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1636
		{
			ASNVAL.TypeValue = nil
		}
	case 172:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1641
		{
			ASNVAL.TypeValue = nil
		}
	case 173:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1646
		{
			ASNVAL.TypeValue = nil
		}
	case 174:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1651
		{
			ASNVAL.TypeValue = nil
		}
	case 175:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1656
		{
			ASNVAL.TypeValue = nil
		}
	case 176:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1661
		{
			ASNVAL.TypeValue = nil
		}
	case 177:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1666
		{
			ASNVAL.TypeValue = nil
		}
	case 178:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1671
		{
			ASNVAL.TypeValue = nil
		}
	case 179:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1676
		{
			ASNVAL.TypeValue = nil
		}
	case 180:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1681
		{
			ASNVAL.TypeValue = nil
		}
	case 181:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1686
		{
			ASNVAL.TypeValue = nil
		}
	case 182:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1691
		{
			ASNVAL.TypeValue = nil
		}
	case 183:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1696
		{
			ASNVAL.TypeValue = nil
		}
	case 184:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1701
		{
			ASNVAL.TypeValue = nil
		}
	case 185:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1706
		{
			ASNVAL.TypeValue = nil
		}
	case 186:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1711
		{
			ASNVAL.TypeValue = MAP{
				"bitString": ASNDollar[1].TypeValue,
			}
		}
	case 187:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1716
		{
			ASNVAL.TypeValue = MAP{
				"boolean": ASNDollar[1].TypeValue,
			}
		}
	case 188:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1721
		{
			ASNVAL.TypeValue = MAP{
				"characterString": ASNDollar[1].TypeValue,
			}
		}
	case 189:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1726
		{
			ASNVAL.TypeValue = MAP{
				"choice": ASNDollar[1].TypeValue,
			}
		}
	case 190:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1731
		{
			ASNVAL.TypeValue = MAP{
				"embeddedPDV": ASNDollar[1].TypeValue,
			}
		}
	case 191:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1736
		{
			ASNVAL.TypeValue = MAP{
				"enumerated": ASNDollar[1].TypeValue,
			}
		}
	case 192:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1741
		{
			ASNVAL.TypeValue = MAP{
				"external": ASNDollar[1].TypeValue,
			}
		}
	case 193:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1746
		{
			ASNVAL.TypeValue = MAP{
				"instanceOf": ASNDollar[1].TypeValue,
			}
		}
	case 194:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1751
		{
			ASNVAL.TypeValue = MAP{
				"integer": ASNDollar[1].TypeValue,
			}
		}
	case 195:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1756
		{
			ASNVAL.TypeValue = MAP{
				"iri": ASNDollar[1].TypeValue,
			}
		}
	case 196:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1761
		{
			ASNVAL.TypeValue = MAP{
				"null": ASNDollar[1].TypeValue,
			}
		}
	case 197:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1766
		{
			ASNVAL.TypeValue = MAP{
				"objectIdentifier": ASNDollar[1].TypeValue,
			}
		}
	case 198:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1771
		{
			ASNVAL.TypeValue = MAP{
				"octetString": ASNDollar[1].TypeValue,
			}
		}
	case 199:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1776
		{
			ASNVAL.TypeValue = MAP{
				"real": ASNDollar[1].TypeValue,
			}
		}
	case 200:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1781
		{
			ASNVAL.TypeValue = MAP{
				"relativeIRI": ASNDollar[1].TypeValue,
			}
		}
	case 201:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1786
		{
			ASNVAL.TypeValue = MAP{
				"relativeOID": ASNDollar[1].TypeValue,
			}
		}
	case 202:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1791
		{
			ASNVAL.TypeValue = MAP{
				"sequence": ASNDollar[1].TypeValue,
			}
		}
	case 203:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1796
		{
			ASNVAL.TypeValue = MAP{
				"sequenceOf": ASNDollar[1].TypeValue,
			}
		}
	case 204:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1801
		{
			ASNVAL.TypeValue = MAP{
				"set": ASNDollar[1].TypeValue,
			}
		}
	case 205:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1806
		{
			ASNVAL.TypeValue = MAP{
				"setOf": ASNDollar[1].TypeValue,
			}
		}
	case 206:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1811
		{
			ASNVAL.TypeValue = MAP{
				"prefixed": ASNDollar[1].TypeValue,
			}
		}
	case 207:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1816
		{
			ASNVAL.TypeValue = MAP{
				"time": ASNDollar[1].TypeValue,
			}
		}
	case 208:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1823
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 209:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1826
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 210:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1829
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 211:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1832
		{
			ASNVAL.TypeValue = nil
		}
	case 212:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1835
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 213:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1840
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 214:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1845
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeToken)
		}
	case 215:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1851
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 216:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1856
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 217:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1861
		{
			ASNVAL.TypeValue = nil
		}
	case 218:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1864
		{

		}
	case 219:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1869
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 220:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1872
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 221:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1875
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 222:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1878
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 223:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1883
		{
			ASNVAL.TypeValue = nil
		}
	case 224:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1888
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 225:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1893
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeToken)
		}
	case 226:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1899
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 227:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1902
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 228:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1905
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 229:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1908
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 230:
		ASNDollar = ASNS[ASNpt-9 : ASNpt+1]
//line asn.y:1913
		{
			ASNVAL.TypeValue = MAP{
				"group": ASNDollar[2].TypeValue,
				"plane": ASNDollar[4].TypeValue,
				"row":   ASNDollar[6].TypeValue,
				"cell":  ASNDollar[8].TypeValue,
			}
		}
	case 231:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1923
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 232:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1928
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 233:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1933
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 234:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1938
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 235:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:1943
		{
			ASNVAL.TypeValue = MAP{
				"tableColumn": ASNDollar[2].TypeValue,
				"tableRow":    ASNDollar[4].TypeValue,
			}
		}
	case 236:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1951
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 237:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1956
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 238:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1961
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 239:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1966
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"value":      ASNDollar[2].TypeToken,
			}
		}
	case 240:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1974
		{
			ASNVAL.TypeValue = nil
		}
	case 241:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1979
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 242:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1984
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 243:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1989
		{
			ASNVAL.TypeValue = nil
		}
	case 244:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1994
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 245:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1997
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 246:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2002
		{
			ASNVAL.TypeValue = "NULL"
		}
	case 247:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2008
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 248:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2011
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 249:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2014
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 250:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2019
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 251:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2022
		{
			ASNVAL.TypeValue = nil
		}
	case 252:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2027
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 253:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2030
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 254:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2035
		{
			ASNVAL.TypeValue = nil
		}
	case 255:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2038
		{
			ASNVAL.TypeValue = nil
		}
	case 256:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2041
		{
			ASNVAL.TypeValue = nil
		}
	case 257:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2046
		{
			ASNVAL.TypeValue = nil
		}
	case 258:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2051
		{
			ASNVAL.TypeValue = nil
		}
	case 259:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2056
		{
			ASNVAL.TypeValue = nil
		}
	case 260:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2061
		{
			ASNVAL.TypeValue = nil
		}
	case 261:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2064
		{
			ASNVAL.TypeValue = nil
		}
	case 262:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2069
		{
			ASNVAL.TypeValue = nil
		}
	case 263:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2072
		{
			ASNVAL.TypeValue = nil
		}
	case 264:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2075
		{
			ASNVAL.TypeValue = nil
		}
	case 265:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2080
		{
			ASNVAL.TypeValue = nil
		}
	case 266:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2085
		{
			ASNVAL.TypeValue = nil
		}
	case 267:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2090
		{
			ASNVAL.TypeValue = nil
		}
	case 268:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2095
		{
			ASNVAL.TypeValue = nil
		}
	case 269:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2100
		{
			ASNVAL.TypeValue = nil
		}
	case 270:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2105
		{
			ASNVAL.TypeValue = nil
		}
	case 271:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2110
		{
			ASNVAL.TypeValue = nil
		}
	case 272:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2115
		{
			ASNVAL.TypeValue = nil
		}
	case 273:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2120
		{
			ASNVAL.TypeValue = nil
		}
	case 274:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2125
		{
			ASNVAL.TypeValue = nil
		}
	case 275:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2130
		{
			ASNVAL.TypeValue = nil
		}
	case 276:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2135
		{
			ASNVAL.TypeValue = nil
		}
	case 277:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2140
		{
			ASNVAL.TypeValue = nil
		}
	case 278:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2145
		{
			ASNVAL.TypeValue = nil
		}
	case 279:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2150
		{
			ASNVAL.TypeValue = nil
		}
	case 280:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2155
		{
			ASNVAL.TypeValue = nil
		}
	case 281:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2160
		{
			ASNVAL.TypeValue = nil
		}
	case 282:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2165
		{
			ASNVAL.TypeValue = nil
		}
	case 283:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2170
		{
			ASNVAL.TypeValue = nil
		}
	case 284:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2175
		{
			ASNVAL.TypeValue = nil
		}
	case 285:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2180
		{
			ASNVAL.TypeValue = MAP{
				"type":  "EXTERNAL_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 286:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2186
		{
			ASNVAL.TypeValue = MAP{
				"type":  "STRING_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 287:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2192
		{
			ASNVAL.TypeValue = MAP{
				"type":  "NUMBER_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 288:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2198
		{
			ASNVAL.TypeValue = MAP{
				"type":  "PARAMETERIZED_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 289:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2206
		{
			ASNVAL.TypeValue = MAP{
				"module": ASNDollar[1].TypeValue,
				"value":  ASNDollar[3].TypeValue,
			}
		}
	case 290:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2214
		{
			ASNVAL.TypeValue = nil
		}
	case 291:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2219
		{
			ASNVAL.TypeValue = nil
		}
	case 292:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2224
		{
			ASNVAL.TypeValue = nil
		}
	case 293:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2229
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 294:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2232
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 295:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2237
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 296:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2240
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 297:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2245
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeNumber
		}
	case 298:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2248
		{
			ASNVAL.TypeValue = (-1) * ASNDollar[2].TypeNumber
		}
	case 299:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2251
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeNumber
		}
	case 300:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2254
		{
			ASNVAL.TypeValue = (-1) * ASNDollar[2].TypeNumber
		}
	case 301:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2259
		{
			ASNVAL.TypeValue = "::="
		}
	}
	goto ASNstack /* stack new state and value */
}
