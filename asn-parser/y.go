// Code generated by goyacc -p ASN yacc.y. DO NOT EDIT.

//line yacc.y:2
package main

import __yyfmt__ "fmt"

//line yacc.y:2
func SetResult(l ASNLexer, v ModuleDefinitions) {
	l.(*Parser).Result = v
}

type Empty struct{}

//line yacc.y:9
type ASNSymType struct {
	yys                       int
	TypeModuleDefinitions     ModuleDefinitions
	TypeModuleDefinition      ModuleDefinition
	TypeModuleIdentifer       ModuleIdentifier
	TypeDefinitiveIdentifiers DefinitiveIdentifiers
	TypeDefinitiveIdentifier  DefinitiveIdentifier
	TypeTagDefault            TagDefault
	TypeModuleBody            ModuleBody
	TypeToken                 Empty
	TypeString                string
	TypeInteger               int
	TypeFloat                 float64
	TypeBoolean               bool
}

const CURLY_START = 57346
const CURLY_END = 57347
const SQUARE_START = 57348
const SQUARE_END = 57349
const DOUBLE_QUOTE = 57350
const COMMA = 57351
const COLON = 57352
const MINUS = 57353
const GREATER_THAN = 57354
const LESS_THAN = 57355
const DOT = 57356
const SLASH = 57357
const ROUND_START = 57358
const ROUND_END = 57359
const EQUALITY = 57360
const APOSTROPHE = 57361
const SPACE = 57362
const PIPE = 57363
const AT_THE_RATE = 57364
const EXCLAMATION = 57365
const CARET = 57366
const DEFINITIONS_SYMBOL = 57367
const ASSIGNMENT_SYMBOL = 57368
const BEGIN_SYMBOL = 57369
const END_SYMBOL = 57370
const INSTRUCTIONS_SYMBOL = 57371
const EXPLICIT_SYMBOL = 57372
const IMPLICIT_SYMBOL = 57373
const AUTOMATIC_SYMBOL = 57374
const TAGS_SYMBOL = 57375
const EXTENSIBILITY_SYMBOL = 57376
const IMPLIED_SYMBOL = 57377
const TokenString = 57378
const TokenInteger = 57379
const TokenFloat = 57380
const TokenBoolean = 57381

var ASNToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"CURLY_START",
	"CURLY_END",
	"SQUARE_START",
	"SQUARE_END",
	"DOUBLE_QUOTE",
	"COMMA",
	"COLON",
	"MINUS",
	"GREATER_THAN",
	"LESS_THAN",
	"DOT",
	"SLASH",
	"ROUND_START",
	"ROUND_END",
	"EQUALITY",
	"APOSTROPHE",
	"SPACE",
	"PIPE",
	"AT_THE_RATE",
	"EXCLAMATION",
	"CARET",
	"DEFINITIONS_SYMBOL",
	"ASSIGNMENT_SYMBOL",
	"BEGIN_SYMBOL",
	"END_SYMBOL",
	"INSTRUCTIONS_SYMBOL",
	"EXPLICIT_SYMBOL",
	"IMPLICIT_SYMBOL",
	"AUTOMATIC_SYMBOL",
	"TAGS_SYMBOL",
	"EXTENSIBILITY_SYMBOL",
	"IMPLIED_SYMBOL",
	"TokenString",
	"TokenInteger",
	"TokenFloat",
	"TokenBoolean",
}

var ASNStatenames = [...]string{}

const ASNEofCode = 1
const ASNErrCode = 2
const ASNInitialStackSize = 16

//line yacc.y:220

//line yacctab:1
var ASNExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const ASNPrivate = 57344

const ASNLast = 41

var ASNAct = [...]int{
	25, 18, 19, 33, 12, 5, 35, 29, 22, 21,
	23, 24, 32, 31, 30, 39, 37, 34, 7, 36,
	27, 14, 10, 3, 1, 38, 6, 28, 20, 11,
	17, 18, 19, 16, 15, 26, 13, 9, 8, 4,
	2,
}

var ASNPact = [...]int{
	-31, -1000, -31, -1000, -7, 18, -1000, -32, -1000, -1000,
	-35, -22, -18, -5, -1000, -1000, -1000, -1000, 4, -1000,
	-27, -19, -20, -21, -1000, -1000, -1000, -34, -9, -29,
	-1000, -1000, -1000, 2, -11, -1000, -1000, -1000, -13, -1000,
}

var ASNPgo = [...]int{
	0, 40, 23, 39, 38, 37, 36, 21, 34, 33,
	30, 29, 28, 27, 25, 24,
}

var ASNR1 = [...]int{
	0, 15, 1, 1, 2, 3, 4, 4, 5, 6,
	6, 7, 7, 7, 8, 9, 10, 11, 11, 12,
	12, 12, 12, 13, 13, 14,
}

var ASNR2 = [...]int{
	0, 1, 1, 2, 9, 2, 1, 0, 3, 1,
	2, 1, 1, 1, 1, 1, 4, 2, 0, 2,
	2, 2, 0, 2, 0, 0,
}

var ASNChk = [...]int{
	-1000, -15, -1, -2, -3, 36, -2, 25, -4, -5,
	4, -11, 36, -6, -7, -8, -9, -10, 36, 37,
	-12, 31, 30, 32, 29, 5, -7, 16, -13, 34,
	33, 33, 33, 37, 26, 35, 17, 27, -14, 28,
}

var ASNDef = [...]int{
	0, -2, 1, 2, 0, 7, 3, 18, 5, 6,
	0, 22, 0, 0, 9, 11, 12, 13, 14, 15,
	24, 0, 0, 0, 17, 8, 10, 0, 0, 0,
	19, 20, 21, 0, 0, 23, 16, 25, 0, 4,
}

var ASNTok1 = [...]int{
	1,
}

var ASNTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39,
}

var ASNTok3 = [...]int{
	0,
}

var ASNErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	ASNDebug        = 0
	ASNErrorVerbose = false
)

type ASNLexer interface {
	Lex(lval *ASNSymType) int
	Error(s string)
}

type ASNParser interface {
	Parse(ASNLexer) int
	Lookahead() int
}

type ASNParserImpl struct {
	lval  ASNSymType
	stack [ASNInitialStackSize]ASNSymType
	char  int
}

func (p *ASNParserImpl) Lookahead() int {
	return p.char
}

func ASNNewParser() ASNParser {
	return &ASNParserImpl{}
}

const ASNFlag = -1000

func ASNTokname(c int) string {
	if c >= 1 && c-1 < len(ASNToknames) {
		if ASNToknames[c-1] != "" {
			return ASNToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func ASNStatname(s int) string {
	if s >= 0 && s < len(ASNStatenames) {
		if ASNStatenames[s] != "" {
			return ASNStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func ASNErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !ASNErrorVerbose {
		return "syntax error"
	}

	for _, e := range ASNErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + ASNTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := ASNPact[state]
	for tok := TOKSTART; tok-1 < len(ASNToknames); tok++ {
		if n := base + tok; n >= 0 && n < ASNLast && ASNChk[ASNAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if ASNDef[state] == -2 {
		i := 0
		for ASNExca[i] != -1 || ASNExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; ASNExca[i] >= 0; i += 2 {
			tok := ASNExca[i]
			if tok < TOKSTART || ASNExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if ASNExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += ASNTokname(tok)
	}
	return res
}

func ASNlex1(lex ASNLexer, lval *ASNSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = ASNTok1[0]
		goto out
	}
	if char < len(ASNTok1) {
		token = ASNTok1[char]
		goto out
	}
	if char >= ASNPrivate {
		if char < ASNPrivate+len(ASNTok2) {
			token = ASNTok2[char-ASNPrivate]
			goto out
		}
	}
	for i := 0; i < len(ASNTok3); i += 2 {
		token = ASNTok3[i+0]
		if token == char {
			token = ASNTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = ASNTok2[1] /* unknown char */
	}
	if ASNDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", ASNTokname(token), uint(char))
	}
	return char, token
}

func ASNParse(ASNlex ASNLexer) int {
	return ASNNewParser().Parse(ASNlex)
}

func (ASNrcvr *ASNParserImpl) Parse(ASNlex ASNLexer) int {
	var ASNn int
	var ASNVAL ASNSymType
	var ASNDollar []ASNSymType
	_ = ASNDollar // silence set and not used
	ASNS := ASNrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	ASNstate := 0
	ASNrcvr.char = -1
	ASNtoken := -1 // ASNrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		ASNstate = -1
		ASNrcvr.char = -1
		ASNtoken = -1
	}()
	ASNp := -1
	goto ASNstack

ret0:
	return 0

ret1:
	return 1

ASNstack:
	/* put a state and value onto the stack */
	if ASNDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", ASNTokname(ASNtoken), ASNStatname(ASNstate))
	}

	ASNp++
	if ASNp >= len(ASNS) {
		nyys := make([]ASNSymType, len(ASNS)*2)
		copy(nyys, ASNS)
		ASNS = nyys
	}
	ASNS[ASNp] = ASNVAL
	ASNS[ASNp].yys = ASNstate

ASNnewstate:
	ASNn = ASNPact[ASNstate]
	if ASNn <= ASNFlag {
		goto ASNdefault /* simple state */
	}
	if ASNrcvr.char < 0 {
		ASNrcvr.char, ASNtoken = ASNlex1(ASNlex, &ASNrcvr.lval)
	}
	ASNn += ASNtoken
	if ASNn < 0 || ASNn >= ASNLast {
		goto ASNdefault
	}
	ASNn = ASNAct[ASNn]
	if ASNChk[ASNn] == ASNtoken { /* valid shift */
		ASNrcvr.char = -1
		ASNtoken = -1
		ASNVAL = ASNrcvr.lval
		ASNstate = ASNn
		if Errflag > 0 {
			Errflag--
		}
		goto ASNstack
	}

ASNdefault:
	/* default state action */
	ASNn = ASNDef[ASNstate]
	if ASNn == -2 {
		if ASNrcvr.char < 0 {
			ASNrcvr.char, ASNtoken = ASNlex1(ASNlex, &ASNrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if ASNExca[xi+0] == -1 && ASNExca[xi+1] == ASNstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			ASNn = ASNExca[xi+0]
			if ASNn < 0 || ASNn == ASNtoken {
				break
			}
		}
		ASNn = ASNExca[xi+1]
		if ASNn < 0 {
			goto ret0
		}
	}
	if ASNn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			ASNlex.Error(ASNErrorMessage(ASNstate, ASNtoken))
			Nerrs++
			if ASNDebug >= 1 {
				__yyfmt__.Printf("%s", ASNStatname(ASNstate))
				__yyfmt__.Printf(" saw %s\n", ASNTokname(ASNtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for ASNp >= 0 {
				ASNn = ASNPact[ASNS[ASNp].yys] + ASNErrCode
				if ASNn >= 0 && ASNn < ASNLast {
					ASNstate = ASNAct[ASNn] /* simulate a shift of "error" */
					if ASNChk[ASNstate] == ASNErrCode {
						goto ASNstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if ASNDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", ASNS[ASNp].yys)
				}
				ASNp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if ASNDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", ASNTokname(ASNtoken))
			}
			if ASNtoken == ASNEofCode {
				goto ret1
			}
			ASNrcvr.char = -1
			ASNtoken = -1
			goto ASNnewstate /* try again in the same state */
		}
	}

	/* reduction by production ASNn */
	if ASNDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", ASNn, ASNStatname(ASNstate))
	}

	ASNnt := ASNn
	ASNpt := ASNp
	_ = ASNpt // guard against "declared and not used"

	ASNp -= ASNR2[ASNn]
	// ASNp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if ASNp+1 >= len(ASNS) {
		nyys := make([]ASNSymType, len(ASNS)*2)
		copy(nyys, ASNS)
		ASNS = nyys
	}
	ASNVAL = ASNS[ASNp+1]

	/* consult goto table to find next state */
	ASNn = ASNR1[ASNn]
	ASNg := ASNPgo[ASNn]
	ASNj := ASNg + ASNS[ASNp].yys + 1

	if ASNj >= ASNLast {
		ASNstate = ASNAct[ASNg]
	} else {
		ASNstate = ASNAct[ASNj]
		if ASNChk[ASNstate] != -ASNn {
			ASNstate = ASNAct[ASNg]
		}
	}
	// dummy call; replaced with literal code
	switch ASNnt {

	case 1:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line yacc.y:83
		{
			SetResult(ASNlex, ASNDollar[1].TypeModuleDefinitions)
		}
	case 2:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line yacc.y:88
		{
			ASNVAL.TypeModuleDefinitions = []ModuleDefinition{
				ASNDollar[1].TypeModuleDefinition,
			}
		}
	case 3:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line yacc.y:93
		{
			ASNVAL.TypeModuleDefinitions = ASNDollar[1].TypeModuleDefinitions
			ASNVAL.TypeModuleDefinitions = append(ASNVAL.TypeModuleDefinitions, ASNDollar[2].TypeModuleDefinition)
		}
	case 4:
		ASNDollar = ASNS[ASNpt-9 : ASNpt+1]
//line yacc.y:108
		{
			ASNVAL.TypeModuleDefinition = ModuleDefinition{
				Identifier:        ASNDollar[1].TypeModuleIdentifer,
				EncodingReference: ASNDollar[3].TypeString,
				Tag:               ASNDollar[4].TypeTagDefault,
				Extensibility:     ASNDollar[5].TypeBoolean,
				Body:              ASNDollar[8].TypeModuleBody,
			}
		}
	case 5:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line yacc.y:121
		{
			ASNVAL.TypeModuleIdentifer = ModuleIdentifier{
				Reference:             ASNDollar[1].TypeString,
				DefinitiveIdentifiers: ASNDollar[2].TypeDefinitiveIdentifiers,
			}
		}
	case 6:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line yacc.y:129
		{
			ASNVAL.TypeDefinitiveIdentifiers = ASNDollar[1].TypeDefinitiveIdentifiers
		}
	case 7:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line yacc.y:132
		{
			ASNVAL.TypeDefinitiveIdentifiers = make(DefinitiveIdentifiers, 0)
		}
	case 8:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line yacc.y:137
		{
			ASNVAL.TypeDefinitiveIdentifiers = ASNDollar[2].TypeDefinitiveIdentifiers
		}
	case 9:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line yacc.y:142
		{
			ASNVAL.TypeDefinitiveIdentifiers = []DefinitiveIdentifier{
				ASNDollar[1].TypeDefinitiveIdentifier,
			}
		}
	case 10:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line yacc.y:147
		{
			ASNVAL.TypeDefinitiveIdentifiers = ASNDollar[1].TypeDefinitiveIdentifiers
			ASNVAL.TypeDefinitiveIdentifiers = append(ASNVAL.TypeDefinitiveIdentifiers, ASNDollar[2].TypeDefinitiveIdentifier)
		}
	case 11:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line yacc.y:153
		{
			ASNVAL.TypeDefinitiveIdentifier = ASNDollar[1].TypeDefinitiveIdentifier
		}
	case 12:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line yacc.y:156
		{
			ASNVAL.TypeDefinitiveIdentifier = ASNDollar[1].TypeDefinitiveIdentifier
		}
	case 13:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line yacc.y:159
		{
			ASNVAL.TypeDefinitiveIdentifier = ASNDollar[1].TypeDefinitiveIdentifier
		}
	case 14:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line yacc.y:164
		{
			ASNVAL.TypeDefinitiveIdentifier = DefinitiveIdentifier{
				Name: ASNDollar[1].TypeString,
			}
		}
	case 15:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line yacc.y:171
		{
			ASNVAL.TypeDefinitiveIdentifier = DefinitiveIdentifier{
				Id: ASNDollar[1].TypeInteger,
			}
		}
	case 16:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line yacc.y:178
		{
			ASNVAL.TypeDefinitiveIdentifier = DefinitiveIdentifier{
				Name: ASNDollar[1].TypeString,
				Id:   ASNDollar[3].TypeInteger,
			}
		}
	case 17:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line yacc.y:186
		{
			ASNVAL.TypeString = ASNDollar[1].TypeString
		}
	case 18:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line yacc.y:189
		{
			ASNVAL.TypeString = ""
		}
	case 19:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line yacc.y:194
		{
			ASNVAL.TypeTagDefault = ImplicitTag
		}
	case 20:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line yacc.y:197
		{
			ASNVAL.TypeTagDefault = ExplicitTag
		}
	case 21:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line yacc.y:200
		{
			ASNVAL.TypeTagDefault = AutomaticTag
		}
	case 22:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line yacc.y:203
		{
			ASNVAL.TypeTagDefault = ExplicitTag
		}
	case 23:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line yacc.y:208
		{
			ASNVAL.TypeBoolean = true
		}
	case 24:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line yacc.y:211
		{
			ASNVAL.TypeBoolean = false
		}
	case 25:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line yacc.y:216
		{
			ASNVAL.TypeModuleBody = ModuleBody{}
		}
	}
	goto ASNstack /* stack new state and value */
}
