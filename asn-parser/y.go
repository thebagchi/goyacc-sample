// Code generated by goyacc -p ASN asn.y. DO NOT EDIT.

//line asn.y:1

package main
import __yyfmt__ "fmt"
//line asn.y:3
		import (
    "bytes"
    "fmt"
    "encoding/json"
)

var code bytes.Buffer

func AddLine(line string) {
    code.WriteString(line)
    code.WriteByte('\n')
}

func JSON(obj interface{}) string {
    data, err := json.MarshalIndent(obj, "", "    ")
    if nil != err {
        fmt.Println("Error: ", err)
        return ""
    }
    return string(data)
}

func Print(line string) {
    fmt.Println(line)
}

func Join(values ...string) string {
    var buffer bytes.Buffer
    for _, value := range values {
        buffer.WriteString(value)
    }
    return buffer.String()
}

func SkipBlock() {
    parser.ExpectBlock = true
}

func SetResult(l ASNLexer, v VALUE) {
    l.(*Parser).Result = JSON(&v)
}

type Empty   struct{}
type (
    VALUE   interface{}
    STRING  string
    NUMBER  float64
    BOOLEAN bool
    LIST    []VALUE
    MAP     map[string]VALUE
)

//line asn.y:56
type ASNSymType struct {
	yys int
    TypeToken   struct{}
    TypeString  STRING
    TypeNumber  NUMBER
    TypeValue   VALUE
    TypeBoolean BOOLEAN
    TypeMap     MAP
    TypeList    LIST
}

const CURLY_START = 57346
const CURLY_END = 57347
const SQUARE_START = 57348
const SQUARE_END = 57349
const DOUBLE_QUOTE = 57350
const SINGLE_QUOTE = 57351
const COMMA = 57352
const COLON = 57353
const MINUS = 57354
const GREATER_THAN = 57355
const LESS_THAN = 57356
const DOT = 57357
const SLASH = 57358
const ROUND_START = 57359
const ROUND_END = 57360
const EQUALITY = 57361
const APOSTROPHE = 57362
const SPACE = 57363
const PIPE = 57364
const AT_THE_RATE = 57365
const EXCLAMATION = 57366
const CARET = 57367
const SEMI_COMMA = 57368
const ELLIPSIS = 57369
const ABSENT_SYMBOL = 57370
const ABSTRACTSYNTAX_SYMBOL = 57371
const ALL_SYMBOL = 57372
const APPLICATION_SYMBOL = 57373
const AUTOMATIC_SYMBOL = 57374
const BEGIN_SYMBOL = 57375
const BIT_SYMBOL = 57376
const BMPSTRING_SYMBOL = 57377
const BOOLEAN_SYMBOL = 57378
const BY_SYMBOL = 57379
const CHARACTER_SYMBOL = 57380
const CHOICE_SYMBOL = 57381
const CLASS_SYMBOL = 57382
const COMPONENT_SYMBOL = 57383
const COMPONENTS_SYMBOL = 57384
const CONSTRAINED_SYMBOL = 57385
const CONTAINING_SYMBOL = 57386
const DATE_SYMBOL = 57387
const DATETIME_SYMBOL = 57388
const DEFAULT_SYMBOL = 57389
const DEFINITIONS_SYMBOL = 57390
const DURATION_SYMBOL = 57391
const EMBEDDED_SYMBOL = 57392
const ENCODED_SYMBOL = 57393
const ENCODINGCONTROL_SYMBOL = 57394
const END_SYMBOL = 57395
const ENUMERATED_SYMBOL = 57396
const EXCEPT_SYMBOL = 57397
const EXPLICIT_SYMBOL = 57398
const EXPORTS_SYMBOL = 57399
const EXTENSIBILITY_SYMBOL = 57400
const EXTERNEL_SYMBOL = 57401
const FALSE_SYMBOL = 57402
const FROM_SYMBOL = 57403
const GENERALIZEDTIME_SYMBOL = 57404
const GENERALSTRING_SYMBOL = 57405
const GRAPHICSTRING_SYMBOL = 57406
const IA5STRING_SYMBOL = 57407
const IDENTIFIER_SYMBOL = 57408
const IMPLICIT_SYMBOL = 57409
const IMPLIED_SYMBOL = 57410
const IMPORTS_SYMBOL = 57411
const INCLUDES_SYMBOL = 57412
const INSTANCE_SYMBOL = 57413
const INSTRUCTIONS_SYMBOL = 57414
const INTEGER_SYMBOL = 57415
const INTERSECTION_SYMBOL = 57416
const ISO646STRING_SYMBOL = 57417
const MAX_SYMBOL = 57418
const MIN_SYMBOL = 57419
const MINUSINFINITY_SYMBOL = 57420
const NOTANUMBER_SYMBOL = 57421
const NULL_SYMBOL = 57422
const NUMERICSTRING_SYMBOL = 57423
const OBJECT_SYMBOL = 57424
const OBJECTDESCRIPTOR_SYMBOL = 57425
const OCTET_SYMBOL = 57426
const OF_SYMBOL = 57427
const OIDIRI_SYMBOL = 57428
const OPTIONAL_SYMBOL = 57429
const PATTERN_SYMBOL = 57430
const PDV_SYMBOL = 57431
const PLUSINFINITY_SYMBOL = 57432
const PRESENT_SYMBOL = 57433
const PRINTABLESTRING_SYMBOL = 57434
const PRIVATE_SYMBOL = 57435
const REAL_SYMBOL = 57436
const RELATIVEOID_SYMBOL = 57437
const RELATIVEOIDIRI_SYMBOL = 57438
const SEQUENCE_SYMBOL = 57439
const SET_SYMBOL = 57440
const SETTINGS_SYMBOL = 57441
const SIZE_SYMBOL = 57442
const STRING_SYMBOL = 57443
const SYNTAX_SYMBOL = 57444
const T61STRING_SYMBOL = 57445
const TAGS_SYMBOL = 57446
const TELETEXSTRING_SYMBOL = 57447
const TIME_SYMBOL = 57448
const TIMEOFDAY_SYMBOL = 57449
const TRUE_SYMBOL = 57450
const TYPEIDENTIFIER_SYMBOL = 57451
const UNION_SYMBOL = 57452
const UNIQUE_SYMBOL = 57453
const UNIVERSAL_SYMBOL = 57454
const UNIVERSALSTRING_SYMBOL = 57455
const UTCTIME_SYMBOL = 57456
const UTF8STRING_SYMBOL = 57457
const VIDEOTEXSTRING_SYMBOL = 57458
const VISIBLESTRING_SYMBOL = 57459
const WITH_SYMBOL = 57460
const ASSIGNMENT_SYMBOL = 57461
const TokenCapitalString = 57462
const TokenString = 57463
const TokenNumber = 57464
const TokenInteger = 57465
const TokenFloat = 57466
const TokenBoolean = 57467
const TokenBString = 57468
const TokenHString = 57469
const TokenCString = 57470
const TokenBlock = 57471

var ASNToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"CURLY_START",
	"CURLY_END",
	"SQUARE_START",
	"SQUARE_END",
	"DOUBLE_QUOTE",
	"SINGLE_QUOTE",
	"COMMA",
	"COLON",
	"MINUS",
	"GREATER_THAN",
	"LESS_THAN",
	"DOT",
	"SLASH",
	"ROUND_START",
	"ROUND_END",
	"EQUALITY",
	"APOSTROPHE",
	"SPACE",
	"PIPE",
	"AT_THE_RATE",
	"EXCLAMATION",
	"CARET",
	"SEMI_COMMA",
	"ELLIPSIS",
	"ABSENT_SYMBOL",
	"ABSTRACTSYNTAX_SYMBOL",
	"ALL_SYMBOL",
	"APPLICATION_SYMBOL",
	"AUTOMATIC_SYMBOL",
	"BEGIN_SYMBOL",
	"BIT_SYMBOL",
	"BMPSTRING_SYMBOL",
	"BOOLEAN_SYMBOL",
	"BY_SYMBOL",
	"CHARACTER_SYMBOL",
	"CHOICE_SYMBOL",
	"CLASS_SYMBOL",
	"COMPONENT_SYMBOL",
	"COMPONENTS_SYMBOL",
	"CONSTRAINED_SYMBOL",
	"CONTAINING_SYMBOL",
	"DATE_SYMBOL",
	"DATETIME_SYMBOL",
	"DEFAULT_SYMBOL",
	"DEFINITIONS_SYMBOL",
	"DURATION_SYMBOL",
	"EMBEDDED_SYMBOL",
	"ENCODED_SYMBOL",
	"ENCODINGCONTROL_SYMBOL",
	"END_SYMBOL",
	"ENUMERATED_SYMBOL",
	"EXCEPT_SYMBOL",
	"EXPLICIT_SYMBOL",
	"EXPORTS_SYMBOL",
	"EXTENSIBILITY_SYMBOL",
	"EXTERNEL_SYMBOL",
	"FALSE_SYMBOL",
	"FROM_SYMBOL",
	"GENERALIZEDTIME_SYMBOL",
	"GENERALSTRING_SYMBOL",
	"GRAPHICSTRING_SYMBOL",
	"IA5STRING_SYMBOL",
	"IDENTIFIER_SYMBOL",
	"IMPLICIT_SYMBOL",
	"IMPLIED_SYMBOL",
	"IMPORTS_SYMBOL",
	"INCLUDES_SYMBOL",
	"INSTANCE_SYMBOL",
	"INSTRUCTIONS_SYMBOL",
	"INTEGER_SYMBOL",
	"INTERSECTION_SYMBOL",
	"ISO646STRING_SYMBOL",
	"MAX_SYMBOL",
	"MIN_SYMBOL",
	"MINUSINFINITY_SYMBOL",
	"NOTANUMBER_SYMBOL",
	"NULL_SYMBOL",
	"NUMERICSTRING_SYMBOL",
	"OBJECT_SYMBOL",
	"OBJECTDESCRIPTOR_SYMBOL",
	"OCTET_SYMBOL",
	"OF_SYMBOL",
	"OIDIRI_SYMBOL",
	"OPTIONAL_SYMBOL",
	"PATTERN_SYMBOL",
	"PDV_SYMBOL",
	"PLUSINFINITY_SYMBOL",
	"PRESENT_SYMBOL",
	"PRINTABLESTRING_SYMBOL",
	"PRIVATE_SYMBOL",
	"REAL_SYMBOL",
	"RELATIVEOID_SYMBOL",
	"RELATIVEOIDIRI_SYMBOL",
	"SEQUENCE_SYMBOL",
	"SET_SYMBOL",
	"SETTINGS_SYMBOL",
	"SIZE_SYMBOL",
	"STRING_SYMBOL",
	"SYNTAX_SYMBOL",
	"T61STRING_SYMBOL",
	"TAGS_SYMBOL",
	"TELETEXSTRING_SYMBOL",
	"TIME_SYMBOL",
	"TIMEOFDAY_SYMBOL",
	"TRUE_SYMBOL",
	"TYPEIDENTIFIER_SYMBOL",
	"UNION_SYMBOL",
	"UNIQUE_SYMBOL",
	"UNIVERSAL_SYMBOL",
	"UNIVERSALSTRING_SYMBOL",
	"UTCTIME_SYMBOL",
	"UTF8STRING_SYMBOL",
	"VIDEOTEXSTRING_SYMBOL",
	"VISIBLESTRING_SYMBOL",
	"WITH_SYMBOL",
	"ASSIGNMENT_SYMBOL",
	"TokenCapitalString",
	"TokenString",
	"TokenNumber",
	"TokenInteger",
	"TokenFloat",
	"TokenBoolean",
	"TokenBString",
	"TokenHString",
	"TokenCString",
	"TokenBlock",
}

var ASNStatenames = [...]string{
}

const ASNEofCode = 1
const ASNErrCode = 2
const ASNInitialStackSize = 16

//line asn.y:4596

//line yacctab:1
var ASNExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 45,
	120, 36,
	121, 36,
	-2, 32,
	-1, 83,
	17, 425,
	-2, 516,
	-1, 100,
	15, 516,
	-2, 425,
	-1, 165,
	4, 139,
	-2, 132,
	-1, 166,
	4, 140,
	-2, 133,
	-1, 187,
	17, 425,
	-2, 516,
	-1, 206,
	14, 483,
	-2, 222,
	-1, 220,
	15, 516,
	-2, 425,
	-1, 225,
	17, 425,
	-2, 516,
	-1, 227,
	15, 516,
	-2, 425,
	-1, 232,
	10, 532,
	15, 516,
	-2, 425,
	-1, 274,
	44, 488,
	-2, 449,
	-1, 305,
	17, 425,
	18, 425,
	24, 425,
	51, 425,
	-2, 483,
	-1, 310,
	22, 265,
	110, 265,
	-2, 195,
	-1, 312,
	25, 262,
	74, 262,
	-2, 197,
	-1, 316,
	55, 206,
	-2, 201,
	-1, 320,
	14, 483,
	-2, 222,
	-1, 334,
	15, 169,
	-2, 258,
	-1, 336,
	15, 170,
	-2, 260,
	-1, 337,
	14, 226,
	15, 226,
	-2, 219,
	-1, 338,
	15, 516,
	-2, 425,
	-1, 345,
	4, 140,
	-2, 133,
	-1, 350,
	14, 486,
	15, 486,
	-2, 377,
	-1, 362,
	15, 516,
	-2, 425,
	-1, 373,
	15, 516,
	-2, 425,
	-1, 374,
	15, 516,
	-2, 425,
	-1, 378,
	4, 140,
	-2, 133,
	-1, 380,
	15, 516,
	-2, 425,
	-1, 381,
	15, 516,
	-2, 425,
	-1, 384,
	15, 173,
	-2, 136,
	-1, 396,
	15, 516,
	17, 425,
	-2, 531,
	-1, 412,
	10, 469,
	-2, 65,
	-1, 419,
	10, 455,
	-2, 66,
	-1, 420,
	10, 471,
	-2, 67,
	-1, 433,
	11, 425,
	15, 516,
	17, 425,
	-2, 531,
	-1, 439,
	10, 455,
	-2, 66,
	-1, 441,
	14, 483,
	-2, 222,
	-1, 442,
	14, 483,
	-2, 222,
	-1, 445,
	14, 483,
	-2, 222,
	-1, 485,
	15, 516,
	-2, 425,
	-1, 486,
	10, 455,
	-2, 66,
	-1, 487,
	10, 471,
	-2, 67,
	-1, 488,
	10, 466,
	-2, 459,
	-1, 489,
	10, 467,
	-2, 461,
	-1, 490,
	10, 468,
	-2, 462,
	-1, 518,
	4, 140,
	11, 133,
	17, 133,
	-2, 526,
	-1, 520,
	11, 425,
	15, 516,
	17, 425,
	-2, 275,
	-1, 526,
	25, 262,
	74, 262,
	-2, 198,
	-1, 548,
	17, 425,
	-2, 516,
	-1, 565,
	14, 483,
	-2, 222,
	-1, 569,
	15, 169,
	-2, 278,
	-1, 570,
	11, 281,
	-2, 279,
	-1, 571,
	11, 282,
	-2, 280,
	-1, 574,
	5, 177,
	-2, 529,
	-1, 595,
	4, 136,
	5, 136,
	11, 136,
	15, 173,
	17, 136,
	-2, 529,
	-1, 603,
	15, 516,
	-2, 425,
	-1, 658,
	15, 516,
	-2, 425,
	-1, 708,
	15, 516,
	-2, 425,
	-1, 724,
	10, 406,
	-2, 352,
}

const ASNPrivate = 57344

const ASNLast = 1857

var ASNAct = [...]int{
	362, 5, 694, 5, 696, 697, 654, 711, 715, 613,
	703, 693, 360, 664, 647, 695, 632, 616, 607, 365,
	187, 567, 576, 203, 205, 192, 307, 460, 290, 432,
	422, 333, 494, 421, 388, 368, 403, 366, 289, 355,
	312, 423, 316, 281, 408, 185, 314, 395, 400, 698,
	440, 65, 65, 392, 262, 234, 21, 83, 83, 21,
	65, 699, 191, 325, 23, 353, 33, 34, 665, 6,
	7, 538, 718, 275, 83, 68, 40, 236, 337, 67,
	72, 23, 14, 577, 166, 505, 699, 610, 39, 38,
	443, 83, 23, 407, 65, 198, 37, 229, 216, 209,
	682, 166, 619, 547, 546, 681, 545, 102, 699, 687,
	211, 707, 708, 276, 62, 592, 381, 380, 374, 373,
	213, 43, 446, 29, 51, 50, 548, 215, 36, 286,
	633, 93, 28, 51, 60, 658, 50, 441, 55, 6,
	7, 55, 70, 30, 73, 579, 206, 292, 293, 282,
	23, 706, 9, 224, 498, 635, 27, 572, 61, 291,
	453, 6, 7, 41, 6, 7, 206, 26, 688, 6,
	7, 447, 686, 552, 437, 22, 24, 285, 444, 341,
	521, 23, 94, 429, 217, 222, 6, 7, 166, 6,
	7, 23, 22, 24, 92, 273, 274, 287, 435, 242,
	6, 7, 90, 22, 24, 280, 240, 345, 196, 356,
	69, 275, 724, 367, 23, 372, 6, 7, 48, 23,
	45, 378, 49, 218, 223, 538, 166, 384, 166, 356,
	71, 239, 336, 345, 225, 6, 7, 369, 74, 351,
	23, 404, 243, 636, 231, 233, 379, 100, 23, 221,
	371, 276, 346, 238, 308, 352, 393, 540, 247, 20,
	361, 22, 24, 101, 394, 204, 207, 286, 57, 334,
	377, 56, 519, 401, 429, 413, 419, 280, 53, 398,
	200, 97, 23, 246, 405, 292, 293, 282, 389, 6,
	7, 96, 22, 24, 386, 91, 219, 291, 433, 6,
	7, 410, 22, 24, 428, 608, 345, 426, 412, 206,
	439, 391, 99, 52, 427, 285, 612, 611, 596, 420,
	425, 345, 6, 7, 589, 22, 24, 6, 7, 99,
	22, 24, 588, 273, 274, 287, 528, 431, 428, 166,
	227, 550, 412, 496, 280, 455, 336, 449, 427, 20,
	513, 22, 24, 420, 425, 430, 6, 7, 461, 22,
	24, 44, 206, 166, 564, 452, 346, 230, 448, 424,
	206, 409, 438, 496, 378, 378, 524, 220, 496, 166,
	42, 378, 378, 334, 430, 536, 206, 469, 32, 646,
	6, 7, 221, 22, 24, 227, 550, 486, 426, 648,
	376, 404, 404, 424, 208, 383, 529, 385, 483, 458,
	497, 431, 390, 404, 227, 226, 227, 226, 456, 510,
	393, 451, 454, 473, 475, 490, 409, 228, 394, 412,
	478, 480, 280, 457, 518, 489, 669, 493, 280, 16,
	487, 425, 345, 345, 405, 405, 345, 604, 431, 42,
	495, 509, 389, 208, 399, 31, 405, 356, 46, 356,
	506, 495, 405, 508, 42, 732, 516, 336, 336, 367,
	242, 336, 372, 511, 713, 391, 630, 515, 531, 537,
	725, 631, 723, 526, 525, 436, 345, 346, 346, 602,
	424, 346, 527, 704, 603, 534, 404, 242, 533, 280,
	535, 557, 543, 242, 334, 334, 541, 544, 334, 393,
	512, 705, 507, 542, 539, 702, 522, 394, 450, 676,
	549, 166, 532, 735, 680, 574, 705, 464, 675, 554,
	280, 428, 493, 558, 556, 559, 461, 242, 501, 405,
	405, 427, 465, 502, 571, 499, 243, 561, 563, 166,
	500, 595, 470, 472, 474, 492, 468, 471, 465, 644,
	477, 479, 23, 581, 391, 280, 345, 614, 586, 583,
	587, 637, 620, 280, 597, 585, 390, 555, 280, 402,
	582, 565, 504, 569, 691, 503, 23, 485, 467, 464,
	553, 336, 601, 463, 434, 93, 736, 689, 551, 726,
	609, 193, 638, 709, 166, 280, 621, 622, 578, 634,
	701, 346, 692, 517, 674, 673, 657, 656, 598, 594,
	523, 367, 484, 466, 462, 627, 382, 571, 334, 375,
	199, 641, 642, 690, 652, 618, 629, 232, 591, 590,
	640, 626, 623, 599, 573, 643, 520, 661, 634, 357,
	645, 605, 214, 667, 212, 653, 578, 210, 95, 166,
	12, 411, 624, 663, 662, 390, 569, 668, 387, 3,
	6, 7, 8, 22, 24, 482, 667, 667, 671, 481,
	670, 476, 655, 628, 580, 275, 1, 618, 660, 683,
	684, 277, 679, 23, 6, 7, 491, 22, 24, 397,
	570, 235, 162, 700, 361, 161, 717, 714, 280, 166,
	716, 719, 370, 712, 639, 364, 363, 617, 710, 615,
	584, 722, 359, 358, 142, 276, 729, 141, 593, 459,
	728, 716, 727, 731, 730, 734, 733, 514, 606, 304,
	303, 286, 568, 566, 300, 299, 298, 335, 685, 678,
	677, 666, 651, 650, 649, 530, 575, 579, 348, 292,
	293, 282, 339, 338, 332, 331, 330, 329, 328, 327,
	655, 291, 326, 324, 323, 322, 321, 319, 318, 317,
	445, 315, 442, 570, 313, 310, 720, 600, 301, 285,
	309, 297, 193, 296, 295, 294, 138, 354, 23, 195,
	194, 6, 7, 320, 22, 24, 190, 273, 274, 287,
	189, 98, 54, 188, 168, 167, 311, 165, 137, 136,
	139, 180, 140, 135, 186, 143, 134, 133, 64, 302,
	305, 144, 145, 63, 418, 146, 147, 306, 672, 284,
	148, 283, 562, 417, 659, 149, 286, 340, 182, 176,
	170, 181, 625, 560, 416, 415, 347, 150, 288, 151,
	414, 174, 279, 349, 292, 293, 350, 171, 154, 184,
	155, 278, 152, 272, 343, 271, 291, 270, 173, 269,
	156, 158, 157, 159, 160, 344, 221, 268, 721, 177,
	267, 175, 163, 164, 285, 266, 265, 264, 263, 178,
	183, 169, 179, 172, 342, 261, 6, 7, 260, 22,
	24, 259, 273, 274, 287, 275, 258, 193, 257, 256,
	255, 254, 253, 23, 252, 251, 250, 249, 320, 248,
	245, 244, 241, 132, 131, 130, 129, 128, 127, 126,
	125, 311, 124, 123, 122, 139, 180, 140, 121, 186,
	143, 120, 119, 118, 117, 276, 144, 145, 116, 114,
	146, 147, 115, 113, 112, 148, 111, 110, 109, 108,
	149, 286, 340, 182, 176, 170, 181, 107, 106, 105,
	104, 347, 150, 103, 151, 89, 174, 88, 349, 292,
	293, 350, 171, 154, 184, 155, 87, 152, 86, 343,
	85, 291, 84, 173, 202, 156, 158, 157, 159, 160,
	344, 221, 201, 82, 177, 81, 175, 163, 164, 285,
	80, 79, 78, 77, 178, 183, 169, 179, 172, 342,
	76, 6, 7, 75, 22, 24, 406, 273, 274, 287,
	275, 237, 193, 197, 66, 59, 58, 47, 23, 35,
	13, 25, 19, 320, 18, 17, 15, 11, 10, 4,
	2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 180, 140, 0, 186, 143, 0, 0, 0, 0,
	276, 144, 145, 0, 0, 146, 147, 0, 0, 0,
	148, 0, 0, 0, 0, 149, 286, 340, 182, 176,
	170, 181, 0, 0, 0, 0, 347, 150, 0, 151,
	0, 174, 0, 349, 292, 293, 350, 171, 154, 184,
	155, 0, 152, 0, 343, 0, 291, 0, 173, 0,
	156, 158, 157, 159, 160, 344, 221, 0, 0, 177,
	0, 175, 163, 164, 285, 0, 0, 0, 0, 178,
	183, 169, 179, 172, 342, 0, 6, 7, 0, 22,
	24, 0, 273, 274, 287, 396, 413, 193, 0, 0,
	0, 0, 0, 23, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 180, 140, 0, 186,
	143, 0, 0, 0, 0, 276, 144, 145, 0, 0,
	146, 147, 0, 0, 0, 148, 0, 0, 0, 0,
	149, 286, 0, 182, 176, 170, 181, 0, 0, 0,
	0, 0, 150, 0, 151, 0, 174, 0, 0, 292,
	293, 350, 171, 154, 184, 155, 0, 152, 0, 0,
	0, 291, 0, 173, 0, 156, 158, 157, 159, 160,
	0, 0, 0, 275, 177, 193, 175, 163, 164, 285,
	0, 23, 0, 0, 178, 183, 169, 179, 172, 0,
	0, 6, 7, 0, 22, 24, 0, 273, 274, 488,
	0, 0, 0, 139, 180, 140, 0, 186, 143, 0,
	0, 0, 0, 276, 144, 145, 0, 0, 146, 147,
	0, 0, 0, 148, 0, 0, 0, 0, 149, 286,
	0, 182, 176, 170, 181, 0, 0, 0, 0, 0,
	150, 0, 151, 0, 174, 0, 0, 292, 293, 350,
	171, 154, 184, 155, 0, 152, 0, 0, 0, 291,
	0, 173, 0, 156, 158, 157, 159, 160, 0, 0,
	0, 396, 177, 193, 175, 163, 164, 285, 0, 23,
	0, 0, 178, 183, 169, 179, 172, 0, 0, 6,
	7, 0, 22, 24, 0, 273, 274, 287, 0, 0,
	0, 139, 180, 140, 0, 186, 143, 0, 0, 0,
	0, 276, 144, 145, 0, 0, 146, 147, 0, 0,
	0, 148, 0, 0, 0, 0, 149, 286, 0, 182,
	176, 170, 181, 0, 0, 0, 0, 0, 150, 0,
	151, 0, 174, 0, 0, 292, 293, 350, 171, 154,
	184, 155, 0, 152, 0, 0, 0, 291, 0, 173,
	0, 156, 158, 157, 159, 160, 0, 0, 0, 0,
	177, 193, 175, 163, 164, 285, 0, 23, 0, 0,
	178, 183, 169, 179, 172, 0, 0, 6, 7, 0,
	22, 24, 0, 273, 274, 287, 0, 0, 0, 139,
	180, 140, 0, 186, 143, 0, 0, 0, 0, 0,
	144, 145, 0, 0, 146, 147, 0, 0, 0, 148,
	0, 0, 0, 0, 149, 0, 0, 182, 176, 170,
	181, 0, 0, 0, 0, 0, 150, 0, 151, 0,
	174, 0, 0, 0, 0, 153, 171, 154, 184, 155,
	0, 152, 0, 0, 0, 0, 0, 173, 0, 156,
	158, 157, 159, 160, 0, 193, 0, 0, 177, 0,
	175, 163, 164, 227, 226, 0, 0, 0, 178, 183,
	169, 179, 172, 0, 0, 6, 7, 0, 22, 24,
	0, 0, 0, 139, 180, 140, 0, 186, 143, 0,
	0, 0, 0, 0, 144, 145, 0, 0, 146, 147,
	0, 0, 0, 148, 0, 0, 0, 0, 149, 0,
	0, 182, 176, 170, 181, 0, 0, 0, 0, 0,
	150, 0, 151, 0, 174, 0, 0, 0, 0, 153,
	171, 154, 184, 155, 0, 152, 0, 0, 0, 0,
	0, 173, 0, 156, 158, 157, 159, 160, 193, 0,
	0, 0, 177, 42, 175, 163, 164, 0, 0, 0,
	0, 0, 178, 183, 169, 179, 172, 0, 0, 6,
	7, 0, 0, 0, 0, 0, 139, 180, 140, 0,
	186, 143, 0, 0, 0, 0, 0, 144, 145, 0,
	0, 146, 147, 0, 0, 0, 148, 0, 0, 0,
	0, 149, 0, 0, 182, 176, 170, 181, 0, 0,
	0, 0, 0, 150, 0, 151, 0, 174, 0, 0,
	0, 0, 153, 171, 154, 184, 155, 0, 152, 0,
	0, 0, 0, 0, 173, 0, 156, 158, 157, 159,
	160, 193, 0, 0, 0, 177, 0, 175, 163, 164,
	0, 0, 0, 0, 0, 178, 183, 169, 179, 172,
	0, 0, 6, 7, 0, 0, 0, 0, 0, 139,
	180, 140, 0, 186, 143, 0, 0, 0, 0, 0,
	144, 145, 0, 0, 146, 147, 0, 0, 0, 148,
	0, 0, 0, 0, 149, 0, 0, 182, 176, 170,
	181, 0, 0, 0, 0, 0, 150, 0, 151, 0,
	174, 0, 0, 0, 0, 153, 171, 154, 184, 155,
	0, 152, 0, 0, 0, 0, 0, 173, 0, 156,
	158, 157, 159, 160, 0, 0, 0, 0, 177, 0,
	175, 163, 164, 0, 0, 0, 0, 0, 178, 183,
	169, 179, 172, 0, 0, 6, 7,
}

var ASNPact = [...]int{
	-51, -1000, -51, -1000, 104, 656, -1000, -1000, -1000, -38,
	-1000, -1000, 228, 100, 51, 138, -1000, -1000, -1000, -1000,
	371, -1000, -1000, -57, -1000, 70, -8, -15, -16, -1000,
	-1000, -1000, 52, -1000, -1000, 453, 53, -1000, -1000, -1000,
	343, 187, 447, -1000, -1000, 67, 294, 86, 76, 56,
	-51, 49, -1000, 89, -1000, -40, -51, -51, 269, -51,
	-1000, 121, -1000, 654, -1000, -1000, 265, 255, -1000, 585,
	-1000, 86, -1000, -51, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1642, -1000, -1000, -1000, -1000, -1000, -1000,
	-51, -1000, -1000, -51, -51, 625, -1000, -1000, -1000, -1000,
	1735, 369, 438, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -2,
	-1000, -1000, -1000, 653, -1000, -1000, -1000, 21, 650, -1000,
	35, 648, -1000, -1000, 61, -3, -1000, -1000, -1000, 292,
	149, -1000, -1000, -1000, -1000, -1000, 402, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 412, -4, 1735, 633, 633,
	-1000, 633, -1000, -43, -1000, -1000, -1000, -1000, 202, -1000,
	345, -1000, -1000, 389, 207, -1000, 786, -1000, -51, 645,
	-51, -1000, -51, -1000, -51, -1000, -1000, 34, 33, 624,
	1735, 345, 32, 31, 621, 1735, -51, 1735, -51, -1000,
	345, -1000, 1357, -1000, -1000, 52, 443, -1000, -1000, -1000,
	574, -1000, 411, -1000, -1000, 633, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 270, 207, -1000, -1000, -1000,
	437, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 274, -1000, -1000, -1000, -1000, -1000,
	-1000, 584, 161, -1000, -1000, 1259, 137, -1000, -1000, 270,
	-1000, 82, -1000, 68, -1000, 97, -1000, 82, -1000, -1000,
	911, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 633, -1000, -1000, -1000, 1735, 406,
	345, 345, 118, 207, -51, 400, 403, -1000, 419, -1000,
	-1000, -1000, -1000, -1000, 394, -1000, -1000, -51, 619, 583,
	579, -1000, 1735, 618, 578, 546, -1000, 370, -1000, -1000,
	547, -1000, 370, 1735, 1735, -1000, 345, -1000, 1549, -1000,
	1735, 1735, -1000, 345, -1000, 345, -1000, 595, 617, 577,
	345, -1000, -1000, 389, -1000, -1000, 1161, -1000, -1000, -1000,
	550, 236, -1000, -1000, 356, -1000, -1000, -1000, -1000, -51,
	-1000, 110, 236, -1000, 540, 533, 575, 572, 80, 356,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 52,
	-1000, 207, 332, 1455, 245, 642, 129, 207, 615, 361,
	-1000, 1036, 1036, -1000, -1000, 1036, -1000, -1000, -1000, 318,
	345, 391, -1000, 345, -1000, -1000, -51, -1000, -51, 490,
	-1000, 368, -1000, 198, -51, 345, -1000, 230, -51, 236,
	-1000, -51, 345, -1000, 345, -1000, 9, 345, -1000, 345,
	-1000, 6, 5, 59, -1000, 1259, 326, -1000, -1000, -1000,
	-1000, 591, -1000, -1000, -1000, 169, 236, -1000, 207, -1000,
	-51, -1000, 179, 52, 52, -1000, -1000, -1000, -1000, -1000,
	356, -1000, -1000, -1000, -1000, -1000, -1000, 353, 381, 571,
	1735, 120, -1000, 640, -51, -1000, -1000, -1000, -1000, 69,
	-1000, -1000, -1000, -1000, -1000, -51, 236, 565, 274, -1000,
	274, -1000, 314, 306, -1000, 635, 634, 30, 1735, 614,
	-51, -1000, -1000, 300, -1000, -1000, -1000, -1000, -1000, -1000,
	564, -1000, 613, -1000, 207, 911, 484, -1000, 436, 633,
	345, 389, 207, 282, -1000, -1000, -1000, 681, -1000, -1000,
	-31, -1000, 299, 298, 557, 96, -1000, 562, -1000, -1000,
	198, 198, -51, 345, -1000, -1000, -1000, 52, -1000, -1000,
	-1000, -1000, -1000, 1735, 207, -1000, 471, -1000, 115, -1000,
	113, -1000, -1000, -1000, 216, 561, -1000, -1000, -1000, 596,
	-51, 557, 557, -1000, 595, 549, -1000, -1000, -1000, -1000,
	-1000, 282, 374, 384, -1000, 630, -1000, 96, 52, -1000,
	546, 612, 611, 79, 52, -1000, -51, -51, 384, -1000,
	-1000, -1000, 41, -1000, -51, 425, -1000, -1000, 1735, 610,
	-1000, -1000, 374, -1000, 609, 518, 509, 345, 517, -1000,
	8, 2, 345, -1000, -1000, -51, -51, -1000, 81, -1000,
	590, 629, 580, 607, -1000, -1000, -1000, -1000, -1000, -1000,
	44, 44, -1000, 605, 505, 483, 501, -1000, 64, 27,
	598, -1000, 198, 464, 66, 19, -1000, 207, 1735, -1000,
	483, 472, -1000, 185, 470, -1000, -1000, -1000, 593, -1000,
	-1000, 345, 464, 19, -1000, 66, 52, -1000, 455, -1000,
	-1000, 19, 19, 516, -1000, 589, -1000,
}

var ASNPgo = [...]int{
	0, 1060, 669, 1059, 1058, 1057, 1056, 439, 1055, 1054,
	1052, 1051, 1050, 1049, 1047, 218, 222, 1046, 1045, 134,
	1044, 158, 114, 1043, 1041, 54, 48, 36, 1036, 93,
	44, 144, 238, 32, 1033, 1030, 1023, 1022, 1021, 1020,
	1015, 1013, 179, 78, 53, 1012, 1004, 23, 31, 47,
	1002, 1000, 998, 996, 987, 985, 983, 980, 979, 978,
	977, 969, 968, 967, 966, 964, 963, 962, 959, 958,
	954, 953, 952, 951, 948, 944, 943, 942, 940, 939,
	938, 937, 936, 935, 934, 933, 932, 931, 930, 55,
	929, 927, 926, 925, 924, 922, 921, 920, 919, 918,
	916, 911, 908, 905, 898, 897, 896, 895, 890, 887,
	879, 877, 875, 873, 871, 862, 860, 33, 858, 38,
	28, 855, 30, 854, 853, 852, 844, 843, 842, 841,
	839, 834, 41, 230, 833, 828, 827, 826, 823, 819,
	818, 817, 815, 814, 813, 45, 65, 34, 812, 811,
	810, 806, 62, 25, 800, 799, 797, 39, 24, 796,
	795, 29, 794, 793, 791, 788, 787, 26, 785, 50,
	40, 784, 782, 46, 781, 780, 42, 779, 778, 777,
	776, 775, 774, 773, 63, 772, 769, 768, 767, 766,
	765, 764, 763, 762, 758, 756, 22, 755, 754, 753,
	752, 13, 751, 750, 749, 748, 747, 746, 745, 744,
	743, 21, 742, 740, 739, 738, 18, 16, 14, 737,
	49, 729, 27, 727, 724, 723, 722, 15, 720, 9,
	12, 719, 17, 717, 716, 6, 715, 714, 19, 37,
	35, 712, 11, 2, 10, 7, 4, 5, 707, 8,
	706, 705, 702, 20, 701, 699, 696, 163, 0, 43,
	691, 691, 686, 684, 681, 680, 679, 678, 675, 668,
	662, 661, 661,
}

var ASNR1 = [...]int{
	0, 262, 1, 1, 2, 133, 133, 133, 148, 149,
	3, 12, 12, 4, 4, 5, 6, 6, 7, 7,
	7, 8, 9, 10, 11, 11, 11, 11, 13, 13,
	14, 14, 14, 16, 16, 16, 16, 20, 20, 21,
	21, 22, 22, 134, 135, 135, 15, 15, 17, 17,
	18, 18, 19, 23, 24, 24, 24, 25, 25, 25,
	26, 26, 27, 27, 27, 27, 28, 29, 29, 30,
	31, 31, 31, 32, 32, 32, 32, 32, 32, 32,
	32, 34, 35, 36, 37, 38, 39, 40, 41, 41,
	41, 41, 41, 41, 42, 42, 42, 43, 43, 43,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 57, 57, 57,
	57, 57, 136, 136, 136, 136, 141, 142, 143, 144,
	144, 89, 89, 147, 147, 147, 147, 147, 147, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 138, 139, 145, 145, 145,
	145, 150, 150, 154, 151, 152, 152, 155, 153, 146,
	156, 156, 157, 140, 58, 58, 158, 160, 160, 162,
	164, 164, 164, 165, 166, 167, 167, 168, 168, 170,
	170, 173, 173, 176, 176, 176, 177, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 180,
	181, 192, 192, 182, 193, 193, 194, 194, 195, 195,
	196, 196, 183, 184, 185, 263, 186, 197, 198, 198,
	199, 201, 201, 202, 203, 204, 204, 205, 205, 205,
	205, 200, 187, 188, 189, 190, 191, 179, 179, 179,
	179, 206, 174, 175, 175, 171, 172, 172, 169, 163,
	163, 163, 207, 210, 210, 210, 211, 211, 211, 211,
	211, 212, 212, 208, 208, 213, 214, 215, 215, 216,
	216, 217, 217, 218, 218, 209, 209, 209, 161, 161,
	219, 219, 219, 159, 159, 159, 159, 159, 159, 159,
	159, 220, 59, 59, 221, 221, 222, 222, 60, 61,
	61, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 224, 62, 225, 225, 226, 230,
	230, 227, 227, 228, 228, 231, 231, 232, 232, 233,
	235, 235, 229, 229, 63, 64, 65, 66, 68, 234,
	234, 234, 236, 237, 238, 238, 239, 239, 240, 240,
	67, 69, 70, 70, 241, 241, 71, 72, 73, 74,
	75, 76, 77, 78, 264, 265, 79, 242, 242, 242,
	242, 242, 243, 246, 246, 247, 247, 247, 247, 244,
	244, 248, 248, 249, 249, 250, 245, 80, 80, 266,
	267, 81, 268, 82, 84, 85, 83, 83, 269, 270,
	251, 253, 254, 255, 256, 252, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 93, 93,
	93, 93, 93, 116, 116, 117, 94, 95, 95, 114,
	114, 114, 114, 118, 121, 121, 122, 122, 122, 122,
	119, 123, 124, 125, 126, 120, 127, 128, 115, 96,
	97, 98, 99, 100, 101, 101, 103, 104, 271, 104,
	105, 105, 129, 129, 130, 130, 130, 102, 106, 107,
	131, 131, 132, 132, 132, 108, 109, 110, 111, 112,
	113, 91, 92, 45, 44, 46, 47, 48, 49, 50,
	51, 52, 53, 54, 55, 33, 33, 33, 33, 86,
	87, 88, 89, 260, 260, 258, 258, 259, 259, 259,
	259, 257, 272, 261,
}

var ASNR2 = [...]int{
	0, 1, 1, 2, 10, 1, 2, 0, 3, 0,
	2, 2, 0, 1, 0, 3, 1, 2, 1, 1,
	1, 1, 1, 4, 2, 2, 2, 0, 2, 0,
	3, 3, 0, 3, 3, 2, 0, 1, 0, 1,
	3, 1, 1, 1, 1, 3, 3, 0, 1, 0,
	1, 2, 3, 2, 1, 1, 0, 3, 4, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 4,
	1, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 4, 3, 4, 3, 4, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 2, 1,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 3, 2, 1, 1, 3, 2, 1,
	1, 3, 1, 3, 2, 1, 4, 1, 1, 1,
	1, 3, 5, 1, 1, 1, 2, 1, 3, 1,
	3, 1, 2, 1, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 0, 4, 1, 2, 1, 1, 1, 2,
	1, 1, 2, 2, 1, 0, 7, 1, 1, 1,
	3, 1, 3, 2, 2, 1, 0, 1, 1, 1,
	0, 5, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 2, 1,
	1, 1, 5, 1, 3, 0, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 6, 1, 3, 2,
	4, 1, 3, 2, 0, 2, 3, 5, 2, 0,
	1, 1, 3, 4, 4, 4, 4, 4, 4, 4,
	4, 2, 2, 5, 1, 3, 4, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 4, 1, 5, 1, 1,
	3, 1, 2, 2, 0, 1, 3, 1, 1, 6,
	2, 0, 2, 0, 1, 1, 1, 2, 4, 1,
	4, 6, 1, 1, 1, 3, 1, 1, 4, 4,
	1, 3, 1, 4, 1, 3, 1, 1, 3, 2,
	2, 1, 1, 1, 0, 0, 14, 1, 5, 7,
	5, 3, 1, 1, 3, 1, 2, 3, 3, 2,
	0, 1, 3, 1, 1, 6, 2, 3, 3, 0,
	0, 14, 0, 7, 1, 1, 1, 1, 0, 0,
	10, 5, 2, 1, 0, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 2, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	9, 1, 1, 1, 1, 5, 1, 1, 1, 3,
	1, 1, 1, 0, 1, 1, 1, 1, 0, 4,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 3,
	1, 2, 1, 1, 1, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1, 1, 1, 1, 3,
	2, 0, 0, 1, 1, 1, 1, 1, 2, 1,
	2, 3, 0, 2,
}

var ASNChk = [...]int{
	-1000, -262, -1, -2, -3, -258, 120, 121, -2, 48,
	-4, -5, 4, -12, 120, -6, -7, -8, -9, -10,
	121, -259, 123, 12, 124, -11, 67, 56, 32, 72,
	5, -7, 17, 123, 124, -13, 58, 104, 104, 104,
	-259, -257, 11, 68, 18, 33, 11, -14, -15, -16,
	69, 57, 19, -133, -148, 52, -16, -15, -17, -18,
	-19, -21, -22, -134, -135, -258, -20, 30, 26, -21,
	53, -133, 120, -31, -32, -34, -35, -36, -37, -38,
	-39, -40, -41, -258, -50, -51, -52, -53, -54, -55,
	-31, 26, -19, 10, 61, 4, 26, 26, -149, -32,
	-257, -42, -47, -56, -57, -58, -59, -60, -61, -62,
	-63, -64, -65, -66, -68, -67, -69, -70, -71, -72,
	-73, -74, -75, -76, -77, -78, -79, -80, -81, -82,
	-83, -84, -85, -136, -137, -138, -139, -140, -159, 34,
	36, -223, -224, 39, 45, 46, 49, 50, 54, 59,
	71, 73, 86, 80, 82, 84, 94, 96, 95, 97,
	98, -251, -252, 106, 107, -141, -258, -142, -143, 115,
	64, 81, 117, 92, 75, 105, 63, 103, 113, 116,
	35, 65, 62, 114, 83, -145, 38, -253, -144, -150,
	-151, -152, -153, 6, -154, -155, -22, -23, -258, 5,
	-42, -45, -46, -47, -257, -158, 17, -257, 15, 101,
	4, 89, 4, 85, 4, 66, 101, -158, -184, 4,
	85, 100, -158, -184, 4, 85, 15, 14, 15, 101,
	-42, -89, 4, -89, -89, -254, 120, -24, -25, -33,
	4, -86, -258, -259, -87, -88, -43, -44, -90, -91,
	-92, -93, -94, -95, -96, -97, -98, -99, -100, -101,
	-102, -103, -25, -104, -105, -106, -107, -108, -109, -110,
	-111, -112, -113, 126, 127, 4, 44, -260, -114, -115,
	-258, -259, 80, -129, -130, 108, 60, 128, -118, -119,
	-120, 90, 78, 79, -160, -162, -163, -164, -207, -208,
	-209, -165, 43, -213, -214, 44, 51, -167, -49, 4,
	-168, 30, -170, -171, -173, -174, -176, -177, -178, -179,
	17, -180, -181, -182, -183, -184, -185, -186, -187, -188,
	-189, -190, -191, -48, -152, -206, -153, -43, -192, -193,
	61, -42, 118, 88, 99, -258, -145, 70, -194, 77,
	80, -48, -49, -146, -156, -157, -258, 4, -225, -226,
	-230, -220, -258, -234, -236, -238, -239, -258, -240, -47,
	-241, -240, -258, 85, 85, 5, -42, -220, -258, -158,
	85, 85, 5, -42, -258, -42, -146, -269, -147, -89,
	-42, -43, -44, -47, -48, -49, 4, -255, -259, 11,
	-26, -33, 5, -27, -258, -259, -28, -29, -30, 15,
	-89, -271, -33, 5, -116, -121, -123, -127, -131, -258,
	-259, -117, -122, -132, -29, -30, 128, -119, -120, 4,
	-43, 11, -161, 24, 10, 37, -42, 37, -152, -258,
	-169, 55, -172, 22, 110, -175, 25, 74, -169, -167,
	-42, 15, -158, 42, -43, -258, 15, 14, 15, -221,
	-222, -258, 5, 10, 10, -42, 5, 10, 10, 17,
	5, 10, -42, -220, -42, -220, -264, -42, -220, -42,
	-220, -266, -268, -253, 5, 10, -258, -259, 128, -119,
	-120, -256, 5, -27, -33, -26, 17, -258, 44, 5,
	10, 5, 10, 10, 10, 5, -132, -29, -30, -33,
	-258, -259, -43, 18, -219, -259, -33, -42, -258, 27,
	4, 51, -43, 5, 15, -176, -170, -173, 18, 15,
	-197, -158, -146, -157, 5, 10, 17, -227, 27, -220,
	27, -239, -259, -33, -240, 97, 98, 98, 67, -147,
	15, 7, 4, -29, -33, -43, -117, -258, -122, -33,
	-124, -259, -128, -259, 11, 10, -210, -211, -212, -152,
	-42, -47, 37, 4, -258, -195, -196, 14, -43, 76,
	-263, -222, -259, -33, -228, 10, -161, -161, 18, 18,
	4, 4, 85, -42, 5, -258, 18, 10, 5, -43,
	-166, -167, 5, 10, 11, -43, -215, -216, 23, -196,
	118, 18, 18, -229, 10, -231, -232, -233, -220, 6,
	10, -227, -227, -220, -270, -125, -259, -211, -43, -48,
	5, 10, -217, 15, -258, 42, 27, 10, 6, -237,
	-238, -229, -229, -253, 10, -216, 15, -218, 15, -198,
	-199, -200, 4, -232, -235, -259, 5, 5, 56, -126,
	-259, -258, -217, -218, -201, 27, -202, -258, -230, 11,
	-265, -267, -42, 5, 5, 10, 10, -203, -204, -158,
	7, 97, 98, -201, -201, -205, 91, 28, 87, 7,
	4, 4, 5, -242, -243, -227, -246, -247, -220, 42,
	-242, 5, 10, -244, 10, 10, 87, 47, 85, 5,
	-227, -245, -229, 10, -248, -249, -247, -250, 6, -247,
	-43, -42, -244, 10, 27, 10, 6, -229, -245, -243,
	-249, -235, 10, -246, -243, 7, 7,
}

var ASNDef = [...]int{
	0, -2, 1, 2, 0, 14, 535, 536, 3, 12,
	10, 13, 0, 27, 0, 0, 16, 18, 19, 20,
	21, 22, 537, 0, 539, 29, 0, 0, 0, 11,
	15, 17, 0, 538, 540, 0, 0, 24, 25, 26,
	0, 0, 0, 28, 23, -2, 0, 7, 36, 47,
	49, 0, 541, 0, 5, 0, 72, 72, 0, 48,
	50, 0, 39, 41, 42, 43, 0, 0, 35, 37,
	4, 6, 9, 30, 70, 73, 74, 75, 76, 77,
	78, 79, 80, -2, 88, 89, 90, 91, 92, 93,
	31, 46, 51, 0, 0, 0, 33, 34, 8, 71,
	-2, 0, 0, 94, 95, 96, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 185, 0,
	318, 319, 320, 0, 354, 355, 356, 0, 0, 370,
	0, 372, 376, 377, 0, 0, 381, 382, 383, 0,
	0, 416, 417, 414, 415, -2, -2, 134, 135, 149,
	150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
	160, 161, 162, 163, 164, 0, 0, -2, 532, 167,
	168, 169, 170, 0, 171, 175, 40, 52, 56, 45,
	81, 83, 85, 0, 483, 184, -2, 517, 0, 312,
	0, 357, 0, 516, 0, 379, 380, 0, 0, 0,
	-2, 0, 0, 0, 0, -2, 0, -2, 0, 334,
	418, 137, -2, 174, 178, 0, 0, 53, 54, 55,
	531, 525, 526, 527, 528, 532, 82, 84, 97, 98,
	99, 426, 427, 428, 429, 430, 431, 432, 433, 434,
	435, 436, 437, 438, 439, 440, 441, 442, 443, 444,
	445, 446, 447, 448, -2, 531, 483, 456, 457, 458,
	481, 484, 486, 490, 491, 533, 534, 459, 460, 461,
	462, 494, 495, 496, 299, 187, 188, 189, 269, 270,
	271, 190, 0, 283, 284, -2, 0, 193, 285, 531,
	-2, 0, -2, 0, 199, 0, -2, 0, 203, 204,
	-2, 207, 208, 209, 210, 211, 212, 213, 214, 215,
	216, 217, 218, 257, -2, 259, -2, -2, -2, 0,
	0, 234, 0, 483, 0, -2, 0, 221, 224, 227,
	-2, 86, 87, 378, 179, 180, 182, 0, 0, 336,
	338, 339, -2, 0, 359, 362, 364, 366, 367, 371,
	0, 374, 0, -2, -2, 384, 407, 408, -2, 233,
	-2, -2, 409, 412, -2, 165, 166, 0, 0, 0,
	143, 144, 145, 146, 147, 148, -2, 424, 423, 422,
	531, 65, 59, 60, 66, 67, 62, 63, 64, 0,
	530, 0, -2, 59, 0, 0, 0, 0, 531, -2,
	-2, 453, 464, 500, 63, 64, 466, 467, 468, 0,
	452, 483, 0, -2, 0, 0, 295, 483, 0, -2,
	196, -2, -2, 266, 267, -2, 263, 264, 202, 0,
	220, 0, 232, 0, 252, 253, 0, 225, 0, 0,
	314, 0, 335, 0, 0, 311, 358, 0, 0, 531,
	373, 0, 305, 309, 306, 310, 0, 303, 307, 304,
	308, 0, 0, 0, 141, -2, -2, -2, -2, -2,
	-2, 0, 57, 61, 65, 0, 531, 529, 483, 450,
	0, 463, 531, 0, 0, 499, 501, 502, 503, 68,
	526, 471, 479, 186, 298, 300, 301, 0, -2, 191,
	-2, 0, 296, 0, 0, 268, -2, 200, 205, 483,
	235, 237, 166, 181, 313, 0, 531, 344, 299, 340,
	299, 365, 0, 0, 375, 0, 0, 0, -2, 0,
	0, 421, 58, 0, 68, 489, 454, 455, 465, 469,
	0, 472, 0, 477, 483, -2, 0, 273, 0, -2,
	-2, -2, 483, 0, -2, 223, 228, 483, 230, 231,
	0, 315, 0, 0, 353, 0, 342, 360, 368, 369,
	0, 0, 0, 419, 142, -2, 69, 0, 475, 302,
	192, 194, 272, -2, 483, 297, 0, 287, 0, 229,
	0, 316, 317, 337, 0, 343, 345, 347, 348, 0,
	0, 353, 353, 413, 0, 0, 473, 274, 276, 277,
	286, 0, 289, 294, 291, 0, 352, 0, 351, 361,
	363, 0, 0, 0, 0, 288, 0, 0, 294, 236,
	238, 239, 0, 346, 0, 0, 385, 410, -2, 0,
	474, 292, 290, 293, 0, 0, 241, 246, 0, 350,
	0, 0, 420, 470, 240, 0, 0, 243, 250, 245,
	0, 0, 0, 0, 242, 244, 247, 248, 249, 349,
	0, 0, 251, 0, 387, 400, 392, 393, 395, 0,
	0, 386, 0, 353, 0, 0, 396, 483, -2, 411,
	400, 0, 391, 0, 399, 401, 403, 404, 0, 394,
	397, 398, 353, 0, -2, 0, 351, 388, 0, 390,
	402, 0, 0, 0, 389, 0, 405,
}

var ASNTok1 = [...]int{
	1,
}

var ASNTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129,
}

var ASNTok3 = [...]int{
	0,
}

var ASNErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{
}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	ASNDebug        = 0
	ASNErrorVerbose = false
)

type ASNLexer interface {
	Lex(lval *ASNSymType) int
	Error(s string)
}

type ASNParser interface {
	Parse(ASNLexer) int
	Lookahead() int
}

type ASNParserImpl struct {
	lval  ASNSymType
	stack [ASNInitialStackSize]ASNSymType
	char  int
}

func (p *ASNParserImpl) Lookahead() int {
	return p.char
}

func ASNNewParser() ASNParser {
	return &ASNParserImpl{}
}

const ASNFlag = -1000

func ASNTokname(c int) string {
	if c >= 1 && c-1 < len(ASNToknames) {
		if ASNToknames[c-1] != "" {
			return ASNToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func ASNStatname(s int) string {
	if s >= 0 && s < len(ASNStatenames) {
		if ASNStatenames[s] != "" {
			return ASNStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func ASNErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !ASNErrorVerbose {
		return "syntax error"
	}

	for _, e := range ASNErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + ASNTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := ASNPact[state]
	for tok := TOKSTART; tok-1 < len(ASNToknames); tok++ {
		if n := base + tok; n >= 0 && n < ASNLast && ASNChk[ASNAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if ASNDef[state] == -2 {
		i := 0
		for ASNExca[i] != -1 || ASNExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; ASNExca[i] >= 0; i += 2 {
			tok := ASNExca[i]
			if tok < TOKSTART || ASNExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if ASNExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += ASNTokname(tok)
	}
	return res
}

func ASNlex1(lex ASNLexer, lval *ASNSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = ASNTok1[0]
		goto out
	}
	if char < len(ASNTok1) {
		token = ASNTok1[char]
		goto out
	}
	if char >= ASNPrivate {
		if char < ASNPrivate+len(ASNTok2) {
			token = ASNTok2[char-ASNPrivate]
			goto out
		}
	}
	for i := 0; i < len(ASNTok3); i += 2 {
		token = ASNTok3[i+0]
		if token == char {
			token = ASNTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = ASNTok2[1] /* unknown char */
	}
	if ASNDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", ASNTokname(token), uint(char))
	}
	return char, token
}

func ASNParse(ASNlex ASNLexer) int {
	return ASNNewParser().Parse(ASNlex)
}

func (ASNrcvr *ASNParserImpl) Parse(ASNlex ASNLexer) int {
	var ASNn int
	var ASNVAL ASNSymType
	var ASNDollar []ASNSymType
	_ = ASNDollar // silence set and not used
	ASNS := ASNrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	ASNstate := 0
	ASNrcvr.char = -1
	ASNtoken := -1 // ASNrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		ASNstate = -1
		ASNrcvr.char = -1
		ASNtoken = -1
	}()
	ASNp := -1
	goto ASNstack

ret0:
	return 0

ret1:
	return 1

ASNstack:
	/* put a state and value onto the stack */
	if ASNDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", ASNTokname(ASNtoken), ASNStatname(ASNstate))
	}

	ASNp++
	if ASNp >= len(ASNS) {
		nyys := make([]ASNSymType, len(ASNS)*2)
		copy(nyys, ASNS)
		ASNS = nyys
	}
	ASNS[ASNp] = ASNVAL
	ASNS[ASNp].yys = ASNstate

ASNnewstate:
	ASNn = ASNPact[ASNstate]
	if ASNn <= ASNFlag {
		goto ASNdefault /* simple state */
	}
	if ASNrcvr.char < 0 {
		ASNrcvr.char, ASNtoken = ASNlex1(ASNlex, &ASNrcvr.lval)
	}
	ASNn += ASNtoken
	if ASNn < 0 || ASNn >= ASNLast {
		goto ASNdefault
	}
	ASNn = ASNAct[ASNn]
	if ASNChk[ASNn] == ASNtoken { /* valid shift */
		ASNrcvr.char = -1
		ASNtoken = -1
		ASNVAL = ASNrcvr.lval
		ASNstate = ASNn
		if Errflag > 0 {
			Errflag--
		}
		goto ASNstack
	}

ASNdefault:
	/* default state action */
	ASNn = ASNDef[ASNstate]
	if ASNn == -2 {
		if ASNrcvr.char < 0 {
			ASNrcvr.char, ASNtoken = ASNlex1(ASNlex, &ASNrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if ASNExca[xi+0] == -1 && ASNExca[xi+1] == ASNstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			ASNn = ASNExca[xi+0]
			if ASNn < 0 || ASNn == ASNtoken {
				break
			}
		}
		ASNn = ASNExca[xi+1]
		if ASNn < 0 {
			goto ret0
		}
	}
	if ASNn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			ASNlex.Error(ASNErrorMessage(ASNstate, ASNtoken))
			Nerrs++
			if ASNDebug >= 1 {
				__yyfmt__.Printf("%s", ASNStatname(ASNstate))
				__yyfmt__.Printf(" saw %s\n", ASNTokname(ASNtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for ASNp >= 0 {
				ASNn = ASNPact[ASNS[ASNp].yys] + ASNErrCode
				if ASNn >= 0 && ASNn < ASNLast {
					ASNstate = ASNAct[ASNn] /* simulate a shift of "error" */
					if ASNChk[ASNstate] == ASNErrCode {
						goto ASNstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if ASNDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", ASNS[ASNp].yys)
				}
				ASNp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if ASNDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", ASNTokname(ASNtoken))
			}
			if ASNtoken == ASNEofCode {
				goto ret1
			}
			ASNrcvr.char = -1
			ASNtoken = -1
			goto ASNnewstate /* try again in the same state */
		}
	}

	/* reduction by production ASNn */
	if ASNDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", ASNn, ASNStatname(ASNstate))
	}

	ASNnt := ASNn
	ASNpt := ASNp
	_ = ASNpt // guard against "declared and not used"

	ASNp -= ASNR2[ASNn]
	// ASNp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if ASNp+1 >= len(ASNS) {
		nyys := make([]ASNSymType, len(ASNS)*2)
		copy(nyys, ASNS)
		ASNS = nyys
	}
	ASNVAL = ASNS[ASNp+1]

	/* consult goto table to find next state */
	ASNn = ASNR1[ASNn]
	ASNg := ASNPgo[ASNn]
	ASNj := ASNg + ASNS[ASNp].yys + 1

	if ASNj >= ASNLast {
		ASNstate = ASNAct[ASNg]
	} else {
		ASNstate = ASNAct[ASNj]
		if ASNChk[ASNstate] != -ASNn {
			ASNstate = ASNAct[ASNg]
		}
	}
	// dummy call; replaced with literal code
	switch ASNnt {

	case 1:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:462
		{
	        SetResult(ASNlex, ASNDollar[1].TypeValue)
	        Print("Done")
	        Print("--------------------------------------------------------------------------------")
	        Print(JSON(&ASNDollar[1].TypeValue))
	        Print("--------------------------------------------------------------------------------")
	    }
	case 2:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:471
		{
	        ASNVAL.TypeValue = LIST {
	            ASNDollar[1].TypeValue,
	        }
	    }
	case 3:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:476
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	        ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
	    }
	case 4:
		ASNDollar = ASNS[ASNpt-10:ASNpt+1]
//line asn.y:506
		{
	        ASNVAL.TypeValue = MAP {
	            "identifier": ASNDollar[1].TypeValue,
	            "encoding":   ASNDollar[3].TypeValue,
	            "tag":        ASNDollar[4].TypeValue,
	            "body":       ASNDollar[8].TypeValue,
	        }
	    }
	case 5:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:522
		{
	        ASNVAL.TypeValue = LIST {
	            ASNDollar[1].TypeValue,
	        }
	    }
	case 6:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:527
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	        ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
	    }
	case 7:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:531
		{
	        ASNVAL.TypeValue = nil
	    }
	case 8:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:543
		{
	        ASNVAL.TypeValue = MAP {
	            "encodingReference":    ASNDollar[2].TypeString,
	            "encodingInstructions": ASNDollar[3].TypeValue,
	        }
	    }
	case 9:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:558
		{
	        ASNVAL.TypeValue = nil
	    }
	case 10:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:571
		{
	        ASNVAL.TypeValue = MAP {
	            "reference":             ASNDollar[1].TypeValue,
	            "definitiveIdentifiers": ASNDollar[2].TypeValue,
	        }
	    }
	case 11:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:585
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeString
	    }
	case 12:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:588
		{
	        ASNVAL.TypeValue = ""
	    }
	case 13:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:600
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 14:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:603
		{
	        ASNVAL.TypeValue = nil
	    }
	case 15:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:613
		{
	        ASNVAL.TypeValue = ASNDollar[2].TypeValue
	    }
	case 16:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:624
		{
	        ASNVAL.TypeValue = LIST {
	            ASNDollar[1].TypeValue,
	        }
	    }
	case 17:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:629
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	        ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
	    }
	case 18:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:642
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 19:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:645
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 20:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:648
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 21:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:657
		{
	        ASNVAL.TypeValue = MAP {
	            "name": ASNDollar[1].TypeString,
	        }
	    }
	case 22:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:668
		{
	        ASNVAL.TypeValue = MAP {
	            "number": ASNDollar[1].TypeValue,
	        }
	    }
	case 23:
		ASNDollar = ASNS[ASNpt-4:ASNpt+1]
//line asn.y:679
		{
	        ASNVAL.TypeValue = MAP {
	            "name": ASNDollar[1].TypeString,
	            "number": ASNDollar[3].TypeValue,
	        }
	    }
	case 24:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:695
		{
	        ASNVAL.TypeValue = "Implicit"
	    }
	case 25:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:698
		{
	        ASNVAL.TypeValue = "Explicit"
	    }
	case 26:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:701
		{
	        ASNVAL.TypeValue = "Automatic"
	    }
	case 27:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:704
		{
	        ASNVAL.TypeValue = "Explicit"
	    }
	case 28:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:715
		{
	        ASNVAL.TypeValue = true
	    }
	case 29:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:718
		{
	        ASNVAL.TypeValue = false
	    }
	case 30:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:731
		{
	      ASNVAL.TypeValue = MAP {
	          "imports":     ASNDollar[1].TypeValue,
	          "exports":     ASNDollar[2].TypeValue,
	          "assignments": ASNDollar[3].TypeValue,
	      }
	    }
	case 31:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:740
		{
	        ASNVAL.TypeValue = MAP {
	            "imports":     ASNDollar[2].TypeValue,
	            "exports":     ASNDollar[1].TypeValue,
	            "assignments": ASNDollar[3].TypeValue,
	        }
	    }
	case 32:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:747
		{
	      ASNVAL.TypeValue = nil
	    }
	case 33:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:759
		{
	      ASNVAL.TypeValue = MAP {
	          "all":     "false",
	          "symbols": ASNDollar[2].TypeValue,
	      }
	    }
	case 34:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:765
		{
	      ASNVAL.TypeValue = MAP {
	          "all": "true",
	      }
	    }
	case 35:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:770
		{
	      ASNVAL.TypeValue = MAP {
	          "all": "false",
	      }
	    }
	case 36:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:775
		{
	      ASNVAL.TypeValue = MAP {
	          "all": "true",
	      }
	  }
	case 37:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:788
		{
	         ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 38:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:791
		{
	        ASNVAL.TypeValue = nil
	    }
	case 39:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:802
		{
	         ASNVAL.TypeValue = LIST {
	             ASNDollar[1].TypeValue,
	         }
	    }
	case 40:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:807
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	        ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
	    }
	case 41:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:819
		{
	        ASNVAL.TypeValue = MAP {
	            "reference": ASNDollar[1].TypeValue,
	        }
	    }
	case 42:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:824
		{
	        ASNVAL.TypeValue = MAP {
	            "parameterizedReference": ASNDollar[1].TypeValue,
	        }
	    }
	case 43:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:843
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 44:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:853
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 45:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:856
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 46:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:867
		{
	      ASNVAL.TypeValue = ASNDollar[2].TypeValue
	    }
	case 47:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:870
		{
	      ASNVAL.TypeValue = nil
	    }
	case 48:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:881
		{
	       ASNVAL.TypeValue = ASNDollar[1].TypeValue
	   }
	case 49:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:884
		{
	       ASNVAL.TypeValue = nil
	   }
	case 50:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:895
		{
	        ASNVAL.TypeValue = LIST {
	            ASNDollar[1].TypeValue,
	        }
	    }
	case 51:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:900
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	        ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
	    }
	case 52:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:911
		{
	        ASNVAL.TypeValue = MAP {
	            "symbols":   ASNDollar[1].TypeValue,
	            "reference": ASNDollar[3].TypeValue,
	        }
	    }
	case 53:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:924
		{
	       ASNVAL.TypeValue = MAP {
	           "name":        ASNDollar[1].TypeValue,
	           "identifiers": ASNDollar[2].TypeValue,
	       }
	    }
	case 54:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:939
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 55:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:942
		{
	        ASNVAL.TypeValue = nil
	    }
	case 56:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:945
		{
	        ASNVAL.TypeValue = nil
	    }
	case 57:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:956
		{
	        ASNVAL.TypeValue = ASNDollar[2].TypeValue
	    }
	case 58:
		ASNDollar = ASNS[ASNpt-4:ASNpt+1]
//line asn.y:959
		{
	        ASNVAL.TypeValue = ASNDollar[3].TypeValue
	    }
	case 59:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:962
		{
	      ASNVAL.TypeValue = nil
	    }
	case 60:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:973
		{
	        ASNVAL.TypeValue = LIST {
	            ASNDollar[1].TypeValue,
	        }
	    }
	case 61:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:978
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	        ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
	    }
	case 62:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:992
		{
	        ASNVAL.TypeValue = MAP {
	            "name": ASNDollar[1].TypeValue,
	        }
	    }
	case 63:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:997
		{
	        ASNVAL.TypeValue = MAP {
	            "number": ASNDollar[1].TypeValue,
	        }
	    }
	case 64:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1002
		{
	        ASNVAL.TypeValue = MAP {
	            "nameAndNumber": ASNDollar[1].TypeValue,
	        }
	    }
	case 65:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1007
		{
	        ASNVAL.TypeValue = MAP {
	            "definedValue": ASNDollar[1].TypeValue,
	        }
	    }
	case 66:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1019
		{
	       ASNVAL.TypeValue = ASNDollar[1].TypeValue
	   }
	case 67:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1030
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 68:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1033
		{
	        ASNVAL.TypeValue = MAP {
	            "definedValue": ASNDollar[1].TypeValue,
	        }
	    }
	case 69:
		ASNDollar = ASNS[ASNpt-4:ASNpt+1]
//line asn.y:1045
		{
	        ASNVAL.TypeValue = MAP {
	            "name":   ASNDollar[1].TypeValue,
	            "number": ASNDollar[3].TypeValue,
	        }
	    }
	case 70:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1059
		{
	        ASNVAL.TypeValue = LIST {
	            ASNDollar[1].TypeValue,
	        }
	    }
	case 71:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:1064
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	        ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
	     }
	case 72:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:1068
		{
	        ASNVAL.TypeValue = nil
	    }
	case 73:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1085
		{
	        ASNVAL.TypeValue = MAP {
	            "typeAssignment": ASNDollar[1].TypeValue,
	        }
	    }
	case 74:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1090
		{
	        ASNVAL.TypeValue = MAP {
	            "valueAssignment": ASNDollar[1].TypeValue,
	        }
	    }
	case 75:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1095
		{
	        ASNVAL.TypeValue = MAP {
	            "xmlValueAssignment": ASNDollar[1].TypeValue,
	        }
	    }
	case 76:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1100
		{
	        ASNVAL.TypeValue = MAP {
	            "valueSetAssignment": ASNDollar[1].TypeValue,
	        }
	    }
	case 77:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1105
		{
	        ASNVAL.TypeValue = MAP {
	            "objectClassAssignment": ASNDollar[1].TypeValue,
	        }
	    }
	case 78:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1110
		{
	        ASNVAL.TypeValue = MAP {
	            "objectAssignment": ASNDollar[1].TypeValue,
	        }
	    }
	case 79:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1115
		{
	        ASNVAL.TypeValue = MAP {
	            "objectSetAssignment": ASNDollar[1].TypeValue,
	        }
	    }
	case 80:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1120
		{
	        ASNVAL.TypeValue = MAP {
	            "parameterizedAssignment": ASNDollar[1].TypeValue,
	        }
	    }
	case 81:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:1134
		{
	        ASNVAL.TypeValue = MAP {
	            "reference":  ASNDollar[1].TypeValue,
	            "typename":   ASNDollar[2].TypeValue,
	        }
	    }
	case 82:
		ASNDollar = ASNS[ASNpt-4:ASNpt+1]
//line asn.y:1150
		{
	        ASNVAL.TypeValue = MAP {
	            "reference":  ASNDollar[1].TypeValue,
	            "typename":   ASNDollar[2].TypeValue,
	            "value":      ASNDollar[4].TypeValue,
	        }
	    }
	case 83:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:1166
		{
	        ASNVAL.TypeValue = MAP {
	            "reference":  ASNDollar[1].TypeValue,
	            "value":      ASNDollar[3].TypeValue,
	        }
	    }
	case 84:
		ASNDollar = ASNS[ASNpt-4:ASNpt+1]
//line asn.y:1182
		{
	        ASNVAL.TypeValue = MAP {
	            "reference":  ASNDollar[1].TypeValue,
	            "typename":   ASNDollar[2].TypeValue,
	            "valueSet":   ASNDollar[4].TypeValue,
	        }
	    }
	case 85:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:1198
		{
	        ASNVAL.TypeValue = MAP {
	            "reference":  ASNDollar[1].TypeValue,
	            "class":      ASNDollar[3].TypeValue,
	        }
	    }
	case 86:
		ASNDollar = ASNS[ASNpt-4:ASNpt+1]
//line asn.y:1214
		{
	        ASNVAL.TypeValue = MAP {
	            "reference":    ASNDollar[1].TypeValue,
	            "definedClass": ASNDollar[2].TypeValue,
	            "object":       ASNDollar[4].TypeValue,
	        }
	    }
	case 87:
		ASNDollar = ASNS[ASNpt-4:ASNpt+1]
//line asn.y:1231
		{
	        ASNVAL.TypeValue = MAP {
	            "reference":    ASNDollar[1].TypeValue,
	            "definedClass": ASNDollar[2].TypeValue,
	            "objectSet":    ASNDollar[4].TypeValue,
	        }
	    }
	case 88:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1250
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 89:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1253
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 90:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1256
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 91:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1259
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 92:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1262
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 93:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1265
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 94:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1277
		{
	        ASNVAL.TypeValue = MAP {
	            "type":       "BUILTIN_TYPE",
	            "properties": ASNDollar[1].TypeValue,
	        }
	    }
	case 95:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1283
		{
	        ASNVAL.TypeValue = MAP {
	            "type":       "REFERENCED_TYPE",
	            "properties": ASNDollar[1].TypeValue,
	        }
	    }
	case 96:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1289
		{
	        ASNVAL.TypeValue = MAP {
	            "type":       "CONSTRAINED_TYPE",
	            "properties": ASNDollar[1].TypeValue,
	        }
	    }
	case 97:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1304
		{
	        ASNVAL.TypeValue = MAP {
	            "type":       "BUILTIN_VALUE",
	            "properties": ASNDollar[1].TypeValue,
	        }
	    }
	case 98:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1310
		{
	        ASNVAL.TypeValue = MAP {
	            "type":       "REFERENCED_VALUE",
	            "properties": ASNDollar[1].TypeValue,
	        }
	    }
	case 99:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1316
		{
	        ASNVAL.TypeValue = MAP {
	            "type":       "OBJECT_CLASS_FIELD_VALUE",
	            "properties": ASNDollar[1].TypeValue,
	        }
	    }
	case 100:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1354
		{
	        ASNVAL.TypeValue = MAP {
	            "bitStringType": ASNDollar[1].TypeValue,
	        }
	    }
	case 101:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1359
		{
	        ASNVAL.TypeValue = MAP {
	            "booleanType": ASNDollar[1].TypeValue,
	        }
	    }
	case 102:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1364
		{
	        ASNVAL.TypeValue = MAP {
	            "characterStringType": ASNDollar[1].TypeValue,
	        }
	    }
	case 103:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1369
		{
	        ASNVAL.TypeValue = MAP {
	            "choiceType": ASNDollar[1].TypeValue,
	        }
	    }
	case 104:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1374
		{
	        ASNVAL.TypeValue = MAP {
	            "dateType": ASNDollar[1].TypeValue,
	        }
	    }
	case 105:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1379
		{
	        ASNVAL.TypeValue = MAP {
	            "dataTimeType": ASNDollar[1].TypeValue,
	        }
	    }
	case 106:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1384
		{
	        ASNVAL.TypeValue = MAP {
	            "durationType": ASNDollar[1].TypeValue,
	        }
	    }
	case 107:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1389
		{
	        ASNVAL.TypeValue = MAP {
	            "embeddedPDVType": ASNDollar[1].TypeValue,
	        }
	    }
	case 108:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1394
		{
	        ASNVAL.TypeValue = MAP {
	            "enumeratedType": ASNDollar[1].TypeValue,
	        }
	    }
	case 109:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1399
		{
	        ASNVAL.TypeValue = MAP {
	            "externalType": ASNDollar[1].TypeValue,
	        }
	    }
	case 110:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1404
		{
	        ASNVAL.TypeValue = MAP {
	            "instanceOfType": ASNDollar[1].TypeValue,
	        }
	    }
	case 111:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1409
		{
	        ASNVAL.TypeValue = MAP {
	            "integerType": ASNDollar[1].TypeValue,
	        }
	    }
	case 112:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1414
		{
	        ASNVAL.TypeValue = MAP {
	            "iriType": ASNDollar[1].TypeValue,
	        }
	    }
	case 113:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1419
		{
	        ASNVAL.TypeValue = MAP {
	            "nullType": ASNDollar[1].TypeValue,
	        }
	    }
	case 114:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1424
		{
	        ASNVAL.TypeValue = MAP {
	            "objectClassFieldType": ASNDollar[1].TypeValue,
	        }
	    }
	case 115:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1429
		{
	        ASNVAL.TypeValue = MAP {
	            "objectIdentifierType": ASNDollar[1].TypeValue,
	        }
	    }
	case 116:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1434
		{
	        ASNVAL.TypeValue = MAP {
	            "octetStringType": ASNDollar[1].TypeValue,
	        }
	    }
	case 117:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1439
		{
	        ASNVAL.TypeValue = MAP {
	            "realType": ASNDollar[1].TypeValue,
	        }
	    }
	case 118:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1444
		{
	        ASNVAL.TypeValue = MAP {
	            "relativeIRIType": ASNDollar[1].TypeValue,
	        }
	    }
	case 119:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1449
		{
	        ASNVAL.TypeValue = MAP {
	            "relativeOIDType": ASNDollar[1].TypeValue,
	        }
	    }
	case 120:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1454
		{
	        ASNVAL.TypeValue = MAP {
	            "sequenceType": ASNDollar[1].TypeValue,
	        }
	    }
	case 121:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1459
		{
	        ASNVAL.TypeValue = MAP {
	            "sequenceOfType": ASNDollar[1].TypeValue,
	        }
	    }
	case 122:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1464
		{
	        ASNVAL.TypeValue = MAP {
	            "setType": ASNDollar[1].TypeValue,
	        }
	    }
	case 123:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1469
		{
	        ASNVAL.TypeValue = MAP {
	            "setOfType": ASNDollar[1].TypeValue,
	        }
	    }
	case 124:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1474
		{
	        ASNVAL.TypeValue = MAP {
	            "prefixedType": ASNDollar[1].TypeValue,
	        }
	    }
	case 125:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1479
		{
	        ASNVAL.TypeValue = MAP {
	            "timeType": ASNDollar[1].TypeValue,
	        }
	    }
	case 126:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1484
		{
	        ASNVAL.TypeValue = MAP {
	            "timeOfDayType": ASNDollar[1].TypeValue,
	        }
	    }
	case 127:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1500
		{
	        ASNVAL.TypeValue = MAP {
	            "definedType": ASNDollar[1].TypeValue,
	        }
	    }
	case 128:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1505
		{
	        ASNVAL.TypeValue = MAP {
	            "usefulType": ASNDollar[1].TypeValue,
	        }
	    }
	case 129:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1510
		{
	        ASNVAL.TypeValue = MAP {
	            "selectionType": ASNDollar[1].TypeValue,
	        }
	    }
	case 130:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1515
		{
	        ASNVAL.TypeValue = MAP {
	            "typeFromObject": ASNDollar[1].TypeValue,
	        }
	    }
	case 131:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1520
		{
	        ASNVAL.TypeValue = MAP {
	            "valueSetFromObjects": ASNDollar[1].TypeValue,
	        }
	    }
	case 132:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1535
		{
	        ASNVAL.TypeValue = MAP {
	            "externalTypeReference": ASNDollar[1].TypeValue,
	        }
	    }
	case 133:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1540
		{
	        ASNVAL.TypeValue = MAP {
	            "typeReference": ASNDollar[1].TypeValue,
	        }
	    }
	case 134:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1545
		{
	        ASNVAL.TypeValue = MAP {
	            "parameterizedType": ASNDollar[1].TypeValue,
	        }
	    }
	case 135:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1550
		{
	        ASNVAL.TypeValue = MAP {
	            "parameterizedValueSetType": ASNDollar[1].TypeValue,
	        }
	    }
	case 136:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:1564
		{
	        ASNVAL.TypeValue = MAP {
	            "moduleReference": ASNDollar[1].TypeValue,
	            "typeReference":   ASNDollar[2].TypeToken,
	        }
	    }
	case 137:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:1578
		{
	        ASNVAL.TypeValue = MAP {
	            "simpleDefinedType":   ASNDollar[1].TypeValue,
	            "actualParameterList": ASNDollar[2].TypeValue,
	        }
	    }
	case 138:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:1592
		{
	        ASNVAL.TypeValue = MAP {
	            "simpleDefinedType":   ASNDollar[1].TypeValue,
	            "actualParameterList": ASNDollar[2].TypeValue,
	        }
	    }
	case 139:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1606
		{
	        ASNVAL.TypeValue = MAP {
	            "externalTypeReference": ASNDollar[1].TypeValue,
	        }
	    }
	case 140:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1611
		{
	        ASNVAL.TypeValue = MAP {
	            "typeReference": ASNDollar[1].TypeValue,
	        }
	    }
	case 141:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:1622
		{
	        ASNVAL.TypeValue = LIST {
	            ASNDollar[2].TypeValue,
	        }
	    }
	case 142:
		ASNDollar = ASNS[ASNpt-5:ASNpt+1]
//line asn.y:1627
		{
	        ASNVAL.TypeValue = ASNDollar[2].TypeValue
	        ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[4].TypeValue)
	    }
	case 143:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1643
		{
	        ASNVAL.TypeValue = MAP {
	            "type": ASNDollar[1].TypeValue,
	        }
	    }
	case 144:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1648
		{
	        ASNVAL.TypeValue = MAP {
	            "value": ASNDollar[1].TypeValue,
	        }
	    }
	case 145:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1653
		{
	        ASNVAL.TypeValue = MAP {
	            "valueSet": ASNDollar[1].TypeValue,
	        }
	    }
	case 146:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1658
		{
	        ASNVAL.TypeValue = MAP {
	            "definedObjectClass": ASNDollar[1].TypeValue,
	        }
	    }
	case 147:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1663
		{
	        ASNVAL.TypeValue = MAP {
	            "object": ASNDollar[1].TypeValue,
	        }
	    }
	case 148:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1668
		{
	        ASNVAL.TypeValue = MAP {
	            "objectSet": ASNDollar[1].TypeValue,
	        }
	    }
	case 149:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1696
		{
	        ASNVAL.TypeValue = STRING(UTF8String)
	    }
	case 150:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1699
		{
	        ASNVAL.TypeValue = STRING(GraphicString)
	    }
	case 151:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1702
		{
	        ASNVAL.TypeValue = STRING(NumericString)
	    }
	case 152:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1705
		{
	        ASNVAL.TypeValue = STRING(VisibleString)
	    }
	case 153:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1708
		{
	        ASNVAL.TypeValue = STRING(PrintableString)
	    }
	case 154:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1711
		{
	        ASNVAL.TypeValue = STRING(ISO646String)
	    }
	case 155:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1714
		{
	        ASNVAL.TypeValue = STRING(TeletexString)
	    }
	case 156:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1717
		{
	        ASNVAL.TypeValue = STRING(GeneralString)
	    }
	case 157:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1720
		{
	        ASNVAL.TypeValue = STRING(T61String)
	    }
	case 158:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1723
		{
	        ASNVAL.TypeValue = STRING(UniversalString)
	    }
	case 159:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1726
		{
	        ASNVAL.TypeValue = STRING(VideotexString)
	    }
	case 160:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1729
		{
	        ASNVAL.TypeValue = STRING(BMPString)
	    }
	case 161:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1732
		{
	        ASNVAL.TypeValue = STRING(IA5String)
	    }
	case 162:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1735
		{
	        ASNVAL.TypeValue = STRING(GeneralizedTime)
	    }
	case 163:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1738
		{
	        ASNVAL.TypeValue = STRING(UTCTime)
	    }
	case 164:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1741
		{
	        ASNVAL.TypeValue = STRING(ObjectDescriptor)
	    }
	case 165:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:1751
		{
	        ASNVAL.TypeValue = MAP {
	            "identifier": ASNDollar[1].TypeValue,
	            "typename":   ASNDollar[3].TypeValue,
	        }
	    }
	case 166:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:1764
		{
	        ASNVAL.TypeValue = MAP {
	            "referencedObjects": ASNDollar[1].TypeValue,
	            "fieldName":         ASNDollar[2].TypeToken,
	        }
	    }
	case 167:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1777
		{
	        ASNVAL.TypeValue = MAP {
	            "definedObject": ASNDollar[1].TypeValue,
	        }
	    }
	case 168:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1782
		{
	        ASNVAL.TypeValue = MAP {
	            "parameterizedObject": ASNDollar[1].TypeValue,
	        }
	    }
	case 169:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1787
		{
	        ASNVAL.TypeValue = MAP {
	            "definedObjectSet": ASNDollar[1].TypeValue,
	        }
	    }
	case 170:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1792
		{
	        ASNVAL.TypeValue = MAP {
	            "parameterizedObjectSet": ASNDollar[1].TypeValue,
	        }
	    }
	case 171:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1804
		{
	        ASNVAL.TypeValue = MAP {
	            "externalObjectReference": ASNDollar[1].TypeValue,
	        }
	    }
	case 172:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1809
		{
	        ASNVAL.TypeValue = MAP {
	            "objectReference": ASNDollar[1].TypeValue,
	        }
	    }
	case 173:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:1821
		{
	        ASNVAL.TypeValue = MAP {
	            "moduleReference": ASNDollar[1].TypeValue,
	            "objectReference": ASNDollar[3].TypeValue,
	        }
	    }
	case 174:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:1834
		{
	        ASNVAL.TypeValue = MAP {
	            "definedObject":       ASNDollar[1].TypeValue,
	            "actualParameterList": ASNDollar[2].TypeValue,
	        }
	    }
	case 175:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1847
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 176:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1850
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 177:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:1860
		{
	        ASNVAL.TypeValue = MAP {
	            "moduleReference":    ASNDollar[1].TypeValue,
	            "objectSetReference": ASNDollar[3].TypeValue,
	        }
	    }
	case 178:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:1873
		{
	        ASNVAL.TypeValue = MAP {
	            "definedObjectSet":    ASNDollar[1].TypeValue,
	            "actualParameterList": ASNDollar[2].TypeValue,
	        }
	    }
	case 179:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1886
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 180:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1897
		{
	        ASNVAL.TypeValue = LIST {
	            ASNDollar[1].TypeValue,
	        }
	    }
	case 181:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:1902
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	        ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
	     }
	case 182:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1917
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 183:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:1927
		{
	        ASNVAL.TypeValue = MAP {
	            "referencedObjects": ASNDollar[1].TypeValue,
	            "fieldname":         ASNDollar[3].TypeValue,
	        }
	    }
	case 184:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:1941
		{
	        ASNVAL.TypeValue = MAP {
	            "typename":   ASNDollar[1].TypeValue,
	            "constraint": ASNDollar[2].TypeValue,
	        }
	    }
	case 185:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1947
		{
	        ASNVAL.TypeValue = MAP {
	            "typename":   ASNDollar[1].TypeValue,
	        }
	    }
	case 186:
		ASNDollar = ASNS[ASNpt-4:ASNpt+1]
//line asn.y:1959
		{
	        ASNVAL.TypeValue = MAP {
	            "constraintSpec": ASNDollar[2].TypeValue,
	            "exceptionSpec":  ASNDollar[3].TypeValue,
	        }
	    }
	case 187:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1973
		{
	        ASNVAL.TypeValue = MAP {
	            "subtypeConstraint": ASNDollar[1].TypeValue,
	        }
	    }
	case 188:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1978
		{
	        ASNVAL.TypeValue = MAP {
	            "generalConstraint": ASNDollar[1].TypeValue,
	        }
	    }
	case 189:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:1990
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 190:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2002
		{
	        ASNVAL.TypeValue = MAP {
	            "rootElementSetSpec": ASNDollar[1].TypeValue,
	        }
	    }
	case 191:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:2007
		{
	        ASNVAL.TypeValue = MAP {
	            "rootElementSetSpec": ASNDollar[1].TypeValue,
	        }
	    }
	case 192:
		ASNDollar = ASNS[ASNpt-5:ASNpt+1]
//line asn.y:2012
		{
	        ASNVAL.TypeValue = MAP {
	            "rootElementSetSpec":       ASNDollar[1].TypeValue,
	            "additionalElementSetSpec": ASNDollar[2].TypeToken,
	        }
	    }
	case 193:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2025
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 194:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2035
		{
	        ASNVAL.TypeValue = nil
	    }
	case 195:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2046
		{
	        ASNVAL.TypeValue = MAP {
	            "unions": ASNDollar[1].TypeValue,
	        }
	    }
	case 196:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:2051
		{
	        ASNVAL.TypeValue = MAP {
	            "exclusions": ASNDollar[1].TypeString,
	        }
	    }
	case 197:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2064
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 198:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:2067
		{
	        ASNVAL.TypeValue = MAP {
	            "unions":        ASNDollar[1].TypeValue,
	            "intersections": ASNDollar[3].TypeValue,
	        }
	    }
	case 199:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2081
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 200:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:2084
		{
	        ASNVAL.TypeValue = MAP {
	            "intersections":        ASNDollar[1].TypeValue,
	            "intersectionElements": ASNDollar[2].TypeValue,
	        }
	    }
	case 201:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2097
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 202:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:2100
		{
	        ASNVAL.TypeValue = MAP {
	            "elements":   ASNDollar[1].TypeValue,
	            "exclusions": ASNDollar[2].TypeValue,
	        }
	    }
	case 203:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2115
		{
	        ASNVAL.TypeValue = MAP {
	            "subtypeElements": ASNDollar[1].TypeValue,
	        }
	    }
	case 204:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2120
		{
	        ASNVAL.TypeValue = MAP {
	            "objectSetElements": ASNDollar[1].TypeValue,
	        }
	    }
	case 205:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:2125
		{
	        ASNVAL.TypeValue = MAP {
	            "elementSetSpec": ASNDollar[1].TypeToken,
	        }
	    }
	case 206:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2137
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 207:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2158
		{
	        ASNVAL.TypeValue = MAP {
	            "singleValue": ASNDollar[1].TypeValue,
	        }
	    }
	case 208:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2163
		{
	        ASNVAL.TypeValue = MAP {
	            "containedSubtype": ASNDollar[1].TypeValue,
	        }
	    }
	case 209:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2168
		{
	        ASNVAL.TypeValue = MAP {
	            "valueRange": ASNDollar[1].TypeValue,
	        }
	    }
	case 210:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2173
		{
	        ASNVAL.TypeValue = MAP {
	            "permittedAlphabet": ASNDollar[1].TypeValue,
	        }
	    }
	case 211:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2178
		{
	        ASNVAL.TypeValue = MAP {
	            "sizeConstraint": ASNDollar[1].TypeValue,
	        }
	    }
	case 212:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2183
		{
	        ASNVAL.TypeValue = MAP {
	            "typeConstraint": ASNDollar[1].TypeValue,
	        }
	    }
	case 213:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2188
		{
	        ASNVAL.TypeValue = MAP {
	            "innerTypeConstraints": ASNDollar[1].TypeValue,
	        }
	    }
	case 214:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2193
		{
	        ASNVAL.TypeValue = MAP {
	            "patternConstraint": ASNDollar[1].TypeValue,
	        }
	    }
	case 215:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2198
		{
	        ASNVAL.TypeValue = MAP {
	            "propertySettings": ASNDollar[1].TypeValue,
	        }
	    }
	case 216:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2203
		{
	        ASNVAL.TypeValue = MAP {
	            "durationRange": ASNDollar[1].TypeValue,
	        }
	    }
	case 217:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2208
		{
	        ASNVAL.TypeValue = MAP {
	            "timePointRange": ASNDollar[1].TypeValue,
	        }
	    }
	case 218:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2213
		{
	        ASNVAL.TypeValue = MAP {
	            "recurrenceRange": ASNDollar[1].TypeValue,
	        }
	    }
	case 219:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2225
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 220:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:2235
		{
	        ASNVAL.TypeValue = ASNDollar[2].TypeValue
	    }
	case 221:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2245
		{
	        ASNVAL.TypeValue = "INCLUDES"
	    }
	case 222:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:2248
		{
	        ASNVAL.TypeValue = "INCLUDES"
	    }
	case 223:
		ASNDollar = ASNS[ASNpt-4:ASNpt+1]
//line asn.y:2258
		{
	        ASNVAL.TypeValue = MAP {
	            "lowerEndpoint": ASNDollar[1].TypeValue,
	            "upperEndpoint": ASNDollar[2].TypeToken,
	        }
	    }
	case 224:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2271
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 225:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:2274
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 226:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2284
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 227:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2287
		{
	        ASNVAL.TypeValue = "MIN"
	    }
	case 228:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2297
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 229:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:2300
		{
	        ASNVAL.TypeValue = ASNDollar[2].TypeValue
	    }
	case 230:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2310
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 231:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2313
		{
	        ASNVAL.TypeValue = "MAX"
	    }
	case 232:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:2323
		{
	        ASNVAL.TypeValue = ASNDollar[2].TypeValue
	    }
	case 233:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:2333
		{
	        ASNVAL.TypeValue = ASNDollar[2].TypeValue
	    }
	case 234:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2343
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 235:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:2354
		{
	        ASNVAL.TypeValue = ASNDollar[3].TypeValue
	    }
	case 236:
		ASNDollar = ASNS[ASNpt-7:ASNpt+1]
//line asn.y:2357
		{
	        ASNVAL.TypeValue = ASNDollar[3].TypeValue
	    }
	case 237:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2367
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 238:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2378
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 239:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2381
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 240:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:2391
		{
	        ASNVAL.TypeValue = ASNDollar[2].TypeValue
	    }
	case 241:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2402
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 242:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:2405
		{
	        ASNVAL.TypeValue = MAP {
	            "nameConstraint":  ASNDollar[1].TypeValue,
	            "typeConstraints": ASNDollar[3].TypeValue,
	        }
	    }
	case 243:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:2418
		{
	        ASNVAL.TypeValue = MAP {
	            "identifier":          ASNDollar[1].TypeValue,
	            "componentConstraint": ASNDollar[2].TypeValue,
	        }
	    }
	case 244:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:2431
		{
	        ASNVAL.TypeValue = MAP {
	            "valueConstraint":    ASNDollar[1].TypeValue,
	            "presenceConstraint": ASNDollar[2].TypeValue,
	        }
	    }
	case 245:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2444
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 246:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:2447
		{
	        ASNVAL.TypeValue = nil
	    }
	case 247:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2457
		{
	        ASNVAL.TypeValue = "PRESENT"
	    }
	case 248:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2460
		{
	        ASNVAL.TypeValue = "ABSENT"
	    }
	case 249:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2463
		{
	        ASNVAL.TypeValue = "OPTIONAL"
	    }
	case 250:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:2466
		{
	        ASNVAL.TypeValue = nil
	    }
	case 251:
		ASNDollar = ASNS[ASNpt-5:ASNpt+1]
//line asn.y:2476
		{
	        ASNVAL.TypeValue = ASNDollar[4].TypeValue
	    }
	case 252:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:2486
		{
	        ASNVAL.TypeValue = ASNDollar[2].TypeValue
	    }
	case 253:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:2496
		{
	        ASNVAL.TypeValue = ASNDollar[2].TypeValue
	    }
	case 254:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2506
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 255:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2516
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 256:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2526
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 257:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2539
		{
	        ASNVAL.TypeValue = MAP {
	            "object": ASNDollar[1].TypeValue,
	        }
	    }
	case 258:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2544
		{
	        ASNVAL.TypeValue = MAP {
	            "definedObjectSet": ASNDollar[1].TypeValue,
	        }
	    }
	case 259:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2549
		{
	        ASNVAL.TypeValue = MAP {
	            "objectSetFromObjects": ASNDollar[1].TypeValue,
	        }
	    }
	case 260:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2554
		{
	        ASNVAL.TypeValue = MAP {
	            "parameterizedObjectSet": ASNDollar[1].TypeValue,
	        }
	    }
	case 261:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:2566
		{
	        ASNVAL.TypeValue = MAP {
	            "referencedObjects": ASNDollar[1].TypeValue,
	            "fieldName":         ASNDollar[2].TypeToken,
	        }
	    }
	case 262:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2579
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 263:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2589
		{
	        ASNVAL.TypeValue = "INTERSECTION"
	    }
	case 264:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2592
		{
	        ASNVAL.TypeValue = "INTERSECTION"
	    }
	case 265:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2602
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 266:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2612
		{
	        ASNVAL.TypeValue = "UNION"
	    }
	case 267:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2615
		{
	        ASNVAL.TypeValue = "UNION"
	    }
	case 268:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:2625
		{
	        ASNVAL.TypeValue = ASNDollar[2].TypeValue
	    }
	case 269:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2637
		{
	        ASNVAL.TypeValue = MAP {
	            "userDefinedConstraint": ASNDollar[1].TypeValue,
	        }
	    }
	case 270:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2642
		{
	        ASNVAL.TypeValue = MAP {
	            "tableConstraint": ASNDollar[1].TypeValue,
	        }
	    }
	case 271:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2647
		{
	        ASNVAL.TypeValue = MAP {
	            "contentsConstraint": ASNDollar[1].TypeValue,
	        }
	    }
	case 272:
		ASNDollar = ASNS[ASNpt-5:ASNpt+1]
//line asn.y:2659
		{
	        ASNVAL.TypeValue = ASNDollar[4].TypeValue
	    }
	case 273:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2671
		{
	        ASNVAL.TypeValue = LIST {
	            ASNDollar[1].TypeValue,
	        }
	    }
	case 274:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:2676
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	        ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
	    }
	case 275:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:2680
		{
	        ASNVAL.TypeValue = nil
	    }
	case 276:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:2694
		{
	        ASNVAL.TypeValue = MAP {
	            "governor": ASNDollar[1].TypeValue,
	            "value":    ASNDollar[3].TypeValue,
	        }
	    }
	case 277:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:2700
		{
	        ASNVAL.TypeValue = MAP {
	            "governor": ASNDollar[1].TypeValue,
	            "object":   ASNDollar[3].TypeValue,
	        }
	    }
	case 278:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2706
		{
	        ASNVAL.TypeValue = MAP {
	            "definedObjectSet": ASNDollar[1].TypeValue,
	        }
	    }
	case 279:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2711
		{
	        ASNVAL.TypeValue = MAP {
	            "type": ASNDollar[1].TypeValue,
	        }
	    }
	case 280:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2716
		{
	        ASNVAL.TypeValue = MAP {
	            "definedObjectClass": ASNDollar[1].TypeValue,
	        }
	    }
	case 281:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2728
		{
	        ASNVAL.TypeValue = MAP {
	            "typename": ASNDollar[1].TypeValue,
	        }
	    }
	case 282:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2733
		{
	        ASNVAL.TypeValue = MAP {
	            "definedObjectClass": ASNDollar[1].TypeValue,
	        }
	    }
	case 283:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2745
		{
	        ASNVAL.TypeValue = MAP{
	            "simpleTableConstraint": ASNDollar[1].TypeValue,
	        }
	    }
	case 284:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2750
		{
	        ASNVAL.TypeValue = MAP{
	            "componentRelationConstraint": ASNDollar[1].TypeValue,
	        }
	    }
	case 285:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2762
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 286:
		ASNDollar = ASNS[ASNpt-6:ASNpt+1]
//line asn.y:2773
		{
	        ASNVAL.TypeValue = MAP {
	            "definedObjectSet": ASNDollar[1].TypeToken,
	            "atNotations":      ASNDollar[2].TypeValue,
	        }
	    }
	case 287:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2787
		{
	        ASNVAL.TypeValue = LIST {
	            ASNDollar[1].TypeValue,
	        }
	    }
	case 288:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:2792
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	        ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
	    }
	case 289:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:2803
		{
	        ASNVAL.TypeValue = MAP {
	            "componentIdList": ASNDollar[2].TypeValue,
	        }
	    }
	case 290:
		ASNDollar = ASNS[ASNpt-4:ASNpt+1]
//line asn.y:2808
		{
	        ASNVAL.TypeValue = MAP {
	            "componentIdList": ASNDollar[4].TypeValue,
	        }
	    }
	case 291:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2820
		{
	        ASNVAL.TypeValue = LIST {
	            ASNDollar[1].TypeValue,
	        }
	    }
	case 292:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:2825
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	        ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
	    }
	case 293:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:2836
		{
	        ASNVAL.TypeValue = nil
	    }
	case 294:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:2839
		{
	        ASNVAL.TypeValue = nil
	    }
	case 295:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:2851
		{
	        ASNVAL.TypeValue = MAP {
	            "typename": ASNDollar[2].TypeValue,
	        }
	    }
	case 296:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:2856
		{
	        ASNVAL.TypeValue = MAP {
	            "value": ASNDollar[3].TypeValue,
	        }
	    }
	case 297:
		ASNDollar = ASNS[ASNpt-5:ASNpt+1]
//line asn.y:2861
		{
	        ASNVAL.TypeValue = MAP {
	            "typename":  ASNDollar[2].TypeValue,
	            "value": ASNDollar[5].TypeValue,
	        }
	    }
	case 298:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:2874
		{
	        ASNVAL.TypeValue = MAP {
	            "exceptionIdentification": ASNDollar[1].TypeToken,
	        }
	    }
	case 299:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:2879
		{
	        ASNVAL.TypeValue = nil
	    }
	case 300:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2891
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 301:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:2894
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 302:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:2897
		{
	        ASNVAL.TypeValue = MAP {
	            "typename": ASNDollar[1].TypeValue,
	            "value":    ASNDollar[3].TypeValue,
	        }
	    }
	case 303:
		ASNDollar = ASNS[ASNpt-4:ASNpt+1]
//line asn.y:2917
		{
	        ASNVAL.TypeValue = MAP {
	            "setOrSequence": "SET",
	            "constraint":    ASNDollar[2].TypeValue,
	            "typename":      ASNDollar[4].TypeValue,
	        }
	    }
	case 304:
		ASNDollar = ASNS[ASNpt-4:ASNpt+1]
//line asn.y:2924
		{
	        ASNVAL.TypeValue = MAP {
	            "setOrSequence":  "SET",
	            "sizeConstraint": ASNDollar[2].TypeValue,
	            "typename":       ASNDollar[4].TypeValue,
	        }
	    }
	case 305:
		ASNDollar = ASNS[ASNpt-4:ASNpt+1]
//line asn.y:2931
		{
	        ASNVAL.TypeValue = MAP {
	            "setOrSequence": "SEQUENCE",
	            "constraint":    ASNDollar[2].TypeValue,
	            "typename":      ASNDollar[4].TypeValue,
	        }
	    }
	case 306:
		ASNDollar = ASNS[ASNpt-4:ASNpt+1]
//line asn.y:2938
		{
	        ASNVAL.TypeValue = MAP {
	            "setOrSequence":  "SEQUENCE",
	            "sizeConstraint": ASNDollar[2].TypeValue,
	            "typename":       ASNDollar[4].TypeValue,
	        }
	    }
	case 307:
		ASNDollar = ASNS[ASNpt-4:ASNpt+1]
//line asn.y:2945
		{
	        ASNVAL.TypeValue = MAP {
	            "setOrSequence": "SET",
	            "constraint":    ASNDollar[2].TypeValue,
	            "namedType":     ASNDollar[4].TypeValue,
	        }
	    }
	case 308:
		ASNDollar = ASNS[ASNpt-4:ASNpt+1]
//line asn.y:2952
		{
	        ASNVAL.TypeValue = MAP {
	            "setOrSequence":  "SET",
	            "sizeConstraint": ASNDollar[2].TypeValue,
	            "namedType":      ASNDollar[4].TypeValue,
	        }
	    }
	case 309:
		ASNDollar = ASNS[ASNpt-4:ASNpt+1]
//line asn.y:2959
		{
	        ASNVAL.TypeValue = MAP {
	            "setOrSequence": "SEQUENCE",
	            "constraint":    ASNDollar[2].TypeValue,
	            "namedType":     ASNDollar[4].TypeValue,
	        }
	    }
	case 310:
		ASNDollar = ASNS[ASNpt-4:ASNpt+1]
//line asn.y:2966
		{
	        ASNVAL.TypeValue = MAP {
	            "setOrSequence":  "SEQUENCE",
	            "sizeConstraint": ASNDollar[2].TypeValue,
	            "namedType":      ASNDollar[4].TypeValue,
	        }
	    }
	case 311:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:2980
		{
	        ASNVAL.TypeValue = MAP {
	            "identifier": ASNDollar[1].TypeValue,
	            "typename":   ASNDollar[2].TypeValue,
	        }
	    }
	case 312:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:2994
		{
	        ASNVAL.TypeValue = MAP {
	            "type": "BIT_STRING",
	        }
	    }
	case 313:
		ASNDollar = ASNS[ASNpt-5:ASNpt+1]
//line asn.y:2999
		{
	        ASNVAL.TypeValue = MAP {
	            "type":      "BIT_STRING",
	            "namedBits": ASNDollar[4].TypeValue,
	        }
	    }
	case 314:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3013
		{
	        ASNVAL.TypeValue = LIST {
	            ASNDollar[1].TypeValue,
	        }
	    }
	case 315:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:3018
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	        ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
	    }
	case 316:
		ASNDollar = ASNS[ASNpt-4:ASNpt+1]
//line asn.y:3030
		{
	        ASNVAL.TypeValue = MAP {
	            "identifier": ASNDollar[1].TypeValue,
	            "number":     ASNDollar[3].TypeValue,
	        }
	    }
	case 317:
		ASNDollar = ASNS[ASNpt-4:ASNpt+1]
//line asn.y:3036
		{
	        ASNVAL.TypeValue = MAP {
	            "identifier":   ASNDollar[1].TypeValue,
	            "definedValue": ASNDollar[3].TypeValue,
	        }
	    }
	case 318:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3049
		{
	        ASNVAL.TypeValue = MAP {
	            "type": "BOOLEAN",
	        }
	    }
	case 319:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3062
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 320:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3065
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 321:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3087
		{
	        ASNVAL.TypeValue = MAP {
	            "type": "BMP_STRING",
	        }
	    }
	case 322:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3092
		{
	        ASNVAL.TypeValue = MAP {
	            "type": "GENERAL_STRING",
	        }
	    }
	case 323:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3097
		{
	        ASNVAL.TypeValue = MAP {
	            "type": "GRAPHIC_STRING",
	        }
	    }
	case 324:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3102
		{
	        ASNVAL.TypeValue = MAP {
	            "type": "IA5_STRING",
	        }
	    }
	case 325:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3107
		{
	        ASNVAL.TypeValue = MAP {
	            "type": "ISO646_STRING",
	        }
	    }
	case 326:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3112
		{
	        ASNVAL.TypeValue = MAP {
	            "type": "NUMERIC_STRING",
	        }
	    }
	case 327:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3117
		{
	        ASNVAL.TypeValue = MAP {
	            "type": "PRINTABLE_STRING",
	        }
	    }
	case 328:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3122
		{
	        ASNVAL.TypeValue = MAP {
	            "type": "TELETEX_STRING",
	        }
	    }
	case 329:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3127
		{
	        ASNVAL.TypeValue = MAP {
	            "type": "T61_STRING",
	        }
	    }
	case 330:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3132
		{
	        ASNVAL.TypeValue = MAP {
	            "type": "UNIVERSAL_STRING",
	        }
	    }
	case 331:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3137
		{
	        ASNVAL.TypeValue = MAP {
	            "type": "UTF8_STRING",
	        }
	    }
	case 332:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3142
		{
	        ASNVAL.TypeValue = MAP {
	            "type": "VIDEO_TEX_STRING",
	        }
	    }
	case 333:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3147
		{
	        ASNVAL.TypeValue = MAP {
	            "type": "VISIBLE_STRING",
	        }
	    }
	case 334:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:3159
		{
	        ASNVAL.TypeValue = MAP {
	            "type": "CHARACTER_STRING",
	        }
	    }
	case 335:
		ASNDollar = ASNS[ASNpt-4:ASNpt+1]
//line asn.y:3171
		{
	        ASNVAL.TypeValue = MAP {
	            "type":           "CHOICE",
	            "alternateTypes": ASNDollar[3].TypeValue,
	        }
	    }
	case 336:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3185
		{
	        ASNVAL.TypeValue = MAP {
	            "alternativeTypes": ASNDollar[1].TypeValue,
	        }
	    }
	case 337:
		ASNDollar = ASNS[ASNpt-5:ASNpt+1]
//line asn.y:3190
		{
	        ASNVAL.TypeValue = MAP {
	            "alternativeTypes":              ASNDollar[1].TypeValue,
	            "extensionAndException":         ASNDollar[3].TypeValue,
	            "extensionAdditionAlternatives": ASNDollar[4].TypeValue,
	        }
	    }
	case 338:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3204
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 339:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3215
		{
	        ASNVAL.TypeValue = LIST {
	            ASNDollar[1].TypeValue,
	        }
	    }
	case 340:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:3220
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	        ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
	    }
	case 341:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3232
		{
	        ASNVAL.TypeValue = nil
	    }
	case 342:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:3235
		{
	        ASNVAL.TypeValue = ASNDollar[2].TypeValue
	    }
	case 343:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:3246
		{
	        ASNVAL.TypeValue = ASNDollar[2].TypeValue
	    }
	case 344:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:3249
		{
	        ASNVAL.TypeValue = nil
	    }
	case 345:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3260
		{
	        ASNVAL.TypeValue = LIST {
	            ASNDollar[1].TypeValue,
	        }
	    }
	case 346:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:3265
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	        ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
	    }
	case 347:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3277
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 348:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3280
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 349:
		ASNDollar = ASNS[ASNpt-6:ASNpt+1]
//line asn.y:3290
		{
	        ASNVAL.TypeValue = MAP {
	            "version":          ASNDollar[3].TypeValue,
	            "alternativeTypes": ASNDollar[4].TypeValue,
	        }
	    }
	case 350:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:3303
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 351:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:3306
		{
	        ASNVAL.TypeValue = nil
	    }
	case 352:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:3317
		{
	        ASNVAL.TypeValue = true
	    }
	case 353:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:3320
		{
	        ASNVAL.TypeValue = nil
	    }
	case 354:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3330
		{
	        ASNVAL.TypeValue = MAP {
	            "type": "DATE",
	        }
	    }
	case 355:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3342
		{
	        ASNVAL.TypeValue = MAP {
	            "type": "DATE_TIME",
	        }
	    }
	case 356:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3354
		{
	        ASNVAL.TypeValue = MAP {
	            "type": "DURATION",
	        }
	    }
	case 357:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:3366
		{
	        ASNVAL.TypeValue = MAP {
	            "type": "EMBEDDED_PDV",
	        }
	    }
	case 358:
		ASNDollar = ASNS[ASNpt-4:ASNpt+1]
//line asn.y:3378
		{
	        ASNVAL.TypeValue = MAP {
	            "type":         "ENUMERATED",
	            "enumerations": ASNDollar[3].TypeValue,
	        }
	    }
	case 359:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3393
		{
	        ASNVAL.TypeValue = MAP {
	            "enumeration": ASNDollar[1].TypeValue,
	        }
	    }
	case 360:
		ASNDollar = ASNS[ASNpt-4:ASNpt+1]
//line asn.y:3398
		{
	        ASNVAL.TypeValue = MAP {
	            "enumeration": ASNDollar[1].TypeValue,
	            "exception":   ASNDollar[4].TypeValue,
	        }
	    }
	case 361:
		ASNDollar = ASNS[ASNpt-6:ASNpt+1]
//line asn.y:3404
		{
	        ASNVAL.TypeValue = MAP {
	            "enumeration":           ASNDollar[1].TypeValue,
	            "exception":             ASNDollar[4].TypeValue,
	            "additionalEnumeration": ASNDollar[6].TypeValue,
	        }
	    }
	case 362:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3418
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 363:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3428
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 364:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3439
		{
	        ASNVAL.TypeValue = LIST {
	            ASNDollar[1].TypeValue,
	        }
	    }
	case 365:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:3444
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	        ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
	    }
	case 366:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3455
		{
	        ASNVAL.TypeValue = MAP {
	            "name": ASNDollar[1].TypeValue,
	        }
	    }
	case 367:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3460
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 368:
		ASNDollar = ASNS[ASNpt-4:ASNpt+1]
//line asn.y:3472
		{
	        ASNVAL.TypeValue = MAP {
	            "name":   ASNDollar[1].TypeValue,
	            "number": ASNDollar[3].TypeValue,
	        }
	    }
	case 369:
		ASNDollar = ASNS[ASNpt-4:ASNpt+1]
//line asn.y:3478
		{
	        ASNVAL.TypeValue = MAP {
	            "name":         ASNDollar[1].TypeValue,
	            "definedValue": ASNDollar[3].TypeValue,
	        }
	    }
	case 370:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3491
		{
	        ASNVAL.TypeValue = MAP {
	            "type": "EXTERNAL",
	        }
	    }
	case 371:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:3503
		{
	        ASNVAL.TypeValue = MAP {
	            "type":               "INSTANCE_OF",
	            "definedObjectClass": ASNDollar[3].TypeValue,
	        }
	    }
	case 372:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3517
		{
	        ASNVAL.TypeValue = MAP {
	            "type": "INTEGER",
	        }
	    }
	case 373:
		ASNDollar = ASNS[ASNpt-4:ASNpt+1]
//line asn.y:3522
		{
	        ASNVAL.TypeValue = MAP {
	            "type":    "INTEGER",
	            "numbers": ASNDollar[3].TypeValue,
	        }
	    }
	case 374:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3536
		{
	        ASNVAL.TypeValue = LIST {
	            ASNDollar[1].TypeValue,
	        }
	    }
	case 375:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:3541
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	        ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
	    }
	case 376:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3552
		{
	        ASNVAL.TypeValue = MAP {
	            "type": "OID_IRI",
	        }
	    }
	case 377:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3564
		{
	        ASNVAL.TypeValue = MAP {
	            "type": "NULL",
	        }
	    }
	case 378:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:3576
		{
	        ASNVAL.TypeValue = MAP {
	            "type":               "OBJECT_FIELD",
	            "definedObjectClass": ASNDollar[1].TypeValue,
	            "fieldName":          ASNDollar[3].TypeValue,
	        }
	    }
	case 379:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:3590
		{
	        ASNVAL.TypeValue = MAP {
	            "type": "OBJECT_IDENTIFIER",
	        }
	    }
	case 380:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:3602
		{
	        ASNVAL.TypeValue = MAP {
	            "type": "OCTET_STRING",
	        }
	    }
	case 381:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3614
		{
	        ASNVAL.TypeValue = MAP {
	            "type": "REAL",
	        }
	    }
	case 382:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3626
		{
	        ASNVAL.TypeValue = MAP {
	            "type": "RELATIVE_OID_IRI",
	        }
	    }
	case 383:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3638
		{
	        ASNVAL.TypeValue = MAP {
	            "type": "RELATIVE_OID",
	        }
	    }
	case 384:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:3652
		{
	        ASNVAL.TypeValue = MAP {
	            "type": "SEQUENCE",
	        }
	    }
	case 385:
		ASNDollar = ASNS[ASNpt-9:ASNpt+1]
//line asn.y:3657
		{
	        ASNVAL.TypeValue = MAP {
	            "type":                  "SEQUENCE",
	            "extensionAndException": ASNDollar[3].TypeToken,
	        }
	    }
	case 386:
		ASNDollar = ASNS[ASNpt-14:ASNpt+1]
//line asn.y:3663
		{
	        ASNVAL.TypeValue = MAP {
	            "type":           "SEQUENCE",
	            "componentTypes": ASNDollar[3].TypeToken,
	        }
	    }
	case 387:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3680
		{
	        ASNVAL.TypeValue = MAP {
	            "rootComponentTypes":    ASNDollar[1].TypeValue,
	        }
	    }
	case 388:
		ASNDollar = ASNS[ASNpt-5:ASNpt+1]
//line asn.y:3685
		{
	        ASNVAL.TypeValue = MAP {
	            "extensionAndException": ASNDollar[3].TypeValue,
	            "extensionAdditions":    ASNDollar[4].TypeValue,
	            "rootComponentTypes":    ASNDollar[1].TypeValue,
	        }
	    }
	case 389:
		ASNDollar = ASNS[ASNpt-7:ASNpt+1]
//line asn.y:3692
		{
	        ASNVAL.TypeValue = MAP {
	            "extensionAndException": ASNDollar[3].TypeValue,
	            "extensionAdditions":    ASNDollar[4].TypeValue,
	            "rootComponentTypes":    append(ASNDollar[1].TypeValue.(LIST), ASNDollar[7].TypeValue.(LIST)),
	        }
	    }
	case 390:
		ASNDollar = ASNS[ASNpt-5:ASNpt+1]
//line asn.y:3699
		{
	        ASNVAL.TypeValue = MAP {
	            "extensionAndException": ASNDollar[1].TypeValue,
	            "extensionAdditions":    ASNDollar[2].TypeValue,
	            "rootComponentTypes":    ASNDollar[5].TypeValue,
	        }
	    }
	case 391:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:3706
		{
	        ASNVAL.TypeValue = MAP {
	            "extensionAndException": ASNDollar[1].TypeValue,
	            "extensionAdditions":    ASNDollar[2].TypeValue,
	        }
	    }
	case 392:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3719
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 393:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3730
		{
	        ASNVAL.TypeValue = LIST {
	            ASNDollar[1].TypeValue,
	        }
	    }
	case 394:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:3735
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	        ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
	    }
	case 395:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3749
		{
	        ASNVAL.TypeValue = MAP {
	            "type":     "COMPONENTS",
	            "namedType": ASNDollar[1].TypeValue,
	        }
	    }
	case 396:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:3755
		{
	        ASNVAL.TypeValue = MAP {
	            "type":     "COMPONENTS",
	            "namedType": ASNDollar[1].TypeValue,
	            "optional":  true,
	        }
	    }
	case 397:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:3762
		{
	        ASNVAL.TypeValue = MAP {
	            "type":         "COMPONENTS",
	            "namedType":    ASNDollar[1].TypeValue,
	            "defaultValue": ASNDollar[3].TypeValue,
	        }
	    }
	case 398:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:3769
		{
	        ASNVAL.TypeValue = MAP {
	            "type":     "COMPONENTS",
	            "typename": ASNDollar[3].TypeValue,
	        }
	    }
	case 399:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:3783
		{
	        ASNVAL.TypeValue = ASNDollar[2].TypeValue
	    }
	case 400:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:3786
		{
	        ASNVAL.TypeValue = nil
	    }
	case 401:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3797
		{
	        ASNVAL.TypeValue = LIST {
	            ASNDollar[1].TypeValue,
	        }
	    }
	case 402:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:3802
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	        ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
	    }
	case 403:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3814
		{
	        ASNVAL.TypeValue = MAP {
	            "componentType": ASNDollar[1].TypeValue,
	        }
	    }
	case 404:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3819
		{
	        ASNVAL.TypeValue = MAP {
	            "extensionAdditionGroup": ASNDollar[1].TypeValue,
	        }
	    }
	case 405:
		ASNDollar = ASNS[ASNpt-6:ASNpt+1]
//line asn.y:3831
		{
	        ASNVAL.TypeValue = MAP {
	            "version":        ASNDollar[3].TypeValue,
	            "componentTypes": ASNDollar[4].TypeValue,
	        }
	    }
	case 406:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:3844
		{
	        ASNVAL.TypeValue = true
	    }
	case 407:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:3855
		{
	        ASNVAL.TypeValue = MAP {
	            "type":     "SEQUENCE_OF",
	            "typename": ASNDollar[3].TypeValue,
	        }
	    }
	case 408:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:3861
		{
	        ASNVAL.TypeValue = MAP {
	            "type":      "SEQUENCE_OF",
	            "namedType": ASNDollar[3].TypeValue,
	        }
	    }
	case 409:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:3876
		{
	        ASNVAL.TypeValue = MAP {
	            "type": "SET",
	        }
	    }
	case 410:
		ASNDollar = ASNS[ASNpt-9:ASNpt+1]
//line asn.y:3881
		{
	        ASNVAL.TypeValue = MAP {
	            "type":                  "SET",
	            "extensionAndException": ASNDollar[3].TypeToken,
	        }
	    }
	case 411:
		ASNDollar = ASNS[ASNpt-14:ASNpt+1]
//line asn.y:3887
		{
	        ASNVAL.TypeValue = MAP {
	            "type":           "SET",
	            "componentTypes": ASNDollar[3].TypeToken,
	        }
	    }
	case 412:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:3901
		{
	        ASNVAL.TypeValue = MAP {
	            "type":     "SET_OF",
	            "typename": ASNDollar[3].TypeValue,
	        }
	    }
	case 413:
		ASNDollar = ASNS[ASNpt-7:ASNpt+1]
//line asn.y:3907
		{
	        ASNVAL.TypeValue = MAP {
	            "type":      "SET_OF",
	            "namedType": ASNDollar[3].TypeValue,
	        }
	    }
	case 414:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3920
		{
	        ASNVAL.TypeValue = MAP {
	            "type": "TIME",
	        }
	    }
	case 415:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3932
		{
	        ASNVAL.TypeValue = MAP {
	            "type": "TIME_OF_DAY",
	        }
	    }
	case 416:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3945
		{
	        ASNVAL.TypeValue = MAP {
	            "type":       "PREFIXED",
	            "taggedType": ASNDollar[1].TypeValue,
	        }
	    }
	case 417:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:3951
		{
	        ASNVAL.TypeValue = MAP {
	            "type":                 "PREFIXED",
	            "encodingPrefixedType": ASNDollar[1].TypeValue,
	        }
	    }
	case 418:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:3966
		{
	        ASNVAL.TypeValue = MAP {
	            "tag":      ASNDollar[1].TypeValue,
	            "typename": ASNDollar[2].TypeValue,
	        }
	    }
	case 419:
		ASNDollar = ASNS[ASNpt-6:ASNpt+1]
//line asn.y:3972
		{
	        ASNVAL.TypeValue = MAP {
	            "tag":      ASNDollar[1].TypeValue,
	            "typename": ASNDollar[2].TypeValue,
	            "implicit": true,
	        }
	    }
	case 420:
		ASNDollar = ASNS[ASNpt-10:ASNpt+1]
//line asn.y:3979
		{
	        ASNVAL.TypeValue = MAP {
	            "tag":      ASNDollar[1].TypeValue,
	            "typename": ASNDollar[2].TypeValue,
	            "explicit": true,
	        }
	    }
	case 421:
		ASNDollar = ASNS[ASNpt-5:ASNpt+1]
//line asn.y:3993
		{
	        ASNVAL.TypeValue = MAP {
	            "encodingReference": ASNDollar[2].TypeValue,
	            "class":             ASNDollar[3].TypeValue,
	            "classNumber":       ASNDollar[4].TypeValue,
	        }
	    }
	case 422:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:4008
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeString
	    }
	case 423:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4019
		{
	        ASNVAL.TypeValue = MAP {
	            "number":
	        }
	    }
	case 424:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:4026
		{
	        ASNVAL.TypeValue = nil
	    }
	case 425:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:4031
		{
	        ASNVAL.TypeValue = nil
	    }
	case 426:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4037
		{
	        ASNVAL.TypeValue = MAP {
	            "bitString": ASNDollar[1].TypeValue,
	        }
	    }
	case 427:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4042
		{
	        ASNVAL.TypeValue = MAP {
	            "boolean": ASNDollar[1].TypeValue,
	        }
	    }
	case 428:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4047
		{
	        ASNVAL.TypeValue = MAP {
	            "characterString": ASNDollar[1].TypeValue,
	        }
	    }
	case 429:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4052
		{
	        ASNVAL.TypeValue = MAP {
	            "choice": ASNDollar[1].TypeValue,
	        }
	    }
	case 430:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4057
		{
	        ASNVAL.TypeValue = MAP {
	            "embeddedPDV": ASNDollar[1].TypeValue,
	        }
	    }
	case 431:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4062
		{
	        ASNVAL.TypeValue = MAP {
	            "enumerated": ASNDollar[1].TypeValue,
	        }
	    }
	case 432:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4067
		{
	        ASNVAL.TypeValue = MAP {
	            "external": ASNDollar[1].TypeValue,
	        }
	    }
	case 433:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4072
		{
	        ASNVAL.TypeValue = MAP {
	            "instanceOf": ASNDollar[1].TypeValue,
	        }
	    }
	case 434:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4077
		{
	        ASNVAL.TypeValue = MAP {
	            "integer": ASNDollar[1].TypeValue,
	        }
	    }
	case 435:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4082
		{
	        ASNVAL.TypeValue = MAP {
	            "iri": ASNDollar[1].TypeValue,
	        }
	    }
	case 436:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4087
		{
	        ASNVAL.TypeValue = MAP {
	            "null": ASNDollar[1].TypeValue,
	        }
	    }
	case 437:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4092
		{
	        ASNVAL.TypeValue = MAP {
	            "objectIdentifier": ASNDollar[1].TypeValue,
	        }
	    }
	case 438:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4097
		{
	        ASNVAL.TypeValue = MAP {
	            "octetString": ASNDollar[1].TypeValue,
	        }
	    }
	case 439:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4102
		{
	        ASNVAL.TypeValue = MAP {
	            "real": ASNDollar[1].TypeValue,
	        }
	    }
	case 440:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4107
		{
	        ASNVAL.TypeValue = MAP {
	            "relativeIRI": ASNDollar[1].TypeValue,
	        }
	    }
	case 441:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4112
		{
	        ASNVAL.TypeValue = MAP {
	            "relativeOID": ASNDollar[1].TypeValue,
	        }
	    }
	case 442:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4117
		{
	        ASNVAL.TypeValue = MAP {
	            "sequence": ASNDollar[1].TypeValue,
	        }
	    }
	case 443:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4122
		{
	        ASNVAL.TypeValue = MAP {
	            "sequenceOf": ASNDollar[1].TypeValue,
	        }
	    }
	case 444:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4127
		{
	        ASNVAL.TypeValue = MAP {
	            "set": ASNDollar[1].TypeValue,
	        }
	    }
	case 445:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4132
		{
	        ASNVAL.TypeValue = MAP {
	            "setOf": ASNDollar[1].TypeValue,
	        }
	    }
	case 446:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4137
		{
	        ASNVAL.TypeValue = MAP {
	            "prefixed": ASNDollar[1].TypeValue,
	        }
	    }
	case 447:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4142
		{
	        ASNVAL.TypeValue = MAP {
	            "time": ASNDollar[1].TypeValue,
	        }
	    }
	case 448:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4149
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeString
	    }
	case 449:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4152
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeString
	    }
	case 450:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:4155
		{
	        ASNVAL.TypeValue = ASNDollar[2].TypeValue
	    }
	case 451:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:4158
		{
	        ASNVAL.TypeValue = nil
	    }
	case 452:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:4161
		{
	        ASNVAL.TypeValue = ASNDollar[2].TypeValue
	    }
	case 453:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4166
		{
	        ASNVAL.TypeValue = LIST {
	            ASNDollar[1].TypeValue,
	        }
	    }
	case 454:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:4171
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	        ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeToken)
	    }
	case 455:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4177
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 456:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4182
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 457:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4187
		{
	        ASNVAL.TypeValue = nil
	    }
	case 458:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4190
		{
	
	    }
	case 459:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4195
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeString
	    }
	case 460:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4198
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 461:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4201
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 462:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4204
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 463:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:4209
		{
	        ASNVAL.TypeValue = nil
	    }
	case 464:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4214
		{
	        ASNVAL.TypeValue = LIST{
	            ASNDollar[1].TypeValue,
	        }
	    }
	case 465:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:4219
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	        ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeToken)
	    }
	case 466:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4225
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeString
	    }
	case 467:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4228
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 468:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4231
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 469:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4234
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 470:
		ASNDollar = ASNS[ASNpt-9:ASNpt+1]
//line asn.y:4239
		{
	        ASNVAL.TypeValue = MAP {
	            "group": ASNDollar[2].TypeValue,
	            "plane": ASNDollar[4].TypeValue,
	            "row":   ASNDollar[6].TypeValue,
	            "cell":  ASNDollar[8].TypeValue,
	        }
	    }
	case 471:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4249
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 472:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4254
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 473:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4259
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 474:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4264
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 475:
		ASNDollar = ASNS[ASNpt-5:ASNpt+1]
//line asn.y:4269
		{
	        ASNVAL.TypeValue = MAP {
	            "tableColumn": ASNDollar[2].TypeValue,
	            "tableRow":    ASNDollar[4].TypeValue,
	        }
	    }
	case 476:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4277
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 477:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4282
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 478:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4287
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 479:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:4292
		{
	        ASNVAL.TypeValue = MAP {
	            "identifier": ASNDollar[1].TypeValue,
	            "value":      ASNDollar[2].TypeToken,
	        }
	    }
	case 480:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4300
		{
	        ASNVAL.TypeValue = nil
	    }
	case 481:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4305
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 482:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4310
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 483:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:4315
		{
	        ASNVAL.TypeValue = nil
	    }
	case 484:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4320
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 485:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4323
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 486:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4328
		{
	        ASNVAL.TypeValue = "NULL"
	    }
	case 487:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4334
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeString
	    }
	case 488:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4337
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeString
	    }
	case 489:
		ASNDollar = ASNS[ASNpt-4:ASNpt+1]
//line asn.y:4340
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeString
	    }
	case 490:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4345
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 491:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4348
		{
	        ASNVAL.TypeValue = nil
	    }
	case 492:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4353
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 493:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4356
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeValue
	    }
	case 494:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4361
		{
	        ASNVAL.TypeValue = nil
	    }
	case 495:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4364
		{
	        ASNVAL.TypeValue = nil
	    }
	case 496:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4367
		{
	        ASNVAL.TypeValue = nil
	    }
	case 497:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:4372
		{
	        ASNVAL.TypeValue = nil
	    }
	case 498:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:4377
		{
	        ASNVAL.TypeValue = nil
	    }
	case 499:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:4382
		{
	        ASNVAL.TypeValue = nil
	    }
	case 500:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4387
		{
	        ASNVAL.TypeValue = nil
	    }
	case 501:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:4390
		{
	        ASNVAL.TypeValue = nil
	    }
	case 502:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4395
		{
	        ASNVAL.TypeValue = nil
	    }
	case 503:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4398
		{
	        ASNVAL.TypeValue = nil
	    }
	case 504:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4401
		{
	        ASNVAL.TypeValue = nil
	    }
	case 505:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:4406
		{
	        ASNVAL.TypeValue = nil
	    }
	case 506:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:4411
		{
	        ASNVAL.TypeValue = nil
	    }
	case 507:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:4416
		{
	        ASNVAL.TypeValue = nil
	    }
	case 508:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:4421
		{
	        ASNVAL.TypeValue = nil
	    }
	case 509:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:4426
		{
	        ASNVAL.TypeValue = nil
	    }
	case 510:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:4431
		{
	        ASNVAL.TypeValue = nil
	    }
	case 511:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:4436
		{
	        ASNVAL.TypeValue = nil
	    }
	case 512:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:4441
		{
	        ASNVAL.TypeValue = nil
	    }
	case 513:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:4446
		{
	        ASNVAL.TypeValue = nil
	    }
	case 514:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:4451
		{
	        ASNVAL.TypeValue = nil
	    }
	case 515:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:4456
		{
	        ASNVAL.TypeValue = nil
	    }
	case 516:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:4461
		{
	        ASNVAL.TypeValue = nil
	    }
	case 517:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:4466
		{
	        ASNVAL.TypeValue = nil
	    }
	case 518:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:4471
		{
	        ASNVAL.TypeValue = nil
	    }
	case 519:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:4476
		{
	        ASNVAL.TypeValue = nil
	    }
	case 520:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:4481
		{
	        ASNVAL.TypeValue = nil
	    }
	case 521:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:4486
		{
	        ASNVAL.TypeValue = nil
	    }
	case 522:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:4491
		{
	        ASNVAL.TypeValue = nil
	    }
	case 523:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:4496
		{
	        ASNVAL.TypeValue = nil
	    }
	case 524:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:4501
		{
	        ASNVAL.TypeValue = nil
	    }
	case 525:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4506
		{
	        ASNVAL.TypeValue = MAP {
	            "type":  "EXTERNAL_VALUE",
	            "value": ASNDollar[1].TypeValue,
	        }
	    }
	case 526:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4512
		{
	        ASNVAL.TypeValue = MAP {
	            "type":  "STRING_VALUE",
	            "value": ASNDollar[1].TypeValue,
	        }
	    }
	case 527:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4518
		{
	        ASNVAL.TypeValue = MAP {
	            "type":  "NUMBER_VALUE",
	            "value": ASNDollar[1].TypeValue,
	        }
	    }
	case 528:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4524
		{
	        ASNVAL.TypeValue = MAP {
	            "type":  "PARAMETERIZED_VALUE",
	            "value": ASNDollar[1].TypeValue,
	        }
	    }
	case 529:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:4532
		{
	        ASNVAL.TypeValue = MAP {
	            "module": ASNDollar[1].TypeValue,
	            "value":  ASNDollar[3].TypeValue,
	        }
	    }
	case 530:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:4540
		{
	        ASNVAL.TypeValue = nil
	    }
	case 531:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:4545
		{
	        ASNVAL.TypeValue = nil
	    }
	case 532:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:4550
		{
	        ASNVAL.TypeValue = nil
	    }
	case 533:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4555
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeString
	    }
	case 534:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4558
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeString
	    }
	case 535:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4563
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeString
	    }
	case 536:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4566
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeString
	    }
	case 537:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4571
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeNumber
	    }
	case 538:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:4574
		{
	        ASNVAL.TypeValue = (-1) * ASNDollar[2].TypeNumber
	    }
	case 539:
		ASNDollar = ASNS[ASNpt-1:ASNpt+1]
//line asn.y:4577
		{
	        ASNVAL.TypeValue = ASNDollar[1].TypeNumber
	    }
	case 540:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:4580
		{
	        ASNVAL.TypeValue = (-1) * ASNDollar[2].TypeNumber
	    }
	case 541:
		ASNDollar = ASNS[ASNpt-3:ASNpt+1]
//line asn.y:4585
		{
	        ASNVAL.TypeValue = "::="
	    }
	case 542:
		ASNDollar = ASNS[ASNpt-0:ASNpt+1]
//line asn.y:4590
		{
	        SkipBlock()
	    }
	case 543:
		ASNDollar = ASNS[ASNpt-2:ASNpt+1]
//line asn.y:4593
		{
	        ASNVAL.TypeValue = ASNDollar[2].TypeString
	    }
	}
	goto ASNstack /* stack new state and value */
}
