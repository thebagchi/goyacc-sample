// Code generated by goyacc -p ASN asn.y. DO NOT EDIT.

//line asn.y:1

package main

import __yyfmt__ "fmt"

//line asn.y:3
import (
	"bytes"
	"encoding/json"
	"fmt"
)

var code bytes.Buffer

func AddLine(line string) {
	code.WriteString(line)
	code.WriteByte('\n')
}

func JSON(obj interface{}) string {
	data, err := json.MarshalIndent(obj, "", "    ")
	if nil != err {
		fmt.Println("Error: ", err)
		return ""
	}
	return string(data)
}

func Print(line string) {
	fmt.Println(line)
}

func Join(values ...string) string {
	var buffer bytes.Buffer
	for _, value := range values {
		buffer.WriteString(value)
	}
	return buffer.String()
}

func SetResult(l ASNLexer, v VALUE) {
	l.(*Parser).Result = JSON(&v)
}

type Empty struct{}
type (
	VALUE   interface{}
	STRING  string
	NUMBER  float64
	BOOLEAN bool
	LIST    []VALUE
	MAP     map[string]VALUE
)

//line asn.y:50
type ASNSymType struct {
	yys         int
	TypeToken   struct{}
	TypeString  STRING
	TypeNumber  NUMBER
	TypeValue   VALUE
	TypeBoolean BOOLEAN
	TypeMap     MAP
	TypeList    LIST
}

const CURLY_START = 57346
const CURLY_END = 57347
const SQUARE_START = 57348
const SQUARE_END = 57349
const DOUBLE_QUOTE = 57350
const SINGLE_QUOTE = 57351
const COMMA = 57352
const COLON = 57353
const MINUS = 57354
const GREATER_THAN = 57355
const LESS_THAN = 57356
const DOT = 57357
const SLASH = 57358
const ROUND_START = 57359
const ROUND_END = 57360
const EQUALITY = 57361
const APOSTROPHE = 57362
const SPACE = 57363
const PIPE = 57364
const AT_THE_RATE = 57365
const EXCLAMATION = 57366
const CARET = 57367
const SEMI_COMMA = 57368
const ABSENT_SYMBOL = 57369
const ABSTRACTSYNTAX_SYMBOL = 57370
const ALL_SYMBOL = 57371
const APPLICATION_SYMBOL = 57372
const AUTOMATIC_SYMBOL = 57373
const BEGIN_SYMBOL = 57374
const BIT_SYMBOL = 57375
const BMPSTRING_SYMBOL = 57376
const BOOLEAN_SYMBOL = 57377
const BY_SYMBOL = 57378
const CHARACTER_SYMBOL = 57379
const CHOICE_SYMBOL = 57380
const CLASS_SYMBOL = 57381
const COMPONENT_SYMBOL = 57382
const COMPONENTS_SYMBOL = 57383
const CONSTRAINED_SYMBOL = 57384
const CONTAINING_SYMBOL = 57385
const DATE_SYMBOL = 57386
const DATETIME_SYMBOL = 57387
const DEFAULT_SYMBOL = 57388
const DEFINITIONS_SYMBOL = 57389
const DURATION_SYMBOL = 57390
const EMBEDDED_SYMBOL = 57391
const ENCODED_SYMBOL = 57392
const ENCODINGCONTROL_SYMBOL = 57393
const END_SYMBOL = 57394
const ENUMERATED_SYMBOL = 57395
const EXCEPT_SYMBOL = 57396
const EXPLICIT_SYMBOL = 57397
const EXPORTS_SYMBOL = 57398
const EXTENSIBILITY_SYMBOL = 57399
const EXTERNEL_SYMBOL = 57400
const FALSE_SYMBOL = 57401
const FROM_SYMBOL = 57402
const GENERALIZEDTIME_SYMBOL = 57403
const GENERALSTRING_SYMBOL = 57404
const GRAPHICSTRING_SYMBOL = 57405
const IA5STRING_SYMBOL = 57406
const IDENTIFIER_SYMBOL = 57407
const IMPLICIT_SYMBOL = 57408
const IMPLIED_SYMBOL = 57409
const IMPORTS_SYMBOL = 57410
const INCLUDES_SYMBOL = 57411
const INSTANCE_SYMBOL = 57412
const INSTRUCTIONS_SYMBOL = 57413
const INTEGER_SYMBOL = 57414
const INTERSECTION_SYMBOL = 57415
const ISO646STRING_SYMBOL = 57416
const MAX_SYMBOL = 57417
const MIN_SYMBOL = 57418
const MINUSINFINITY_SYMBOL = 57419
const NOTANUMBER_SYMBOL = 57420
const NULL_SYMBOL = 57421
const NUMERICSTRING_SYMBOL = 57422
const OBJECT_SYMBOL = 57423
const OBJECTDESCRIPTOR_SYMBOL = 57424
const OCTET_SYMBOL = 57425
const OF_SYMBOL = 57426
const OIDIRI_SYMBOL = 57427
const OPTIONAL_SYMBOL = 57428
const PATTERN_SYMBOL = 57429
const PDV_SYMBOL = 57430
const PLUSINFINITY_SYMBOL = 57431
const PRESENT_SYMBOL = 57432
const PRINTABLESTRING_SYMBOL = 57433
const PRIVATE_SYMBOL = 57434
const REAL_SYMBOL = 57435
const RELATIVEOID_SYMBOL = 57436
const RELATIVEOIDIRI_SYMBOL = 57437
const SEQUENCE_SYMBOL = 57438
const SET_SYMBOL = 57439
const SETTINGS_SYMBOL = 57440
const SIZE_SYMBOL = 57441
const STRING_SYMBOL = 57442
const SYNTAX_SYMBOL = 57443
const T61STRING_SYMBOL = 57444
const TAGS_SYMBOL = 57445
const TELETEXSTRING_SYMBOL = 57446
const TIME_SYMBOL = 57447
const TIMEOFDAY_SYMBOL = 57448
const TRUE_SYMBOL = 57449
const TYPEIDENTIFIER_SYMBOL = 57450
const UNION_SYMBOL = 57451
const UNIQUE_SYMBOL = 57452
const UNIVERSAL_SYMBOL = 57453
const UNIVERSALSTRING_SYMBOL = 57454
const UTCTIME_SYMBOL = 57455
const UTF8STRING_SYMBOL = 57456
const VIDEOTEXSTRING_SYMBOL = 57457
const VISIBLESTRING_SYMBOL = 57458
const WITH_SYMBOL = 57459
const ASSIGNMENT_SYMBOL = 57460
const TokenCapitalString = 57461
const TokenString = 57462
const TokenNumber = 57463
const TokenInteger = 57464
const TokenFloat = 57465
const TokenBoolean = 57466
const TokenBString = 57467
const TokenHString = 57468
const TokenCString = 57469

var ASNToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"CURLY_START",
	"CURLY_END",
	"SQUARE_START",
	"SQUARE_END",
	"DOUBLE_QUOTE",
	"SINGLE_QUOTE",
	"COMMA",
	"COLON",
	"MINUS",
	"GREATER_THAN",
	"LESS_THAN",
	"DOT",
	"SLASH",
	"ROUND_START",
	"ROUND_END",
	"EQUALITY",
	"APOSTROPHE",
	"SPACE",
	"PIPE",
	"AT_THE_RATE",
	"EXCLAMATION",
	"CARET",
	"SEMI_COMMA",
	"ABSENT_SYMBOL",
	"ABSTRACTSYNTAX_SYMBOL",
	"ALL_SYMBOL",
	"APPLICATION_SYMBOL",
	"AUTOMATIC_SYMBOL",
	"BEGIN_SYMBOL",
	"BIT_SYMBOL",
	"BMPSTRING_SYMBOL",
	"BOOLEAN_SYMBOL",
	"BY_SYMBOL",
	"CHARACTER_SYMBOL",
	"CHOICE_SYMBOL",
	"CLASS_SYMBOL",
	"COMPONENT_SYMBOL",
	"COMPONENTS_SYMBOL",
	"CONSTRAINED_SYMBOL",
	"CONTAINING_SYMBOL",
	"DATE_SYMBOL",
	"DATETIME_SYMBOL",
	"DEFAULT_SYMBOL",
	"DEFINITIONS_SYMBOL",
	"DURATION_SYMBOL",
	"EMBEDDED_SYMBOL",
	"ENCODED_SYMBOL",
	"ENCODINGCONTROL_SYMBOL",
	"END_SYMBOL",
	"ENUMERATED_SYMBOL",
	"EXCEPT_SYMBOL",
	"EXPLICIT_SYMBOL",
	"EXPORTS_SYMBOL",
	"EXTENSIBILITY_SYMBOL",
	"EXTERNEL_SYMBOL",
	"FALSE_SYMBOL",
	"FROM_SYMBOL",
	"GENERALIZEDTIME_SYMBOL",
	"GENERALSTRING_SYMBOL",
	"GRAPHICSTRING_SYMBOL",
	"IA5STRING_SYMBOL",
	"IDENTIFIER_SYMBOL",
	"IMPLICIT_SYMBOL",
	"IMPLIED_SYMBOL",
	"IMPORTS_SYMBOL",
	"INCLUDES_SYMBOL",
	"INSTANCE_SYMBOL",
	"INSTRUCTIONS_SYMBOL",
	"INTEGER_SYMBOL",
	"INTERSECTION_SYMBOL",
	"ISO646STRING_SYMBOL",
	"MAX_SYMBOL",
	"MIN_SYMBOL",
	"MINUSINFINITY_SYMBOL",
	"NOTANUMBER_SYMBOL",
	"NULL_SYMBOL",
	"NUMERICSTRING_SYMBOL",
	"OBJECT_SYMBOL",
	"OBJECTDESCRIPTOR_SYMBOL",
	"OCTET_SYMBOL",
	"OF_SYMBOL",
	"OIDIRI_SYMBOL",
	"OPTIONAL_SYMBOL",
	"PATTERN_SYMBOL",
	"PDV_SYMBOL",
	"PLUSINFINITY_SYMBOL",
	"PRESENT_SYMBOL",
	"PRINTABLESTRING_SYMBOL",
	"PRIVATE_SYMBOL",
	"REAL_SYMBOL",
	"RELATIVEOID_SYMBOL",
	"RELATIVEOIDIRI_SYMBOL",
	"SEQUENCE_SYMBOL",
	"SET_SYMBOL",
	"SETTINGS_SYMBOL",
	"SIZE_SYMBOL",
	"STRING_SYMBOL",
	"SYNTAX_SYMBOL",
	"T61STRING_SYMBOL",
	"TAGS_SYMBOL",
	"TELETEXSTRING_SYMBOL",
	"TIME_SYMBOL",
	"TIMEOFDAY_SYMBOL",
	"TRUE_SYMBOL",
	"TYPEIDENTIFIER_SYMBOL",
	"UNION_SYMBOL",
	"UNIQUE_SYMBOL",
	"UNIVERSAL_SYMBOL",
	"UNIVERSALSTRING_SYMBOL",
	"UTCTIME_SYMBOL",
	"UTF8STRING_SYMBOL",
	"VIDEOTEXSTRING_SYMBOL",
	"VISIBLESTRING_SYMBOL",
	"WITH_SYMBOL",
	"ASSIGNMENT_SYMBOL",
	"TokenCapitalString",
	"TokenString",
	"TokenNumber",
	"TokenInteger",
	"TokenFloat",
	"TokenBoolean",
	"TokenBString",
	"TokenHString",
	"TokenCString",
}

var ASNStatenames = [...]string{}

const ASNEofCode = 1
const ASNErrCode = 2
const ASNInitialStackSize = 16

//line asn.y:2509

//line yacctab:1
var ASNExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 45,
	119, 36,
	120, 36,
	-2, 32,
	-1, 138,
	4, 139,
	-2, 132,
	-1, 139,
	4, 140,
	-2, 133,
	-1, 179,
	10, 318,
	-2, 183,
	-1, 219,
	43, 274,
	-2, 235,
	-1, 241,
	15, 173,
	-2, 136,
	-1, 256,
	5, 133,
	-2, 140,
	-1, 269,
	10, 255,
	-2, 65,
	-1, 276,
	10, 241,
	-2, 66,
	-1, 277,
	10, 257,
	-2, 67,
	-1, 292,
	10, 241,
	-2, 66,
	-1, 293,
	10, 257,
	-2, 67,
	-1, 294,
	10, 252,
	-2, 245,
	-1, 295,
	10, 253,
	-2, 247,
	-1, 296,
	10, 254,
	-2, 248,
	-1, 334,
	4, 136,
	5, 136,
	15, 173,
	-2, 315,
}

const ASNPrivate = 57344

const ASNLast = 667

var ASNAct = [...]int{
	262, 250, 247, 245, 299, 264, 235, 265, 234, 261,
	5, 279, 5, 21, 278, 280, 21, 260, 257, 254,
	253, 248, 249, 251, 207, 42, 33, 34, 286, 270,
	23, 6, 7, 40, 220, 72, 23, 14, 39, 38,
	37, 62, 23, 286, 29, 50, 51, 28, 153, 321,
	43, 23, 252, 73, 60, 36, 51, 23, 50, 55,
	65, 65, 9, 93, 55, 70, 83, 83, 61, 65,
	303, 27, 48, 221, 45, 155, 149, 143, 154, 32,
	74, 23, 26, 83, 97, 30, 96, 91, 147, 231,
	310, 52, 23, 139, 144, 335, 157, 23, 340, 49,
	83, 44, 289, 65, 168, 146, 101, 237, 238, 227,
	139, 90, 41, 94, 92, 71, 150, 185, 148, 236,
	69, 266, 57, 170, 297, 23, 151, 156, 142, 152,
	145, 23, 259, 6, 7, 166, 102, 230, 20, 23,
	22, 24, 288, 6, 7, 177, 22, 24, 56, 6,
	7, 283, 22, 24, 99, 218, 219, 232, 6, 7,
	23, 22, 24, 53, 6, 7, 283, 22, 24, 188,
	266, 99, 301, 184, 226, 191, 176, 175, 187, 42,
	226, 178, 180, 225, 181, 241, 139, 246, 46, 256,
	258, 22, 24, 183, 240, 239, 100, 192, 336, 242,
	20, 309, 22, 24, 6, 7, 288, 22, 24, 176,
	175, 308, 267, 288, 173, 174, 176, 320, 343, 301,
	291, 277, 226, 287, 16, 269, 281, 285, 282, 284,
	276, 225, 6, 7, 68, 22, 24, 67, 6, 7,
	31, 22, 24, 306, 93, 337, 6, 7, 307, 22,
	24, 333, 304, 290, 169, 179, 293, 305, 95, 12,
	269, 281, 296, 282, 295, 292, 3, 6, 7, 8,
	22, 24, 268, 1, 222, 298, 302, 300, 244, 165,
	314, 312, 164, 313, 163, 315, 162, 316, 300, 226,
	317, 311, 226, 318, 319, 255, 270, 161, 225, 246,
	160, 256, 98, 23, 226, 324, 323, 322, 188, 330,
	332, 187, 328, 225, 285, 326, 284, 187, 298, 327,
	325, 54, 243, 158, 159, 153, 141, 6, 7, 140,
	334, 138, 137, 136, 221, 135, 134, 339, 133, 64,
	63, 342, 275, 229, 228, 331, 274, 341, 338, 329,
	231, 273, 155, 149, 143, 154, 272, 233, 271, 224,
	223, 217, 216, 215, 214, 147, 213, 212, 237, 238,
	227, 144, 211, 157, 210, 209, 208, 206, 205, 204,
	236, 203, 146, 202, 201, 200, 199, 198, 197, 220,
	196, 195, 194, 150, 193, 148, 190, 23, 230, 189,
	186, 132, 131, 151, 156, 142, 152, 145, 130, 129,
	6, 7, 128, 22, 24, 127, 218, 219, 294, 153,
	126, 125, 124, 123, 122, 121, 120, 119, 221, 118,
	117, 116, 114, 115, 113, 112, 111, 110, 109, 108,
	107, 106, 105, 104, 231, 103, 155, 149, 143, 154,
	89, 88, 87, 86, 85, 84, 172, 171, 82, 147,
	81, 80, 237, 238, 227, 144, 79, 157, 78, 77,
	76, 75, 263, 182, 236, 167, 146, 66, 59, 58,
	47, 35, 13, 255, 25, 19, 18, 150, 17, 148,
	15, 23, 230, 11, 10, 4, 2, 151, 156, 142,
	152, 145, 0, 0, 6, 7, 0, 22, 24, 0,
	218, 219, 232, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 221, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 231, 0,
	155, 149, 143, 154, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 0, 0, 237, 238, 227, 144,
	0, 157, 0, 0, 0, 0, 0, 0, 236, 0,
	146, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	153, 150, 0, 148, 0, 0, 230, 0, 0, 0,
	0, 151, 156, 142, 152, 145, 0, 0, 6, 7,
	0, 22, 24, 0, 218, 219, 232, 155, 149, 143,
	154, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	147, 0, 0, 0, 0, 0, 144, 0, 157, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 150, 0,
	148, 0, 0, 0, 0, 0, 0, 0, 151, 156,
	142, 152, 145, 0, 0, 6, 7,
}

var ASNPact = [...]int{
	-88, -1000, -88, -1000, 15, 255, -1000, -1000, -1000, -82,
	-1000, -1000, 18, 16, -27, 80, -1000, -1000, -1000, -1000,
	62, -1000, -1000, -96, -1000, -2, -63, -64, -65, -1000,
	-1000, -1000, 69, -1000, -1000, 168, -17, -1000, -1000, -1000,
	83, 42, 177, -1000, -1000, -10, 72, 8, 0, -23,
	-88, 208, -1000, 13, -1000, -84, -88, -88, 61, -88,
	-1000, 53, -1000, 254, -1000, -1000, 60, 58, -1000, 234,
	-1000, 8, -1000, -88, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 14, -1000, -1000, -1000, -1000, -1000, -1000,
	-88, -1000, -1000, -88, -88, 249, -1000, -1000, -1000, -1000,
	546, 168, 168, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 162,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 130, 251,
	251, -1000, 251, -1000, -1000, -1000, -1000, -1000, 113, -1000,
	-1000, -1000, -1000, 30, -1000, -88, 546, -88, -1000, 479,
	-1000, -1000, -1000, -1000, -1000, 127, -1000, 106, -1000, -1000,
	251, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	24, 30, -1000, -1000, -1000, 131, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 87, -1000, -1000, 248, 210, -1000,
	-1000, -1000, -1000, -1000, -1000, 291, 195, 119, 148, -1000,
	-1000, 155, -1000, -1000, -1000, -1000, -88, -1000, 27, 148,
	-1000, 247, 238, 201, 191, 85, 155, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 69, -1000, 30, -88,
	-1000, 385, 202, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	45, 148, -1000, 30, -1000, -88, -1000, 39, 69, 69,
	-1000, -1000, -1000, -1000, -1000, 155, -1000, -1000, -1000, 246,
	-88, -1000, 77, -1000, -1000, -1000, -1000, -1000, -1000, 188,
	-1000, 240, -1000, -1000, -1000, -1000, 69, -1000, 88, -1000,
	69, 213, -1000, -1000,
}

var ASNPgo = [...]int{
	0, 496, 266, 495, 494, 493, 490, 224, 488, 486,
	485, 484, 482, 481, 480, 72, 99, 479, 478, 54,
	477, 68, 41, 475, 473, 24, 18, 17, 472, 5,
	7, 53, 80, 4, 471, 470, 469, 468, 466, 461,
	460, 458, 22, 1, 23, 457, 456, 52, 20, 19,
	455, 454, 453, 452, 451, 450, 445, 443, 442, 441,
	440, 439, 438, 437, 436, 435, 434, 433, 432, 431,
	430, 429, 427, 426, 425, 424, 423, 422, 421, 420,
	415, 412, 409, 408, 402, 401, 400, 399, 396, 21,
	394, 392, 391, 390, 388, 387, 386, 385, 384, 383,
	381, 379, 378, 377, 376, 375, 374, 372, 367, 366,
	364, 363, 362, 361, 360, 359, 358, 14, 357, 8,
	6, 356, 11, 351, 349, 348, 347, 346, 345, 344,
	343, 342, 15, 115, 340, 339, 338, 336, 335, 333,
	332, 331, 329, 326, 324, 323, 322, 2, 321, 302,
	300, 297, 286, 284, 282, 279, 278, 3, 112, 9,
	0, 274, 273, 272,
}

var ASNR1 = [...]int{
	0, 162, 1, 1, 2, 133, 133, 133, 148, 149,
	3, 12, 12, 4, 4, 5, 6, 6, 7, 7,
	7, 8, 9, 10, 11, 11, 11, 11, 13, 13,
	14, 14, 14, 16, 16, 16, 16, 20, 20, 21,
	21, 22, 22, 134, 135, 135, 15, 15, 17, 17,
	18, 18, 19, 23, 24, 24, 24, 25, 25, 25,
	26, 26, 27, 27, 27, 27, 28, 29, 29, 30,
	31, 31, 31, 32, 32, 32, 32, 32, 32, 32,
	32, 34, 35, 36, 37, 38, 39, 40, 41, 41,
	41, 41, 41, 41, 42, 42, 42, 43, 43, 43,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 57, 57, 57,
	57, 57, 136, 136, 136, 136, 141, 142, 143, 144,
	144, 89, 89, 147, 147, 147, 147, 147, 147, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 138, 139, 145, 145, 145,
	145, 150, 150, 154, 151, 152, 152, 155, 153, 146,
	156, 156, 157, 140, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 68, 67, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 80, 81, 82, 83,
	84, 85, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 93, 93, 93, 93, 93, 116,
	116, 117, 94, 95, 95, 114, 114, 114, 114, 118,
	121, 121, 122, 122, 122, 122, 119, 123, 124, 125,
	126, 120, 127, 128, 115, 96, 97, 98, 99, 100,
	101, 101, 103, 104, 163, 104, 105, 105, 129, 129,
	130, 130, 130, 102, 106, 107, 131, 131, 132, 132,
	132, 108, 109, 110, 111, 112, 113, 91, 92, 45,
	44, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 33, 33, 33, 33, 86, 87, 88, 89, 161,
	161, 159, 159, 160, 160, 160, 160, 158,
}

var ASNR2 = [...]int{
	0, 1, 1, 2, 10, 1, 2, 0, 3, 0,
	2, 2, 0, 1, 0, 3, 1, 2, 1, 1,
	1, 1, 1, 4, 2, 2, 2, 0, 2, 0,
	3, 3, 0, 3, 3, 2, 0, 1, 0, 1,
	3, 1, 1, 1, 1, 3, 3, 0, 1, 0,
	1, 2, 3, 2, 1, 1, 0, 3, 4, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 4,
	1, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 4, 3, 4, 3, 4, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 2, 1,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 3, 2, 1, 1, 3, 2, 1,
	1, 3, 1, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 2, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 9, 1, 1, 1,
	1, 5, 1, 1, 1, 3, 1, 1, 1, 0,
	1, 1, 1, 1, 0, 4, 1, 1, 1, 1,
	1, 1, 1, 0, 0, 3, 1, 2, 1, 1,
	1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1, 1, 1, 1, 3, 2, 0, 0, 1,
	1, 1, 1, 1, 2, 1, 2, 3,
}

var ASNChk = [...]int{
	-1000, -162, -1, -2, -3, -159, 119, 120, -2, 47,
	-4, -5, 4, -12, 119, -6, -7, -8, -9, -10,
	120, -160, 122, 12, 123, -11, 66, 55, 31, 71,
	5, -7, 17, 122, 123, -13, 57, 103, 103, 103,
	-160, -158, 11, 67, 18, 32, 11, -14, -15, -16,
	68, 56, 19, -133, -148, 51, -16, -15, -17, -18,
	-19, -21, -22, -134, -135, -159, -20, 29, 26, -21,
	52, -133, 119, -31, -32, -34, -35, -36, -37, -38,
	-39, -40, -41, -159, -50, -51, -52, -53, -54, -55,
	-31, 26, -19, 10, 60, 4, 26, 26, -149, -32,
	-158, -42, -47, -56, -57, -58, -59, -60, -61, -62,
	-63, -64, -65, -66, -68, -67, -69, -70, -71, -72,
	-73, -74, -75, -76, -77, -78, -79, -80, -81, -82,
	-83, -84, -85, -136, -137, -138, -139, -140, -141, -159,
	-142, -143, 114, 63, 80, 116, 91, 74, 104, 62,
	102, 112, 115, 34, 64, 61, 113, 82, -145, -144,
	-150, -151, -152, -153, -154, -155, -22, -23, -159, 5,
	-42, -45, -46, -158, -158, 15, 14, 15, -89, 4,
	-89, -89, -24, -25, -33, 4, -86, -159, -160, -87,
	-88, -43, -44, -90, -91, -92, -93, -94, -95, -96,
	-97, -98, -99, -100, -101, -102, -103, -25, -104, -105,
	-106, -107, -108, -109, -110, -111, -112, -113, 125, 126,
	4, 43, -161, -114, -115, -159, -160, 79, -129, -130,
	107, 59, 127, -118, -119, -120, 89, 77, 78, -48,
	-49, -159, -42, -146, -156, -157, -159, -147, -89, -42,
	-43, -44, -47, -48, -49, 4, -159, -26, -33, 5,
	-27, -159, -160, -28, -29, -30, 15, -89, -163, -33,
	5, -116, -121, -123, -127, -131, -159, -160, -117, -122,
	-132, -29, -30, 127, -119, -120, 4, -43, 11, 15,
	5, 10, -159, -160, 127, -119, -120, 5, -27, -33,
	-26, 17, -159, 43, 5, 10, 5, 10, 10, 10,
	5, -132, -29, -30, -33, -159, -160, -43, -157, -147,
	15, 4, -29, -33, -43, -117, -159, -122, -33, -124,
	-160, -128, -160, 5, -159, 18, 10, 5, -125, -160,
	10, -126, -160, 5,
}

var ASNDef = [...]int{
	0, -2, 1, 2, 0, 14, 321, 322, 3, 12,
	10, 13, 0, 27, 0, 0, 16, 18, 19, 20,
	21, 22, 323, 0, 325, 29, 0, 0, 0, 11,
	15, 17, 0, 324, 326, 0, 0, 24, 25, 26,
	0, 0, 0, 28, 23, -2, 0, 7, 36, 47,
	49, 0, 327, 0, 5, 0, 72, 72, 0, 48,
	50, 0, 39, 41, 42, 43, 0, 0, 35, 37,
	4, 6, 9, 30, 70, 73, 74, 75, 76, 77,
	78, 79, 80, 0, 88, 89, 90, 91, 92, 93,
	31, 46, 51, 0, 0, 0, 33, 34, 8, 71,
	183, 0, 0, 94, 95, 96, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, -2, -2,
	134, 135, 149, 150, 151, 152, 153, 154, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 164, 0, 318,
	167, 168, 169, 170, 171, 175, 40, 52, 56, 45,
	81, 83, 85, 269, 303, 0, 183, 0, 137, -2,
	174, 178, 53, 54, 55, 317, 311, 312, 313, 314,
	318, 82, 84, 97, 98, 99, 212, 213, 214, 215,
	216, 217, 218, 219, 220, 221, 222, 223, 224, 225,
	226, 227, 228, 229, 230, 231, 232, 233, 234, -2,
	317, 269, 242, 243, 244, 267, 270, 272, 276, 277,
	319, 320, 245, 246, 247, 248, 280, 281, 282, 86,
	87, -2, 165, 166, 179, 180, 182, 0, 0, 143,
	144, 145, 146, 147, 148, 317, -2, 317, 65, 59,
	60, 66, 67, 62, 63, 64, 0, 316, 0, -2,
	59, 0, 0, 0, 0, 317, -2, -2, 239, 250,
	286, 63, 64, 252, 253, 254, 0, 238, 269, 0,
	141, 183, -2, -2, -2, -2, -2, 57, 61, 65,
	0, 317, 315, 269, 236, 0, 249, 317, 0, 0,
	285, 287, 288, 289, 68, 312, 257, 265, 181, 0,
	0, 58, 0, 68, 275, 240, 241, 251, 255, 0,
	258, 0, 263, 142, -2, 69, 0, 261, 0, 259,
	0, 0, 260, 256,
}

var ASNTok1 = [...]int{
	1,
}

var ASNTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127,
}

var ASNTok3 = [...]int{
	0,
}

var ASNErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	ASNDebug        = 0
	ASNErrorVerbose = false
)

type ASNLexer interface {
	Lex(lval *ASNSymType) int
	Error(s string)
}

type ASNParser interface {
	Parse(ASNLexer) int
	Lookahead() int
}

type ASNParserImpl struct {
	lval  ASNSymType
	stack [ASNInitialStackSize]ASNSymType
	char  int
}

func (p *ASNParserImpl) Lookahead() int {
	return p.char
}

func ASNNewParser() ASNParser {
	return &ASNParserImpl{}
}

const ASNFlag = -1000

func ASNTokname(c int) string {
	if c >= 1 && c-1 < len(ASNToknames) {
		if ASNToknames[c-1] != "" {
			return ASNToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func ASNStatname(s int) string {
	if s >= 0 && s < len(ASNStatenames) {
		if ASNStatenames[s] != "" {
			return ASNStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func ASNErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !ASNErrorVerbose {
		return "syntax error"
	}

	for _, e := range ASNErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + ASNTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := ASNPact[state]
	for tok := TOKSTART; tok-1 < len(ASNToknames); tok++ {
		if n := base + tok; n >= 0 && n < ASNLast && ASNChk[ASNAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if ASNDef[state] == -2 {
		i := 0
		for ASNExca[i] != -1 || ASNExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; ASNExca[i] >= 0; i += 2 {
			tok := ASNExca[i]
			if tok < TOKSTART || ASNExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if ASNExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += ASNTokname(tok)
	}
	return res
}

func ASNlex1(lex ASNLexer, lval *ASNSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = ASNTok1[0]
		goto out
	}
	if char < len(ASNTok1) {
		token = ASNTok1[char]
		goto out
	}
	if char >= ASNPrivate {
		if char < ASNPrivate+len(ASNTok2) {
			token = ASNTok2[char-ASNPrivate]
			goto out
		}
	}
	for i := 0; i < len(ASNTok3); i += 2 {
		token = ASNTok3[i+0]
		if token == char {
			token = ASNTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = ASNTok2[1] /* unknown char */
	}
	if ASNDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", ASNTokname(token), uint(char))
	}
	return char, token
}

func ASNParse(ASNlex ASNLexer) int {
	return ASNNewParser().Parse(ASNlex)
}

func (ASNrcvr *ASNParserImpl) Parse(ASNlex ASNLexer) int {
	var ASNn int
	var ASNVAL ASNSymType
	var ASNDollar []ASNSymType
	_ = ASNDollar // silence set and not used
	ASNS := ASNrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	ASNstate := 0
	ASNrcvr.char = -1
	ASNtoken := -1 // ASNrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		ASNstate = -1
		ASNrcvr.char = -1
		ASNtoken = -1
	}()
	ASNp := -1
	goto ASNstack

ret0:
	return 0

ret1:
	return 1

ASNstack:
	/* put a state and value onto the stack */
	if ASNDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", ASNTokname(ASNtoken), ASNStatname(ASNstate))
	}

	ASNp++
	if ASNp >= len(ASNS) {
		nyys := make([]ASNSymType, len(ASNS)*2)
		copy(nyys, ASNS)
		ASNS = nyys
	}
	ASNS[ASNp] = ASNVAL
	ASNS[ASNp].yys = ASNstate

ASNnewstate:
	ASNn = ASNPact[ASNstate]
	if ASNn <= ASNFlag {
		goto ASNdefault /* simple state */
	}
	if ASNrcvr.char < 0 {
		ASNrcvr.char, ASNtoken = ASNlex1(ASNlex, &ASNrcvr.lval)
	}
	ASNn += ASNtoken
	if ASNn < 0 || ASNn >= ASNLast {
		goto ASNdefault
	}
	ASNn = ASNAct[ASNn]
	if ASNChk[ASNn] == ASNtoken { /* valid shift */
		ASNrcvr.char = -1
		ASNtoken = -1
		ASNVAL = ASNrcvr.lval
		ASNstate = ASNn
		if Errflag > 0 {
			Errflag--
		}
		goto ASNstack
	}

ASNdefault:
	/* default state action */
	ASNn = ASNDef[ASNstate]
	if ASNn == -2 {
		if ASNrcvr.char < 0 {
			ASNrcvr.char, ASNtoken = ASNlex1(ASNlex, &ASNrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if ASNExca[xi+0] == -1 && ASNExca[xi+1] == ASNstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			ASNn = ASNExca[xi+0]
			if ASNn < 0 || ASNn == ASNtoken {
				break
			}
		}
		ASNn = ASNExca[xi+1]
		if ASNn < 0 {
			goto ret0
		}
	}
	if ASNn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			ASNlex.Error(ASNErrorMessage(ASNstate, ASNtoken))
			Nerrs++
			if ASNDebug >= 1 {
				__yyfmt__.Printf("%s", ASNStatname(ASNstate))
				__yyfmt__.Printf(" saw %s\n", ASNTokname(ASNtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for ASNp >= 0 {
				ASNn = ASNPact[ASNS[ASNp].yys] + ASNErrCode
				if ASNn >= 0 && ASNn < ASNLast {
					ASNstate = ASNAct[ASNn] /* simulate a shift of "error" */
					if ASNChk[ASNstate] == ASNErrCode {
						goto ASNstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if ASNDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", ASNS[ASNp].yys)
				}
				ASNp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if ASNDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", ASNTokname(ASNtoken))
			}
			if ASNtoken == ASNEofCode {
				goto ret1
			}
			ASNrcvr.char = -1
			ASNtoken = -1
			goto ASNnewstate /* try again in the same state */
		}
	}

	/* reduction by production ASNn */
	if ASNDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", ASNn, ASNStatname(ASNstate))
	}

	ASNnt := ASNn
	ASNpt := ASNp
	_ = ASNpt // guard against "declared and not used"

	ASNp -= ASNR2[ASNn]
	// ASNp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if ASNp+1 >= len(ASNS) {
		nyys := make([]ASNSymType, len(ASNS)*2)
		copy(nyys, ASNS)
		ASNS = nyys
	}
	ASNVAL = ASNS[ASNp+1]

	/* consult goto table to find next state */
	ASNn = ASNR1[ASNn]
	ASNg := ASNPgo[ASNn]
	ASNj := ASNg + ASNS[ASNp].yys + 1

	if ASNj >= ASNLast {
		ASNstate = ASNAct[ASNg]
	} else {
		ASNstate = ASNAct[ASNj]
		if ASNChk[ASNstate] != -ASNn {
			ASNstate = ASNAct[ASNg]
		}
	}
	// dummy call; replaced with literal code
	switch ASNnt {

	case 1:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:354
		{
			SetResult(ASNlex, ASNDollar[1].TypeValue)
			Print("Done")
			Print("--------------------------------------------------------------------------------")
			Print(JSON(&ASNDollar[1].TypeValue))
			Print("--------------------------------------------------------------------------------")
		}
	case 2:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:363
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 3:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:368
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 4:
		ASNDollar = ASNS[ASNpt-10 : ASNpt+1]
//line asn.y:398
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"encoding":   ASNDollar[3].TypeValue,
				"tag":        ASNDollar[4].TypeValue,
				"body":       ASNDollar[8].TypeValue,
			}
		}
	case 5:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:414
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 6:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:419
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 7:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:423
		{
			ASNVAL.TypeValue = nil
		}
	case 8:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:435
		{
			ASNVAL.TypeValue = MAP{
				"encodingReference":    ASNDollar[2].TypeString,
				"encodingInstructions": ASNDollar[3].TypeValue,
			}
		}
	case 9:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:450
		{
			ASNVAL.TypeValue = nil
		}
	case 10:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:463
		{
			ASNVAL.TypeValue = MAP{
				"reference":             ASNDollar[1].TypeValue,
				"definitiveIdentifiers": ASNDollar[2].TypeValue,
			}
		}
	case 11:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:477
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 12:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:480
		{
			ASNVAL.TypeValue = ""
		}
	case 13:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:492
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 14:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:495
		{
			ASNVAL.TypeValue = nil
		}
	case 15:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:505
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 16:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:516
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 17:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:521
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 18:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:534
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 19:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:537
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 20:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:540
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 21:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:549
		{
			ASNVAL.TypeValue = MAP{
				"name": ASNDollar[1].TypeString,
			}
		}
	case 22:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:560
		{
			ASNVAL.TypeValue = MAP{
				"number": ASNDollar[1].TypeValue,
			}
		}
	case 23:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:571
		{
			ASNVAL.TypeValue = MAP{
				"name":   ASNDollar[1].TypeString,
				"number": ASNDollar[3].TypeValue,
			}
		}
	case 24:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:587
		{
			ASNVAL.TypeValue = "Implicit"
		}
	case 25:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:590
		{
			ASNVAL.TypeValue = "Explicit"
		}
	case 26:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:593
		{
			ASNVAL.TypeValue = "Automatic"
		}
	case 27:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:596
		{
			ASNVAL.TypeValue = "Explicit"
		}
	case 28:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:607
		{
			ASNVAL.TypeValue = true
		}
	case 29:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:610
		{
			ASNVAL.TypeValue = false
		}
	case 30:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:623
		{
			ASNVAL.TypeValue = MAP{
				"imports":     ASNDollar[1].TypeValue,
				"exports":     ASNDollar[2].TypeValue,
				"assignments": ASNDollar[3].TypeValue,
			}
		}
	case 31:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:632
		{
			ASNVAL.TypeValue = MAP{
				"imports":     ASNDollar[2].TypeValue,
				"exports":     ASNDollar[1].TypeValue,
				"assignments": ASNDollar[3].TypeValue,
			}
		}
	case 32:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:639
		{
			ASNVAL.TypeValue = nil
		}
	case 33:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:651
		{
			ASNVAL.TypeValue = MAP{
				"all":     "false",
				"symbols": ASNDollar[2].TypeValue,
			}
		}
	case 34:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:657
		{
			ASNVAL.TypeValue = MAP{
				"all": "true",
			}
		}
	case 35:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:662
		{
			ASNVAL.TypeValue = MAP{
				"all": "false",
			}
		}
	case 36:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:667
		{
			ASNVAL.TypeValue = MAP{
				"all": "true",
			}
		}
	case 37:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:680
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 38:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:683
		{
			ASNVAL.TypeValue = nil
		}
	case 39:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:694
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 40:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:699
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 41:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:711
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
			}
		}
	case 42:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:716
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedReference": ASNDollar[1].TypeValue,
			}
		}
	case 43:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:735
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 44:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:745
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 45:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:748
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 46:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:759
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 47:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:762
		{
			ASNVAL.TypeValue = nil
		}
	case 48:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:773
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 49:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:776
		{
			ASNVAL.TypeValue = nil
		}
	case 50:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:787
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 51:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:792
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 52:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:803
		{
			ASNVAL.TypeValue = MAP{
				"symbols":   ASNDollar[1].TypeValue,
				"reference": ASNDollar[3].TypeValue,
			}
		}
	case 53:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:816
		{
			ASNVAL.TypeValue = MAP{
				"name":        ASNDollar[1].TypeValue,
				"identifiers": ASNDollar[2].TypeValue,
			}
		}
	case 54:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:831
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 55:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:834
		{
			ASNVAL.TypeValue = nil
		}
	case 56:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:837
		{
			ASNVAL.TypeValue = nil
		}
	case 57:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:848
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 58:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:851
		{
			ASNVAL.TypeValue = ASNDollar[3].TypeValue
		}
	case 59:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:854
		{
			ASNVAL.TypeValue = nil
		}
	case 60:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:865
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 61:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:870
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 62:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:884
		{
			ASNVAL.TypeValue = MAP{
				"name": ASNDollar[1].TypeValue,
			}
		}
	case 63:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:889
		{
			ASNVAL.TypeValue = MAP{
				"number": ASNDollar[1].TypeValue,
			}
		}
	case 64:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:894
		{
			ASNVAL.TypeValue = MAP{
				"nameAndNumber": ASNDollar[1].TypeValue,
			}
		}
	case 65:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:899
		{
			ASNVAL.TypeValue = MAP{
				"definedValue": ASNDollar[1].TypeValue,
			}
		}
	case 66:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:911
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 67:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:922
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 68:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:925
		{
			ASNVAL.TypeValue = MAP{
				"definedValue": ASNDollar[1].TypeValue,
			}
		}
	case 69:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:937
		{
			ASNVAL.TypeValue = MAP{
				"name":   ASNDollar[1].TypeValue,
				"number": ASNDollar[3].TypeValue,
			}
		}
	case 70:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:951
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 71:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:956
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 72:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:960
		{
			ASNVAL.TypeValue = nil
		}
	case 73:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:977
		{
			ASNVAL.TypeValue = MAP{
				"typeAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 74:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:982
		{
			ASNVAL.TypeValue = MAP{
				"valueAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 75:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:987
		{
			ASNVAL.TypeValue = MAP{
				"xmlValueAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 76:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:992
		{
			ASNVAL.TypeValue = MAP{
				"valueSetAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 77:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:997
		{
			ASNVAL.TypeValue = MAP{
				"objectClassAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 78:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1002
		{
			ASNVAL.TypeValue = MAP{
				"objectAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 79:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1007
		{
			ASNVAL.TypeValue = MAP{
				"objectSetAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 80:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1012
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 81:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1026
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"type":      ASNDollar[2].TypeValue,
			}
		}
	case 82:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1042
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"type":      ASNDollar[2].TypeValue,
				"value":     ASNDollar[4].TypeValue,
			}
		}
	case 83:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1058
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"value":     ASNDollar[3].TypeValue,
			}
		}
	case 84:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1074
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"type":      ASNDollar[2].TypeValue,
				"valueSet":  ASNDollar[4].TypeValue,
			}
		}
	case 85:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1090
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"class":     ASNDollar[3].TypeValue,
			}
		}
	case 86:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1106
		{
			ASNVAL.TypeValue = MAP{
				"reference":    ASNDollar[1].TypeValue,
				"definedClass": ASNDollar[2].TypeValue,
				"object":       ASNDollar[4].TypeValue,
			}
		}
	case 87:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1123
		{
			ASNVAL.TypeValue = MAP{
				"reference":    ASNDollar[1].TypeValue,
				"definedClass": ASNDollar[2].TypeValue,
				"objectSet":    ASNDollar[4].TypeValue,
			}
		}
	case 88:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1142
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 89:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1145
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 90:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1148
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 91:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1151
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 92:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1154
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 93:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1157
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 94:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1169
		{
			ASNVAL.TypeValue = MAP{
				"type":       "BUILTIN_TYPE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 95:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1175
		{
			ASNVAL.TypeValue = MAP{
				"type":       "REFERENCED_TYPE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 96:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1181
		{
			ASNVAL.TypeValue = MAP{
				"type":       "CONSTRAINED_TYPE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 97:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1196
		{
			ASNVAL.TypeValue = MAP{
				"type":       "BUILTIN_VALUE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 98:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1202
		{
			ASNVAL.TypeValue = MAP{
				"type":       "REFERENCED_VALUE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 99:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1208
		{
			ASNVAL.TypeValue = MAP{
				"type":       "OBJECT_CLASS_FIELD_VALUE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 100:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1246
		{
			ASNVAL.TypeValue = MAP{
				"bitStringType": ASNDollar[1].TypeValue,
			}
		}
	case 101:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1251
		{
			ASNVAL.TypeValue = MAP{
				"booleanType": ASNDollar[1].TypeValue,
			}
		}
	case 102:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1256
		{
			ASNVAL.TypeValue = MAP{
				"characterStringType": ASNDollar[1].TypeValue,
			}
		}
	case 103:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1261
		{
			ASNVAL.TypeValue = MAP{
				"choiceType": ASNDollar[1].TypeValue,
			}
		}
	case 104:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1266
		{
			ASNVAL.TypeValue = MAP{
				"dateType": ASNDollar[1].TypeValue,
			}
		}
	case 105:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1271
		{
			ASNVAL.TypeValue = MAP{
				"dataTimeType": ASNDollar[1].TypeValue,
			}
		}
	case 106:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1276
		{
			ASNVAL.TypeValue = MAP{
				"durationType": ASNDollar[1].TypeValue,
			}
		}
	case 107:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1281
		{
			ASNVAL.TypeValue = MAP{
				"embeddedPDVType": ASNDollar[1].TypeValue,
			}
		}
	case 108:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1286
		{
			ASNVAL.TypeValue = MAP{
				"enumeratedType": ASNDollar[1].TypeValue,
			}
		}
	case 109:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1291
		{
			ASNVAL.TypeValue = MAP{
				"externalType": ASNDollar[1].TypeValue,
			}
		}
	case 110:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1296
		{
			ASNVAL.TypeValue = MAP{
				"instanceOfType": ASNDollar[1].TypeValue,
			}
		}
	case 111:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1301
		{
			ASNVAL.TypeValue = MAP{
				"integerType": ASNDollar[1].TypeValue,
			}
		}
	case 112:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1306
		{
			ASNVAL.TypeValue = MAP{
				"iriType": ASNDollar[1].TypeValue,
			}
		}
	case 113:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1311
		{
			ASNVAL.TypeValue = MAP{
				"nullType": ASNDollar[1].TypeValue,
			}
		}
	case 114:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1316
		{
			ASNVAL.TypeValue = MAP{
				"objectClassFieldType": ASNDollar[1].TypeValue,
			}
		}
	case 115:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1321
		{
			ASNVAL.TypeValue = MAP{
				"objectIdentifierType": ASNDollar[1].TypeValue,
			}
		}
	case 116:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1326
		{
			ASNVAL.TypeValue = MAP{
				"octetStringType": ASNDollar[1].TypeValue,
			}
		}
	case 117:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1331
		{
			ASNVAL.TypeValue = MAP{
				"realType": ASNDollar[1].TypeValue,
			}
		}
	case 118:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1336
		{
			ASNVAL.TypeValue = MAP{
				"relativeIRIType": ASNDollar[1].TypeValue,
			}
		}
	case 119:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1341
		{
			ASNVAL.TypeValue = MAP{
				"relativeOIDType": ASNDollar[1].TypeValue,
			}
		}
	case 120:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1346
		{
			ASNVAL.TypeValue = MAP{
				"sequenceType": ASNDollar[1].TypeValue,
			}
		}
	case 121:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1351
		{
			ASNVAL.TypeValue = MAP{
				"sequenceOfType": ASNDollar[1].TypeValue,
			}
		}
	case 122:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1356
		{
			ASNVAL.TypeValue = MAP{
				"setType": ASNDollar[1].TypeValue,
			}
		}
	case 123:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1361
		{
			ASNVAL.TypeValue = MAP{
				"setOfType": ASNDollar[1].TypeValue,
			}
		}
	case 124:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1366
		{
			ASNVAL.TypeValue = MAP{
				"prefixedType": ASNDollar[1].TypeValue,
			}
		}
	case 125:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1371
		{
			ASNVAL.TypeValue = MAP{
				"timeType": ASNDollar[1].TypeValue,
			}
		}
	case 126:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1376
		{
			ASNVAL.TypeValue = MAP{
				"timeOfDayType": ASNDollar[1].TypeValue,
			}
		}
	case 127:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1392
		{
			ASNVAL.TypeValue = MAP{
				"definedType": ASNDollar[1].TypeValue,
			}
		}
	case 128:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1397
		{
			ASNVAL.TypeValue = MAP{
				"usefulType": ASNDollar[1].TypeValue,
			}
		}
	case 129:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1402
		{
			ASNVAL.TypeValue = MAP{
				"selectionType": ASNDollar[1].TypeValue,
			}
		}
	case 130:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1407
		{
			ASNVAL.TypeValue = MAP{
				"typeFromObject": ASNDollar[1].TypeValue,
			}
		}
	case 131:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1412
		{
			ASNVAL.TypeValue = MAP{
				"valueSetFromObjects": ASNDollar[1].TypeValue,
			}
		}
	case 132:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1427
		{
			ASNVAL.TypeValue = MAP{
				"externalTypeReference": ASNDollar[1].TypeValue,
			}
		}
	case 133:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1432
		{
			ASNVAL.TypeValue = MAP{
				"typeReference": ASNDollar[1].TypeValue,
			}
		}
	case 134:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1437
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedType": ASNDollar[1].TypeValue,
			}
		}
	case 135:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1442
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedValueSetType": ASNDollar[1].TypeValue,
			}
		}
	case 136:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1456
		{
			ASNVAL.TypeValue = MAP{
				"moduleReference": ASNDollar[1].TypeValue,
				"typeReference":   ASNDollar[2].TypeToken,
			}
		}
	case 137:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1470
		{
			ASNVAL.TypeValue = MAP{
				"simpleDefinedType":   ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 138:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1484
		{
			ASNVAL.TypeValue = MAP{
				"simpleDefinedType":   ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 139:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1498
		{
			ASNVAL.TypeValue = MAP{
				"externalTypeReference": ASNDollar[1].TypeValue,
			}
		}
	case 140:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1503
		{
			ASNVAL.TypeValue = MAP{
				"typeReference": ASNDollar[1].TypeValue,
			}
		}
	case 141:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1514
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[2].TypeValue,
			}
		}
	case 142:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:1519
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[4].TypeValue)
		}
	case 143:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1535
		{
			ASNVAL.TypeValue = MAP{
				"type": ASNDollar[1].TypeValue,
			}
		}
	case 144:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1540
		{
			ASNVAL.TypeValue = MAP{
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 145:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1545
		{
			ASNVAL.TypeValue = MAP{
				"valueSet": ASNDollar[1].TypeValue,
			}
		}
	case 146:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1550
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectClass": ASNDollar[1].TypeValue,
			}
		}
	case 147:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1555
		{
			ASNVAL.TypeValue = MAP{
				"object": ASNDollar[1].TypeValue,
			}
		}
	case 148:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1560
		{
			ASNVAL.TypeValue = MAP{
				"objectSet": ASNDollar[1].TypeValue,
			}
		}
	case 149:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1588
		{
			ASNVAL.TypeValue = STRING(UTF8String)
		}
	case 150:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1591
		{
			ASNVAL.TypeValue = STRING(GraphicString)
		}
	case 151:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1594
		{
			ASNVAL.TypeValue = STRING(NumericString)
		}
	case 152:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1597
		{
			ASNVAL.TypeValue = STRING(VisibleString)
		}
	case 153:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1600
		{
			ASNVAL.TypeValue = STRING(PrintableString)
		}
	case 154:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1603
		{
			ASNVAL.TypeValue = STRING(ISO646String)
		}
	case 155:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1606
		{
			ASNVAL.TypeValue = STRING(TeletexString)
		}
	case 156:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1609
		{
			ASNVAL.TypeValue = STRING(GeneralString)
		}
	case 157:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1612
		{
			ASNVAL.TypeValue = STRING(T61String)
		}
	case 158:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1615
		{
			ASNVAL.TypeValue = STRING(UniversalString)
		}
	case 159:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1618
		{
			ASNVAL.TypeValue = STRING(VideotexString)
		}
	case 160:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1621
		{
			ASNVAL.TypeValue = STRING(BMPString)
		}
	case 161:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1624
		{
			ASNVAL.TypeValue = STRING(IA5String)
		}
	case 162:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1627
		{
			ASNVAL.TypeValue = STRING(GeneralizedTime)
		}
	case 163:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1630
		{
			ASNVAL.TypeValue = STRING(UTCTime)
		}
	case 164:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1633
		{
			ASNVAL.TypeValue = STRING(ObjectDescriptor)
		}
	case 165:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1643
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"type":       ASNDollar[3].TypeValue,
			}
		}
	case 166:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1656
		{
			ASNVAL.TypeValue = MAP{
				"referencedObjects": ASNDollar[1].TypeValue,
				"fieldName":         ASNDollar[2].TypeToken,
			}
		}
	case 167:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1669
		{
			ASNVAL.TypeValue = MAP{
				"definedObject": ASNDollar[1].TypeValue,
			}
		}
	case 168:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1674
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedObject": ASNDollar[1].TypeValue,
			}
		}
	case 169:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1679
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 170:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1684
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 171:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1696
		{
			ASNVAL.TypeValue = MAP{
				"externalObjectReference": ASNDollar[1].TypeValue,
			}
		}
	case 172:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1701
		{
			ASNVAL.TypeValue = MAP{
				"objectReference": ASNDollar[1].TypeValue,
			}
		}
	case 173:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1713
		{
			ASNVAL.TypeValue = MAP{
				"moduleReference": ASNDollar[1].TypeValue,
				"objectReference": ASNDollar[3].TypeValue,
			}
		}
	case 174:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1726
		{
			ASNVAL.TypeValue = MAP{
				"definedObject":       ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 175:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1739
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 176:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1742
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 177:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1752
		{
			ASNVAL.TypeValue = MAP{
				"moduleReference":    ASNDollar[1].TypeValue,
				"objectSetReference": ASNDollar[3].TypeValue,
			}
		}
	case 178:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1765
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet":    ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 179:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1778
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 180:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1789
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 181:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1794
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 182:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1809
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 183:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1815
		{
			ASNVAL.TypeValue = nil
		}
	case 184:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1821
		{
			ASNVAL.TypeValue = nil
		}
	case 185:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1826
		{
			ASNVAL.TypeValue = nil
		}
	case 186:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1831
		{
			ASNVAL.TypeValue = nil
		}
	case 187:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1836
		{
			ASNVAL.TypeValue = nil
		}
	case 188:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1840
		{
			ASNVAL.TypeValue = nil
		}
	case 189:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1845
		{
			ASNVAL.TypeValue = nil
		}
	case 190:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1849
		{
			ASNVAL.TypeValue = nil
		}
	case 191:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1853
		{
			ASNVAL.TypeValue = nil
		}
	case 192:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1858
		{
			ASNVAL.TypeValue = nil
		}
	case 193:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1863
		{
			ASNVAL.TypeValue = nil
		}
	case 194:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1868
		{
			ASNVAL.TypeValue = nil
		}
	case 195:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1873
		{
			ASNVAL.TypeValue = nil
		}
	case 196:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1878
		{
			ASNVAL.TypeValue = nil
		}
	case 197:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1883
		{
			ASNVAL.TypeValue = nil
		}
	case 198:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1888
		{
			ASNVAL.TypeValue = nil
		}
	case 199:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1893
		{
			ASNVAL.TypeValue = nil
		}
	case 200:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1898
		{
			ASNVAL.TypeValue = nil
		}
	case 201:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1903
		{
			ASNVAL.TypeValue = nil
		}
	case 202:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1908
		{
			ASNVAL.TypeValue = nil
		}
	case 203:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1913
		{
			ASNVAL.TypeValue = nil
		}
	case 204:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1918
		{
			ASNVAL.TypeValue = nil
		}
	case 205:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1923
		{
			ASNVAL.TypeValue = nil
		}
	case 206:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1928
		{
			ASNVAL.TypeValue = nil
		}
	case 207:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1933
		{
			ASNVAL.TypeValue = nil
		}
	case 208:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1938
		{
			ASNVAL.TypeValue = nil
		}
	case 209:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1943
		{
			ASNVAL.TypeValue = nil
		}
	case 210:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1948
		{
			ASNVAL.TypeValue = nil
		}
	case 211:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1953
		{
			ASNVAL.TypeValue = nil
		}
	case 212:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1958
		{
			ASNVAL.TypeValue = MAP{
				"bitString": ASNDollar[1].TypeValue,
			}
		}
	case 213:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1963
		{
			ASNVAL.TypeValue = MAP{
				"boolean": ASNDollar[1].TypeValue,
			}
		}
	case 214:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1968
		{
			ASNVAL.TypeValue = MAP{
				"characterString": ASNDollar[1].TypeValue,
			}
		}
	case 215:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1973
		{
			ASNVAL.TypeValue = MAP{
				"choice": ASNDollar[1].TypeValue,
			}
		}
	case 216:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1978
		{
			ASNVAL.TypeValue = MAP{
				"embeddedPDV": ASNDollar[1].TypeValue,
			}
		}
	case 217:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1983
		{
			ASNVAL.TypeValue = MAP{
				"enumerated": ASNDollar[1].TypeValue,
			}
		}
	case 218:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1988
		{
			ASNVAL.TypeValue = MAP{
				"external": ASNDollar[1].TypeValue,
			}
		}
	case 219:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1993
		{
			ASNVAL.TypeValue = MAP{
				"instanceOf": ASNDollar[1].TypeValue,
			}
		}
	case 220:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1998
		{
			ASNVAL.TypeValue = MAP{
				"integer": ASNDollar[1].TypeValue,
			}
		}
	case 221:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2003
		{
			ASNVAL.TypeValue = MAP{
				"iri": ASNDollar[1].TypeValue,
			}
		}
	case 222:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2008
		{
			ASNVAL.TypeValue = MAP{
				"null": ASNDollar[1].TypeValue,
			}
		}
	case 223:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2013
		{
			ASNVAL.TypeValue = MAP{
				"objectIdentifier": ASNDollar[1].TypeValue,
			}
		}
	case 224:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2018
		{
			ASNVAL.TypeValue = MAP{
				"octetString": ASNDollar[1].TypeValue,
			}
		}
	case 225:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2023
		{
			ASNVAL.TypeValue = MAP{
				"real": ASNDollar[1].TypeValue,
			}
		}
	case 226:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2028
		{
			ASNVAL.TypeValue = MAP{
				"relativeIRI": ASNDollar[1].TypeValue,
			}
		}
	case 227:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2033
		{
			ASNVAL.TypeValue = MAP{
				"relativeOID": ASNDollar[1].TypeValue,
			}
		}
	case 228:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2038
		{
			ASNVAL.TypeValue = MAP{
				"sequence": ASNDollar[1].TypeValue,
			}
		}
	case 229:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2043
		{
			ASNVAL.TypeValue = MAP{
				"sequenceOf": ASNDollar[1].TypeValue,
			}
		}
	case 230:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2048
		{
			ASNVAL.TypeValue = MAP{
				"set": ASNDollar[1].TypeValue,
			}
		}
	case 231:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2053
		{
			ASNVAL.TypeValue = MAP{
				"setOf": ASNDollar[1].TypeValue,
			}
		}
	case 232:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2058
		{
			ASNVAL.TypeValue = MAP{
				"prefixed": ASNDollar[1].TypeValue,
			}
		}
	case 233:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2063
		{
			ASNVAL.TypeValue = MAP{
				"time": ASNDollar[1].TypeValue,
			}
		}
	case 234:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2070
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 235:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2073
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 236:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2076
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 237:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2079
		{
			ASNVAL.TypeValue = nil
		}
	case 238:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2082
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 239:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2087
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 240:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2092
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeToken)
		}
	case 241:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2098
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 242:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2103
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 243:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2108
		{
			ASNVAL.TypeValue = nil
		}
	case 244:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2111
		{

		}
	case 245:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2116
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 246:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2119
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 247:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2122
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 248:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2125
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 249:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2130
		{
			ASNVAL.TypeValue = nil
		}
	case 250:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2135
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 251:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2140
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeToken)
		}
	case 252:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2146
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 253:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2149
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 254:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2152
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 255:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2155
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 256:
		ASNDollar = ASNS[ASNpt-9 : ASNpt+1]
//line asn.y:2160
		{
			ASNVAL.TypeValue = MAP{
				"group": ASNDollar[2].TypeValue,
				"plane": ASNDollar[4].TypeValue,
				"row":   ASNDollar[6].TypeValue,
				"cell":  ASNDollar[8].TypeValue,
			}
		}
	case 257:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2170
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 258:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2175
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 259:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2180
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 260:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2185
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 261:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:2190
		{
			ASNVAL.TypeValue = MAP{
				"tableColumn": ASNDollar[2].TypeValue,
				"tableRow":    ASNDollar[4].TypeValue,
			}
		}
	case 262:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2198
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 263:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2203
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 264:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2208
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 265:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2213
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"value":      ASNDollar[2].TypeToken,
			}
		}
	case 266:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2221
		{
			ASNVAL.TypeValue = nil
		}
	case 267:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2226
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 268:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2231
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 269:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2236
		{
			ASNVAL.TypeValue = nil
		}
	case 270:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2241
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 271:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2244
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 272:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2249
		{
			ASNVAL.TypeValue = "NULL"
		}
	case 273:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2255
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 274:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2258
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 275:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2261
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 276:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2266
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 277:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2269
		{
			ASNVAL.TypeValue = nil
		}
	case 278:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2274
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 279:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2277
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 280:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2282
		{
			ASNVAL.TypeValue = nil
		}
	case 281:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2285
		{
			ASNVAL.TypeValue = nil
		}
	case 282:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2288
		{
			ASNVAL.TypeValue = nil
		}
	case 283:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2293
		{
			ASNVAL.TypeValue = nil
		}
	case 284:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2298
		{
			ASNVAL.TypeValue = nil
		}
	case 285:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2303
		{
			ASNVAL.TypeValue = nil
		}
	case 286:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2308
		{
			ASNVAL.TypeValue = nil
		}
	case 287:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2311
		{
			ASNVAL.TypeValue = nil
		}
	case 288:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2316
		{
			ASNVAL.TypeValue = nil
		}
	case 289:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2319
		{
			ASNVAL.TypeValue = nil
		}
	case 290:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2322
		{
			ASNVAL.TypeValue = nil
		}
	case 291:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2327
		{
			ASNVAL.TypeValue = nil
		}
	case 292:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2332
		{
			ASNVAL.TypeValue = nil
		}
	case 293:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2337
		{
			ASNVAL.TypeValue = nil
		}
	case 294:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2342
		{
			ASNVAL.TypeValue = nil
		}
	case 295:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2347
		{
			ASNVAL.TypeValue = nil
		}
	case 296:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2352
		{
			ASNVAL.TypeValue = nil
		}
	case 297:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2357
		{
			ASNVAL.TypeValue = nil
		}
	case 298:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2362
		{
			ASNVAL.TypeValue = nil
		}
	case 299:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2367
		{
			ASNVAL.TypeValue = nil
		}
	case 300:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2372
		{
			ASNVAL.TypeValue = nil
		}
	case 301:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2377
		{
			ASNVAL.TypeValue = nil
		}
	case 302:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2382
		{
			ASNVAL.TypeValue = nil
		}
	case 303:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2387
		{
			ASNVAL.TypeValue = nil
		}
	case 304:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2392
		{
			ASNVAL.TypeValue = nil
		}
	case 305:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2397
		{
			ASNVAL.TypeValue = nil
		}
	case 306:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2402
		{
			ASNVAL.TypeValue = nil
		}
	case 307:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2407
		{
			ASNVAL.TypeValue = nil
		}
	case 308:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2412
		{
			ASNVAL.TypeValue = nil
		}
	case 309:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2417
		{
			ASNVAL.TypeValue = nil
		}
	case 310:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2422
		{
			ASNVAL.TypeValue = nil
		}
	case 311:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2427
		{
			ASNVAL.TypeValue = MAP{
				"type":  "EXTERNAL_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 312:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2433
		{
			ASNVAL.TypeValue = MAP{
				"type":  "STRING_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 313:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2439
		{
			ASNVAL.TypeValue = MAP{
				"type":  "NUMBER_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 314:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2445
		{
			ASNVAL.TypeValue = MAP{
				"type":  "PARAMETERIZED_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 315:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2453
		{
			ASNVAL.TypeValue = MAP{
				"module": ASNDollar[1].TypeValue,
				"value":  ASNDollar[3].TypeValue,
			}
		}
	case 316:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2461
		{
			ASNVAL.TypeValue = nil
		}
	case 317:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2466
		{
			ASNVAL.TypeValue = nil
		}
	case 318:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2471
		{
			ASNVAL.TypeValue = nil
		}
	case 319:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2476
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 320:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2479
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 321:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2484
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 322:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2487
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 323:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2492
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeNumber
		}
	case 324:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2495
		{
			ASNVAL.TypeValue = (-1) * ASNDollar[2].TypeNumber
		}
	case 325:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2498
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeNumber
		}
	case 326:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2501
		{
			ASNVAL.TypeValue = (-1) * ASNDollar[2].TypeNumber
		}
	case 327:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2506
		{
			ASNVAL.TypeValue = "::="
		}
	}
	goto ASNstack /* stack new state and value */
}
