// Code generated by goyacc -p ASN asn.y. DO NOT EDIT.

//line asn.y:1

package main

import __yyfmt__ "fmt"

//line asn.y:3
import (
	"bytes"
	"encoding/json"
	"fmt"
)

var code bytes.Buffer

func AddLine(line string) {
	code.WriteString(line)
	code.WriteByte('\n')
}

func JSON(obj interface{}) string {
	data, err := json.MarshalIndent(obj, "", "    ")
	if nil != err {
		fmt.Println("Error: ", err)
		return ""
	}
	return string(data)
}

func Print(line string) {
	fmt.Println(line)
}

func Join(values ...string) string {
	var buffer bytes.Buffer
	for _, value := range values {
		buffer.WriteString(value)
	}
	return buffer.String()
}

func SkipBlock() {
	parser.ExpectBlock = true
}

func SetResult(l ASNLexer, v VALUE) {
	l.(*Parser).Result = JSON(&v)
}

type Empty struct{}
type (
	VALUE   interface{}
	STRING  string
	NUMBER  float64
	BOOLEAN bool
	LIST    []VALUE
	MAP     map[string]VALUE
)

//line asn.y:56
type ASNSymType struct {
	yys         int
	TypeToken   struct{}
	TypeString  STRING
	TypeNumber  NUMBER
	TypeValue   VALUE
	TypeBoolean BOOLEAN
	TypeMap     MAP
	TypeList    LIST
}

const CURLY_START = 57346
const CURLY_END = 57347
const SQUARE_START = 57348
const SQUARE_END = 57349
const DOUBLE_QUOTE = 57350
const SINGLE_QUOTE = 57351
const COMMA = 57352
const COLON = 57353
const MINUS = 57354
const GREATER_THAN = 57355
const LESS_THAN = 57356
const DOT = 57357
const SLASH = 57358
const ROUND_START = 57359
const ROUND_END = 57360
const EQUALITY = 57361
const APOSTROPHE = 57362
const SPACE = 57363
const PIPE = 57364
const AT_THE_RATE = 57365
const EXCLAMATION = 57366
const CARET = 57367
const SEMI_COMMA = 57368
const ELLIPSIS = 57369
const ABSENT_SYMBOL = 57370
const ABSTRACTSYNTAX_SYMBOL = 57371
const ALL_SYMBOL = 57372
const APPLICATION_SYMBOL = 57373
const AUTOMATIC_SYMBOL = 57374
const BEGIN_SYMBOL = 57375
const BIT_SYMBOL = 57376
const BMPSTRING_SYMBOL = 57377
const BOOLEAN_SYMBOL = 57378
const BY_SYMBOL = 57379
const CHARACTER_SYMBOL = 57380
const CHOICE_SYMBOL = 57381
const CLASS_SYMBOL = 57382
const COMPONENT_SYMBOL = 57383
const COMPONENTS_SYMBOL = 57384
const CONSTRAINED_SYMBOL = 57385
const CONTAINING_SYMBOL = 57386
const DATE_SYMBOL = 57387
const DATETIME_SYMBOL = 57388
const DEFAULT_SYMBOL = 57389
const DEFINITIONS_SYMBOL = 57390
const DURATION_SYMBOL = 57391
const EMBEDDED_SYMBOL = 57392
const ENCODED_SYMBOL = 57393
const ENCODINGCONTROL_SYMBOL = 57394
const END_SYMBOL = 57395
const ENUMERATED_SYMBOL = 57396
const EXCEPT_SYMBOL = 57397
const EXPLICIT_SYMBOL = 57398
const EXPORTS_SYMBOL = 57399
const EXTENSIBILITY_SYMBOL = 57400
const EXTERNEL_SYMBOL = 57401
const FALSE_SYMBOL = 57402
const FROM_SYMBOL = 57403
const GENERALIZEDTIME_SYMBOL = 57404
const GENERALSTRING_SYMBOL = 57405
const GRAPHICSTRING_SYMBOL = 57406
const IA5STRING_SYMBOL = 57407
const IDENTIFIER_SYMBOL = 57408
const IMPLICIT_SYMBOL = 57409
const IMPLIED_SYMBOL = 57410
const IMPORTS_SYMBOL = 57411
const INCLUDES_SYMBOL = 57412
const INSTANCE_SYMBOL = 57413
const INSTRUCTIONS_SYMBOL = 57414
const INTEGER_SYMBOL = 57415
const INTERSECTION_SYMBOL = 57416
const ISO646STRING_SYMBOL = 57417
const MAX_SYMBOL = 57418
const MIN_SYMBOL = 57419
const MINUSINFINITY_SYMBOL = 57420
const NOTANUMBER_SYMBOL = 57421
const NULL_SYMBOL = 57422
const NUMERICSTRING_SYMBOL = 57423
const OBJECT_SYMBOL = 57424
const OBJECTDESCRIPTOR_SYMBOL = 57425
const OCTET_SYMBOL = 57426
const OF_SYMBOL = 57427
const OIDIRI_SYMBOL = 57428
const OPTIONAL_SYMBOL = 57429
const PATTERN_SYMBOL = 57430
const PDV_SYMBOL = 57431
const PLUSINFINITY_SYMBOL = 57432
const PRESENT_SYMBOL = 57433
const PRINTABLESTRING_SYMBOL = 57434
const PRIVATE_SYMBOL = 57435
const REAL_SYMBOL = 57436
const RELATIVEOID_SYMBOL = 57437
const RELATIVEOIDIRI_SYMBOL = 57438
const SEQUENCE_SYMBOL = 57439
const SET_SYMBOL = 57440
const SETTINGS_SYMBOL = 57441
const SIZE_SYMBOL = 57442
const STRING_SYMBOL = 57443
const SYNTAX_SYMBOL = 57444
const T61STRING_SYMBOL = 57445
const TAGS_SYMBOL = 57446
const TELETEXSTRING_SYMBOL = 57447
const TIME_SYMBOL = 57448
const TIMEOFDAY_SYMBOL = 57449
const TRUE_SYMBOL = 57450
const TYPEIDENTIFIER_SYMBOL = 57451
const UNION_SYMBOL = 57452
const UNIQUE_SYMBOL = 57453
const UNIVERSAL_SYMBOL = 57454
const UNIVERSALSTRING_SYMBOL = 57455
const UTCTIME_SYMBOL = 57456
const UTF8STRING_SYMBOL = 57457
const VIDEOTEXSTRING_SYMBOL = 57458
const VISIBLESTRING_SYMBOL = 57459
const WITH_SYMBOL = 57460
const ASSIGNMENT_SYMBOL = 57461
const TokenCapitalString = 57462
const TokenString = 57463
const TokenNumber = 57464
const TokenInteger = 57465
const TokenFloat = 57466
const TokenBoolean = 57467
const TokenBString = 57468
const TokenHString = 57469
const TokenCString = 57470
const TokenBlock = 57471

var ASNToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"CURLY_START",
	"CURLY_END",
	"SQUARE_START",
	"SQUARE_END",
	"DOUBLE_QUOTE",
	"SINGLE_QUOTE",
	"COMMA",
	"COLON",
	"MINUS",
	"GREATER_THAN",
	"LESS_THAN",
	"DOT",
	"SLASH",
	"ROUND_START",
	"ROUND_END",
	"EQUALITY",
	"APOSTROPHE",
	"SPACE",
	"PIPE",
	"AT_THE_RATE",
	"EXCLAMATION",
	"CARET",
	"SEMI_COMMA",
	"ELLIPSIS",
	"ABSENT_SYMBOL",
	"ABSTRACTSYNTAX_SYMBOL",
	"ALL_SYMBOL",
	"APPLICATION_SYMBOL",
	"AUTOMATIC_SYMBOL",
	"BEGIN_SYMBOL",
	"BIT_SYMBOL",
	"BMPSTRING_SYMBOL",
	"BOOLEAN_SYMBOL",
	"BY_SYMBOL",
	"CHARACTER_SYMBOL",
	"CHOICE_SYMBOL",
	"CLASS_SYMBOL",
	"COMPONENT_SYMBOL",
	"COMPONENTS_SYMBOL",
	"CONSTRAINED_SYMBOL",
	"CONTAINING_SYMBOL",
	"DATE_SYMBOL",
	"DATETIME_SYMBOL",
	"DEFAULT_SYMBOL",
	"DEFINITIONS_SYMBOL",
	"DURATION_SYMBOL",
	"EMBEDDED_SYMBOL",
	"ENCODED_SYMBOL",
	"ENCODINGCONTROL_SYMBOL",
	"END_SYMBOL",
	"ENUMERATED_SYMBOL",
	"EXCEPT_SYMBOL",
	"EXPLICIT_SYMBOL",
	"EXPORTS_SYMBOL",
	"EXTENSIBILITY_SYMBOL",
	"EXTERNEL_SYMBOL",
	"FALSE_SYMBOL",
	"FROM_SYMBOL",
	"GENERALIZEDTIME_SYMBOL",
	"GENERALSTRING_SYMBOL",
	"GRAPHICSTRING_SYMBOL",
	"IA5STRING_SYMBOL",
	"IDENTIFIER_SYMBOL",
	"IMPLICIT_SYMBOL",
	"IMPLIED_SYMBOL",
	"IMPORTS_SYMBOL",
	"INCLUDES_SYMBOL",
	"INSTANCE_SYMBOL",
	"INSTRUCTIONS_SYMBOL",
	"INTEGER_SYMBOL",
	"INTERSECTION_SYMBOL",
	"ISO646STRING_SYMBOL",
	"MAX_SYMBOL",
	"MIN_SYMBOL",
	"MINUSINFINITY_SYMBOL",
	"NOTANUMBER_SYMBOL",
	"NULL_SYMBOL",
	"NUMERICSTRING_SYMBOL",
	"OBJECT_SYMBOL",
	"OBJECTDESCRIPTOR_SYMBOL",
	"OCTET_SYMBOL",
	"OF_SYMBOL",
	"OIDIRI_SYMBOL",
	"OPTIONAL_SYMBOL",
	"PATTERN_SYMBOL",
	"PDV_SYMBOL",
	"PLUSINFINITY_SYMBOL",
	"PRESENT_SYMBOL",
	"PRINTABLESTRING_SYMBOL",
	"PRIVATE_SYMBOL",
	"REAL_SYMBOL",
	"RELATIVEOID_SYMBOL",
	"RELATIVEOIDIRI_SYMBOL",
	"SEQUENCE_SYMBOL",
	"SET_SYMBOL",
	"SETTINGS_SYMBOL",
	"SIZE_SYMBOL",
	"STRING_SYMBOL",
	"SYNTAX_SYMBOL",
	"T61STRING_SYMBOL",
	"TAGS_SYMBOL",
	"TELETEXSTRING_SYMBOL",
	"TIME_SYMBOL",
	"TIMEOFDAY_SYMBOL",
	"TRUE_SYMBOL",
	"TYPEIDENTIFIER_SYMBOL",
	"UNION_SYMBOL",
	"UNIQUE_SYMBOL",
	"UNIVERSAL_SYMBOL",
	"UNIVERSALSTRING_SYMBOL",
	"UTCTIME_SYMBOL",
	"UTF8STRING_SYMBOL",
	"VIDEOTEXSTRING_SYMBOL",
	"VISIBLESTRING_SYMBOL",
	"WITH_SYMBOL",
	"ASSIGNMENT_SYMBOL",
	"TokenCapitalString",
	"TokenString",
	"TokenNumber",
	"TokenInteger",
	"TokenFloat",
	"TokenBoolean",
	"TokenBString",
	"TokenHString",
	"TokenCString",
	"TokenBlock",
}

var ASNStatenames = [...]string{}

const ASNEofCode = 1
const ASNErrCode = 2
const ASNInitialStackSize = 16

//line asn.y:4524

//line yacctab:1
var ASNExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 45,
	120, 36,
	121, 36,
	-2, 32,
	-1, 83,
	17, 418,
	-2, 510,
	-1, 100,
	15, 510,
	-2, 418,
	-1, 165,
	4, 139,
	-2, 132,
	-1, 166,
	4, 140,
	-2, 133,
	-1, 204,
	14, 477,
	-2, 222,
	-1, 218,
	15, 510,
	-2, 418,
	-1, 223,
	17, 418,
	-2, 510,
	-1, 225,
	15, 510,
	-2, 418,
	-1, 229,
	10, 526,
	15, 510,
	-2, 418,
	-1, 269,
	44, 482,
	-2, 443,
	-1, 300,
	17, 418,
	18, 418,
	24, 418,
	51, 418,
	-2, 477,
	-1, 305,
	22, 265,
	110, 265,
	-2, 195,
	-1, 307,
	25, 262,
	74, 262,
	-2, 197,
	-1, 311,
	55, 206,
	-2, 201,
	-1, 315,
	14, 477,
	-2, 222,
	-1, 329,
	15, 169,
	-2, 258,
	-1, 331,
	15, 170,
	-2, 260,
	-1, 332,
	14, 226,
	15, 226,
	-2, 219,
	-1, 333,
	15, 510,
	-2, 418,
	-1, 340,
	4, 140,
	-2, 133,
	-1, 345,
	14, 480,
	15, 480,
	-2, 377,
	-1, 357,
	15, 510,
	-2, 418,
	-1, 368,
	15, 510,
	-2, 418,
	-1, 369,
	15, 510,
	-2, 418,
	-1, 373,
	4, 140,
	-2, 133,
	-1, 375,
	15, 510,
	-2, 418,
	-1, 376,
	15, 510,
	-2, 418,
	-1, 379,
	15, 173,
	-2, 136,
	-1, 390,
	15, 510,
	17, 418,
	-2, 525,
	-1, 403,
	10, 463,
	-2, 65,
	-1, 410,
	10, 449,
	-2, 66,
	-1, 411,
	10, 465,
	-2, 67,
	-1, 424,
	11, 418,
	15, 510,
	17, 418,
	-2, 525,
	-1, 430,
	10, 449,
	-2, 66,
	-1, 432,
	14, 477,
	-2, 222,
	-1, 433,
	14, 477,
	-2, 222,
	-1, 436,
	14, 477,
	-2, 222,
	-1, 475,
	15, 510,
	-2, 418,
	-1, 476,
	10, 449,
	-2, 66,
	-1, 477,
	10, 465,
	-2, 67,
	-1, 478,
	10, 460,
	-2, 453,
	-1, 479,
	10, 461,
	-2, 455,
	-1, 480,
	10, 462,
	-2, 456,
	-1, 507,
	4, 140,
	11, 133,
	17, 133,
	-2, 520,
	-1, 509,
	11, 418,
	15, 510,
	17, 418,
	-2, 275,
	-1, 515,
	25, 262,
	74, 262,
	-2, 198,
	-1, 552,
	14, 477,
	-2, 222,
	-1, 556,
	15, 169,
	-2, 278,
	-1, 557,
	11, 281,
	-2, 279,
	-1, 558,
	11, 282,
	-2, 280,
	-1, 561,
	5, 177,
	-2, 523,
	-1, 581,
	4, 136,
	5, 136,
	11, 136,
	15, 173,
	17, 136,
	-2, 523,
	-1, 589,
	15, 510,
	-2, 418,
	-1, 690,
	15, 510,
	-2, 418,
	-1, 706,
	10, 406,
	-2, 352,
}

const ASNPrivate = 57344

const ASNLast = 1824

var ASNAct = [...]int{
	357, 5, 676, 5, 678, 679, 638, 693, 697, 599,
	685, 675, 647, 355, 203, 631, 593, 617, 602, 677,
	336, 360, 563, 328, 451, 554, 302, 394, 412, 413,
	201, 285, 382, 361, 363, 348, 423, 414, 309, 680,
	284, 398, 431, 257, 307, 23, 311, 527, 332, 391,
	350, 65, 65, 386, 320, 399, 72, 83, 83, 389,
	65, 23, 681, 270, 33, 34, 231, 6, 7, 14,
	190, 23, 270, 564, 83, 596, 39, 276, 434, 38,
	23, 37, 227, 191, 166, 681, 214, 700, 207, 664,
	21, 83, 536, 21, 65, 196, 535, 663, 534, 62,
	209, 166, 494, 271, 101, 689, 648, 690, 605, 23,
	40, 579, 271, 376, 102, 375, 369, 368, 669, 281,
	211, 198, 185, 681, 29, 43, 23, 618, 281, 50,
	51, 213, 36, 93, 51, 566, 55, 287, 288, 277,
	6, 7, 50, 432, 566, 688, 287, 288, 277, 286,
	487, 73, 60, 6, 7, 9, 22, 24, 286, 620,
	420, 404, 444, 6, 7, 41, 435, 280, 23, 559,
	420, 428, 22, 24, 215, 220, 280, 670, 23, 6,
	7, 668, 22, 24, 94, 268, 269, 282, 6, 7,
	426, 22, 24, 194, 268, 269, 282, 237, 539, 6,
	7, 6, 7, 275, 68, 340, 23, 351, 67, 90,
	437, 362, 92, 367, 216, 221, 45, 6, 7, 373,
	22, 24, 6, 7, 166, 379, 166, 351, 222, 346,
	340, 706, 6, 7, 374, 20, 395, 22, 24, 371,
	233, 204, 364, 61, 378, 30, 380, 366, 356, 100,
	384, 241, 23, 388, 228, 230, 242, 28, 372, 438,
	387, 74, 381, 527, 303, 347, 204, 202, 205, 48,
	217, 410, 275, 49, 238, 329, 6, 7, 385, 22,
	24, 27, 71, 204, 417, 621, 6, 7, 331, 22,
	24, 529, 26, 97, 417, 69, 383, 483, 6, 7,
	510, 340, 419, 55, 70, 430, 508, 401, 96, 223,
	91, 418, 415, 396, 6, 7, 340, 22, 24, 57,
	421, 427, 56, 424, 219, 481, 416, 341, 594, 52,
	53, 598, 23, 597, 166, 99, 419, 582, 551, 275,
	446, 576, 440, 575, 204, 418, 415, 517, 411, 421,
	443, 218, 99, 452, 441, 439, 502, 400, 166, 485,
	416, 20, 42, 22, 24, 513, 219, 485, 204, 373,
	373, 44, 204, 525, 166, 429, 373, 373, 456, 460,
	422, 32, 411, 225, 224, 630, 329, 445, 632, 463,
	465, 476, 395, 395, 456, 206, 468, 470, 518, 331,
	449, 486, 225, 538, 395, 225, 224, 447, 464, 466,
	499, 384, 442, 42, 388, 469, 471, 206, 400, 482,
	16, 387, 480, 275, 226, 507, 448, 717, 393, 275,
	687, 479, 415, 340, 340, 23, 31, 340, 341, 385,
	6, 7, 484, 22, 24, 506, 416, 495, 351, 662,
	351, 496, 455, 484, 652, 590, 235, 383, 422, 520,
	362, 237, 615, 367, 23, 497, 46, 616, 477, 396,
	396, 501, 42, 714, 526, 516, 340, 511, 515, 514,
	695, 396, 707, 521, 588, 395, 237, 396, 275, 589,
	544, 705, 237, 530, 234, 528, 384, 533, 500, 388,
	522, 686, 504, 329, 329, 687, 387, 329, 537, 684,
	166, 658, 482, 657, 561, 459, 331, 331, 543, 275,
	331, 545, 628, 419, 385, 452, 237, 540, 600, 622,
	557, 422, 418, 392, 225, 538, 542, 485, 531, 581,
	558, 606, 583, 6, 7, 523, 22, 24, 572, 568,
	524, 552, 275, 340, 493, 341, 341, 492, 475, 341,
	275, 458, 396, 396, 573, 275, 574, 565, 403, 238,
	548, 550, 6, 7, 455, 22, 24, 490, 488, 587,
	556, 461, 491, 489, 454, 425, 462, 595, 93, 718,
	166, 275, 671, 708, 623, 619, 691, 607, 608, 683,
	585, 674, 403, 569, 656, 655, 641, 362, 591, 640,
	557, 584, 604, 565, 614, 612, 580, 626, 627, 609,
	558, 512, 474, 329, 457, 453, 377, 370, 625, 197,
	673, 644, 619, 629, 672, 636, 331, 650, 229, 613,
	578, 637, 577, 560, 509, 352, 212, 210, 646, 645,
	208, 95, 651, 12, 3, 402, 473, 8, 650, 650,
	556, 611, 604, 654, 472, 661, 653, 467, 567, 1,
	665, 666, 272, 162, 161, 341, 699, 696, 356, 365,
	624, 359, 358, 603, 601, 682, 571, 354, 403, 353,
	275, 166, 698, 701, 142, 694, 141, 450, 503, 592,
	299, 639, 298, 704, 692, 555, 643, 498, 711, 553,
	295, 703, 710, 698, 709, 713, 712, 716, 715, 294,
	293, 330, 505, 667, 660, 659, 649, 635, 634, 633,
	519, 562, 343, 334, 333, 327, 326, 325, 702, 324,
	323, 322, 321, 319, 318, 317, 316, 314, 313, 312,
	436, 310, 433, 308, 305, 586, 296, 292, 532, 291,
	290, 304, 289, 138, 349, 193, 192, 189, 188, 23,
	98, 54, 187, 168, 315, 167, 165, 137, 136, 135,
	134, 133, 64, 541, 63, 409, 639, 306, 279, 546,
	278, 139, 180, 140, 549, 186, 143, 408, 642, 610,
	297, 300, 144, 145, 547, 407, 146, 147, 301, 406,
	283, 148, 405, 274, 273, 267, 149, 281, 335, 182,
	176, 170, 181, 570, 266, 265, 264, 342, 150, 263,
	151, 262, 174, 261, 344, 287, 288, 345, 171, 154,
	184, 155, 260, 152, 259, 338, 258, 286, 256, 173,
	255, 156, 158, 157, 159, 160, 339, 219, 254, 253,
	177, 252, 175, 163, 164, 280, 251, 250, 249, 248,
	178, 183, 169, 179, 172, 337, 247, 6, 7, 270,
	22, 24, 246, 268, 269, 282, 245, 23, 244, 243,
	240, 239, 315, 236, 132, 131, 130, 129, 128, 127,
	126, 125, 124, 123, 122, 306, 121, 120, 119, 139,
	180, 140, 118, 186, 143, 117, 116, 114, 115, 271,
	144, 145, 113, 112, 146, 147, 111, 110, 109, 148,
	108, 107, 106, 105, 149, 281, 335, 182, 176, 170,
	181, 104, 103, 89, 88, 342, 150, 87, 151, 86,
	174, 85, 344, 287, 288, 345, 171, 154, 184, 155,
	84, 152, 200, 338, 199, 286, 82, 173, 81, 156,
	158, 157, 159, 160, 339, 219, 80, 79, 177, 78,
	175, 163, 164, 280, 77, 76, 75, 397, 178, 183,
	169, 179, 172, 337, 232, 6, 7, 270, 22, 24,
	195, 268, 269, 282, 66, 23, 59, 58, 47, 35,
	315, 13, 25, 19, 18, 17, 15, 11, 10, 4,
	2, 0, 0, 0, 0, 0, 0, 139, 180, 140,
	0, 186, 143, 0, 0, 0, 0, 271, 144, 145,
	0, 0, 146, 147, 0, 0, 0, 148, 0, 0,
	0, 0, 149, 281, 335, 182, 176, 170, 181, 0,
	0, 0, 0, 342, 150, 0, 151, 0, 174, 0,
	344, 287, 288, 345, 171, 154, 184, 155, 0, 152,
	0, 338, 0, 286, 0, 173, 0, 156, 158, 157,
	159, 160, 339, 219, 390, 404, 177, 0, 175, 163,
	164, 280, 23, 0, 0, 0, 178, 183, 169, 179,
	172, 337, 0, 6, 7, 0, 22, 24, 0, 268,
	269, 282, 0, 0, 139, 180, 140, 0, 186, 143,
	0, 0, 0, 0, 271, 144, 145, 0, 0, 146,
	147, 0, 0, 0, 148, 0, 0, 0, 0, 149,
	281, 0, 182, 176, 170, 181, 0, 0, 0, 0,
	0, 150, 0, 151, 0, 174, 0, 0, 287, 288,
	345, 171, 154, 184, 155, 0, 152, 0, 0, 0,
	286, 0, 173, 0, 156, 158, 157, 159, 160, 0,
	0, 270, 0, 177, 0, 175, 163, 164, 280, 23,
	0, 0, 0, 178, 183, 169, 179, 172, 0, 0,
	6, 7, 0, 22, 24, 0, 268, 269, 478, 0,
	0, 139, 180, 140, 0, 186, 143, 0, 0, 0,
	0, 271, 144, 145, 0, 0, 146, 147, 0, 0,
	0, 148, 0, 0, 0, 0, 149, 281, 0, 182,
	176, 170, 181, 0, 0, 0, 0, 0, 150, 0,
	151, 0, 174, 0, 0, 287, 288, 345, 171, 154,
	184, 155, 0, 152, 0, 0, 0, 286, 0, 173,
	0, 156, 158, 157, 159, 160, 0, 0, 390, 0,
	177, 0, 175, 163, 164, 280, 23, 0, 0, 0,
	178, 183, 169, 179, 172, 0, 0, 6, 7, 0,
	22, 24, 0, 268, 269, 282, 0, 0, 139, 180,
	140, 0, 186, 143, 0, 0, 0, 0, 271, 144,
	145, 0, 0, 146, 147, 0, 0, 0, 148, 0,
	0, 0, 0, 149, 281, 0, 182, 176, 170, 181,
	0, 0, 0, 0, 0, 150, 0, 151, 0, 174,
	0, 0, 287, 288, 345, 171, 154, 184, 155, 0,
	152, 0, 0, 0, 286, 0, 173, 0, 156, 158,
	157, 159, 160, 0, 0, 0, 0, 177, 0, 175,
	163, 164, 280, 23, 0, 0, 0, 178, 183, 169,
	179, 172, 0, 0, 6, 7, 0, 22, 24, 0,
	268, 269, 282, 0, 0, 139, 180, 140, 0, 186,
	143, 0, 0, 0, 0, 0, 144, 145, 0, 0,
	146, 147, 0, 0, 0, 148, 0, 0, 0, 0,
	149, 0, 0, 182, 176, 170, 181, 0, 0, 0,
	0, 0, 150, 0, 151, 0, 174, 0, 0, 0,
	0, 153, 171, 154, 184, 155, 0, 152, 0, 0,
	0, 0, 0, 173, 0, 156, 158, 157, 159, 160,
	0, 0, 0, 0, 177, 0, 175, 163, 164, 225,
	224, 0, 0, 0, 178, 183, 169, 179, 172, 0,
	0, 6, 7, 0, 22, 24, 0, 0, 0, 139,
	180, 140, 0, 186, 143, 0, 0, 0, 0, 0,
	144, 145, 0, 0, 146, 147, 0, 0, 0, 148,
	0, 0, 0, 0, 149, 0, 0, 182, 176, 170,
	181, 0, 0, 0, 0, 0, 150, 0, 151, 0,
	174, 0, 0, 0, 0, 153, 171, 154, 184, 155,
	0, 152, 0, 0, 0, 0, 0, 173, 0, 156,
	158, 157, 159, 160, 42, 0, 0, 0, 177, 0,
	175, 163, 164, 0, 0, 0, 0, 0, 178, 183,
	169, 179, 172, 0, 0, 6, 7, 139, 180, 140,
	0, 186, 143, 0, 0, 0, 0, 0, 144, 145,
	0, 0, 146, 147, 0, 0, 0, 148, 0, 0,
	0, 0, 149, 0, 0, 182, 176, 170, 181, 0,
	0, 0, 0, 0, 150, 0, 151, 0, 174, 0,
	0, 0, 0, 153, 171, 154, 184, 155, 0, 152,
	0, 0, 0, 0, 0, 173, 0, 156, 158, 157,
	159, 160, 0, 0, 0, 0, 177, 0, 175, 163,
	164, 0, 0, 0, 0, 0, 178, 183, 169, 179,
	172, 0, 0, 6, 7, 139, 180, 140, 0, 186,
	143, 0, 0, 0, 0, 0, 144, 145, 0, 270,
	146, 147, 0, 0, 0, 148, 0, 23, 0, 0,
	149, 0, 0, 182, 176, 170, 181, 0, 0, 0,
	0, 0, 150, 0, 151, 0, 174, 0, 0, 0,
	0, 153, 171, 154, 184, 155, 0, 152, 0, 271,
	0, 0, 0, 173, 0, 156, 158, 157, 159, 160,
	0, 0, 0, 0, 177, 281, 175, 163, 164, 0,
	0, 0, 0, 0, 178, 183, 169, 179, 172, 0,
	0, 6, 7, 287, 288, 277, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 6, 7, 0, 22, 24,
	0, 268, 269, 282,
}

var ASNPact = [...]int{
	-53, -1000, -53, -1000, 107, 649, -1000, -1000, -1000, -51,
	-1000, -1000, 114, 225, 52, 240, -1000, -1000, -1000, -1000,
	364, -1000, -1000, -59, -1000, 74, -23, -25, -28, -1000,
	-1000, -1000, 49, -1000, -1000, 461, 57, -1000, -1000, -1000,
	353, 183, 455, -1000, -1000, 73, 310, 84, 77, 60,
	-53, 178, -1000, 251, -1000, -64, -53, -53, 284, -53,
	-1000, 123, -1000, 647, -1000, -1000, 282, 267, -1000, 578,
	-1000, 84, -1000, -53, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1563, -1000, -1000, -1000, -1000, -1000, -1000,
	-53, -1000, -1000, -53, -53, 624, -1000, -1000, -1000, -1000,
	1651, 351, 402, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -13,
	-1000, -1000, -1000, 646, -1000, -1000, -1000, 11, 643, -1000,
	35, 642, -1000, -1000, 65, -15, -1000, -1000, -1000, 266,
	224, -1000, -1000, -1000, -1000, -1000, 391, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 409, -19, 634, 634, -1000,
	634, -1000, -1000, -1000, -1000, -1000, 452, -1000, 355, -1000,
	-1000, 380, 1695, -1000, 757, -1000, -53, 641, -53, -1000,
	-53, -1000, -53, -1000, -1000, 32, 31, 622, 1651, 355,
	30, 28, 621, 1651, -53, 1651, -53, -1000, -1000, 1284,
	-1000, -1000, -1000, -1000, -1000, 423, -1000, 403, -1000, -1000,
	634, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	156, 1695, -1000, -1000, -1000, 447, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 299,
	-1000, -1000, -1000, -1000, -1000, -1000, 575, 153, -1000, -1000,
	1187, 134, -1000, -1000, 156, -1000, 88, -1000, 56, -1000,
	185, -1000, 88, -1000, -1000, 875, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 634,
	-1000, -1000, -1000, 1651, 397, 355, 355, 120, 1695, -53,
	369, 392, -1000, 412, -1000, -1000, -1000, -1000, -1000, 385,
	-1000, -1000, -53, 620, 574, 564, -1000, 1651, 619, 551,
	505, -1000, 362, -1000, -1000, 576, -1000, 362, 1651, 1651,
	-1000, 355, -1000, 1475, -1000, 1651, 1651, -1000, 355, -1000,
	355, -1000, 617, 548, 355, -1000, -1000, 380, -1000, -1000,
	1090, 320, 33, -1000, -1000, 342, -1000, -1000, -1000, -1000,
	-53, -1000, 106, 33, -1000, 573, 572, 547, 544, 97,
	342, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	49, -1000, 1695, 338, 1381, 279, 640, 249, 1695, 616,
	350, -1000, 993, 993, -1000, -1000, 993, -1000, -1000, -1000,
	329, 355, 383, -1000, 355, -1000, -1000, -53, -1000, -53,
	540, -1000, 356, -1000, 236, -53, 355, -1000, 264, -53,
	33, -1000, -53, 355, -1000, 355, -1000, 1, 355, -1000,
	355, -1000, -2, -6, -1000, 1187, 520, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 194, 33, -1000, 1695, -1000, -53,
	-1000, 166, 49, 49, -1000, -1000, -1000, -1000, -1000, 342,
	-1000, -1000, -1000, -1000, -1000, -1000, 327, 388, 541, 1651,
	132, -1000, 639, -53, -1000, -1000, -1000, -1000, 59, -1000,
	-1000, -1000, -1000, -1000, -53, 33, 538, 299, -1000, 299,
	-1000, 325, 323, -1000, 638, 636, 26, 611, -53, -1000,
	319, -1000, -1000, -1000, -1000, -1000, -1000, 532, -1000, 606,
	-1000, 1695, 875, 479, -1000, 444, 634, 355, 380, 1695,
	305, -1000, -1000, -1000, 68, -1000, -1000, -43, -1000, 315,
	313, 518, 102, -1000, 531, -1000, -1000, 236, 236, -53,
	-1000, -1000, -1000, 49, -1000, -1000, -1000, -1000, -1000, 1651,
	1695, -1000, 457, -1000, 112, -1000, 117, -1000, -1000, -1000,
	258, 519, -1000, -1000, -1000, 588, -53, 518, 518, -1000,
	512, -1000, -1000, -1000, -1000, -1000, 305, 370, 373, -1000,
	631, -1000, 102, 49, -1000, 505, 604, 601, 49, -1000,
	-53, -53, 373, -1000, -1000, -1000, 79, -1000, -53, 443,
	-1000, -1000, 600, -1000, -1000, 370, -1000, 599, 503, 501,
	355, 442, -1000, 0, -9, -1000, -1000, -53, -53, -1000,
	90, -1000, 585, 630, 626, 596, -1000, -1000, -1000, -1000,
	-1000, -1000, 20, 20, -1000, 594, 499, 491, 495, -1000,
	58, 22, 591, -1000, 236, 470, 81, 43, -1000, 1695,
	1651, -1000, 491, 481, -1000, 204, 472, -1000, -1000, -1000,
	587, -1000, -1000, 355, 470, 43, -1000, 81, 49, -1000,
	463, -1000, -1000, 43, 43, 420, -1000, 582, -1000,
}

var ASNPgo = [...]int{
	0, 1020, 654, 1019, 1018, 1017, 1016, 420, 1015, 1014,
	1013, 1012, 1011, 1009, 1008, 269, 273, 1007, 1006, 152,
	1004, 243, 99, 1000, 994, 43, 49, 27, 987, 41,
	55, 151, 261, 297, 986, 985, 984, 979, 977, 976,
	968, 966, 20, 48, 53, 964, 962, 30, 23, 59,
	960, 951, 949, 947, 944, 943, 942, 941, 933, 932,
	931, 930, 928, 927, 926, 923, 922, 918, 917, 916,
	915, 912, 908, 907, 906, 904, 903, 902, 901, 900,
	899, 898, 897, 896, 895, 894, 893, 891, 890, 66,
	889, 888, 886, 882, 876, 869, 868, 867, 866, 861,
	859, 858, 850, 848, 846, 844, 842, 833, 831, 829,
	826, 825, 824, 815, 814, 813, 812, 28, 810, 40,
	31, 809, 29, 805, 804, 799, 798, 797, 794, 790,
	788, 785, 37, 282, 784, 782, 781, 780, 779, 778,
	777, 776, 775, 773, 772, 122, 35, 32, 771, 770,
	768, 767, 70, 83, 766, 765, 764, 50, 14, 763,
	762, 36, 760, 759, 757, 756, 755, 26, 754, 42,
	44, 753, 752, 38, 751, 750, 46, 749, 748, 747,
	746, 745, 744, 743, 54, 742, 741, 740, 739, 737,
	736, 735, 734, 733, 732, 731, 22, 730, 729, 728,
	727, 12, 726, 725, 724, 723, 721, 720, 719, 710,
	709, 25, 705, 702, 700, 699, 16, 17, 15, 698,
	39, 697, 24, 696, 694, 689, 687, 19, 686, 9,
	13, 684, 18, 683, 682, 6, 681, 680, 21, 33,
	34, 679, 11, 2, 10, 7, 4, 5, 677, 8,
	676, 674, 673, 165, 0, 77, 672, 672, 669, 668,
	667, 666, 664, 663, 656, 655, 655,
}

var ASNR1 = [...]int{
	0, 258, 1, 1, 2, 133, 133, 133, 148, 149,
	3, 12, 12, 4, 4, 5, 6, 6, 7, 7,
	7, 8, 9, 10, 11, 11, 11, 11, 13, 13,
	14, 14, 14, 16, 16, 16, 16, 20, 20, 21,
	21, 22, 22, 134, 135, 135, 15, 15, 17, 17,
	18, 18, 19, 23, 24, 24, 24, 25, 25, 25,
	26, 26, 27, 27, 27, 27, 28, 29, 29, 30,
	31, 31, 31, 32, 32, 32, 32, 32, 32, 32,
	32, 34, 35, 36, 37, 38, 39, 40, 41, 41,
	41, 41, 41, 41, 42, 42, 42, 43, 43, 43,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 57, 57, 57,
	57, 57, 136, 136, 136, 136, 141, 142, 143, 144,
	144, 89, 89, 147, 147, 147, 147, 147, 147, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 138, 139, 145, 145, 145,
	145, 150, 150, 154, 151, 152, 152, 155, 153, 146,
	156, 156, 157, 140, 58, 58, 158, 160, 160, 162,
	164, 164, 164, 165, 166, 167, 167, 168, 168, 170,
	170, 173, 173, 176, 176, 176, 177, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 180,
	181, 192, 192, 182, 193, 193, 194, 194, 195, 195,
	196, 196, 183, 184, 185, 259, 186, 197, 198, 198,
	199, 201, 201, 202, 203, 204, 204, 205, 205, 205,
	205, 200, 187, 188, 189, 190, 191, 179, 179, 179,
	179, 206, 174, 175, 175, 171, 172, 172, 169, 163,
	163, 163, 207, 210, 210, 210, 211, 211, 211, 211,
	211, 212, 212, 208, 208, 213, 214, 215, 215, 216,
	216, 217, 217, 218, 218, 209, 209, 209, 161, 161,
	219, 219, 219, 159, 159, 159, 159, 159, 159, 159,
	159, 220, 59, 59, 221, 221, 222, 222, 60, 61,
	61, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 224, 62, 225, 225, 226, 230,
	230, 227, 227, 228, 228, 231, 231, 232, 232, 233,
	235, 235, 229, 229, 63, 64, 65, 66, 68, 234,
	234, 234, 236, 237, 238, 238, 239, 239, 240, 240,
	67, 69, 70, 70, 241, 241, 71, 72, 73, 74,
	75, 76, 77, 78, 260, 261, 79, 242, 242, 242,
	242, 242, 243, 246, 246, 247, 247, 247, 247, 244,
	244, 248, 248, 249, 249, 250, 245, 80, 80, 262,
	263, 81, 264, 82, 84, 85, 83, 83, 251, 252,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 93, 93, 93, 93, 93, 116, 116, 117,
	94, 95, 95, 114, 114, 114, 114, 118, 121, 121,
	122, 122, 122, 122, 119, 123, 124, 125, 126, 120,
	127, 128, 115, 96, 97, 98, 99, 100, 101, 101,
	103, 104, 265, 104, 105, 105, 129, 129, 130, 130,
	130, 102, 106, 107, 131, 131, 132, 132, 132, 108,
	109, 110, 111, 112, 113, 91, 92, 45, 44, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 33,
	33, 33, 33, 86, 87, 88, 89, 256, 256, 254,
	254, 255, 255, 255, 255, 253, 266, 257,
}

var ASNR2 = [...]int{
	0, 1, 1, 2, 10, 1, 2, 0, 3, 0,
	2, 2, 0, 1, 0, 3, 1, 2, 1, 1,
	1, 1, 1, 4, 2, 2, 2, 0, 2, 0,
	3, 3, 0, 3, 3, 2, 0, 1, 0, 1,
	3, 1, 1, 1, 1, 3, 3, 0, 1, 0,
	1, 2, 3, 2, 1, 1, 0, 3, 4, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 4,
	1, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 4, 3, 4, 3, 4, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 2, 1,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 3, 2, 1, 1, 3, 2, 1,
	1, 3, 1, 3, 2, 1, 4, 1, 1, 1,
	1, 3, 5, 1, 1, 1, 2, 1, 3, 1,
	3, 1, 2, 1, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 0, 4, 1, 2, 1, 1, 1, 2,
	1, 1, 2, 2, 1, 0, 7, 1, 1, 1,
	3, 1, 3, 2, 2, 1, 0, 1, 1, 1,
	0, 5, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 2, 1,
	1, 1, 5, 1, 3, 0, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 6, 1, 3, 2,
	4, 1, 3, 2, 0, 2, 3, 5, 2, 0,
	1, 1, 3, 4, 4, 4, 4, 4, 4, 4,
	4, 2, 2, 5, 1, 3, 4, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 4, 1, 5, 1, 1,
	3, 1, 2, 2, 0, 1, 3, 1, 1, 6,
	2, 0, 2, 0, 1, 1, 1, 2, 4, 1,
	4, 6, 1, 1, 1, 3, 1, 1, 4, 4,
	1, 3, 1, 4, 1, 3, 1, 1, 3, 2,
	2, 1, 1, 1, 0, 0, 14, 1, 5, 7,
	5, 3, 1, 1, 3, 1, 2, 3, 3, 2,
	0, 1, 3, 1, 1, 6, 2, 3, 3, 0,
	0, 14, 0, 7, 1, 1, 1, 1, 0, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 2, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 3,
	1, 1, 1, 1, 9, 1, 1, 1, 1, 5,
	1, 1, 1, 3, 1, 1, 1, 0, 1, 1,
	1, 1, 0, 4, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 3, 1, 2, 1, 1, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
	1, 1, 1, 3, 2, 0, 0, 1, 1, 1,
	1, 1, 2, 1, 2, 3, 0, 2,
}

var ASNChk = [...]int{
	-1000, -258, -1, -2, -3, -254, 120, 121, -2, 48,
	-4, -5, 4, -12, 120, -6, -7, -8, -9, -10,
	121, -255, 123, 12, 124, -11, 67, 56, 32, 72,
	5, -7, 17, 123, 124, -13, 58, 104, 104, 104,
	-255, -253, 11, 68, 18, 33, 11, -14, -15, -16,
	69, 57, 19, -133, -148, 52, -16, -15, -17, -18,
	-19, -21, -22, -134, -135, -254, -20, 30, 26, -21,
	53, -133, 120, -31, -32, -34, -35, -36, -37, -38,
	-39, -40, -41, -254, -50, -51, -52, -53, -54, -55,
	-31, 26, -19, 10, 61, 4, 26, 26, -149, -32,
	-253, -42, -47, -56, -57, -58, -59, -60, -61, -62,
	-63, -64, -65, -66, -68, -67, -69, -70, -71, -72,
	-73, -74, -75, -76, -77, -78, -79, -80, -81, -82,
	-83, -84, -85, -136, -137, -138, -139, -140, -159, 34,
	36, -223, -224, 39, 45, 46, 49, 50, 54, 59,
	71, 73, 86, 80, 82, 84, 94, 96, 95, 97,
	98, -251, -252, 106, 107, -141, -254, -142, -143, 115,
	64, 81, 117, 92, 75, 105, 63, 103, 113, 116,
	35, 65, 62, 114, 83, -145, 38, -144, -150, -151,
	-152, -153, -154, -155, -22, -23, -254, 5, -42, -45,
	-46, -47, -253, -158, 17, -253, 15, 101, 4, 89,
	4, 85, 4, 66, 101, -158, -184, 4, 85, 100,
	-158, -184, 4, 85, 15, 14, 15, 101, -89, 4,
	-89, -89, -24, -25, -33, 4, -86, -254, -255, -87,
	-88, -43, -44, -90, -91, -92, -93, -94, -95, -96,
	-97, -98, -99, -100, -101, -102, -103, -25, -104, -105,
	-106, -107, -108, -109, -110, -111, -112, -113, 126, 127,
	4, 44, -256, -114, -115, -254, -255, 80, -129, -130,
	108, 60, 128, -118, -119, -120, 90, 78, 79, -160,
	-162, -163, -164, -207, -208, -209, -165, 43, -213, -214,
	44, 51, -167, -49, 4, -168, 30, -170, -171, -173,
	-174, -176, -177, -178, -179, 17, -180, -181, -182, -183,
	-184, -185, -186, -187, -188, -189, -190, -191, -48, -152,
	-206, -153, -43, -192, -193, 61, -42, 118, 88, 99,
	-254, -145, 70, -194, 77, 80, -48, -49, -146, -156,
	-157, -254, 4, -225, -226, -230, -220, -254, -234, -236,
	-238, -239, -254, -240, -47, -241, -240, -254, 85, 85,
	5, -42, -220, -254, -158, 85, 85, 5, -42, -254,
	-42, -146, -147, -89, -42, -43, -44, -47, -48, -49,
	4, -26, -33, 5, -27, -254, -255, -28, -29, -30,
	15, -89, -265, -33, 5, -116, -121, -123, -127, -131,
	-254, -255, -117, -122, -132, -29, -30, 128, -119, -120,
	4, -43, 11, -161, 24, 10, 37, -42, 37, -152,
	-254, -169, 55, -172, 22, 110, -175, 25, 74, -169,
	-167, -42, 15, -158, 42, -43, -254, 15, 14, 15,
	-221, -222, -254, 5, 10, 10, -42, 5, 10, 10,
	17, 5, 10, -42, -220, -42, -220, -260, -42, -220,
	-42, -220, -262, -264, 5, 10, -254, -255, 128, -119,
	-120, 5, -27, -33, -26, 17, -254, 44, 5, 10,
	5, 10, 10, 10, 5, -132, -29, -30, -33, -254,
	-255, -43, 18, -219, -255, -33, -42, -254, 27, 4,
	51, -43, 5, 15, -176, -170, -173, 18, 15, -197,
	-158, -146, -157, 5, 10, 17, -227, 27, -220, 27,
	-239, -255, -33, -240, 97, 98, 98, -147, 15, 4,
	-29, -33, -43, -117, -254, -122, -33, -124, -255, -128,
	-255, 11, 10, -210, -211, -212, -152, -42, -47, 37,
	4, -254, -195, -196, 14, -43, 76, -259, -222, -255,
	-33, -228, 10, -161, -161, 18, 18, 4, 4, 85,
	5, -254, 18, 10, 5, -43, -166, -167, 5, 10,
	11, -43, -215, -216, 23, -196, 118, 18, 18, -229,
	10, -231, -232, -233, -220, 6, 10, -227, -227, -220,
	-125, -255, -211, -43, -48, 5, 10, -217, 15, -254,
	42, 27, 10, 6, -237, -238, -229, -229, 10, -216,
	15, -218, 15, -198, -199, -200, 4, -232, -235, -255,
	5, 5, -126, -255, -254, -217, -218, -201, 27, -202,
	-254, -230, 11, -261, -263, 5, 5, 10, 10, -203,
	-204, -158, 7, 97, 98, -201, -201, -205, 91, 28,
	87, 7, 4, 4, 5, -242, -243, -227, -246, -247,
	-220, 42, -242, 5, 10, -244, 10, 10, 87, 47,
	85, 5, -227, -245, -229, 10, -248, -249, -247, -250,
	6, -247, -43, -42, -244, 10, 27, 10, 6, -229,
	-245, -243, -249, -235, 10, -246, -243, 7, 7,
}

var ASNDef = [...]int{
	0, -2, 1, 2, 0, 14, 529, 530, 3, 12,
	10, 13, 0, 27, 0, 0, 16, 18, 19, 20,
	21, 22, 531, 0, 533, 29, 0, 0, 0, 11,
	15, 17, 0, 532, 534, 0, 0, 24, 25, 26,
	0, 0, 0, 28, 23, -2, 0, 7, 36, 47,
	49, 0, 535, 0, 5, 0, 72, 72, 0, 48,
	50, 0, 39, 41, 42, 43, 0, 0, 35, 37,
	4, 6, 9, 30, 70, 73, 74, 75, 76, 77,
	78, 79, 80, -2, 88, 89, 90, 91, 92, 93,
	31, 46, 51, 0, 0, 0, 33, 34, 8, 71,
	-2, 0, 0, 94, 95, 96, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 185, 0,
	318, 319, 320, 0, 354, 355, 356, 0, 0, 370,
	0, 372, 376, 377, 0, 0, 381, 382, 383, 0,
	0, 416, 417, 414, 415, -2, -2, 134, 135, 149,
	150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
	160, 161, 162, 163, 164, 0, 0, 526, 167, 168,
	169, 170, 171, 175, 40, 52, 56, 45, 81, 83,
	85, 0, 477, 184, -2, 511, 0, 312, 0, 357,
	0, 510, 0, 379, 380, 0, 0, 0, -2, 0,
	0, 0, 0, -2, 0, -2, 0, 334, 137, -2,
	174, 178, 53, 54, 55, 525, 519, 520, 521, 522,
	526, 82, 84, 97, 98, 99, 420, 421, 422, 423,
	424, 425, 426, 427, 428, 429, 430, 431, 432, 433,
	434, 435, 436, 437, 438, 439, 440, 441, 442, -2,
	525, 477, 450, 451, 452, 475, 478, 480, 484, 485,
	527, 528, 453, 454, 455, 456, 488, 489, 490, 299,
	187, 188, 189, 269, 270, 271, 190, 0, 283, 284,
	-2, 0, 193, 285, 525, -2, 0, -2, 0, 199,
	0, -2, 0, 203, 204, -2, 207, 208, 209, 210,
	211, 212, 213, 214, 215, 216, 217, 218, 257, -2,
	259, -2, -2, -2, 0, 0, 234, 0, 477, 0,
	-2, 0, 221, 224, 227, -2, 86, 87, 378, 179,
	180, 182, 0, 0, 336, 338, 339, -2, 0, 359,
	362, 364, 366, 367, 371, 0, 374, 0, -2, -2,
	384, 407, 408, -2, 233, -2, -2, 409, 412, -2,
	165, 166, 0, 0, 143, 144, 145, 146, 147, 148,
	-2, 525, 65, 59, 60, 66, 67, 62, 63, 64,
	0, 524, 0, -2, 59, 0, 0, 0, 0, 525,
	-2, -2, 447, 458, 494, 63, 64, 460, 461, 462,
	0, 446, 477, 0, -2, 0, 0, 295, 477, 0,
	-2, 196, -2, -2, 266, 267, -2, 263, 264, 202,
	0, 220, 0, 232, 0, 252, 253, 0, 225, 0,
	0, 314, 0, 335, 0, 0, 311, 358, 0, 0,
	525, 373, 0, 305, 309, 306, 310, 0, 303, 307,
	304, 308, 0, 0, 141, -2, -2, -2, -2, -2,
	-2, 57, 61, 65, 0, 525, 523, 477, 444, 0,
	457, 525, 0, 0, 493, 495, 496, 497, 68, 520,
	465, 473, 186, 298, 300, 301, 0, -2, 191, -2,
	0, 296, 0, 0, 268, -2, 200, 205, 477, 235,
	237, 166, 181, 313, 0, 525, 344, 299, 340, 299,
	365, 0, 0, 375, 0, 0, 0, 0, 0, 58,
	0, 68, 483, 448, 449, 459, 463, 0, 466, 0,
	471, 477, -2, 0, 273, 0, -2, -2, -2, 477,
	0, -2, 223, 228, 477, 230, 231, 0, 315, 0,
	0, 353, 0, 342, 360, 368, 369, 0, 0, 0,
	142, -2, 69, 0, 469, 302, 192, 194, 272, -2,
	477, 297, 0, 287, 0, 229, 0, 316, 317, 337,
	0, 343, 345, 347, 348, 0, 0, 353, 353, 413,
	0, 467, 274, 276, 277, 286, 0, 289, 294, 291,
	0, 352, 0, 351, 361, 363, 0, 0, 0, 288,
	0, 0, 294, 236, 238, 239, 0, 346, 0, 0,
	385, 410, 0, 468, 292, 290, 293, 0, 0, 241,
	246, 0, 350, 0, 0, 464, 240, 0, 0, 243,
	250, 245, 0, 0, 0, 0, 242, 244, 247, 248,
	249, 349, 0, 0, 251, 0, 387, 400, 392, 393,
	395, 0, 0, 386, 0, 353, 0, 0, 396, 477,
	-2, 411, 400, 0, 391, 0, 399, 401, 403, 404,
	0, 394, 397, 398, 353, 0, -2, 0, 351, 388,
	0, 390, 402, 0, 0, 0, 389, 0, 405,
}

var ASNTok1 = [...]int{
	1,
}

var ASNTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129,
}

var ASNTok3 = [...]int{
	0,
}

var ASNErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	ASNDebug        = 0
	ASNErrorVerbose = false
)

type ASNLexer interface {
	Lex(lval *ASNSymType) int
	Error(s string)
}

type ASNParser interface {
	Parse(ASNLexer) int
	Lookahead() int
}

type ASNParserImpl struct {
	lval  ASNSymType
	stack [ASNInitialStackSize]ASNSymType
	char  int
}

func (p *ASNParserImpl) Lookahead() int {
	return p.char
}

func ASNNewParser() ASNParser {
	return &ASNParserImpl{}
}

const ASNFlag = -1000

func ASNTokname(c int) string {
	if c >= 1 && c-1 < len(ASNToknames) {
		if ASNToknames[c-1] != "" {
			return ASNToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func ASNStatname(s int) string {
	if s >= 0 && s < len(ASNStatenames) {
		if ASNStatenames[s] != "" {
			return ASNStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func ASNErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !ASNErrorVerbose {
		return "syntax error"
	}

	for _, e := range ASNErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + ASNTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := ASNPact[state]
	for tok := TOKSTART; tok-1 < len(ASNToknames); tok++ {
		if n := base + tok; n >= 0 && n < ASNLast && ASNChk[ASNAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if ASNDef[state] == -2 {
		i := 0
		for ASNExca[i] != -1 || ASNExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; ASNExca[i] >= 0; i += 2 {
			tok := ASNExca[i]
			if tok < TOKSTART || ASNExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if ASNExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += ASNTokname(tok)
	}
	return res
}

func ASNlex1(lex ASNLexer, lval *ASNSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = ASNTok1[0]
		goto out
	}
	if char < len(ASNTok1) {
		token = ASNTok1[char]
		goto out
	}
	if char >= ASNPrivate {
		if char < ASNPrivate+len(ASNTok2) {
			token = ASNTok2[char-ASNPrivate]
			goto out
		}
	}
	for i := 0; i < len(ASNTok3); i += 2 {
		token = ASNTok3[i+0]
		if token == char {
			token = ASNTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = ASNTok2[1] /* unknown char */
	}
	if ASNDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", ASNTokname(token), uint(char))
	}
	return char, token
}

func ASNParse(ASNlex ASNLexer) int {
	return ASNNewParser().Parse(ASNlex)
}

func (ASNrcvr *ASNParserImpl) Parse(ASNlex ASNLexer) int {
	var ASNn int
	var ASNVAL ASNSymType
	var ASNDollar []ASNSymType
	_ = ASNDollar // silence set and not used
	ASNS := ASNrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	ASNstate := 0
	ASNrcvr.char = -1
	ASNtoken := -1 // ASNrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		ASNstate = -1
		ASNrcvr.char = -1
		ASNtoken = -1
	}()
	ASNp := -1
	goto ASNstack

ret0:
	return 0

ret1:
	return 1

ASNstack:
	/* put a state and value onto the stack */
	if ASNDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", ASNTokname(ASNtoken), ASNStatname(ASNstate))
	}

	ASNp++
	if ASNp >= len(ASNS) {
		nyys := make([]ASNSymType, len(ASNS)*2)
		copy(nyys, ASNS)
		ASNS = nyys
	}
	ASNS[ASNp] = ASNVAL
	ASNS[ASNp].yys = ASNstate

ASNnewstate:
	ASNn = ASNPact[ASNstate]
	if ASNn <= ASNFlag {
		goto ASNdefault /* simple state */
	}
	if ASNrcvr.char < 0 {
		ASNrcvr.char, ASNtoken = ASNlex1(ASNlex, &ASNrcvr.lval)
	}
	ASNn += ASNtoken
	if ASNn < 0 || ASNn >= ASNLast {
		goto ASNdefault
	}
	ASNn = ASNAct[ASNn]
	if ASNChk[ASNn] == ASNtoken { /* valid shift */
		ASNrcvr.char = -1
		ASNtoken = -1
		ASNVAL = ASNrcvr.lval
		ASNstate = ASNn
		if Errflag > 0 {
			Errflag--
		}
		goto ASNstack
	}

ASNdefault:
	/* default state action */
	ASNn = ASNDef[ASNstate]
	if ASNn == -2 {
		if ASNrcvr.char < 0 {
			ASNrcvr.char, ASNtoken = ASNlex1(ASNlex, &ASNrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if ASNExca[xi+0] == -1 && ASNExca[xi+1] == ASNstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			ASNn = ASNExca[xi+0]
			if ASNn < 0 || ASNn == ASNtoken {
				break
			}
		}
		ASNn = ASNExca[xi+1]
		if ASNn < 0 {
			goto ret0
		}
	}
	if ASNn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			ASNlex.Error(ASNErrorMessage(ASNstate, ASNtoken))
			Nerrs++
			if ASNDebug >= 1 {
				__yyfmt__.Printf("%s", ASNStatname(ASNstate))
				__yyfmt__.Printf(" saw %s\n", ASNTokname(ASNtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for ASNp >= 0 {
				ASNn = ASNPact[ASNS[ASNp].yys] + ASNErrCode
				if ASNn >= 0 && ASNn < ASNLast {
					ASNstate = ASNAct[ASNn] /* simulate a shift of "error" */
					if ASNChk[ASNstate] == ASNErrCode {
						goto ASNstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if ASNDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", ASNS[ASNp].yys)
				}
				ASNp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if ASNDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", ASNTokname(ASNtoken))
			}
			if ASNtoken == ASNEofCode {
				goto ret1
			}
			ASNrcvr.char = -1
			ASNtoken = -1
			goto ASNnewstate /* try again in the same state */
		}
	}

	/* reduction by production ASNn */
	if ASNDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", ASNn, ASNStatname(ASNstate))
	}

	ASNnt := ASNn
	ASNpt := ASNp
	_ = ASNpt // guard against "declared and not used"

	ASNp -= ASNR2[ASNn]
	// ASNp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if ASNp+1 >= len(ASNS) {
		nyys := make([]ASNSymType, len(ASNS)*2)
		copy(nyys, ASNS)
		ASNS = nyys
	}
	ASNVAL = ASNS[ASNp+1]

	/* consult goto table to find next state */
	ASNn = ASNR1[ASNn]
	ASNg := ASNPgo[ASNn]
	ASNj := ASNg + ASNS[ASNp].yys + 1

	if ASNj >= ASNLast {
		ASNstate = ASNAct[ASNg]
	} else {
		ASNstate = ASNAct[ASNj]
		if ASNChk[ASNstate] != -ASNn {
			ASNstate = ASNAct[ASNg]
		}
	}
	// dummy call; replaced with literal code
	switch ASNnt {

	case 1:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:458
		{
			SetResult(ASNlex, ASNDollar[1].TypeValue)
			Print("Done")
			Print("--------------------------------------------------------------------------------")
			Print(JSON(&ASNDollar[1].TypeValue))
			Print("--------------------------------------------------------------------------------")
		}
	case 2:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:467
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 3:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:472
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 4:
		ASNDollar = ASNS[ASNpt-10 : ASNpt+1]
//line asn.y:502
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"encoding":   ASNDollar[3].TypeValue,
				"tag":        ASNDollar[4].TypeValue,
				"body":       ASNDollar[8].TypeValue,
			}
		}
	case 5:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:518
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 6:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:523
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 7:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:527
		{
			ASNVAL.TypeValue = nil
		}
	case 8:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:539
		{
			ASNVAL.TypeValue = MAP{
				"encodingReference":    ASNDollar[2].TypeString,
				"encodingInstructions": ASNDollar[3].TypeValue,
			}
		}
	case 9:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:554
		{
			ASNVAL.TypeValue = nil
		}
	case 10:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:567
		{
			ASNVAL.TypeValue = MAP{
				"reference":             ASNDollar[1].TypeValue,
				"definitiveIdentifiers": ASNDollar[2].TypeValue,
			}
		}
	case 11:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:581
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 12:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:584
		{
			ASNVAL.TypeValue = ""
		}
	case 13:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:596
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 14:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:599
		{
			ASNVAL.TypeValue = nil
		}
	case 15:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:609
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 16:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:620
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 17:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:625
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 18:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:638
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 19:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:641
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 20:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:644
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 21:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:653
		{
			ASNVAL.TypeValue = MAP{
				"name": ASNDollar[1].TypeString,
			}
		}
	case 22:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:664
		{
			ASNVAL.TypeValue = MAP{
				"number": ASNDollar[1].TypeValue,
			}
		}
	case 23:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:675
		{
			ASNVAL.TypeValue = MAP{
				"name":   ASNDollar[1].TypeString,
				"number": ASNDollar[3].TypeValue,
			}
		}
	case 24:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:691
		{
			ASNVAL.TypeValue = "Implicit"
		}
	case 25:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:694
		{
			ASNVAL.TypeValue = "Explicit"
		}
	case 26:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:697
		{
			ASNVAL.TypeValue = "Automatic"
		}
	case 27:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:700
		{
			ASNVAL.TypeValue = "Explicit"
		}
	case 28:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:711
		{
			ASNVAL.TypeValue = true
		}
	case 29:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:714
		{
			ASNVAL.TypeValue = false
		}
	case 30:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:727
		{
			ASNVAL.TypeValue = MAP{
				"imports":     ASNDollar[1].TypeValue,
				"exports":     ASNDollar[2].TypeValue,
				"assignments": ASNDollar[3].TypeValue,
			}
		}
	case 31:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:736
		{
			ASNVAL.TypeValue = MAP{
				"imports":     ASNDollar[2].TypeValue,
				"exports":     ASNDollar[1].TypeValue,
				"assignments": ASNDollar[3].TypeValue,
			}
		}
	case 32:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:743
		{
			ASNVAL.TypeValue = nil
		}
	case 33:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:755
		{
			ASNVAL.TypeValue = MAP{
				"all":     "false",
				"symbols": ASNDollar[2].TypeValue,
			}
		}
	case 34:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:761
		{
			ASNVAL.TypeValue = MAP{
				"all": "true",
			}
		}
	case 35:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:766
		{
			ASNVAL.TypeValue = MAP{
				"all": "false",
			}
		}
	case 36:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:771
		{
			ASNVAL.TypeValue = MAP{
				"all": "true",
			}
		}
	case 37:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:784
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 38:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:787
		{
			ASNVAL.TypeValue = nil
		}
	case 39:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:798
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 40:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:803
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 41:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:815
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
			}
		}
	case 42:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:820
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedReference": ASNDollar[1].TypeValue,
			}
		}
	case 43:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:839
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 44:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:849
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 45:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:852
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 46:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:863
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 47:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:866
		{
			ASNVAL.TypeValue = nil
		}
	case 48:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:877
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 49:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:880
		{
			ASNVAL.TypeValue = nil
		}
	case 50:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:891
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 51:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:896
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 52:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:907
		{
			ASNVAL.TypeValue = MAP{
				"symbols":   ASNDollar[1].TypeValue,
				"reference": ASNDollar[3].TypeValue,
			}
		}
	case 53:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:920
		{
			ASNVAL.TypeValue = MAP{
				"name":        ASNDollar[1].TypeValue,
				"identifiers": ASNDollar[2].TypeValue,
			}
		}
	case 54:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:935
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 55:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:938
		{
			ASNVAL.TypeValue = nil
		}
	case 56:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:941
		{
			ASNVAL.TypeValue = nil
		}
	case 57:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:952
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 58:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:955
		{
			ASNVAL.TypeValue = ASNDollar[3].TypeValue
		}
	case 59:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:958
		{
			ASNVAL.TypeValue = nil
		}
	case 60:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:969
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 61:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:974
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 62:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:988
		{
			ASNVAL.TypeValue = MAP{
				"name": ASNDollar[1].TypeValue,
			}
		}
	case 63:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:993
		{
			ASNVAL.TypeValue = MAP{
				"number": ASNDollar[1].TypeValue,
			}
		}
	case 64:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:998
		{
			ASNVAL.TypeValue = MAP{
				"nameAndNumber": ASNDollar[1].TypeValue,
			}
		}
	case 65:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1003
		{
			ASNVAL.TypeValue = MAP{
				"definedValue": ASNDollar[1].TypeValue,
			}
		}
	case 66:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1015
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 67:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1026
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 68:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1029
		{
			ASNVAL.TypeValue = MAP{
				"definedValue": ASNDollar[1].TypeValue,
			}
		}
	case 69:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1041
		{
			ASNVAL.TypeValue = MAP{
				"name":   ASNDollar[1].TypeValue,
				"number": ASNDollar[3].TypeValue,
			}
		}
	case 70:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1055
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 71:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1060
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 72:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1064
		{
			ASNVAL.TypeValue = nil
		}
	case 73:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1081
		{
			ASNVAL.TypeValue = MAP{
				"typeAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 74:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1086
		{
			ASNVAL.TypeValue = MAP{
				"valueAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 75:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1091
		{
			ASNVAL.TypeValue = MAP{
				"xmlValueAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 76:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1096
		{
			ASNVAL.TypeValue = MAP{
				"valueSetAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 77:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1101
		{
			ASNVAL.TypeValue = MAP{
				"objectClassAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 78:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1106
		{
			ASNVAL.TypeValue = MAP{
				"objectAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 79:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1111
		{
			ASNVAL.TypeValue = MAP{
				"objectSetAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 80:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1116
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 81:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1130
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"type":      ASNDollar[2].TypeValue,
			}
		}
	case 82:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1146
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"type":      ASNDollar[2].TypeValue,
				"value":     ASNDollar[4].TypeValue,
			}
		}
	case 83:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1162
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"value":     ASNDollar[3].TypeValue,
			}
		}
	case 84:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1178
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"type":      ASNDollar[2].TypeValue,
				"valueSet":  ASNDollar[4].TypeValue,
			}
		}
	case 85:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1194
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"class":     ASNDollar[3].TypeValue,
			}
		}
	case 86:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1210
		{
			ASNVAL.TypeValue = MAP{
				"reference":    ASNDollar[1].TypeValue,
				"definedClass": ASNDollar[2].TypeValue,
				"object":       ASNDollar[4].TypeValue,
			}
		}
	case 87:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1227
		{
			ASNVAL.TypeValue = MAP{
				"reference":    ASNDollar[1].TypeValue,
				"definedClass": ASNDollar[2].TypeValue,
				"objectSet":    ASNDollar[4].TypeValue,
			}
		}
	case 88:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1246
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 89:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1249
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 90:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1252
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 91:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1255
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 92:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1258
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 93:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1261
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 94:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1273
		{
			ASNVAL.TypeValue = MAP{
				"type":       "BUILTIN_TYPE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 95:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1279
		{
			ASNVAL.TypeValue = MAP{
				"type":       "REFERENCED_TYPE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 96:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1285
		{
			ASNVAL.TypeValue = MAP{
				"type":       "CONSTRAINED_TYPE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 97:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1300
		{
			ASNVAL.TypeValue = MAP{
				"type":       "BUILTIN_VALUE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 98:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1306
		{
			ASNVAL.TypeValue = MAP{
				"type":       "REFERENCED_VALUE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 99:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1312
		{
			ASNVAL.TypeValue = MAP{
				"type":       "OBJECT_CLASS_FIELD_VALUE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 100:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1350
		{
			ASNVAL.TypeValue = MAP{
				"bitStringType": ASNDollar[1].TypeValue,
			}
		}
	case 101:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1355
		{
			ASNVAL.TypeValue = MAP{
				"booleanType": ASNDollar[1].TypeValue,
			}
		}
	case 102:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1360
		{
			ASNVAL.TypeValue = MAP{
				"characterStringType": ASNDollar[1].TypeValue,
			}
		}
	case 103:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1365
		{
			ASNVAL.TypeValue = MAP{
				"choiceType": ASNDollar[1].TypeValue,
			}
		}
	case 104:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1370
		{
			ASNVAL.TypeValue = MAP{
				"dateType": ASNDollar[1].TypeValue,
			}
		}
	case 105:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1375
		{
			ASNVAL.TypeValue = MAP{
				"dataTimeType": ASNDollar[1].TypeValue,
			}
		}
	case 106:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1380
		{
			ASNVAL.TypeValue = MAP{
				"durationType": ASNDollar[1].TypeValue,
			}
		}
	case 107:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1385
		{
			ASNVAL.TypeValue = MAP{
				"embeddedPDVType": ASNDollar[1].TypeValue,
			}
		}
	case 108:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1390
		{
			ASNVAL.TypeValue = MAP{
				"enumeratedType": ASNDollar[1].TypeValue,
			}
		}
	case 109:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1395
		{
			ASNVAL.TypeValue = MAP{
				"externalType": ASNDollar[1].TypeValue,
			}
		}
	case 110:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1400
		{
			ASNVAL.TypeValue = MAP{
				"instanceOfType": ASNDollar[1].TypeValue,
			}
		}
	case 111:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1405
		{
			ASNVAL.TypeValue = MAP{
				"integerType": ASNDollar[1].TypeValue,
			}
		}
	case 112:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1410
		{
			ASNVAL.TypeValue = MAP{
				"iriType": ASNDollar[1].TypeValue,
			}
		}
	case 113:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1415
		{
			ASNVAL.TypeValue = MAP{
				"nullType": ASNDollar[1].TypeValue,
			}
		}
	case 114:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1420
		{
			ASNVAL.TypeValue = MAP{
				"objectClassFieldType": ASNDollar[1].TypeValue,
			}
		}
	case 115:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1425
		{
			ASNVAL.TypeValue = MAP{
				"objectIdentifierType": ASNDollar[1].TypeValue,
			}
		}
	case 116:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1430
		{
			ASNVAL.TypeValue = MAP{
				"octetStringType": ASNDollar[1].TypeValue,
			}
		}
	case 117:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1435
		{
			ASNVAL.TypeValue = MAP{
				"realType": ASNDollar[1].TypeValue,
			}
		}
	case 118:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1440
		{
			ASNVAL.TypeValue = MAP{
				"relativeIRIType": ASNDollar[1].TypeValue,
			}
		}
	case 119:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1445
		{
			ASNVAL.TypeValue = MAP{
				"relativeOIDType": ASNDollar[1].TypeValue,
			}
		}
	case 120:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1450
		{
			ASNVAL.TypeValue = MAP{
				"sequenceType": ASNDollar[1].TypeValue,
			}
		}
	case 121:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1455
		{
			ASNVAL.TypeValue = MAP{
				"sequenceOfType": ASNDollar[1].TypeValue,
			}
		}
	case 122:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1460
		{
			ASNVAL.TypeValue = MAP{
				"setType": ASNDollar[1].TypeValue,
			}
		}
	case 123:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1465
		{
			ASNVAL.TypeValue = MAP{
				"setOfType": ASNDollar[1].TypeValue,
			}
		}
	case 124:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1470
		{
			ASNVAL.TypeValue = MAP{
				"prefixedType": ASNDollar[1].TypeValue,
			}
		}
	case 125:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1475
		{
			ASNVAL.TypeValue = MAP{
				"timeType": ASNDollar[1].TypeValue,
			}
		}
	case 126:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1480
		{
			ASNVAL.TypeValue = MAP{
				"timeOfDayType": ASNDollar[1].TypeValue,
			}
		}
	case 127:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1496
		{
			ASNVAL.TypeValue = MAP{
				"definedType": ASNDollar[1].TypeValue,
			}
		}
	case 128:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1501
		{
			ASNVAL.TypeValue = MAP{
				"usefulType": ASNDollar[1].TypeValue,
			}
		}
	case 129:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1506
		{
			ASNVAL.TypeValue = MAP{
				"selectionType": ASNDollar[1].TypeValue,
			}
		}
	case 130:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1511
		{
			ASNVAL.TypeValue = MAP{
				"typeFromObject": ASNDollar[1].TypeValue,
			}
		}
	case 131:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1516
		{
			ASNVAL.TypeValue = MAP{
				"valueSetFromObjects": ASNDollar[1].TypeValue,
			}
		}
	case 132:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1531
		{
			ASNVAL.TypeValue = MAP{
				"externalTypeReference": ASNDollar[1].TypeValue,
			}
		}
	case 133:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1536
		{
			ASNVAL.TypeValue = MAP{
				"typeReference": ASNDollar[1].TypeValue,
			}
		}
	case 134:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1541
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedType": ASNDollar[1].TypeValue,
			}
		}
	case 135:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1546
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedValueSetType": ASNDollar[1].TypeValue,
			}
		}
	case 136:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1560
		{
			ASNVAL.TypeValue = MAP{
				"moduleReference": ASNDollar[1].TypeValue,
				"typeReference":   ASNDollar[2].TypeToken,
			}
		}
	case 137:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1574
		{
			ASNVAL.TypeValue = MAP{
				"simpleDefinedType":   ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 138:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1588
		{
			ASNVAL.TypeValue = MAP{
				"simpleDefinedType":   ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 139:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1602
		{
			ASNVAL.TypeValue = MAP{
				"externalTypeReference": ASNDollar[1].TypeValue,
			}
		}
	case 140:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1607
		{
			ASNVAL.TypeValue = MAP{
				"typeReference": ASNDollar[1].TypeValue,
			}
		}
	case 141:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1618
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[2].TypeValue,
			}
		}
	case 142:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:1623
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[4].TypeValue)
		}
	case 143:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1639
		{
			ASNVAL.TypeValue = MAP{
				"type": ASNDollar[1].TypeValue,
			}
		}
	case 144:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1644
		{
			ASNVAL.TypeValue = MAP{
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 145:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1649
		{
			ASNVAL.TypeValue = MAP{
				"valueSet": ASNDollar[1].TypeValue,
			}
		}
	case 146:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1654
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectClass": ASNDollar[1].TypeValue,
			}
		}
	case 147:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1659
		{
			ASNVAL.TypeValue = MAP{
				"object": ASNDollar[1].TypeValue,
			}
		}
	case 148:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1664
		{
			ASNVAL.TypeValue = MAP{
				"objectSet": ASNDollar[1].TypeValue,
			}
		}
	case 149:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1692
		{
			ASNVAL.TypeValue = STRING(UTF8String)
		}
	case 150:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1695
		{
			ASNVAL.TypeValue = STRING(GraphicString)
		}
	case 151:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1698
		{
			ASNVAL.TypeValue = STRING(NumericString)
		}
	case 152:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1701
		{
			ASNVAL.TypeValue = STRING(VisibleString)
		}
	case 153:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1704
		{
			ASNVAL.TypeValue = STRING(PrintableString)
		}
	case 154:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1707
		{
			ASNVAL.TypeValue = STRING(ISO646String)
		}
	case 155:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1710
		{
			ASNVAL.TypeValue = STRING(TeletexString)
		}
	case 156:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1713
		{
			ASNVAL.TypeValue = STRING(GeneralString)
		}
	case 157:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1716
		{
			ASNVAL.TypeValue = STRING(T61String)
		}
	case 158:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1719
		{
			ASNVAL.TypeValue = STRING(UniversalString)
		}
	case 159:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1722
		{
			ASNVAL.TypeValue = STRING(VideotexString)
		}
	case 160:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1725
		{
			ASNVAL.TypeValue = STRING(BMPString)
		}
	case 161:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1728
		{
			ASNVAL.TypeValue = STRING(IA5String)
		}
	case 162:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1731
		{
			ASNVAL.TypeValue = STRING(GeneralizedTime)
		}
	case 163:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1734
		{
			ASNVAL.TypeValue = STRING(UTCTime)
		}
	case 164:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1737
		{
			ASNVAL.TypeValue = STRING(ObjectDescriptor)
		}
	case 165:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1747
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"type":       ASNDollar[3].TypeValue,
			}
		}
	case 166:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1760
		{
			ASNVAL.TypeValue = MAP{
				"referencedObjects": ASNDollar[1].TypeValue,
				"fieldName":         ASNDollar[2].TypeToken,
			}
		}
	case 167:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1773
		{
			ASNVAL.TypeValue = MAP{
				"definedObject": ASNDollar[1].TypeValue,
			}
		}
	case 168:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1778
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedObject": ASNDollar[1].TypeValue,
			}
		}
	case 169:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1783
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 170:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1788
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 171:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1800
		{
			ASNVAL.TypeValue = MAP{
				"externalObjectReference": ASNDollar[1].TypeValue,
			}
		}
	case 172:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1805
		{
			ASNVAL.TypeValue = MAP{
				"objectReference": ASNDollar[1].TypeValue,
			}
		}
	case 173:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1817
		{
			ASNVAL.TypeValue = MAP{
				"moduleReference": ASNDollar[1].TypeValue,
				"objectReference": ASNDollar[3].TypeValue,
			}
		}
	case 174:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1830
		{
			ASNVAL.TypeValue = MAP{
				"definedObject":       ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 175:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1843
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 176:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1846
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 177:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1856
		{
			ASNVAL.TypeValue = MAP{
				"moduleReference":    ASNDollar[1].TypeValue,
				"objectSetReference": ASNDollar[3].TypeValue,
			}
		}
	case 178:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1869
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet":    ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 179:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1882
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 180:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1893
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 181:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1898
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 182:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1913
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 183:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1923
		{
			ASNVAL.TypeValue = MAP{
				"referencedObjects": ASNDollar[1].TypeValue,
				"fieldname":         ASNDollar[3].TypeValue,
			}
		}
	case 184:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1937
		{
			ASNVAL.TypeValue = MAP{
				"type":       ASNDollar[1].TypeValue,
				"constraint": ASNDollar[2].TypeValue,
			}
		}
	case 185:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1943
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 186:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1953
		{
			ASNVAL.TypeValue = MAP{
				"constraintSpec": ASNDollar[2].TypeValue,
				"exceptionSpec":  ASNDollar[3].TypeValue,
			}
		}
	case 187:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1967
		{
			ASNVAL.TypeValue = MAP{
				"subtypeConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 188:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1972
		{
			ASNVAL.TypeValue = MAP{
				"generalConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 189:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1984
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 190:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1996
		{
			ASNVAL.TypeValue = MAP{
				"rootElementSetSpec": ASNDollar[1].TypeValue,
			}
		}
	case 191:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2001
		{
			ASNVAL.TypeValue = MAP{
				"rootElementSetSpec": ASNDollar[1].TypeValue,
			}
		}
	case 192:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:2006
		{
			ASNVAL.TypeValue = MAP{
				"rootElementSetSpec":       ASNDollar[1].TypeValue,
				"additionalElementSetSpec": ASNDollar[2].TypeToken,
			}
		}
	case 193:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2019
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 194:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2029
		{
			ASNVAL.TypeValue = nil
		}
	case 195:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2040
		{
			ASNVAL.TypeValue = MAP{
				"unions": ASNDollar[1].TypeValue,
			}
		}
	case 196:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2045
		{
			ASNVAL.TypeValue = MAP{
				"exclusions": ASNDollar[1].TypeString,
			}
		}
	case 197:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2058
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 198:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2061
		{
			ASNVAL.TypeValue = MAP{
				"unions":        ASNDollar[1].TypeValue,
				"intersections": ASNDollar[3].TypeValue,
			}
		}
	case 199:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2075
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 200:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2078
		{
			ASNVAL.TypeValue = MAP{
				"intersections":        ASNDollar[1].TypeValue,
				"intersectionElements": ASNDollar[2].TypeValue,
			}
		}
	case 201:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2091
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 202:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2094
		{
			ASNVAL.TypeValue = MAP{
				"elements":   ASNDollar[1].TypeValue,
				"exclusions": ASNDollar[2].TypeValue,
			}
		}
	case 203:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2109
		{
			ASNVAL.TypeValue = MAP{
				"subtypeElements": ASNDollar[1].TypeValue,
			}
		}
	case 204:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2114
		{
			ASNVAL.TypeValue = MAP{
				"objectSetElements": ASNDollar[1].TypeValue,
			}
		}
	case 205:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2119
		{
			ASNVAL.TypeValue = MAP{
				"elementSetSpec": ASNDollar[1].TypeToken,
			}
		}
	case 206:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2131
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 207:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2152
		{
			ASNVAL.TypeValue = MAP{
				"singleValue": ASNDollar[1].TypeValue,
			}
		}
	case 208:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2157
		{
			ASNVAL.TypeValue = MAP{
				"containedSubtype": ASNDollar[1].TypeValue,
			}
		}
	case 209:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2162
		{
			ASNVAL.TypeValue = MAP{
				"valueRange": ASNDollar[1].TypeValue,
			}
		}
	case 210:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2167
		{
			ASNVAL.TypeValue = MAP{
				"permittedAlphabet": ASNDollar[1].TypeValue,
			}
		}
	case 211:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2172
		{
			ASNVAL.TypeValue = MAP{
				"sizeConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 212:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2177
		{
			ASNVAL.TypeValue = MAP{
				"typeConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 213:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2182
		{
			ASNVAL.TypeValue = MAP{
				"innerTypeConstraints": ASNDollar[1].TypeValue,
			}
		}
	case 214:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2187
		{
			ASNVAL.TypeValue = MAP{
				"patternConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 215:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2192
		{
			ASNVAL.TypeValue = MAP{
				"propertySettings": ASNDollar[1].TypeValue,
			}
		}
	case 216:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2197
		{
			ASNVAL.TypeValue = MAP{
				"durationRange": ASNDollar[1].TypeValue,
			}
		}
	case 217:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2202
		{
			ASNVAL.TypeValue = MAP{
				"timePointRange": ASNDollar[1].TypeValue,
			}
		}
	case 218:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2207
		{
			ASNVAL.TypeValue = MAP{
				"recurrenceRange": ASNDollar[1].TypeValue,
			}
		}
	case 219:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2219
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 220:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2229
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 221:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2239
		{
			ASNVAL.TypeValue = "INCLUDES"
		}
	case 222:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2242
		{
			ASNVAL.TypeValue = "INCLUDES"
		}
	case 223:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2252
		{
			ASNVAL.TypeValue = MAP{
				"lowerEndpoint": ASNDollar[1].TypeValue,
				"upperEndpoint": ASNDollar[2].TypeToken,
			}
		}
	case 224:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2265
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 225:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2268
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 226:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2278
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 227:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2281
		{
			ASNVAL.TypeValue = "MIN"
		}
	case 228:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2291
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 229:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2294
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 230:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2304
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 231:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2307
		{
			ASNVAL.TypeValue = "MAX"
		}
	case 232:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2317
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 233:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2327
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 234:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2337
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 235:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2348
		{
			ASNVAL.TypeValue = ASNDollar[3].TypeValue
		}
	case 236:
		ASNDollar = ASNS[ASNpt-7 : ASNpt+1]
//line asn.y:2351
		{
			ASNVAL.TypeValue = ASNDollar[3].TypeValue
		}
	case 237:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2361
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 238:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2372
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 239:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2375
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 240:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2385
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 241:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2396
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 242:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2399
		{
			ASNVAL.TypeValue = MAP{
				"nameConstraint":  ASNDollar[1].TypeValue,
				"typeConstraints": ASNDollar[3].TypeValue,
			}
		}
	case 243:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2412
		{
			ASNVAL.TypeValue = MAP{
				"identifier":          ASNDollar[1].TypeValue,
				"componentConstraint": ASNDollar[2].TypeValue,
			}
		}
	case 244:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2425
		{
			ASNVAL.TypeValue = MAP{
				"valueConstraint":    ASNDollar[1].TypeValue,
				"presenceConstraint": ASNDollar[2].TypeValue,
			}
		}
	case 245:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2438
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 246:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2441
		{
			ASNVAL.TypeValue = nil
		}
	case 247:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2451
		{
			ASNVAL.TypeValue = "PRESENT"
		}
	case 248:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2454
		{
			ASNVAL.TypeValue = "ABSENT"
		}
	case 249:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2457
		{
			ASNVAL.TypeValue = "OPTIONAL"
		}
	case 250:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2460
		{
			ASNVAL.TypeValue = nil
		}
	case 251:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:2470
		{
			ASNVAL.TypeValue = ASNDollar[4].TypeValue
		}
	case 252:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2480
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 253:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2490
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 254:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2500
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 255:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2510
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 256:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2520
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 257:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2533
		{
			ASNVAL.TypeValue = MAP{
				"object": ASNDollar[1].TypeValue,
			}
		}
	case 258:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2538
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 259:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2543
		{
			ASNVAL.TypeValue = MAP{
				"objectSetFromObjects": ASNDollar[1].TypeValue,
			}
		}
	case 260:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2548
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 261:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2560
		{
			ASNVAL.TypeValue = MAP{
				"referencedObjects": ASNDollar[1].TypeValue,
				"fieldName":         ASNDollar[2].TypeToken,
			}
		}
	case 262:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2573
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 263:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2583
		{
			ASNVAL.TypeValue = "INTERSECTION"
		}
	case 264:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2586
		{
			ASNVAL.TypeValue = "INTERSECTION"
		}
	case 265:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2596
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 266:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2606
		{
			ASNVAL.TypeValue = "UNION"
		}
	case 267:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2609
		{
			ASNVAL.TypeValue = "UNION"
		}
	case 268:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2619
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 269:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2631
		{
			ASNVAL.TypeValue = MAP{
				"userDefinedConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 270:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2636
		{
			ASNVAL.TypeValue = MAP{
				"tableConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 271:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2641
		{
			ASNVAL.TypeValue = MAP{
				"contentsConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 272:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:2653
		{
			ASNVAL.TypeValue = ASNDollar[4].TypeValue
		}
	case 273:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2665
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 274:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2670
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 275:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2674
		{
			ASNVAL.TypeValue = nil
		}
	case 276:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2688
		{
			ASNVAL.TypeValue = MAP{
				"governor": ASNDollar[1].TypeValue,
				"value":    ASNDollar[3].TypeValue,
			}
		}
	case 277:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2694
		{
			ASNVAL.TypeValue = MAP{
				"governor": ASNDollar[1].TypeValue,
				"object":   ASNDollar[3].TypeValue,
			}
		}
	case 278:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2700
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 279:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2705
		{
			ASNVAL.TypeValue = MAP{
				"type": ASNDollar[1].TypeValue,
			}
		}
	case 280:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2710
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectClass": ASNDollar[1].TypeValue,
			}
		}
	case 281:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2722
		{
			ASNVAL.TypeValue = MAP{
				"type": ASNDollar[1].TypeValue,
			}
		}
	case 282:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2727
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectClass": ASNDollar[1].TypeValue,
			}
		}
	case 283:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2739
		{
			ASNVAL.TypeValue = MAP{
				"simpleTableConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 284:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2744
		{
			ASNVAL.TypeValue = MAP{
				"componentRelationConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 285:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2756
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 286:
		ASNDollar = ASNS[ASNpt-6 : ASNpt+1]
//line asn.y:2767
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet": ASNDollar[1].TypeToken,
				"atNotations":      ASNDollar[2].TypeValue,
			}
		}
	case 287:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2781
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 288:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2786
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 289:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2797
		{
			ASNVAL.TypeValue = MAP{
				"componentIdList": ASNDollar[2].TypeValue,
			}
		}
	case 290:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2802
		{
			ASNVAL.TypeValue = MAP{
				"componentIdList": ASNDollar[4].TypeValue,
			}
		}
	case 291:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2814
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 292:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2819
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 293:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2830
		{
			ASNVAL.TypeValue = nil
		}
	case 294:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2833
		{
			ASNVAL.TypeValue = nil
		}
	case 295:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2845
		{
			ASNVAL.TypeValue = MAP{
				"type": ASNDollar[2].TypeValue,
			}
		}
	case 296:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2850
		{
			ASNVAL.TypeValue = MAP{
				"value": ASNDollar[3].TypeValue,
			}
		}
	case 297:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:2855
		{
			ASNVAL.TypeValue = MAP{
				"type":  ASNDollar[2].TypeValue,
				"value": ASNDollar[5].TypeValue,
			}
		}
	case 298:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2868
		{
			ASNVAL.TypeValue = MAP{
				"exceptionIdentification": ASNDollar[1].TypeToken,
			}
		}
	case 299:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2873
		{
			ASNVAL.TypeValue = nil
		}
	case 300:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2885
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 301:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2888
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 302:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2891
		{
			ASNVAL.TypeValue = MAP{
				"type":  ASNDollar[1].TypeValue,
				"value": ASNDollar[3].TypeValue,
			}
		}
	case 303:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2911
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence": "SET",
				"constraint":    ASNDollar[2].TypeValue,
				"type":          ASNDollar[4].TypeValue,
			}
		}
	case 304:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2918
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence":  "SET",
				"sizeConstraint": ASNDollar[2].TypeValue,
				"type":           ASNDollar[4].TypeValue,
			}
		}
	case 305:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2925
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence": "SEQUENCE",
				"constraint":    ASNDollar[2].TypeValue,
				"type":          ASNDollar[4].TypeValue,
			}
		}
	case 306:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2932
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence":  "SEQUENCE",
				"sizeConstraint": ASNDollar[2].TypeValue,
				"type":           ASNDollar[4].TypeValue,
			}
		}
	case 307:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2939
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence": "SET",
				"constraint":    ASNDollar[2].TypeValue,
				"namedType":     ASNDollar[4].TypeValue,
			}
		}
	case 308:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2946
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence":  "SET",
				"sizeConstraint": ASNDollar[2].TypeValue,
				"namedType":      ASNDollar[4].TypeValue,
			}
		}
	case 309:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2953
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence": "SEQUENCE",
				"constraint":    ASNDollar[2].TypeValue,
				"namedType":     ASNDollar[4].TypeValue,
			}
		}
	case 310:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2960
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence":  "SEQUENCE",
				"sizeConstraint": ASNDollar[2].TypeValue,
				"namedType":      ASNDollar[4].TypeValue,
			}
		}
	case 311:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2974
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"type":       ASNDollar[2].TypeValue,
			}
		}
	case 312:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2988
		{
			ASNVAL.TypeValue = MAP{
				"type": "BIT_STRING",
			}
		}
	case 313:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:2993
		{
			ASNVAL.TypeValue = MAP{
				"type":      "BIT_STRING",
				"namedBits": ASNDollar[4].TypeValue,
			}
		}
	case 314:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3007
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 315:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3012
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 316:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3024
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"number":     ASNDollar[3].TypeValue,
			}
		}
	case 317:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3030
		{
			ASNVAL.TypeValue = MAP{
				"identifier":   ASNDollar[1].TypeValue,
				"definedValue": ASNDollar[3].TypeValue,
			}
		}
	case 318:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3043
		{
			ASNVAL.TypeValue = MAP{
				"type": "BOOLEAN",
			}
		}
	case 319:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3056
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 320:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3059
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 321:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3081
		{
			ASNVAL.TypeValue = MAP{
				"type": "BMP_STRING",
			}
		}
	case 322:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3086
		{
			ASNVAL.TypeValue = MAP{
				"type": "GENERAL_STRING",
			}
		}
	case 323:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3091
		{
			ASNVAL.TypeValue = MAP{
				"type": "GRAPHIC_STRING",
			}
		}
	case 324:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3096
		{
			ASNVAL.TypeValue = MAP{
				"type": "IA5_STRING",
			}
		}
	case 325:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3101
		{
			ASNVAL.TypeValue = MAP{
				"type": "ISO646_STRING",
			}
		}
	case 326:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3106
		{
			ASNVAL.TypeValue = MAP{
				"type": "NUMERIC_STRING",
			}
		}
	case 327:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3111
		{
			ASNVAL.TypeValue = MAP{
				"type": "PRINTABLE_STRING",
			}
		}
	case 328:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3116
		{
			ASNVAL.TypeValue = MAP{
				"type": "TELETEX_STRING",
			}
		}
	case 329:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3121
		{
			ASNVAL.TypeValue = MAP{
				"type": "T61_STRING",
			}
		}
	case 330:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3126
		{
			ASNVAL.TypeValue = MAP{
				"type": "UNIVERSAL_STRING",
			}
		}
	case 331:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3131
		{
			ASNVAL.TypeValue = MAP{
				"type": "UTF8_STRING",
			}
		}
	case 332:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3136
		{
			ASNVAL.TypeValue = MAP{
				"type": "VIDEO_TEX_STRING",
			}
		}
	case 333:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3141
		{
			ASNVAL.TypeValue = MAP{
				"type": "VISIBLE_STRING",
			}
		}
	case 334:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3153
		{
			ASNVAL.TypeValue = MAP{
				"type": "CHARACTER_STRING",
			}
		}
	case 335:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3165
		{
			ASNVAL.TypeValue = MAP{
				"type":           "CHOICE",
				"alternateTypes": ASNDollar[3].TypeValue,
			}
		}
	case 336:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3179
		{
			ASNVAL.TypeValue = MAP{
				"alternativeTypes": ASNDollar[1].TypeValue,
			}
		}
	case 337:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:3184
		{
			ASNVAL.TypeValue = MAP{
				"alternativeTypes":              ASNDollar[1].TypeValue,
				"extensionAndException":         ASNDollar[3].TypeValue,
				"extensionAdditionAlternatives": ASNDollar[4].TypeValue,
			}
		}
	case 338:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3198
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 339:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3209
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 340:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3214
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 341:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3226
		{
			ASNVAL.TypeValue = nil
		}
	case 342:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3229
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 343:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3240
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 344:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3243
		{
			ASNVAL.TypeValue = nil
		}
	case 345:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3254
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 346:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3259
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 347:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3271
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 348:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3274
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 349:
		ASNDollar = ASNS[ASNpt-6 : ASNpt+1]
//line asn.y:3284
		{
			ASNVAL.TypeValue = MAP{
				"version":          ASNDollar[3].TypeValue,
				"alternativeTypes": ASNDollar[4].TypeValue,
			}
		}
	case 350:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3297
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 351:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3300
		{
			ASNVAL.TypeValue = nil
		}
	case 352:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3311
		{
			ASNVAL.TypeValue = true
		}
	case 353:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3314
		{
			ASNVAL.TypeValue = nil
		}
	case 354:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3324
		{
			ASNVAL.TypeValue = MAP{
				"type": "DATE",
			}
		}
	case 355:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3336
		{
			ASNVAL.TypeValue = MAP{
				"type": "DATE_TIME",
			}
		}
	case 356:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3348
		{
			ASNVAL.TypeValue = MAP{
				"type": "DURATION",
			}
		}
	case 357:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3360
		{
			ASNVAL.TypeValue = MAP{
				"type": "EMBEDDED_PDV",
			}
		}
	case 358:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3372
		{
			ASNVAL.TypeValue = MAP{
				"type":         "ENUMERATED",
				"enumerations": ASNDollar[3].TypeValue,
			}
		}
	case 359:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3387
		{
			ASNVAL.TypeValue = MAP{
				"enumeration": ASNDollar[1].TypeValue,
			}
		}
	case 360:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3392
		{
			ASNVAL.TypeValue = MAP{
				"enumeration": ASNDollar[1].TypeValue,
				"exception":   ASNDollar[4].TypeValue,
			}
		}
	case 361:
		ASNDollar = ASNS[ASNpt-6 : ASNpt+1]
//line asn.y:3398
		{
			ASNVAL.TypeValue = MAP{
				"enumeration":           ASNDollar[1].TypeValue,
				"exception":             ASNDollar[4].TypeValue,
				"additionalEnumeration": ASNDollar[6].TypeValue,
			}
		}
	case 362:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3412
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 363:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3422
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 364:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3433
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 365:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3438
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 366:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3449
		{
			ASNVAL.TypeValue = MAP{
				"name": ASNDollar[1].TypeValue,
			}
		}
	case 367:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3454
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 368:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3466
		{
			ASNVAL.TypeValue = MAP{
				"name":   ASNDollar[1].TypeValue,
				"number": ASNDollar[3].TypeValue,
			}
		}
	case 369:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3472
		{
			ASNVAL.TypeValue = MAP{
				"name":         ASNDollar[1].TypeValue,
				"definedValue": ASNDollar[3].TypeValue,
			}
		}
	case 370:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3485
		{
			ASNVAL.TypeValue = MAP{
				"type": "EXTERNAL",
			}
		}
	case 371:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3497
		{
			ASNVAL.TypeValue = MAP{
				"type":               "INSTANCE_OF",
				"definedObjectClass": ASNDollar[3].TypeValue,
			}
		}
	case 372:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3511
		{
			ASNVAL.TypeValue = MAP{
				"type": "INTEGER",
			}
		}
	case 373:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3516
		{
			ASNVAL.TypeValue = MAP{
				"type":    "INTEGER",
				"numbers": ASNDollar[3].TypeValue,
			}
		}
	case 374:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3530
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 375:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3535
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 376:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3546
		{
			ASNVAL.TypeValue = MAP{
				"type": "OID_IRI",
			}
		}
	case 377:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3558
		{
			ASNVAL.TypeValue = MAP{
				"type": "NULL",
			}
		}
	case 378:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3570
		{
			ASNVAL.TypeValue = MAP{
				"type":               "OBJECT_FIELD",
				"definedObjectClass": ASNDollar[1].TypeValue,
				"fieldName":          ASNDollar[3].TypeValue,
			}
		}
	case 379:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3584
		{
			ASNVAL.TypeValue = MAP{
				"type": "OBJECT_IDENTIFIER",
			}
		}
	case 380:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3596
		{
			ASNVAL.TypeValue = MAP{
				"type": "OCTET_STRING",
			}
		}
	case 381:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3608
		{
			ASNVAL.TypeValue = MAP{
				"type": "REAL",
			}
		}
	case 382:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3620
		{
			ASNVAL.TypeValue = MAP{
				"type": "RELATIVE_OID_IRI",
			}
		}
	case 383:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3632
		{
			ASNVAL.TypeValue = MAP{
				"type": "RELATIVE_OID",
			}
		}
	case 384:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3646
		{
			ASNVAL.TypeValue = MAP{
				"type": "SEQUENCE",
			}
		}
	case 385:
		ASNDollar = ASNS[ASNpt-9 : ASNpt+1]
//line asn.y:3651
		{
			ASNVAL.TypeValue = MAP{
				"type":                  "SEQUENCE",
				"extensionAndException": ASNDollar[3].TypeToken,
			}
		}
	case 386:
		ASNDollar = ASNS[ASNpt-14 : ASNpt+1]
//line asn.y:3657
		{
			ASNVAL.TypeValue = MAP{
				"type":           "SEQUENCE",
				"componentTypes": ASNDollar[3].TypeToken,
			}
		}
	case 387:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3674
		{
			ASNVAL.TypeValue = MAP{
				"rootComponentTypes": ASNDollar[1].TypeValue,
			}
		}
	case 388:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:3679
		{
			ASNVAL.TypeValue = MAP{
				"extensionAndException": ASNDollar[3].TypeValue,
				"extensionAdditions":    ASNDollar[4].TypeValue,
				"rootComponentTypes":    ASNDollar[1].TypeValue,
			}
		}
	case 389:
		ASNDollar = ASNS[ASNpt-7 : ASNpt+1]
//line asn.y:3686
		{
			ASNVAL.TypeValue = MAP{
				"extensionAndException": ASNDollar[3].TypeValue,
				"extensionAdditions":    ASNDollar[4].TypeValue,
				"rootComponentTypes":    append(ASNDollar[1].TypeValue.(LIST), ASNDollar[7].TypeValue.(LIST)),
			}
		}
	case 390:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:3693
		{
			ASNVAL.TypeValue = MAP{
				"extensionAndException": ASNDollar[1].TypeValue,
				"extensionAdditions":    ASNDollar[2].TypeValue,
				"rootComponentTypes":    ASNDollar[5].TypeValue,
			}
		}
	case 391:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3700
		{
			ASNVAL.TypeValue = MAP{
				"extensionAndException": ASNDollar[1].TypeValue,
				"extensionAdditions":    ASNDollar[2].TypeValue,
			}
		}
	case 392:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3713
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 393:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3724
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 394:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3729
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 395:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3743
		{
			ASNVAL.TypeValue = MAP{
				"type":      "COMPONENTS",
				"namedType": ASNDollar[1].TypeValue,
			}
		}
	case 396:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3749
		{
			ASNVAL.TypeValue = MAP{
				"type":      "COMPONENTS",
				"namedType": ASNDollar[1].TypeValue,
				"optional":  true,
			}
		}
	case 397:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3756
		{
			ASNVAL.TypeValue = MAP{
				"type":         "COMPONENTS",
				"namedType":    ASNDollar[1].TypeValue,
				"defaultValue": ASNDollar[3].TypeValue,
			}
		}
	case 398:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3763
		{
			ASNVAL.TypeValue = MAP{
				"type":     "COMPONENTS",
				"typeName": ASNDollar[3].TypeValue,
			}
		}
	case 399:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3777
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 400:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3780
		{
			ASNVAL.TypeValue = nil
		}
	case 401:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3791
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 402:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3796
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 403:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3808
		{
			ASNVAL.TypeValue = MAP{
				"componentType": ASNDollar[1].TypeValue,
			}
		}
	case 404:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3813
		{
			ASNVAL.TypeValue = MAP{
				"extensionAdditionGroup": ASNDollar[1].TypeValue,
			}
		}
	case 405:
		ASNDollar = ASNS[ASNpt-6 : ASNpt+1]
//line asn.y:3825
		{
			ASNVAL.TypeValue = MAP{
				"version":        ASNDollar[3].TypeValue,
				"componentTypes": ASNDollar[4].TypeValue,
			}
		}
	case 406:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3838
		{
			ASNVAL.TypeValue = true
		}
	case 407:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3849
		{
			ASNVAL.TypeValue = MAP{
				"type":     "SEQUENCE_OF",
				"typeName": ASNDollar[3].TypeValue,
			}
		}
	case 408:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3855
		{
			ASNVAL.TypeValue = MAP{
				"type":      "SEQUENCE_OF",
				"namedType": ASNDollar[3].TypeValue,
			}
		}
	case 409:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3870
		{
			ASNVAL.TypeValue = MAP{
				"type": "SET",
			}
		}
	case 410:
		ASNDollar = ASNS[ASNpt-9 : ASNpt+1]
//line asn.y:3875
		{
			ASNVAL.TypeValue = MAP{
				"type":                  "SET",
				"extensionAndException": ASNDollar[3].TypeToken,
			}
		}
	case 411:
		ASNDollar = ASNS[ASNpt-14 : ASNpt+1]
//line asn.y:3881
		{
			ASNVAL.TypeValue = MAP{
				"type":           "SET",
				"componentTypes": ASNDollar[3].TypeToken,
			}
		}
	case 412:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3895
		{
			ASNVAL.TypeValue = MAP{
				"type":     "SET_OF",
				"typeName": ASNDollar[3].TypeValue,
			}
		}
	case 413:
		ASNDollar = ASNS[ASNpt-7 : ASNpt+1]
//line asn.y:3901
		{
			ASNVAL.TypeValue = MAP{
				"type":      "SET_OF",
				"namedType": ASNDollar[3].TypeValue,
			}
		}
	case 414:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3914
		{
			ASNVAL.TypeValue = MAP{
				"type": "TIME",
			}
		}
	case 415:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3926
		{
			ASNVAL.TypeValue = MAP{
				"type": "TIME_OF_DAY",
			}
		}
	case 416:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3939
		{
			ASNVAL.TypeValue = MAP{
				"type":       "PREFIXED",
				"taggedType": ASNDollar[1].TypeValue,
			}
		}
	case 417:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3945
		{
			ASNVAL.TypeValue = MAP{
				"type":                 "PREFIXED",
				"encodingPrefixedType": ASNDollar[1].TypeValue,
			}
		}
	case 418:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3954
		{
			ASNVAL.TypeValue = nil
		}
	case 419:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3959
		{
			ASNVAL.TypeValue = nil
		}
	case 420:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3965
		{
			ASNVAL.TypeValue = MAP{
				"bitString": ASNDollar[1].TypeValue,
			}
		}
	case 421:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3970
		{
			ASNVAL.TypeValue = MAP{
				"boolean": ASNDollar[1].TypeValue,
			}
		}
	case 422:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3975
		{
			ASNVAL.TypeValue = MAP{
				"characterString": ASNDollar[1].TypeValue,
			}
		}
	case 423:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3980
		{
			ASNVAL.TypeValue = MAP{
				"choice": ASNDollar[1].TypeValue,
			}
		}
	case 424:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3985
		{
			ASNVAL.TypeValue = MAP{
				"embeddedPDV": ASNDollar[1].TypeValue,
			}
		}
	case 425:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3990
		{
			ASNVAL.TypeValue = MAP{
				"enumerated": ASNDollar[1].TypeValue,
			}
		}
	case 426:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3995
		{
			ASNVAL.TypeValue = MAP{
				"external": ASNDollar[1].TypeValue,
			}
		}
	case 427:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4000
		{
			ASNVAL.TypeValue = MAP{
				"instanceOf": ASNDollar[1].TypeValue,
			}
		}
	case 428:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4005
		{
			ASNVAL.TypeValue = MAP{
				"integer": ASNDollar[1].TypeValue,
			}
		}
	case 429:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4010
		{
			ASNVAL.TypeValue = MAP{
				"iri": ASNDollar[1].TypeValue,
			}
		}
	case 430:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4015
		{
			ASNVAL.TypeValue = MAP{
				"null": ASNDollar[1].TypeValue,
			}
		}
	case 431:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4020
		{
			ASNVAL.TypeValue = MAP{
				"objectIdentifier": ASNDollar[1].TypeValue,
			}
		}
	case 432:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4025
		{
			ASNVAL.TypeValue = MAP{
				"octetString": ASNDollar[1].TypeValue,
			}
		}
	case 433:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4030
		{
			ASNVAL.TypeValue = MAP{
				"real": ASNDollar[1].TypeValue,
			}
		}
	case 434:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4035
		{
			ASNVAL.TypeValue = MAP{
				"relativeIRI": ASNDollar[1].TypeValue,
			}
		}
	case 435:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4040
		{
			ASNVAL.TypeValue = MAP{
				"relativeOID": ASNDollar[1].TypeValue,
			}
		}
	case 436:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4045
		{
			ASNVAL.TypeValue = MAP{
				"sequence": ASNDollar[1].TypeValue,
			}
		}
	case 437:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4050
		{
			ASNVAL.TypeValue = MAP{
				"sequenceOf": ASNDollar[1].TypeValue,
			}
		}
	case 438:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4055
		{
			ASNVAL.TypeValue = MAP{
				"set": ASNDollar[1].TypeValue,
			}
		}
	case 439:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4060
		{
			ASNVAL.TypeValue = MAP{
				"setOf": ASNDollar[1].TypeValue,
			}
		}
	case 440:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4065
		{
			ASNVAL.TypeValue = MAP{
				"prefixed": ASNDollar[1].TypeValue,
			}
		}
	case 441:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4070
		{
			ASNVAL.TypeValue = MAP{
				"time": ASNDollar[1].TypeValue,
			}
		}
	case 442:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4077
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 443:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4080
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 444:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4083
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 445:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4086
		{
			ASNVAL.TypeValue = nil
		}
	case 446:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4089
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 447:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4094
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 448:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4099
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeToken)
		}
	case 449:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4105
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 450:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4110
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 451:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4115
		{
			ASNVAL.TypeValue = nil
		}
	case 452:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4118
		{

		}
	case 453:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4123
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 454:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4126
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 455:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4129
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 456:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4132
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 457:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4137
		{
			ASNVAL.TypeValue = nil
		}
	case 458:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4142
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 459:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4147
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeToken)
		}
	case 460:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4153
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 461:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4156
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 462:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4159
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 463:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4162
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 464:
		ASNDollar = ASNS[ASNpt-9 : ASNpt+1]
//line asn.y:4167
		{
			ASNVAL.TypeValue = MAP{
				"group": ASNDollar[2].TypeValue,
				"plane": ASNDollar[4].TypeValue,
				"row":   ASNDollar[6].TypeValue,
				"cell":  ASNDollar[8].TypeValue,
			}
		}
	case 465:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4177
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 466:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4182
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 467:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4187
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 468:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4192
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 469:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:4197
		{
			ASNVAL.TypeValue = MAP{
				"tableColumn": ASNDollar[2].TypeValue,
				"tableRow":    ASNDollar[4].TypeValue,
			}
		}
	case 470:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4205
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 471:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4210
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 472:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4215
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 473:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4220
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"value":      ASNDollar[2].TypeToken,
			}
		}
	case 474:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4228
		{
			ASNVAL.TypeValue = nil
		}
	case 475:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4233
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 476:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4238
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 477:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4243
		{
			ASNVAL.TypeValue = nil
		}
	case 478:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4248
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 479:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4251
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 480:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4256
		{
			ASNVAL.TypeValue = "NULL"
		}
	case 481:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4262
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 482:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4265
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 483:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:4268
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 484:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4273
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 485:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4276
		{
			ASNVAL.TypeValue = nil
		}
	case 486:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4281
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 487:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4284
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 488:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4289
		{
			ASNVAL.TypeValue = nil
		}
	case 489:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4292
		{
			ASNVAL.TypeValue = nil
		}
	case 490:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4295
		{
			ASNVAL.TypeValue = nil
		}
	case 491:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4300
		{
			ASNVAL.TypeValue = nil
		}
	case 492:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4305
		{
			ASNVAL.TypeValue = nil
		}
	case 493:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4310
		{
			ASNVAL.TypeValue = nil
		}
	case 494:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4315
		{
			ASNVAL.TypeValue = nil
		}
	case 495:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4318
		{
			ASNVAL.TypeValue = nil
		}
	case 496:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4323
		{
			ASNVAL.TypeValue = nil
		}
	case 497:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4326
		{
			ASNVAL.TypeValue = nil
		}
	case 498:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4329
		{
			ASNVAL.TypeValue = nil
		}
	case 499:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4334
		{
			ASNVAL.TypeValue = nil
		}
	case 500:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4339
		{
			ASNVAL.TypeValue = nil
		}
	case 501:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4344
		{
			ASNVAL.TypeValue = nil
		}
	case 502:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4349
		{
			ASNVAL.TypeValue = nil
		}
	case 503:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4354
		{
			ASNVAL.TypeValue = nil
		}
	case 504:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4359
		{
			ASNVAL.TypeValue = nil
		}
	case 505:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4364
		{
			ASNVAL.TypeValue = nil
		}
	case 506:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4369
		{
			ASNVAL.TypeValue = nil
		}
	case 507:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4374
		{
			ASNVAL.TypeValue = nil
		}
	case 508:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4379
		{
			ASNVAL.TypeValue = nil
		}
	case 509:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4384
		{
			ASNVAL.TypeValue = nil
		}
	case 510:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4389
		{
			ASNVAL.TypeValue = nil
		}
	case 511:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4394
		{
			ASNVAL.TypeValue = nil
		}
	case 512:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4399
		{
			ASNVAL.TypeValue = nil
		}
	case 513:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4404
		{
			ASNVAL.TypeValue = nil
		}
	case 514:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4409
		{
			ASNVAL.TypeValue = nil
		}
	case 515:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4414
		{
			ASNVAL.TypeValue = nil
		}
	case 516:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4419
		{
			ASNVAL.TypeValue = nil
		}
	case 517:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4424
		{
			ASNVAL.TypeValue = nil
		}
	case 518:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4429
		{
			ASNVAL.TypeValue = nil
		}
	case 519:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4434
		{
			ASNVAL.TypeValue = MAP{
				"type":  "EXTERNAL_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 520:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4440
		{
			ASNVAL.TypeValue = MAP{
				"type":  "STRING_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 521:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4446
		{
			ASNVAL.TypeValue = MAP{
				"type":  "NUMBER_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 522:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4452
		{
			ASNVAL.TypeValue = MAP{
				"type":  "PARAMETERIZED_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 523:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4460
		{
			ASNVAL.TypeValue = MAP{
				"module": ASNDollar[1].TypeValue,
				"value":  ASNDollar[3].TypeValue,
			}
		}
	case 524:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4468
		{
			ASNVAL.TypeValue = nil
		}
	case 525:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4473
		{
			ASNVAL.TypeValue = nil
		}
	case 526:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4478
		{
			ASNVAL.TypeValue = nil
		}
	case 527:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4483
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 528:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4486
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 529:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4491
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 530:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4494
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 531:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4499
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeNumber
		}
	case 532:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4502
		{
			ASNVAL.TypeValue = (-1) * ASNDollar[2].TypeNumber
		}
	case 533:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4505
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeNumber
		}
	case 534:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4508
		{
			ASNVAL.TypeValue = (-1) * ASNDollar[2].TypeNumber
		}
	case 535:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4513
		{
			ASNVAL.TypeValue = "::="
		}
	case 536:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4518
		{
			SkipBlock()
		}
	case 537:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4521
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeString
		}
	}
	goto ASNstack /* stack new state and value */
}
