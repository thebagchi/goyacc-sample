// Code generated by goyacc -p ASN asn.y. DO NOT EDIT.

//line asn.y:1

package main

import __yyfmt__ "fmt"

//line asn.y:3
import (
	"bytes"
	"encoding/json"
	"fmt"
)

var code bytes.Buffer

func AddLine(line string) {
	code.WriteString(line)
	code.WriteByte('\n')
}

func JSON(obj interface{}) string {
	data, err := json.MarshalIndent(obj, "", "    ")
	if nil != err {
		fmt.Println("Error: ", err)
		return ""
	}
	return string(data)
}

func Print(line string) {
	fmt.Println(line)
}

func Join(values ...string) string {
	var buffer bytes.Buffer
	for _, value := range values {
		buffer.WriteString(value)
	}
	return buffer.String()
}

func SkipBlock() {
	parser.ExpectBlock = true
}

func SetResult(l ASNLexer, v VALUE) {
	l.(*Parser).Result = JSON(&v)
}

type Empty struct{}
type (
	VALUE   interface{}
	STRING  string
	NUMBER  float64
	BOOLEAN bool
	LIST    []VALUE
	MAP     map[string]VALUE
)

//line asn.y:56
type ASNSymType struct {
	yys         int
	TypeToken   struct{}
	TypeString  STRING
	TypeNumber  NUMBER
	TypeValue   VALUE
	TypeBoolean BOOLEAN
	TypeMap     MAP
	TypeList    LIST
}

const CURLY_START = 57346
const CURLY_END = 57347
const SQUARE_START = 57348
const SQUARE_END = 57349
const DOUBLE_QUOTE = 57350
const SINGLE_QUOTE = 57351
const COMMA = 57352
const COLON = 57353
const MINUS = 57354
const GREATER_THAN = 57355
const LESS_THAN = 57356
const DOT = 57357
const SLASH = 57358
const ROUND_START = 57359
const ROUND_END = 57360
const EQUALITY = 57361
const APOSTROPHE = 57362
const SPACE = 57363
const PIPE = 57364
const AT_THE_RATE = 57365
const EXCLAMATION = 57366
const CARET = 57367
const SEMI_COMMA = 57368
const ELLIPSIS = 57369
const ABSENT_SYMBOL = 57370
const ABSTRACTSYNTAX_SYMBOL = 57371
const ALL_SYMBOL = 57372
const APPLICATION_SYMBOL = 57373
const AUTOMATIC_SYMBOL = 57374
const BEGIN_SYMBOL = 57375
const BIT_SYMBOL = 57376
const BMPSTRING_SYMBOL = 57377
const BOOLEAN_SYMBOL = 57378
const BY_SYMBOL = 57379
const CHARACTER_SYMBOL = 57380
const CHOICE_SYMBOL = 57381
const CLASS_SYMBOL = 57382
const COMPONENT_SYMBOL = 57383
const COMPONENTS_SYMBOL = 57384
const CONSTRAINED_SYMBOL = 57385
const CONTAINING_SYMBOL = 57386
const DATE_SYMBOL = 57387
const DATETIME_SYMBOL = 57388
const DEFAULT_SYMBOL = 57389
const DEFINITIONS_SYMBOL = 57390
const DURATION_SYMBOL = 57391
const EMBEDDED_SYMBOL = 57392
const ENCODED_SYMBOL = 57393
const ENCODINGCONTROL_SYMBOL = 57394
const END_SYMBOL = 57395
const ENUMERATED_SYMBOL = 57396
const EXCEPT_SYMBOL = 57397
const EXPLICIT_SYMBOL = 57398
const EXPORTS_SYMBOL = 57399
const EXTENSIBILITY_SYMBOL = 57400
const EXTERNEL_SYMBOL = 57401
const FALSE_SYMBOL = 57402
const FROM_SYMBOL = 57403
const GENERALIZEDTIME_SYMBOL = 57404
const GENERALSTRING_SYMBOL = 57405
const GRAPHICSTRING_SYMBOL = 57406
const IA5STRING_SYMBOL = 57407
const IDENTIFIER_SYMBOL = 57408
const IMPLICIT_SYMBOL = 57409
const IMPLIED_SYMBOL = 57410
const IMPORTS_SYMBOL = 57411
const INCLUDES_SYMBOL = 57412
const INSTANCE_SYMBOL = 57413
const INSTRUCTIONS_SYMBOL = 57414
const INTEGER_SYMBOL = 57415
const INTERSECTION_SYMBOL = 57416
const ISO646STRING_SYMBOL = 57417
const MAX_SYMBOL = 57418
const MIN_SYMBOL = 57419
const MINUSINFINITY_SYMBOL = 57420
const NOTANUMBER_SYMBOL = 57421
const NULL_SYMBOL = 57422
const NUMERICSTRING_SYMBOL = 57423
const OBJECT_SYMBOL = 57424
const OBJECTDESCRIPTOR_SYMBOL = 57425
const OCTET_SYMBOL = 57426
const OF_SYMBOL = 57427
const OIDIRI_SYMBOL = 57428
const OPTIONAL_SYMBOL = 57429
const PATTERN_SYMBOL = 57430
const PDV_SYMBOL = 57431
const PLUSINFINITY_SYMBOL = 57432
const PRESENT_SYMBOL = 57433
const PRINTABLESTRING_SYMBOL = 57434
const PRIVATE_SYMBOL = 57435
const REAL_SYMBOL = 57436
const RELATIVEOID_SYMBOL = 57437
const RELATIVEOIDIRI_SYMBOL = 57438
const SEQUENCE_SYMBOL = 57439
const SET_SYMBOL = 57440
const SETTINGS_SYMBOL = 57441
const SIZE_SYMBOL = 57442
const STRING_SYMBOL = 57443
const SYNTAX_SYMBOL = 57444
const T61STRING_SYMBOL = 57445
const TAGS_SYMBOL = 57446
const TELETEXSTRING_SYMBOL = 57447
const TIME_SYMBOL = 57448
const TIMEOFDAY_SYMBOL = 57449
const TRUE_SYMBOL = 57450
const TYPEIDENTIFIER_SYMBOL = 57451
const UNION_SYMBOL = 57452
const UNIQUE_SYMBOL = 57453
const UNIVERSAL_SYMBOL = 57454
const UNIVERSALSTRING_SYMBOL = 57455
const UTCTIME_SYMBOL = 57456
const UTF8STRING_SYMBOL = 57457
const VIDEOTEXSTRING_SYMBOL = 57458
const VISIBLESTRING_SYMBOL = 57459
const WITH_SYMBOL = 57460
const ASSIGNMENT_SYMBOL = 57461
const TAG_SYMBOL = 57462
const XER_SYMBOL = 57463
const PER_SYMBOL = 57464
const TokenCapitalString = 57465
const TokenString = 57466
const TokenNumber = 57467
const TokenInteger = 57468
const TokenFloat = 57469
const TokenBoolean = 57470
const TokenBString = 57471
const TokenHString = 57472
const TokenCString = 57473
const TokenBlock = 57474

var ASNToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"CURLY_START",
	"CURLY_END",
	"SQUARE_START",
	"SQUARE_END",
	"DOUBLE_QUOTE",
	"SINGLE_QUOTE",
	"COMMA",
	"COLON",
	"MINUS",
	"GREATER_THAN",
	"LESS_THAN",
	"DOT",
	"SLASH",
	"ROUND_START",
	"ROUND_END",
	"EQUALITY",
	"APOSTROPHE",
	"SPACE",
	"PIPE",
	"AT_THE_RATE",
	"EXCLAMATION",
	"CARET",
	"SEMI_COMMA",
	"ELLIPSIS",
	"ABSENT_SYMBOL",
	"ABSTRACTSYNTAX_SYMBOL",
	"ALL_SYMBOL",
	"APPLICATION_SYMBOL",
	"AUTOMATIC_SYMBOL",
	"BEGIN_SYMBOL",
	"BIT_SYMBOL",
	"BMPSTRING_SYMBOL",
	"BOOLEAN_SYMBOL",
	"BY_SYMBOL",
	"CHARACTER_SYMBOL",
	"CHOICE_SYMBOL",
	"CLASS_SYMBOL",
	"COMPONENT_SYMBOL",
	"COMPONENTS_SYMBOL",
	"CONSTRAINED_SYMBOL",
	"CONTAINING_SYMBOL",
	"DATE_SYMBOL",
	"DATETIME_SYMBOL",
	"DEFAULT_SYMBOL",
	"DEFINITIONS_SYMBOL",
	"DURATION_SYMBOL",
	"EMBEDDED_SYMBOL",
	"ENCODED_SYMBOL",
	"ENCODINGCONTROL_SYMBOL",
	"END_SYMBOL",
	"ENUMERATED_SYMBOL",
	"EXCEPT_SYMBOL",
	"EXPLICIT_SYMBOL",
	"EXPORTS_SYMBOL",
	"EXTENSIBILITY_SYMBOL",
	"EXTERNEL_SYMBOL",
	"FALSE_SYMBOL",
	"FROM_SYMBOL",
	"GENERALIZEDTIME_SYMBOL",
	"GENERALSTRING_SYMBOL",
	"GRAPHICSTRING_SYMBOL",
	"IA5STRING_SYMBOL",
	"IDENTIFIER_SYMBOL",
	"IMPLICIT_SYMBOL",
	"IMPLIED_SYMBOL",
	"IMPORTS_SYMBOL",
	"INCLUDES_SYMBOL",
	"INSTANCE_SYMBOL",
	"INSTRUCTIONS_SYMBOL",
	"INTEGER_SYMBOL",
	"INTERSECTION_SYMBOL",
	"ISO646STRING_SYMBOL",
	"MAX_SYMBOL",
	"MIN_SYMBOL",
	"MINUSINFINITY_SYMBOL",
	"NOTANUMBER_SYMBOL",
	"NULL_SYMBOL",
	"NUMERICSTRING_SYMBOL",
	"OBJECT_SYMBOL",
	"OBJECTDESCRIPTOR_SYMBOL",
	"OCTET_SYMBOL",
	"OF_SYMBOL",
	"OIDIRI_SYMBOL",
	"OPTIONAL_SYMBOL",
	"PATTERN_SYMBOL",
	"PDV_SYMBOL",
	"PLUSINFINITY_SYMBOL",
	"PRESENT_SYMBOL",
	"PRINTABLESTRING_SYMBOL",
	"PRIVATE_SYMBOL",
	"REAL_SYMBOL",
	"RELATIVEOID_SYMBOL",
	"RELATIVEOIDIRI_SYMBOL",
	"SEQUENCE_SYMBOL",
	"SET_SYMBOL",
	"SETTINGS_SYMBOL",
	"SIZE_SYMBOL",
	"STRING_SYMBOL",
	"SYNTAX_SYMBOL",
	"T61STRING_SYMBOL",
	"TAGS_SYMBOL",
	"TELETEXSTRING_SYMBOL",
	"TIME_SYMBOL",
	"TIMEOFDAY_SYMBOL",
	"TRUE_SYMBOL",
	"TYPEIDENTIFIER_SYMBOL",
	"UNION_SYMBOL",
	"UNIQUE_SYMBOL",
	"UNIVERSAL_SYMBOL",
	"UNIVERSALSTRING_SYMBOL",
	"UTCTIME_SYMBOL",
	"UTF8STRING_SYMBOL",
	"VIDEOTEXSTRING_SYMBOL",
	"VISIBLESTRING_SYMBOL",
	"WITH_SYMBOL",
	"ASSIGNMENT_SYMBOL",
	"TAG_SYMBOL",
	"XER_SYMBOL",
	"PER_SYMBOL",
	"TokenCapitalString",
	"TokenString",
	"TokenNumber",
	"TokenInteger",
	"TokenFloat",
	"TokenBoolean",
	"TokenBString",
	"TokenHString",
	"TokenCString",
	"TokenBlock",
}

var ASNStatenames = [...]string{}

const ASNEofCode = 1
const ASNErrCode = 2
const ASNInitialStackSize = 16

//line asn.y:4747

//line yacctab:1
var ASNExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 45,
	123, 36,
	124, 36,
	-2, 32,
	-1, 100,
	15, 524,
	-2, 521,
	-1, 165,
	4, 139,
	-2, 132,
	-1, 166,
	4, 140,
	-2, 133,
	-1, 207,
	15, 222,
	-2, 491,
	-1, 234,
	10, 540,
	15, 524,
	-2, 491,
	-1, 276,
	44, 496,
	-2, 457,
	-1, 312,
	22, 265,
	110, 265,
	-2, 195,
	-1, 314,
	25, 262,
	74, 262,
	-2, 197,
	-1, 318,
	55, 206,
	-2, 201,
	-1, 322,
	15, 222,
	-2, 491,
	-1, 336,
	15, 169,
	-2, 258,
	-1, 338,
	15, 170,
	-2, 260,
	-1, 339,
	14, 226,
	15, 226,
	-2, 219,
	-1, 347,
	4, 140,
	-2, 133,
	-1, 352,
	14, 494,
	15, 494,
	-2, 377,
	-1, 380,
	4, 140,
	-2, 133,
	-1, 386,
	15, 173,
	-2, 136,
	-1, 398,
	15, 524,
	-2, 539,
	-1, 420,
	10, 477,
	-2, 65,
	-1, 427,
	10, 463,
	-2, 66,
	-1, 428,
	10, 479,
	-2, 67,
	-1, 441,
	15, 524,
	-2, 539,
	-1, 447,
	10, 463,
	-2, 66,
	-1, 449,
	15, 222,
	-2, 491,
	-1, 450,
	15, 222,
	-2, 491,
	-1, 453,
	15, 222,
	-2, 491,
	-1, 494,
	15, 524,
	-2, 491,
	-1, 495,
	10, 463,
	-2, 66,
	-1, 496,
	10, 479,
	-2, 67,
	-1, 497,
	10, 474,
	-2, 467,
	-1, 498,
	10, 475,
	-2, 469,
	-1, 499,
	10, 476,
	-2, 470,
	-1, 530,
	4, 140,
	11, 133,
	17, 133,
	-2, 534,
	-1, 532,
	11, 524,
	15, 524,
	-2, 275,
	-1, 538,
	25, 262,
	74, 262,
	-2, 198,
	-1, 578,
	15, 222,
	-2, 491,
	-1, 582,
	15, 169,
	-2, 278,
	-1, 583,
	11, 281,
	-2, 279,
	-1, 584,
	11, 282,
	-2, 280,
	-1, 587,
	5, 177,
	-2, 537,
	-1, 608,
	4, 136,
	5, 136,
	11, 136,
	15, 173,
	17, 136,
	-2, 537,
	-1, 737,
	10, 406,
	-2, 352,
}

const ASNPrivate = 57344

const ASNLast = 1855

var ASNAct = [...]int{
	166, 5, 709, 5, 707, 728, 724, 626, 716, 710,
	708, 706, 667, 677, 206, 362, 660, 620, 187, 645,
	711, 629, 589, 367, 580, 309, 429, 335, 468, 440,
	430, 292, 411, 193, 237, 368, 357, 204, 185, 390,
	355, 370, 316, 314, 431, 448, 291, 318, 264, 408,
	397, 65, 65, 238, 415, 394, 72, 83, 83, 416,
	65, 339, 39, 236, 327, 33, 34, 6, 7, 550,
	194, 23, 437, 421, 83, 506, 14, 623, 228, 227,
	23, 38, 437, 23, 712, 451, 37, 230, 217, 210,
	23, 83, 695, 559, 65, 199, 558, 694, 139, 180,
	140, 557, 186, 143, 212, 721, 605, 383, 382, 144,
	145, 376, 30, 146, 147, 375, 214, 29, 148, 23,
	283, 102, 678, 149, 50, 43, 182, 176, 170, 181,
	51, 216, 731, 21, 560, 150, 21, 151, 632, 174,
	36, 51, 50, 192, 153, 171, 154, 184, 155, 671,
	152, 62, 449, 40, 23, 646, 173, 712, 156, 158,
	157, 159, 160, 60, 565, 6, 7, 177, 712, 175,
	163, 164, 23, 452, 218, 223, 55, 178, 183, 169,
	179, 172, 517, 20, 9, 22, 24, 6, 7, 23,
	343, 6, 7, 93, 22, 24, 510, 22, 24, 434,
	244, 6, 7, 74, 22, 24, 282, 242, 347, 434,
	358, 41, 364, 73, 369, 23, 374, 648, 6, 7,
	504, 461, 380, 92, 219, 224, 402, 23, 386, 61,
	358, 20, 363, 22, 24, 347, 353, 381, 6, 7,
	402, 338, 379, 412, 94, 197, 348, 68, 240, 6,
	7, 67, 371, 233, 235, 6, 7, 373, 310, 354,
	585, 249, 396, 6, 7, 6, 7, 248, 22, 24,
	388, 90, 395, 410, 101, 241, 207, 99, 427, 282,
	23, 69, 454, 6, 7, 720, 22, 24, 403, 55,
	70, 201, 225, 220, 99, 100, 393, 445, 391, 48,
	6, 7, 403, 22, 24, 207, 207, 401, 347, 436,
	533, 418, 447, 205, 208, 404, 405, 406, 409, 49,
	245, 401, 700, 347, 435, 719, 6, 7, 443, 22,
	24, 455, 432, 45, 71, 28, 737, 433, 6, 7,
	438, 22, 24, 436, 6, 7, 282, 463, 457, 57,
	550, 336, 649, 420, 552, 531, 338, 460, 435, 27,
	469, 348, 97, 413, 96, 456, 432, 91, 56, 438,
	26, 433, 441, 226, 221, 621, 380, 380, 231, 232,
	52, 701, 53, 380, 380, 699, 625, 420, 222, 222,
	624, 6, 7, 609, 22, 24, 481, 483, 428, 495,
	244, 602, 601, 486, 488, 577, 540, 462, 491, 412,
	412, 207, 378, 417, 536, 508, 508, 385, 509, 387,
	525, 412, 42, 44, 207, 392, 396, 522, 207, 548,
	499, 439, 428, 477, 228, 563, 395, 508, 32, 42,
	282, 505, 530, 209, 439, 498, 282, 228, 227, 659,
	347, 347, 16, 432, 347, 446, 228, 563, 433, 507,
	393, 661, 391, 228, 227, 358, 336, 358, 31, 209,
	507, 518, 541, 364, 420, 502, 543, 369, 244, 466,
	374, 519, 549, 338, 338, 464, 520, 338, 348, 348,
	459, 417, 348, 551, 538, 347, 539, 537, 444, 229,
	465, 524, 521, 545, 682, 544, 617, 534, 412, 244,
	439, 282, 553, 570, 407, 244, 46, 528, 42, 496,
	501, 556, 396, 748, 745, 693, 718, 561, 472, 413,
	413, 458, 395, 643, 562, 726, 738, 587, 644, 569,
	505, 413, 282, 736, 717, 571, 436, 413, 469, 244,
	718, 715, 615, 555, 546, 473, 393, 616, 523, 547,
	513, 435, 527, 566, 608, 514, 480, 482, 689, 688,
	584, 473, 568, 485, 487, 476, 594, 657, 282, 347,
	599, 627, 600, 511, 567, 650, 282, 478, 512, 392,
	572, 282, 479, 336, 336, 633, 610, 336, 554, 364,
	598, 578, 516, 591, 614, 515, 364, 494, 475, 472,
	471, 442, 338, 622, 634, 635, 93, 348, 282, 631,
	749, 702, 647, 564, 596, 503, 636, 739, 413, 413,
	492, 651, 529, 722, 369, 245, 574, 576, 714, 612,
	705, 640, 654, 655, 687, 642, 686, 618, 670, 669,
	611, 364, 591, 607, 584, 535, 656, 653, 493, 474,
	674, 647, 658, 470, 384, 377, 680, 200, 364, 595,
	704, 631, 666, 703, 665, 234, 582, 604, 676, 641,
	675, 603, 586, 681, 532, 392, 359, 215, 363, 680,
	680, 213, 211, 95, 12, 692, 3, 419, 637, 8,
	389, 490, 696, 697, 364, 364, 684, 489, 683, 484,
	593, 1, 279, 400, 188, 500, 713, 399, 364, 364,
	162, 282, 336, 583, 725, 161, 723, 729, 732, 730,
	727, 639, 735, 372, 652, 366, 365, 364, 630, 364,
	628, 742, 741, 740, 743, 364, 364, 746, 729, 597,
	747, 606, 744, 361, 311, 360, 194, 142, 141, 467,
	582, 526, 23, 619, 306, 305, 581, 322, 579, 302,
	301, 300, 668, 337, 698, 691, 690, 679, 673, 664,
	313, 663, 733, 662, 139, 180, 140, 542, 186, 143,
	588, 350, 341, 304, 307, 144, 145, 340, 334, 146,
	147, 308, 333, 332, 148, 331, 330, 583, 329, 149,
	288, 342, 182, 176, 170, 181, 328, 326, 325, 324,
	349, 150, 323, 151, 321, 174, 320, 351, 294, 295,
	352, 171, 154, 184, 155, 319, 152, 453, 345, 317,
	293, 450, 173, 315, 156, 158, 157, 159, 160, 346,
	222, 312, 613, 177, 303, 175, 163, 164, 287, 299,
	668, 298, 685, 178, 183, 169, 179, 172, 344, 297,
	296, 138, 356, 6, 7, 196, 22, 24, 195, 275,
	276, 289, 191, 277, 190, 194, 98, 54, 189, 168,
	167, 23, 165, 137, 136, 135, 322, 134, 133, 64,
	63, 426, 286, 285, 575, 425, 672, 638, 573, 313,
	424, 423, 734, 139, 180, 140, 290, 186, 143, 422,
	281, 280, 274, 278, 144, 145, 273, 272, 146, 147,
	271, 270, 269, 148, 268, 267, 266, 265, 149, 288,
	342, 182, 176, 170, 181, 263, 262, 261, 260, 349,
	150, 259, 151, 258, 174, 257, 351, 294, 295, 352,
	171, 154, 184, 155, 256, 152, 255, 345, 254, 293,
	253, 173, 252, 156, 158, 157, 159, 160, 346, 222,
	251, 250, 177, 247, 175, 163, 164, 287, 246, 243,
	132, 131, 178, 183, 169, 179, 172, 344, 130, 277,
	129, 194, 6, 7, 128, 22, 24, 23, 275, 276,
	289, 127, 322, 126, 125, 124, 123, 122, 121, 120,
	119, 118, 117, 116, 114, 115, 113, 112, 111, 139,
	180, 140, 110, 186, 143, 109, 108, 107, 106, 278,
	144, 145, 105, 104, 146, 147, 103, 89, 88, 148,
	87, 86, 85, 84, 149, 288, 342, 182, 176, 170,
	181, 203, 202, 82, 81, 349, 150, 80, 151, 79,
	174, 78, 351, 294, 295, 352, 171, 154, 184, 155,
	77, 152, 76, 345, 75, 293, 414, 173, 239, 156,
	158, 157, 159, 160, 346, 222, 198, 66, 177, 59,
	175, 163, 164, 287, 58, 47, 35, 13, 178, 183,
	169, 179, 172, 344, 25, 398, 421, 194, 6, 7,
	19, 22, 24, 23, 275, 276, 289, 18, 17, 15,
	11, 10, 4, 2, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 180, 140, 0, 186,
	143, 0, 0, 0, 0, 278, 144, 145, 0, 0,
	146, 147, 0, 0, 0, 148, 0, 0, 0, 0,
	149, 288, 0, 182, 176, 170, 181, 0, 0, 0,
	0, 0, 150, 0, 151, 0, 174, 0, 0, 294,
	295, 352, 171, 154, 184, 155, 0, 152, 0, 0,
	0, 293, 0, 173, 0, 156, 158, 157, 159, 160,
	0, 0, 0, 277, 177, 194, 175, 163, 164, 287,
	0, 23, 0, 0, 178, 183, 169, 179, 172, 0,
	0, 0, 0, 0, 6, 7, 0, 22, 24, 0,
	275, 276, 497, 139, 180, 140, 0, 186, 143, 0,
	0, 0, 0, 278, 144, 145, 0, 0, 146, 147,
	0, 0, 0, 148, 0, 0, 0, 0, 149, 288,
	0, 182, 176, 170, 181, 0, 0, 0, 0, 0,
	150, 0, 151, 0, 174, 0, 0, 294, 295, 352,
	171, 154, 184, 155, 0, 152, 0, 0, 0, 293,
	0, 173, 0, 156, 158, 157, 159, 160, 0, 0,
	0, 398, 177, 194, 175, 163, 164, 287, 0, 23,
	0, 0, 178, 183, 169, 179, 172, 0, 0, 0,
	0, 0, 6, 7, 0, 22, 24, 0, 275, 276,
	289, 139, 180, 140, 0, 186, 143, 0, 0, 0,
	0, 278, 144, 145, 0, 0, 146, 147, 0, 0,
	0, 148, 0, 0, 0, 0, 149, 288, 0, 182,
	176, 170, 181, 0, 0, 0, 0, 0, 150, 0,
	151, 0, 174, 0, 0, 294, 295, 352, 171, 154,
	184, 155, 0, 152, 0, 0, 0, 293, 0, 173,
	0, 156, 158, 157, 159, 160, 0, 0, 0, 0,
	177, 194, 175, 163, 164, 287, 0, 23, 0, 0,
	178, 183, 169, 179, 172, 0, 0, 0, 0, 0,
	6, 7, 0, 22, 24, 0, 275, 276, 289, 139,
	180, 140, 0, 186, 143, 0, 0, 0, 0, 0,
	144, 145, 0, 0, 146, 147, 0, 0, 0, 148,
	0, 0, 0, 0, 149, 0, 0, 182, 176, 170,
	181, 0, 0, 0, 0, 0, 150, 0, 151, 0,
	174, 0, 0, 0, 0, 153, 171, 154, 184, 155,
	0, 152, 0, 0, 0, 0, 0, 173, 0, 156,
	158, 157, 159, 160, 0, 0, 0, 0, 177, 194,
	175, 163, 164, 0, 42, 0, 0, 0, 178, 183,
	169, 179, 172, 0, 0, 0, 0, 0, 6, 7,
	0, 22, 24, 0, 0, 0, 0, 139, 180, 140,
	0, 186, 143, 0, 0, 0, 0, 0, 144, 145,
	0, 0, 146, 147, 0, 0, 0, 148, 0, 0,
	0, 0, 149, 0, 0, 182, 176, 170, 181, 0,
	0, 0, 0, 0, 150, 0, 151, 0, 174, 0,
	0, 0, 0, 153, 171, 154, 184, 155, 0, 152,
	0, 0, 0, 0, 0, 173, 0, 156, 158, 157,
	159, 160, 194, 0, 0, 0, 177, 0, 175, 163,
	164, 0, 0, 0, 0, 0, 178, 183, 169, 179,
	172, 0, 0, 0, 0, 0, 6, 7, 0, 0,
	139, 180, 140, 0, 186, 143, 0, 0, 0, 0,
	0, 144, 145, 0, 0, 146, 147, 0, 0, 0,
	148, 0, 0, 0, 0, 149, 0, 0, 182, 176,
	170, 181, 0, 0, 0, 277, 0, 150, 0, 151,
	0, 174, 0, 23, 0, 590, 153, 171, 154, 184,
	155, 0, 152, 0, 0, 0, 0, 0, 173, 277,
	156, 158, 157, 159, 160, 0, 0, 23, 0, 177,
	0, 175, 163, 164, 0, 278, 0, 0, 0, 178,
	183, 169, 179, 172, 0, 0, 0, 0, 0, 6,
	7, 288, 0, 0, 0, 0, 0, 277, 0, 278,
	0, 0, 0, 0, 0, 23, 0, 592, 0, 294,
	295, 284, 0, 0, 0, 288, 0, 0, 0, 0,
	0, 293, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 592, 0, 294, 295, 284, 0, 278, 0, 287,
	0, 0, 0, 0, 0, 293, 0, 0, 0, 0,
	0, 0, 0, 288, 6, 7, 0, 22, 24, 0,
	275, 276, 289, 287, 0, 0, 0, 0, 0, 0,
	0, 294, 295, 284, 0, 0, 0, 0, 6, 7,
	0, 22, 24, 293, 275, 276, 289, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 287, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 6, 7, 0, 22,
	24, 0, 275, 276, 289,
}

var ASNPact = [...]int{
	-56, -1000, -56, -1000, 136, 690, -1000, -1000, -1000, -47,
	-1000, -1000, 59, 303, 45, 107, -1000, -1000, -1000, -1000,
	421, -1000, -1000, -61, -1000, 82, -18, -23, -42, -1000,
	-1000, -1000, 71, -1000, -1000, 507, 57, -1000, -1000, -1000,
	405, 300, 505, -1000, -1000, 73, 361, 124, 84, 55,
	-56, 221, -1000, 237, -1000, -67, -56, -56, 341, -56,
	-1000, 183, -1000, 689, -1000, -1000, 338, 336, -1000, 606,
	-1000, 124, -1000, -56, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1503, -1000, -1000, -1000, -1000, -1000, -1000,
	-56, -1000, -1000, -56, -56, 662, -1000, -1000, -1000, -1000,
	1596, 411, 428, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -12,
	-1000, -1000, -1000, 688, -1000, -1000, -1000, 15, 687, -1000,
	31, 683, -1000, -1000, 65, -13, -1000, -1000, -1000, 289,
	288, -1000, -1000, -1000, -1000, -1000, 449, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 484, -14, 1596, 1596, 671,
	671, -1000, 671, -1000, -70, -1000, -1000, -1000, -1000, 203,
	-1000, 407, -1000, -1000, 454, 1723, -1000, 750, -1000, -56,
	682, -56, -1000, -56, -1000, -56, -1000, -1000, 30, 26,
	660, 1596, 407, 23, 22, 659, 1596, -56, 1596, -56,
	-1000, 407, 407, -1000, 1307, -1000, -1000, 195, 503, -1000,
	-1000, -1000, 268, -1000, 476, -1000, -1000, 671, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 68, 1723, -1000,
	-1000, -1000, 499, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 348, -1000, -1000, -1000,
	-1000, -1000, -1000, 601, 291, -1000, -1000, 1209, 260, -1000,
	-1000, 68, -1000, 97, -1000, 63, -1000, 257, -1000, 97,
	-1000, -1000, 879, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 671, -1000, -1000, -1000,
	1596, 475, 407, 407, 179, 1723, -56, 433, 470, -1000,
	486, -1000, -1000, -1000, -1000, -1000, 464, -1000, -1000, -56,
	658, 600, 599, -1000, 1596, 654, 598, 565, -1000, 416,
	-1000, -1000, 582, -1000, 416, 1596, 1596, -1000, 407, -1000,
	64, -1000, 1596, 1596, -1000, 407, -1000, 407, -1000, 624,
	653, 597, 407, -1000, -1000, 454, -1000, -1000, 1111, 142,
	618, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 215, 142,
	-1000, -1000, 398, -1000, -1000, -1000, -1000, -56, -1000, 152,
	142, -1000, 578, 555, 595, 592, 177, 398, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 71, -1000, 1723,
	402, 1405, 328, 680, 259, 1723, 650, 399, -1000, 995,
	995, -1000, -1000, 995, -1000, -1000, -1000, 388, 407, 457,
	-1000, 407, -1000, -1000, -56, -1000, -56, 549, -1000, 412,
	-1000, 323, -56, 407, -1000, 327, -56, 142, -1000, -56,
	407, -1000, 407, -1000, 4, 407, -1000, 407, -1000, -2,
	-5, 67, -70, -1000, 1209, 420, -1000, -1000, -1000, -1000,
	616, -1000, -1000, -1000, -1000, -1000, -1000, 160, 142, -1000,
	1723, -1000, -56, -1000, 78, 71, 71, -1000, -1000, -1000,
	-1000, -1000, 398, -1000, -1000, -1000, -1000, -1000, -1000, 394,
	442, 591, 1596, 223, -1000, 678, -56, -1000, -1000, -1000,
	-1000, 1661, -1000, -1000, -1000, -1000, -1000, -56, 142, 590,
	348, -1000, 348, -1000, 384, 383, -1000, 677, 673, 21,
	1596, 209, 648, -56, -1000, -1000, 375, -1000, -1000, -1000,
	-1000, -1000, -1000, 586, -1000, 645, -1000, 1723, 879, 547,
	-1000, 495, 671, 407, 454, 1723, 352, -1000, -1000, -1000,
	1685, -1000, -1000, -41, -1000, 372, 368, 571, 132, -1000,
	585, -1000, -1000, 323, 323, -56, 407, -1000, -1000, -1000,
	71, -1000, -1000, -1000, -1000, -1000, 1596, 1723, -1000, 528,
	-1000, 140, -1000, 175, -1000, -1000, -1000, 325, 575, -1000,
	-1000, -1000, 625, -56, 571, 571, -1000, 624, 567, -1000,
	-1000, -1000, -1000, -1000, 352, 434, 446, -1000, 670, -1000,
	132, 71, -1000, 565, 644, 643, 93, 71, -1000, -56,
	-56, 446, -1000, -1000, -1000, 95, -1000, -56, 493, -1000,
	-1000, 1596, 641, -1000, -1000, 434, -1000, 639, 559, 558,
	407, 518, -1000, 0, -6, 407, -1000, -1000, -56, -56,
	-1000, 294, -1000, 614, 669, 666, 635, -1000, -1000, -1000,
	-1000, -1000, -1000, 42, 42, -1000, 633, 541, 534, 540,
	-1000, 238, 20, 628, -1000, 323, 525, 126, 115, -1000,
	1723, 1596, -1000, 534, 533, -1000, 309, 526, -1000, -1000,
	-1000, 621, -1000, -1000, 407, 525, 115, -1000, 126, 71,
	-1000, 514, -1000, -1000, 115, 115, 516, -1000, 613, -1000,
}

var ASNPgo = [...]int{
	0, 1133, 696, 1132, 1131, 1130, 1129, 452, 1128, 1127,
	1120, 1114, 1107, 1106, 1105, 299, 319, 1104, 1099, 163,
	1097, 229, 151, 1096, 1088, 48, 49, 32, 1086, 54,
	59, 213, 203, 75, 1084, 1082, 1080, 1071, 1069, 1067,
	1064, 1063, 190, 61, 55, 1062, 1061, 37, 27, 50,
	1053, 1052, 1051, 1050, 1048, 1047, 1046, 1043, 1042, 1038,
	1037, 1036, 1035, 1032, 1028, 1027, 1026, 1025, 1024, 1023,
	1022, 1021, 1020, 1019, 1018, 1017, 1016, 1015, 1014, 1013,
	1011, 1004, 1000, 998, 991, 990, 989, 988, 983, 63,
	981, 980, 972, 970, 968, 966, 964, 955, 953, 951,
	948, 947, 946, 945, 937, 936, 935, 934, 932, 931,
	930, 927, 926, 922, 921, 920, 919, 26, 916, 46,
	31, 911, 30, 910, 908, 907, 906, 905, 904, 903,
	902, 901, 44, 334, 900, 899, 898, 897, 895, 894,
	893, 892, 890, 889, 888, 38, 40, 39, 887, 886,
	884, 882, 143, 33, 878, 875, 872, 36, 14, 871,
	870, 29, 869, 861, 859, 854, 852, 25, 851, 45,
	43, 843, 841, 42, 839, 837, 47, 835, 826, 824,
	822, 819, 818, 817, 64, 816, 808, 806, 805, 803,
	802, 798, 797, 792, 791, 790, 22, 787, 783, 781,
	779, 13, 777, 776, 775, 774, 773, 771, 770, 769,
	768, 24, 766, 765, 764, 763, 17, 19, 16, 761,
	20, 759, 28, 758, 757, 755, 753, 10, 749, 7,
	15, 740, 21, 738, 736, 12, 735, 734, 23, 35,
	41, 733, 11, 4, 8, 6, 2, 9, 730, 5,
	729, 725, 720, 18, 34, 717, 715, 714, 713, 211,
	0, 120, 712, 712, 711, 710, 709, 708, 707, 706,
	701, 700, 698, 697, 697,
}

var ASNR1 = [...]int{
	0, 264, 1, 1, 2, 133, 133, 133, 148, 149,
	3, 12, 12, 4, 4, 5, 6, 6, 7, 7,
	7, 8, 9, 10, 11, 11, 11, 11, 13, 13,
	14, 14, 14, 16, 16, 16, 16, 20, 20, 21,
	21, 22, 22, 134, 135, 135, 15, 15, 17, 17,
	18, 18, 19, 23, 24, 24, 24, 25, 25, 25,
	26, 26, 27, 27, 27, 27, 28, 29, 29, 30,
	31, 31, 31, 32, 32, 32, 32, 32, 32, 32,
	32, 34, 35, 36, 37, 38, 39, 40, 41, 41,
	41, 41, 41, 41, 42, 42, 42, 43, 43, 43,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 57, 57, 57,
	57, 57, 136, 136, 136, 136, 141, 142, 143, 144,
	144, 89, 89, 147, 147, 147, 147, 147, 147, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 138, 139, 145, 145, 145,
	145, 150, 150, 154, 151, 152, 152, 155, 153, 146,
	156, 156, 157, 140, 58, 58, 158, 160, 160, 162,
	164, 164, 164, 165, 166, 167, 167, 168, 168, 170,
	170, 173, 173, 176, 176, 176, 177, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 180,
	181, 192, 192, 182, 193, 193, 194, 194, 195, 195,
	196, 196, 183, 184, 185, 265, 186, 197, 198, 198,
	199, 201, 201, 202, 203, 204, 204, 205, 205, 205,
	205, 200, 187, 188, 189, 190, 191, 179, 179, 179,
	179, 206, 174, 175, 175, 171, 172, 172, 169, 163,
	163, 163, 207, 210, 210, 210, 211, 211, 211, 211,
	211, 212, 212, 208, 208, 213, 214, 215, 215, 216,
	216, 217, 217, 218, 218, 209, 209, 209, 161, 161,
	219, 219, 219, 159, 159, 159, 159, 159, 159, 159,
	159, 220, 59, 59, 221, 221, 222, 222, 60, 61,
	61, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 224, 62, 225, 225, 226, 230,
	230, 227, 227, 228, 228, 231, 231, 232, 232, 233,
	235, 235, 229, 229, 63, 64, 65, 66, 68, 234,
	234, 234, 236, 237, 238, 238, 239, 239, 240, 240,
	67, 69, 70, 70, 241, 241, 71, 72, 73, 74,
	75, 76, 77, 78, 266, 267, 79, 242, 242, 242,
	242, 242, 243, 246, 246, 247, 247, 247, 247, 244,
	244, 248, 248, 249, 249, 250, 245, 80, 80, 268,
	269, 81, 270, 82, 84, 85, 83, 83, 271, 272,
	251, 253, 254, 255, 255, 255, 255, 256, 256, 252,
	257, 258, 258, 258, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 93, 93, 93, 93,
	93, 116, 116, 117, 94, 95, 95, 114, 114, 114,
	114, 118, 121, 121, 122, 122, 122, 122, 119, 123,
	124, 125, 126, 120, 127, 128, 115, 96, 97, 98,
	99, 100, 101, 101, 103, 104, 273, 104, 105, 105,
	129, 129, 130, 130, 130, 102, 106, 107, 131, 131,
	132, 132, 132, 108, 109, 110, 111, 112, 113, 91,
	92, 45, 44, 46, 47, 48, 49, 50, 51, 52,
	53, 54, 55, 33, 33, 33, 33, 86, 87, 88,
	89, 262, 262, 260, 260, 261, 261, 261, 261, 259,
	274, 263,
}

var ASNR2 = [...]int{
	0, 1, 1, 2, 10, 1, 2, 0, 3, 0,
	2, 2, 0, 1, 0, 3, 1, 2, 1, 1,
	1, 1, 1, 4, 2, 2, 2, 0, 2, 0,
	3, 3, 0, 3, 3, 2, 0, 1, 0, 1,
	3, 1, 1, 1, 1, 3, 3, 0, 1, 0,
	1, 2, 3, 2, 1, 1, 0, 3, 4, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 4,
	1, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 4, 3, 4, 3, 4, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 2, 1,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 3, 2, 1, 1, 3, 2, 1,
	1, 3, 1, 3, 2, 1, 4, 1, 1, 1,
	1, 3, 5, 1, 1, 1, 2, 1, 3, 1,
	3, 1, 2, 1, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 0, 4, 1, 2, 1, 1, 1, 2,
	1, 1, 2, 2, 1, 0, 7, 1, 1, 1,
	3, 1, 3, 2, 2, 1, 0, 1, 1, 1,
	0, 5, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 2, 1,
	1, 1, 5, 1, 3, 0, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 6, 1, 3, 2,
	4, 1, 3, 2, 0, 2, 3, 5, 2, 0,
	1, 1, 3, 4, 4, 4, 4, 4, 4, 4,
	4, 2, 2, 5, 1, 3, 4, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 4, 1, 5, 1, 1,
	3, 1, 2, 2, 0, 1, 3, 1, 1, 6,
	2, 0, 2, 0, 1, 1, 1, 2, 4, 1,
	4, 6, 1, 1, 1, 3, 1, 1, 4, 4,
	1, 3, 1, 4, 1, 3, 1, 1, 3, 2,
	2, 1, 1, 1, 0, 0, 14, 1, 5, 7,
	5, 3, 1, 1, 3, 1, 2, 3, 3, 2,
	0, 1, 3, 1, 1, 6, 2, 3, 3, 0,
	0, 14, 0, 7, 1, 1, 1, 1, 0, 0,
	10, 5, 2, 1, 1, 1, 0, 1, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	2, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 9, 1,
	1, 1, 1, 5, 1, 1, 1, 3, 1, 1,
	1, 0, 1, 1, 1, 1, 0, 4, 1, 1,
	1, 1, 1, 1, 1, 0, 0, 3, 1, 2,
	1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1, 1, 1, 1, 3, 2, 0,
	0, 1, 1, 1, 1, 1, 2, 1, 2, 3,
	0, 2,
}

var ASNChk = [...]int{
	-1000, -264, -1, -2, -3, -260, 123, 124, -2, 48,
	-4, -5, 4, -12, 123, -6, -7, -8, -9, -10,
	124, -261, 126, 12, 127, -11, 67, 56, 32, 72,
	5, -7, 17, 126, 127, -13, 58, 104, 104, 104,
	-261, -259, 11, 68, 18, 33, 11, -14, -15, -16,
	69, 57, 19, -133, -148, 52, -16, -15, -17, -18,
	-19, -21, -22, -134, -135, -260, -20, 30, 26, -21,
	53, -133, 123, -31, -32, -34, -35, -36, -37, -38,
	-39, -40, -41, -260, -50, -51, -52, -53, -54, -55,
	-31, 26, -19, 10, 61, 4, 26, 26, -149, -32,
	-259, -42, -47, -56, -57, -58, -59, -60, -61, -62,
	-63, -64, -65, -66, -68, -67, -69, -70, -71, -72,
	-73, -74, -75, -76, -77, -78, -79, -80, -81, -82,
	-83, -84, -85, -136, -137, -138, -139, -140, -159, 34,
	36, -223, -224, 39, 45, 46, 49, 50, 54, 59,
	71, 73, 86, 80, 82, 84, 94, 96, 95, 97,
	98, -251, -252, 106, 107, -141, -260, -142, -143, 115,
	64, 81, 117, 92, 75, 105, 63, 103, 113, 116,
	35, 65, 62, 114, 83, -145, 38, -253, -257, -144,
	-150, -151, -152, -153, 6, -154, -155, -22, -23, -260,
	5, -42, -45, -46, -47, -259, -158, 17, -259, 15,
	101, 4, 89, 4, 85, 4, 66, 101, -158, -184,
	4, 85, 100, -158, -184, 4, 85, 15, 14, 15,
	101, -42, -42, -89, 4, -89, -89, -254, 123, -24,
	-25, -33, 4, -86, -260, -261, -87, -88, -43, -44,
	-90, -91, -92, -93, -94, -95, -96, -97, -98, -99,
	-100, -101, -102, -103, -25, -104, -105, -106, -107, -108,
	-109, -110, -111, -112, -113, 129, 130, 4, 44, -262,
	-114, -115, -260, -261, 80, -129, -130, 108, 60, 131,
	-118, -119, -120, 90, 78, 79, -160, -162, -163, -164,
	-207, -208, -209, -165, 43, -213, -214, 44, 51, -167,
	-49, 4, -168, 30, -170, -171, -173, -174, -176, -177,
	-178, -179, 17, -180, -181, -182, -183, -184, -185, -186,
	-187, -188, -189, -190, -191, -48, -152, -206, -153, -43,
	-192, -193, 61, -42, 118, 88, 99, -260, -145, 70,
	-194, 77, 80, -48, -49, -146, -156, -157, -260, 4,
	-225, -226, -230, -220, -260, -234, -236, -238, -239, -260,
	-240, -47, -241, -240, -260, 85, 85, 5, -42, -220,
	-260, -158, 85, 85, 5, -42, -260, -42, -146, -271,
	-147, -89, -42, -43, -44, -47, -48, -49, 4, -255,
	-258, 112, 31, 93, 120, 121, 122, 11, -26, -33,
	5, -27, -260, -261, -28, -29, -30, 15, -89, -273,
	-33, 5, -116, -121, -123, -127, -131, -260, -261, -117,
	-122, -132, -29, -30, 131, -119, -120, 4, -43, 11,
	-161, 24, 10, 37, -42, 37, -152, -260, -169, 55,
	-172, 22, 110, -175, 25, 74, -169, -167, -42, 15,
	-158, 42, -43, -260, 15, 14, 15, -221, -222, -260,
	5, 10, 10, -42, 5, 10, 10, 17, 5, 10,
	-42, -220, -42, -220, -266, -42, -220, -42, -220, -268,
	-270, -253, 6, 5, 10, -260, -261, 131, -119, -120,
	-256, -261, -33, 7, 5, -27, -33, -26, 17, -260,
	44, 5, 10, 5, 10, 10, 10, 5, -132, -29,
	-30, -33, -260, -261, -43, 18, -219, -261, -33, -42,
	-260, 27, 4, 51, -43, 5, 15, -176, -170, -173,
	18, 15, -197, -158, -146, -157, 5, 10, 17, -227,
	27, -220, 27, -239, -261, -33, -240, 97, 98, 98,
	67, -254, -147, 15, 7, 4, -29, -33, -43, -117,
	-260, -122, -33, -124, -261, -128, -261, 11, 10, -210,
	-211, -212, -152, -42, -47, 37, 4, -260, -195, -196,
	14, -43, 76, -265, -222, -261, -33, -228, 10, -161,
	-161, 18, 18, 4, 4, 85, -42, 5, -260, 18,
	10, 5, -43, -166, -167, 5, 10, 11, -43, -215,
	-216, 23, -196, 118, 18, 18, -229, 10, -231, -232,
	-233, -220, 6, 10, -227, -227, -220, -272, -125, -261,
	-211, -43, -48, 5, 10, -217, 15, -260, 42, 27,
	10, 6, -237, -238, -229, -229, -253, 10, -216, 15,
	-218, 15, -198, -199, -200, 4, -232, -235, -261, 5,
	5, 56, -126, -261, -260, -217, -218, -201, 27, -202,
	-260, -230, 11, -267, -269, -42, 5, 5, 10, 10,
	-203, -204, -158, 7, 97, 98, -201, -201, -205, 91,
	28, 87, 7, 4, 4, 5, -242, -243, -227, -246,
	-247, -220, 42, -242, 5, 10, -244, 10, 10, 87,
	47, 85, 5, -227, -245, -229, 10, -248, -249, -247,
	-250, 6, -247, -43, -42, -244, 10, 27, 10, 6,
	-229, -245, -243, -249, -235, 10, -246, -243, 7, 7,
}

var ASNDef = [...]int{
	0, -2, 1, 2, 0, 14, 543, 544, 3, 12,
	10, 13, 0, 27, 0, 0, 16, 18, 19, 20,
	21, 22, 545, 0, 547, 29, 0, 0, 0, 11,
	15, 17, 0, 546, 548, 0, 0, 24, 25, 26,
	0, 0, 0, 28, 23, -2, 0, 7, 36, 47,
	49, 0, 549, 0, 5, 0, 72, 72, 0, 48,
	50, 0, 39, 41, 42, 43, 0, 0, 35, 37,
	4, 6, 9, 30, 70, 73, 74, 75, 76, 77,
	78, 79, 80, 524, 88, 89, 90, 91, 92, 93,
	31, 46, 51, 0, 0, 0, 33, 34, 8, 71,
	-2, 0, 0, 94, 95, 96, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 185, 0,
	318, 319, 320, 0, 354, 355, 356, 0, 0, 370,
	0, 372, 376, 377, 0, 0, 381, 382, 383, 0,
	0, 416, 417, 414, 415, -2, -2, 134, 135, 149,
	150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
	160, 161, 162, 163, 164, 0, 0, 524, 524, 540,
	167, 168, 169, 170, 0, 171, 175, 40, 52, 56,
	45, 81, 83, 85, 0, 491, 184, -2, 525, 0,
	312, 0, 357, 0, 524, 0, 379, 380, 0, 0,
	0, 524, 0, 0, 0, 0, 524, 0, 524, 0,
	334, 418, 429, 137, -2, 174, 178, 426, 0, 53,
	54, 55, 539, 533, 534, 535, 536, 540, 82, 84,
	97, 98, 99, 434, 435, 436, 437, 438, 439, 440,
	441, 442, 443, 444, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 455, 456, -2, 539, 491, 464,
	465, 466, 489, 492, 494, 498, 499, 541, 542, 467,
	468, 469, 470, 502, 503, 504, 299, 187, 188, 189,
	269, 270, 271, 190, 0, 283, 284, 491, 0, 193,
	285, 539, -2, 0, -2, 0, 199, 0, -2, 0,
	203, 204, -2, 207, 208, 209, 210, 211, 212, 213,
	214, 215, 216, 217, 218, 257, -2, 259, -2, -2,
	524, 0, 0, 234, 0, 491, 0, -2, 0, 221,
	224, 227, -2, 86, 87, 378, 179, 180, 182, 0,
	0, 336, 338, 339, 524, 0, 359, 362, 364, 366,
	367, 371, 0, 374, 0, 524, 524, 384, 407, 408,
	-2, 233, 524, 524, 409, 412, -2, 165, 166, 0,
	0, 0, 143, 144, 145, 146, 147, 148, -2, 539,
	0, 423, 424, 425, 431, 432, 433, 422, 539, 65,
	59, 60, 66, 67, 62, 63, 64, 0, 538, 0,
	-2, 59, 0, 0, 0, 0, 539, -2, -2, 461,
	472, 508, 63, 64, 474, 475, 476, 0, 460, 491,
	0, -2, 0, 0, 295, 491, 0, -2, 196, -2,
	-2, 266, 267, -2, 263, 264, 202, 0, 220, 0,
	232, 0, 252, 253, 0, 225, 0, 0, 314, 0,
	335, 0, 0, 311, 358, 0, 0, 539, 373, 0,
	305, 309, 306, 310, 0, 303, 307, 304, 308, 0,
	0, 0, 0, 141, -2, -2, -2, -2, -2, -2,
	0, 427, 428, 430, 57, 61, 65, 0, 539, 537,
	491, 458, 0, 471, 539, 0, 0, 507, 509, 510,
	511, 68, 534, 479, 487, 186, 298, 300, 301, 0,
	-2, 191, -2, 0, 296, 0, 0, 268, -2, 200,
	205, 491, 235, 237, 166, 181, 313, 0, 539, 344,
	299, 340, 299, 365, 0, 0, 375, 0, 0, 0,
	524, 426, 0, 0, 421, 58, 0, 68, 497, 462,
	463, 473, 477, 0, 480, 0, 485, 491, -2, 0,
	273, 0, -2, -2, -2, 491, 0, -2, 223, 228,
	491, 230, 231, 0, 315, 0, 0, 353, 0, 342,
	360, 368, 369, 0, 0, 0, 419, 142, -2, 69,
	0, 483, 302, 192, 194, 272, 524, 491, 297, 0,
	287, 0, 229, 0, 316, 317, 337, 0, 343, 345,
	347, 348, 0, 0, 353, 353, 413, 0, 0, 481,
	274, 276, 277, 286, 0, 289, 294, 291, 0, 352,
	0, 351, 361, 363, 0, 0, 0, 0, 288, 0,
	0, 294, 236, 238, 239, 0, 346, 0, 0, 385,
	410, 524, 0, 482, 292, 290, 293, 0, 0, 241,
	246, 0, 350, 0, 0, 420, 478, 240, 0, 0,
	243, 250, 245, 0, 0, 0, 0, 242, 244, 247,
	248, 249, 349, 0, 0, 251, 0, 387, 400, 392,
	393, 395, 0, 0, 386, 0, 353, 0, 0, 396,
	491, 524, 411, 400, 0, 391, 0, 399, 401, 403,
	404, 0, 394, 397, 398, 353, 0, -2, 0, 351,
	388, 0, 390, 402, 0, 0, 0, 389, 0, 405,
}

var ASNTok1 = [...]int{
	1,
}

var ASNTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132,
}

var ASNTok3 = [...]int{
	0,
}

var ASNErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	ASNDebug        = 0
	ASNErrorVerbose = false
)

type ASNLexer interface {
	Lex(lval *ASNSymType) int
	Error(s string)
}

type ASNParser interface {
	Parse(ASNLexer) int
	Lookahead() int
}

type ASNParserImpl struct {
	lval  ASNSymType
	stack [ASNInitialStackSize]ASNSymType
	char  int
}

func (p *ASNParserImpl) Lookahead() int {
	return p.char
}

func ASNNewParser() ASNParser {
	return &ASNParserImpl{}
}

const ASNFlag = -1000

func ASNTokname(c int) string {
	if c >= 1 && c-1 < len(ASNToknames) {
		if ASNToknames[c-1] != "" {
			return ASNToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func ASNStatname(s int) string {
	if s >= 0 && s < len(ASNStatenames) {
		if ASNStatenames[s] != "" {
			return ASNStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func ASNErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !ASNErrorVerbose {
		return "syntax error"
	}

	for _, e := range ASNErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + ASNTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := ASNPact[state]
	for tok := TOKSTART; tok-1 < len(ASNToknames); tok++ {
		if n := base + tok; n >= 0 && n < ASNLast && ASNChk[ASNAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if ASNDef[state] == -2 {
		i := 0
		for ASNExca[i] != -1 || ASNExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; ASNExca[i] >= 0; i += 2 {
			tok := ASNExca[i]
			if tok < TOKSTART || ASNExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if ASNExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += ASNTokname(tok)
	}
	return res
}

func ASNlex1(lex ASNLexer, lval *ASNSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = ASNTok1[0]
		goto out
	}
	if char < len(ASNTok1) {
		token = ASNTok1[char]
		goto out
	}
	if char >= ASNPrivate {
		if char < ASNPrivate+len(ASNTok2) {
			token = ASNTok2[char-ASNPrivate]
			goto out
		}
	}
	for i := 0; i < len(ASNTok3); i += 2 {
		token = ASNTok3[i+0]
		if token == char {
			token = ASNTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = ASNTok2[1] /* unknown char */
	}
	if ASNDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", ASNTokname(token), uint(char))
	}
	return char, token
}

func ASNParse(ASNlex ASNLexer) int {
	return ASNNewParser().Parse(ASNlex)
}

func (ASNrcvr *ASNParserImpl) Parse(ASNlex ASNLexer) int {
	var ASNn int
	var ASNVAL ASNSymType
	var ASNDollar []ASNSymType
	_ = ASNDollar // silence set and not used
	ASNS := ASNrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	ASNstate := 0
	ASNrcvr.char = -1
	ASNtoken := -1 // ASNrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		ASNstate = -1
		ASNrcvr.char = -1
		ASNtoken = -1
	}()
	ASNp := -1
	goto ASNstack

ret0:
	return 0

ret1:
	return 1

ASNstack:
	/* put a state and value onto the stack */
	if ASNDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", ASNTokname(ASNtoken), ASNStatname(ASNstate))
	}

	ASNp++
	if ASNp >= len(ASNS) {
		nyys := make([]ASNSymType, len(ASNS)*2)
		copy(nyys, ASNS)
		ASNS = nyys
	}
	ASNS[ASNp] = ASNVAL
	ASNS[ASNp].yys = ASNstate

ASNnewstate:
	ASNn = ASNPact[ASNstate]
	if ASNn <= ASNFlag {
		goto ASNdefault /* simple state */
	}
	if ASNrcvr.char < 0 {
		ASNrcvr.char, ASNtoken = ASNlex1(ASNlex, &ASNrcvr.lval)
	}
	ASNn += ASNtoken
	if ASNn < 0 || ASNn >= ASNLast {
		goto ASNdefault
	}
	ASNn = ASNAct[ASNn]
	if ASNChk[ASNn] == ASNtoken { /* valid shift */
		ASNrcvr.char = -1
		ASNtoken = -1
		ASNVAL = ASNrcvr.lval
		ASNstate = ASNn
		if Errflag > 0 {
			Errflag--
		}
		goto ASNstack
	}

ASNdefault:
	/* default state action */
	ASNn = ASNDef[ASNstate]
	if ASNn == -2 {
		if ASNrcvr.char < 0 {
			ASNrcvr.char, ASNtoken = ASNlex1(ASNlex, &ASNrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if ASNExca[xi+0] == -1 && ASNExca[xi+1] == ASNstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			ASNn = ASNExca[xi+0]
			if ASNn < 0 || ASNn == ASNtoken {
				break
			}
		}
		ASNn = ASNExca[xi+1]
		if ASNn < 0 {
			goto ret0
		}
	}
	if ASNn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			ASNlex.Error(ASNErrorMessage(ASNstate, ASNtoken))
			Nerrs++
			if ASNDebug >= 1 {
				__yyfmt__.Printf("%s", ASNStatname(ASNstate))
				__yyfmt__.Printf(" saw %s\n", ASNTokname(ASNtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for ASNp >= 0 {
				ASNn = ASNPact[ASNS[ASNp].yys] + ASNErrCode
				if ASNn >= 0 && ASNn < ASNLast {
					ASNstate = ASNAct[ASNn] /* simulate a shift of "error" */
					if ASNChk[ASNstate] == ASNErrCode {
						goto ASNstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if ASNDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", ASNS[ASNp].yys)
				}
				ASNp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if ASNDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", ASNTokname(ASNtoken))
			}
			if ASNtoken == ASNEofCode {
				goto ret1
			}
			ASNrcvr.char = -1
			ASNtoken = -1
			goto ASNnewstate /* try again in the same state */
		}
	}

	/* reduction by production ASNn */
	if ASNDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", ASNn, ASNStatname(ASNstate))
	}

	ASNnt := ASNn
	ASNpt := ASNp
	_ = ASNpt // guard against "declared and not used"

	ASNp -= ASNR2[ASNn]
	// ASNp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if ASNp+1 >= len(ASNS) {
		nyys := make([]ASNSymType, len(ASNS)*2)
		copy(nyys, ASNS)
		ASNS = nyys
	}
	ASNVAL = ASNS[ASNp+1]

	/* consult goto table to find next state */
	ASNn = ASNR1[ASNn]
	ASNg := ASNPgo[ASNn]
	ASNj := ASNg + ASNS[ASNp].yys + 1

	if ASNj >= ASNLast {
		ASNstate = ASNAct[ASNg]
	} else {
		ASNstate = ASNAct[ASNj]
		if ASNChk[ASNstate] != -ASNn {
			ASNstate = ASNAct[ASNg]
		}
	}
	// dummy call; replaced with literal code
	switch ASNnt {

	case 1:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:467
		{
			SetResult(ASNlex, ASNDollar[1].TypeValue)
			Print("Done")
			Print("--------------------------------------------------------------------------------")
			Print(JSON(&ASNDollar[1].TypeValue))
			Print("--------------------------------------------------------------------------------")
		}
	case 2:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:476
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 3:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:481
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 4:
		ASNDollar = ASNS[ASNpt-10 : ASNpt+1]
//line asn.y:511
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"encoding":   ASNDollar[3].TypeValue,
				"tag":        ASNDollar[4].TypeValue,
				"body":       ASNDollar[8].TypeValue,
			}
		}
	case 5:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:527
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 6:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:532
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 7:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:536
		{
			ASNVAL.TypeValue = nil
		}
	case 8:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:548
		{
			ASNVAL.TypeValue = MAP{
				"encodingReference":    ASNDollar[2].TypeString,
				"encodingInstructions": ASNDollar[3].TypeValue,
			}
		}
	case 9:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:563
		{
			ASNVAL.TypeValue = nil
		}
	case 10:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:576
		{
			ASNVAL.TypeValue = MAP{
				"reference":             ASNDollar[1].TypeValue,
				"definitiveIdentifiers": ASNDollar[2].TypeValue,
			}
		}
	case 11:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:590
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 12:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:593
		{
			ASNVAL.TypeValue = ""
		}
	case 13:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:605
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 14:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:608
		{
			ASNVAL.TypeValue = nil
		}
	case 15:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:618
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 16:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:629
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 17:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:634
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 18:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:647
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 19:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:650
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 20:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:653
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 21:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:662
		{
			ASNVAL.TypeValue = MAP{
				"name": ASNDollar[1].TypeString,
			}
		}
	case 22:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:673
		{
			ASNVAL.TypeValue = MAP{
				"number": ASNDollar[1].TypeValue,
			}
		}
	case 23:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:684
		{
			ASNVAL.TypeValue = MAP{
				"name":   ASNDollar[1].TypeString,
				"number": ASNDollar[3].TypeValue,
			}
		}
	case 24:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:700
		{
			ASNVAL.TypeValue = "Implicit"
		}
	case 25:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:703
		{
			ASNVAL.TypeValue = "Explicit"
		}
	case 26:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:706
		{
			ASNVAL.TypeValue = "Automatic"
		}
	case 27:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:709
		{
			ASNVAL.TypeValue = "Explicit"
		}
	case 28:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:720
		{
			ASNVAL.TypeValue = true
		}
	case 29:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:723
		{
			ASNVAL.TypeValue = false
		}
	case 30:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:736
		{
			ASNVAL.TypeValue = MAP{
				"imports":     ASNDollar[1].TypeValue,
				"exports":     ASNDollar[2].TypeValue,
				"assignments": ASNDollar[3].TypeValue,
			}
		}
	case 31:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:745
		{
			ASNVAL.TypeValue = MAP{
				"imports":     ASNDollar[2].TypeValue,
				"exports":     ASNDollar[1].TypeValue,
				"assignments": ASNDollar[3].TypeValue,
			}
		}
	case 32:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:752
		{
			ASNVAL.TypeValue = nil
		}
	case 33:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:764
		{
			ASNVAL.TypeValue = MAP{
				"all":     "false",
				"symbols": ASNDollar[2].TypeValue,
			}
		}
	case 34:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:770
		{
			ASNVAL.TypeValue = MAP{
				"all": "true",
			}
		}
	case 35:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:775
		{
			ASNVAL.TypeValue = MAP{
				"all": "false",
			}
		}
	case 36:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:780
		{
			ASNVAL.TypeValue = MAP{
				"all": "true",
			}
		}
	case 37:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:793
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 38:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:796
		{
			ASNVAL.TypeValue = nil
		}
	case 39:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:807
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 40:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:812
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 41:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:824
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
			}
		}
	case 42:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:829
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedReference": ASNDollar[1].TypeValue,
			}
		}
	case 43:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:848
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 44:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:858
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 45:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:861
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 46:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:872
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 47:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:875
		{
			ASNVAL.TypeValue = nil
		}
	case 48:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:886
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 49:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:889
		{
			ASNVAL.TypeValue = nil
		}
	case 50:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:900
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 51:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:905
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 52:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:916
		{
			ASNVAL.TypeValue = MAP{
				"symbols":   ASNDollar[1].TypeValue,
				"reference": ASNDollar[3].TypeValue,
			}
		}
	case 53:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:929
		{
			ASNVAL.TypeValue = MAP{
				"name":        ASNDollar[1].TypeValue,
				"identifiers": ASNDollar[2].TypeValue,
			}
		}
	case 54:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:944
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 55:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:947
		{
			ASNVAL.TypeValue = nil
		}
	case 56:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:950
		{
			ASNVAL.TypeValue = nil
		}
	case 57:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:961
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 58:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:964
		{
			ASNVAL.TypeValue = ASNDollar[3].TypeValue
		}
	case 59:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:967
		{
			ASNVAL.TypeValue = nil
		}
	case 60:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:978
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 61:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:983
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 62:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:997
		{
			ASNVAL.TypeValue = MAP{
				"name": ASNDollar[1].TypeValue,
			}
		}
	case 63:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1002
		{
			ASNVAL.TypeValue = MAP{
				"number": ASNDollar[1].TypeValue,
			}
		}
	case 64:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1007
		{
			ASNVAL.TypeValue = MAP{
				"nameAndNumber": ASNDollar[1].TypeValue,
			}
		}
	case 65:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1012
		{
			ASNVAL.TypeValue = MAP{
				"definedValue": ASNDollar[1].TypeValue,
			}
		}
	case 66:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1024
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 67:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1035
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 68:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1038
		{
			ASNVAL.TypeValue = MAP{
				"definedValue": ASNDollar[1].TypeValue,
			}
		}
	case 69:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1050
		{
			ASNVAL.TypeValue = MAP{
				"name":   ASNDollar[1].TypeValue,
				"number": ASNDollar[3].TypeValue,
			}
		}
	case 70:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1064
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 71:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1069
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 72:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1073
		{
			ASNVAL.TypeValue = nil
		}
	case 73:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1090
		{
			ASNVAL.TypeValue = MAP{
				"typeAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 74:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1095
		{
			ASNVAL.TypeValue = MAP{
				"valueAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 75:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1100
		{
			ASNVAL.TypeValue = MAP{
				"xmlValueAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 76:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1105
		{
			ASNVAL.TypeValue = MAP{
				"valueSetAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 77:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1110
		{
			ASNVAL.TypeValue = MAP{
				"objectClassAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 78:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1115
		{
			ASNVAL.TypeValue = MAP{
				"objectAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 79:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1120
		{
			ASNVAL.TypeValue = MAP{
				"objectSetAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 80:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1125
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 81:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1139
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"typename":  ASNDollar[2].TypeValue,
			}
		}
	case 82:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1155
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"typename":  ASNDollar[2].TypeValue,
				"value":     ASNDollar[4].TypeValue,
			}
		}
	case 83:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1171
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"value":     ASNDollar[3].TypeValue,
			}
		}
	case 84:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1187
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"typename":  ASNDollar[2].TypeValue,
				"valueSet":  ASNDollar[4].TypeValue,
			}
		}
	case 85:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1203
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"class":     ASNDollar[3].TypeValue,
			}
		}
	case 86:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1219
		{
			ASNVAL.TypeValue = MAP{
				"reference":    ASNDollar[1].TypeValue,
				"definedClass": ASNDollar[2].TypeValue,
				"object":       ASNDollar[4].TypeValue,
			}
		}
	case 87:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1236
		{
			ASNVAL.TypeValue = MAP{
				"reference":    ASNDollar[1].TypeValue,
				"definedClass": ASNDollar[2].TypeValue,
				"objectSet":    ASNDollar[4].TypeValue,
			}
		}
	case 88:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1255
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 89:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1258
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 90:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1261
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 91:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1264
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 92:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1267
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 93:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1270
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 94:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1282
		{
			ASNVAL.TypeValue = MAP{
				"type":       "BUILTIN_TYPE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 95:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1288
		{
			ASNVAL.TypeValue = MAP{
				"type":       "REFERENCED_TYPE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 96:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1294
		{
			ASNVAL.TypeValue = MAP{
				"type":       "CONSTRAINED_TYPE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 97:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1309
		{
			ASNVAL.TypeValue = MAP{
				"type":       "BUILTIN_VALUE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 98:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1315
		{
			ASNVAL.TypeValue = MAP{
				"type":       "REFERENCED_VALUE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 99:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1321
		{
			ASNVAL.TypeValue = MAP{
				"type":       "OBJECT_CLASS_FIELD_VALUE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 100:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1359
		{
			ASNVAL.TypeValue = MAP{
				"bitStringType": ASNDollar[1].TypeValue,
			}
		}
	case 101:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1364
		{
			ASNVAL.TypeValue = MAP{
				"booleanType": ASNDollar[1].TypeValue,
			}
		}
	case 102:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1369
		{
			ASNVAL.TypeValue = MAP{
				"characterStringType": ASNDollar[1].TypeValue,
			}
		}
	case 103:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1374
		{
			ASNVAL.TypeValue = MAP{
				"choiceType": ASNDollar[1].TypeValue,
			}
		}
	case 104:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1379
		{
			ASNVAL.TypeValue = MAP{
				"dateType": ASNDollar[1].TypeValue,
			}
		}
	case 105:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1384
		{
			ASNVAL.TypeValue = MAP{
				"dataTimeType": ASNDollar[1].TypeValue,
			}
		}
	case 106:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1389
		{
			ASNVAL.TypeValue = MAP{
				"durationType": ASNDollar[1].TypeValue,
			}
		}
	case 107:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1394
		{
			ASNVAL.TypeValue = MAP{
				"embeddedPDVType": ASNDollar[1].TypeValue,
			}
		}
	case 108:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1399
		{
			ASNVAL.TypeValue = MAP{
				"enumeratedType": ASNDollar[1].TypeValue,
			}
		}
	case 109:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1404
		{
			ASNVAL.TypeValue = MAP{
				"externalType": ASNDollar[1].TypeValue,
			}
		}
	case 110:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1409
		{
			ASNVAL.TypeValue = MAP{
				"instanceOfType": ASNDollar[1].TypeValue,
			}
		}
	case 111:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1414
		{
			ASNVAL.TypeValue = MAP{
				"integerType": ASNDollar[1].TypeValue,
			}
		}
	case 112:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1419
		{
			ASNVAL.TypeValue = MAP{
				"iriType": ASNDollar[1].TypeValue,
			}
		}
	case 113:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1424
		{
			ASNVAL.TypeValue = MAP{
				"nullType": ASNDollar[1].TypeValue,
			}
		}
	case 114:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1429
		{
			ASNVAL.TypeValue = MAP{
				"objectClassFieldType": ASNDollar[1].TypeValue,
			}
		}
	case 115:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1434
		{
			ASNVAL.TypeValue = MAP{
				"objectIdentifierType": ASNDollar[1].TypeValue,
			}
		}
	case 116:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1439
		{
			ASNVAL.TypeValue = MAP{
				"octetStringType": ASNDollar[1].TypeValue,
			}
		}
	case 117:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1444
		{
			ASNVAL.TypeValue = MAP{
				"realType": ASNDollar[1].TypeValue,
			}
		}
	case 118:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1449
		{
			ASNVAL.TypeValue = MAP{
				"relativeIRIType": ASNDollar[1].TypeValue,
			}
		}
	case 119:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1454
		{
			ASNVAL.TypeValue = MAP{
				"relativeOIDType": ASNDollar[1].TypeValue,
			}
		}
	case 120:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1459
		{
			ASNVAL.TypeValue = MAP{
				"sequenceType": ASNDollar[1].TypeValue,
			}
		}
	case 121:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1464
		{
			ASNVAL.TypeValue = MAP{
				"sequenceOfType": ASNDollar[1].TypeValue,
			}
		}
	case 122:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1469
		{
			ASNVAL.TypeValue = MAP{
				"setType": ASNDollar[1].TypeValue,
			}
		}
	case 123:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1474
		{
			ASNVAL.TypeValue = MAP{
				"setOfType": ASNDollar[1].TypeValue,
			}
		}
	case 124:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1479
		{
			ASNVAL.TypeValue = MAP{
				"prefixedType": ASNDollar[1].TypeValue,
			}
		}
	case 125:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1484
		{
			ASNVAL.TypeValue = MAP{
				"timeType": ASNDollar[1].TypeValue,
			}
		}
	case 126:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1489
		{
			ASNVAL.TypeValue = MAP{
				"timeOfDayType": ASNDollar[1].TypeValue,
			}
		}
	case 127:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1505
		{
			ASNVAL.TypeValue = MAP{
				"definedType": ASNDollar[1].TypeValue,
			}
		}
	case 128:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1510
		{
			ASNVAL.TypeValue = MAP{
				"usefulType": ASNDollar[1].TypeValue,
			}
		}
	case 129:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1515
		{
			ASNVAL.TypeValue = MAP{
				"selectionType": ASNDollar[1].TypeValue,
			}
		}
	case 130:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1520
		{
			ASNVAL.TypeValue = MAP{
				"typeFromObject": ASNDollar[1].TypeValue,
			}
		}
	case 131:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1525
		{
			ASNVAL.TypeValue = MAP{
				"valueSetFromObjects": ASNDollar[1].TypeValue,
			}
		}
	case 132:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1540
		{
			ASNVAL.TypeValue = MAP{
				"externalTypeReference": ASNDollar[1].TypeValue,
			}
		}
	case 133:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1545
		{
			ASNVAL.TypeValue = MAP{
				"typeReference": ASNDollar[1].TypeValue,
			}
		}
	case 134:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1550
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedType": ASNDollar[1].TypeValue,
			}
		}
	case 135:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1555
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedValueSetType": ASNDollar[1].TypeValue,
			}
		}
	case 136:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1569
		{
			ASNVAL.TypeValue = MAP{
				"moduleReference": ASNDollar[1].TypeValue,
				"typeReference":   ASNDollar[2].TypeToken,
			}
		}
	case 137:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1583
		{
			ASNVAL.TypeValue = MAP{
				"simpleDefinedType":   ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 138:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1597
		{
			ASNVAL.TypeValue = MAP{
				"simpleDefinedType":   ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 139:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1611
		{
			ASNVAL.TypeValue = MAP{
				"externalTypeReference": ASNDollar[1].TypeValue,
			}
		}
	case 140:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1616
		{
			ASNVAL.TypeValue = MAP{
				"typeReference": ASNDollar[1].TypeValue,
			}
		}
	case 141:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1627
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[2].TypeValue,
			}
		}
	case 142:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:1632
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[4].TypeValue)
		}
	case 143:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1648
		{
			ASNVAL.TypeValue = MAP{
				"type": ASNDollar[1].TypeValue,
			}
		}
	case 144:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1653
		{
			ASNVAL.TypeValue = MAP{
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 145:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1658
		{
			ASNVAL.TypeValue = MAP{
				"valueSet": ASNDollar[1].TypeValue,
			}
		}
	case 146:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1663
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectClass": ASNDollar[1].TypeValue,
			}
		}
	case 147:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1668
		{
			ASNVAL.TypeValue = MAP{
				"object": ASNDollar[1].TypeValue,
			}
		}
	case 148:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1673
		{
			ASNVAL.TypeValue = MAP{
				"objectSet": ASNDollar[1].TypeValue,
			}
		}
	case 149:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1701
		{
			ASNVAL.TypeValue = STRING(UTF8String)
		}
	case 150:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1704
		{
			ASNVAL.TypeValue = STRING(GraphicString)
		}
	case 151:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1707
		{
			ASNVAL.TypeValue = STRING(NumericString)
		}
	case 152:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1710
		{
			ASNVAL.TypeValue = STRING(VisibleString)
		}
	case 153:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1713
		{
			ASNVAL.TypeValue = STRING(PrintableString)
		}
	case 154:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1716
		{
			ASNVAL.TypeValue = STRING(ISO646String)
		}
	case 155:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1719
		{
			ASNVAL.TypeValue = STRING(TeletexString)
		}
	case 156:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1722
		{
			ASNVAL.TypeValue = STRING(GeneralString)
		}
	case 157:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1725
		{
			ASNVAL.TypeValue = STRING(T61String)
		}
	case 158:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1728
		{
			ASNVAL.TypeValue = STRING(UniversalString)
		}
	case 159:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1731
		{
			ASNVAL.TypeValue = STRING(VideotexString)
		}
	case 160:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1734
		{
			ASNVAL.TypeValue = STRING(BMPString)
		}
	case 161:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1737
		{
			ASNVAL.TypeValue = STRING(IA5String)
		}
	case 162:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1740
		{
			ASNVAL.TypeValue = STRING(GeneralizedTime)
		}
	case 163:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1743
		{
			ASNVAL.TypeValue = STRING(UTCTime)
		}
	case 164:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1746
		{
			ASNVAL.TypeValue = STRING(ObjectDescriptor)
		}
	case 165:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1756
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"typename":   ASNDollar[3].TypeValue,
			}
		}
	case 166:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1769
		{
			ASNVAL.TypeValue = MAP{
				"referencedObjects": ASNDollar[1].TypeValue,
				"fieldName":         ASNDollar[2].TypeToken,
			}
		}
	case 167:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1782
		{
			ASNVAL.TypeValue = MAP{
				"definedObject": ASNDollar[1].TypeValue,
			}
		}
	case 168:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1787
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedObject": ASNDollar[1].TypeValue,
			}
		}
	case 169:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1792
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 170:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1797
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 171:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1809
		{
			ASNVAL.TypeValue = MAP{
				"externalObjectReference": ASNDollar[1].TypeValue,
			}
		}
	case 172:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1814
		{
			ASNVAL.TypeValue = MAP{
				"objectReference": ASNDollar[1].TypeValue,
			}
		}
	case 173:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1826
		{
			ASNVAL.TypeValue = MAP{
				"moduleReference": ASNDollar[1].TypeValue,
				"objectReference": ASNDollar[3].TypeValue,
			}
		}
	case 174:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1839
		{
			ASNVAL.TypeValue = MAP{
				"definedObject":       ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 175:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1852
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 176:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1855
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 177:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1865
		{
			ASNVAL.TypeValue = MAP{
				"moduleReference":    ASNDollar[1].TypeValue,
				"objectSetReference": ASNDollar[3].TypeValue,
			}
		}
	case 178:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1878
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet":    ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 179:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1891
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 180:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1902
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 181:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1907
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 182:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1922
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 183:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1932
		{
			ASNVAL.TypeValue = MAP{
				"referencedObjects": ASNDollar[1].TypeValue,
				"fieldname":         ASNDollar[3].TypeValue,
			}
		}
	case 184:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1946
		{
			ASNVAL.TypeValue = MAP{
				"typename":   ASNDollar[1].TypeValue,
				"constraint": ASNDollar[2].TypeValue,
			}
		}
	case 185:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1952
		{
			ASNVAL.TypeValue = MAP{
				"typename": ASNDollar[1].TypeValue,
			}
		}
	case 186:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1964
		{
			ASNVAL.TypeValue = MAP{
				"constraintSpec": ASNDollar[2].TypeValue,
				"exceptionSpec":  ASNDollar[3].TypeValue,
			}
		}
	case 187:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1978
		{
			ASNVAL.TypeValue = MAP{
				"subtypeConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 188:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1983
		{
			ASNVAL.TypeValue = MAP{
				"generalConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 189:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1995
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 190:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2007
		{
			ASNVAL.TypeValue = MAP{
				"rootElementSetSpec": ASNDollar[1].TypeValue,
			}
		}
	case 191:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2012
		{
			ASNVAL.TypeValue = MAP{
				"rootElementSetSpec": ASNDollar[1].TypeValue,
			}
		}
	case 192:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:2017
		{
			ASNVAL.TypeValue = MAP{
				"rootElementSetSpec":       ASNDollar[1].TypeValue,
				"additionalElementSetSpec": ASNDollar[2].TypeToken,
			}
		}
	case 193:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2030
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 194:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2040
		{
			ASNVAL.TypeValue = nil
		}
	case 195:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2051
		{
			ASNVAL.TypeValue = MAP{
				"unions": ASNDollar[1].TypeValue,
			}
		}
	case 196:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2056
		{
			ASNVAL.TypeValue = MAP{
				"exclusions": ASNDollar[1].TypeString,
			}
		}
	case 197:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2069
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 198:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2072
		{
			ASNVAL.TypeValue = MAP{
				"unions":        ASNDollar[1].TypeValue,
				"intersections": ASNDollar[3].TypeValue,
			}
		}
	case 199:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2086
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 200:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2089
		{
			ASNVAL.TypeValue = MAP{
				"intersections":        ASNDollar[1].TypeValue,
				"intersectionElements": ASNDollar[2].TypeValue,
			}
		}
	case 201:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2102
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 202:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2105
		{
			ASNVAL.TypeValue = MAP{
				"elements":   ASNDollar[1].TypeValue,
				"exclusions": ASNDollar[2].TypeValue,
			}
		}
	case 203:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2120
		{
			ASNVAL.TypeValue = MAP{
				"subtypeElements": ASNDollar[1].TypeValue,
			}
		}
	case 204:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2125
		{
			ASNVAL.TypeValue = MAP{
				"objectSetElements": ASNDollar[1].TypeValue,
			}
		}
	case 205:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2130
		{
			ASNVAL.TypeValue = MAP{
				"elementSetSpec": ASNDollar[1].TypeToken,
			}
		}
	case 206:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2142
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 207:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2163
		{
			ASNVAL.TypeValue = MAP{
				"singleValue": ASNDollar[1].TypeValue,
			}
		}
	case 208:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2168
		{
			ASNVAL.TypeValue = MAP{
				"containedSubtype": ASNDollar[1].TypeValue,
			}
		}
	case 209:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2173
		{
			ASNVAL.TypeValue = MAP{
				"valueRange": ASNDollar[1].TypeValue,
			}
		}
	case 210:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2178
		{
			ASNVAL.TypeValue = MAP{
				"permittedAlphabet": ASNDollar[1].TypeValue,
			}
		}
	case 211:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2183
		{
			ASNVAL.TypeValue = MAP{
				"sizeConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 212:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2188
		{
			ASNVAL.TypeValue = MAP{
				"typeConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 213:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2193
		{
			ASNVAL.TypeValue = MAP{
				"innerTypeConstraints": ASNDollar[1].TypeValue,
			}
		}
	case 214:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2198
		{
			ASNVAL.TypeValue = MAP{
				"patternConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 215:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2203
		{
			ASNVAL.TypeValue = MAP{
				"propertySettings": ASNDollar[1].TypeValue,
			}
		}
	case 216:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2208
		{
			ASNVAL.TypeValue = MAP{
				"durationRange": ASNDollar[1].TypeValue,
			}
		}
	case 217:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2213
		{
			ASNVAL.TypeValue = MAP{
				"timePointRange": ASNDollar[1].TypeValue,
			}
		}
	case 218:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2218
		{
			ASNVAL.TypeValue = MAP{
				"recurrenceRange": ASNDollar[1].TypeValue,
			}
		}
	case 219:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2230
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 220:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2240
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 221:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2250
		{
			ASNVAL.TypeValue = "INCLUDES"
		}
	case 222:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2253
		{
			ASNVAL.TypeValue = "INCLUDES"
		}
	case 223:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2263
		{
			ASNVAL.TypeValue = MAP{
				"lowerEndpoint": ASNDollar[1].TypeValue,
				"upperEndpoint": ASNDollar[2].TypeToken,
			}
		}
	case 224:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2276
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 225:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2279
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 226:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2289
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 227:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2292
		{
			ASNVAL.TypeValue = "MIN"
		}
	case 228:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2302
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 229:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2305
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 230:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2315
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 231:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2318
		{
			ASNVAL.TypeValue = "MAX"
		}
	case 232:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2328
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 233:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2338
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 234:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2348
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 235:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2359
		{
			ASNVAL.TypeValue = ASNDollar[3].TypeValue
		}
	case 236:
		ASNDollar = ASNS[ASNpt-7 : ASNpt+1]
//line asn.y:2362
		{
			ASNVAL.TypeValue = ASNDollar[3].TypeValue
		}
	case 237:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2372
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 238:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2383
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 239:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2386
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 240:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2396
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 241:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2407
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 242:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2410
		{
			ASNVAL.TypeValue = MAP{
				"nameConstraint":  ASNDollar[1].TypeValue,
				"typeConstraints": ASNDollar[3].TypeValue,
			}
		}
	case 243:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2423
		{
			ASNVAL.TypeValue = MAP{
				"identifier":          ASNDollar[1].TypeValue,
				"componentConstraint": ASNDollar[2].TypeValue,
			}
		}
	case 244:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2436
		{
			ASNVAL.TypeValue = MAP{
				"valueConstraint":    ASNDollar[1].TypeValue,
				"presenceConstraint": ASNDollar[2].TypeValue,
			}
		}
	case 245:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2449
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 246:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2452
		{
			ASNVAL.TypeValue = nil
		}
	case 247:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2462
		{
			ASNVAL.TypeValue = "PRESENT"
		}
	case 248:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2465
		{
			ASNVAL.TypeValue = "ABSENT"
		}
	case 249:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2468
		{
			ASNVAL.TypeValue = "OPTIONAL"
		}
	case 250:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2471
		{
			ASNVAL.TypeValue = nil
		}
	case 251:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:2481
		{
			ASNVAL.TypeValue = ASNDollar[4].TypeValue
		}
	case 252:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2491
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 253:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2501
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 254:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2511
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 255:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2521
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 256:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2531
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 257:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2544
		{
			ASNVAL.TypeValue = MAP{
				"object": ASNDollar[1].TypeValue,
			}
		}
	case 258:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2549
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 259:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2554
		{
			ASNVAL.TypeValue = MAP{
				"objectSetFromObjects": ASNDollar[1].TypeValue,
			}
		}
	case 260:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2559
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 261:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2571
		{
			ASNVAL.TypeValue = MAP{
				"referencedObjects": ASNDollar[1].TypeValue,
				"fieldName":         ASNDollar[2].TypeToken,
			}
		}
	case 262:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2584
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 263:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2594
		{
			ASNVAL.TypeValue = "INTERSECTION"
		}
	case 264:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2597
		{
			ASNVAL.TypeValue = "INTERSECTION"
		}
	case 265:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2607
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 266:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2617
		{
			ASNVAL.TypeValue = "UNION"
		}
	case 267:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2620
		{
			ASNVAL.TypeValue = "UNION"
		}
	case 268:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2630
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 269:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2642
		{
			ASNVAL.TypeValue = MAP{
				"userDefinedConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 270:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2647
		{
			ASNVAL.TypeValue = MAP{
				"tableConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 271:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2652
		{
			ASNVAL.TypeValue = MAP{
				"contentsConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 272:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:2664
		{
			ASNVAL.TypeValue = ASNDollar[4].TypeValue
		}
	case 273:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2676
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 274:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2681
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 275:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2685
		{
			ASNVAL.TypeValue = nil
		}
	case 276:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2699
		{
			ASNVAL.TypeValue = MAP{
				"governor": ASNDollar[1].TypeValue,
				"value":    ASNDollar[3].TypeValue,
			}
		}
	case 277:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2705
		{
			ASNVAL.TypeValue = MAP{
				"governor": ASNDollar[1].TypeValue,
				"object":   ASNDollar[3].TypeValue,
			}
		}
	case 278:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2711
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 279:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2716
		{
			ASNVAL.TypeValue = MAP{
				"type": ASNDollar[1].TypeValue,
			}
		}
	case 280:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2721
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectClass": ASNDollar[1].TypeValue,
			}
		}
	case 281:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2733
		{
			ASNVAL.TypeValue = MAP{
				"typename": ASNDollar[1].TypeValue,
			}
		}
	case 282:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2738
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectClass": ASNDollar[1].TypeValue,
			}
		}
	case 283:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2750
		{
			ASNVAL.TypeValue = MAP{
				"simpleTableConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 284:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2755
		{
			ASNVAL.TypeValue = MAP{
				"componentRelationConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 285:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2767
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 286:
		ASNDollar = ASNS[ASNpt-6 : ASNpt+1]
//line asn.y:2778
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet": ASNDollar[1].TypeToken,
				"atNotations":      ASNDollar[2].TypeValue,
			}
		}
	case 287:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2792
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 288:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2797
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 289:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2808
		{
			ASNVAL.TypeValue = MAP{
				"componentIdList": ASNDollar[2].TypeValue,
			}
		}
	case 290:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2813
		{
			ASNVAL.TypeValue = MAP{
				"componentIdList": ASNDollar[4].TypeValue,
			}
		}
	case 291:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2825
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 292:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2830
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 293:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2841
		{
			ASNVAL.TypeValue = nil
		}
	case 294:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2844
		{
			ASNVAL.TypeValue = nil
		}
	case 295:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2856
		{
			ASNVAL.TypeValue = MAP{
				"typename": ASNDollar[2].TypeValue,
			}
		}
	case 296:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2861
		{
			ASNVAL.TypeValue = MAP{
				"value": ASNDollar[3].TypeValue,
			}
		}
	case 297:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:2866
		{
			ASNVAL.TypeValue = MAP{
				"typename": ASNDollar[2].TypeValue,
				"value":    ASNDollar[5].TypeValue,
			}
		}
	case 298:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2879
		{
			ASNVAL.TypeValue = MAP{
				"exceptionIdentification": ASNDollar[1].TypeToken,
			}
		}
	case 299:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2884
		{
			ASNVAL.TypeValue = nil
		}
	case 300:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2896
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 301:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2899
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 302:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2902
		{
			ASNVAL.TypeValue = MAP{
				"typename": ASNDollar[1].TypeValue,
				"value":    ASNDollar[3].TypeValue,
			}
		}
	case 303:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2922
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence": "SET",
				"constraint":    ASNDollar[2].TypeValue,
				"typename":      ASNDollar[4].TypeValue,
			}
		}
	case 304:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2929
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence":  "SET",
				"sizeConstraint": ASNDollar[2].TypeValue,
				"typename":       ASNDollar[4].TypeValue,
			}
		}
	case 305:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2936
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence": "SEQUENCE",
				"constraint":    ASNDollar[2].TypeValue,
				"typename":      ASNDollar[4].TypeValue,
			}
		}
	case 306:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2943
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence":  "SEQUENCE",
				"sizeConstraint": ASNDollar[2].TypeValue,
				"typename":       ASNDollar[4].TypeValue,
			}
		}
	case 307:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2950
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence": "SET",
				"constraint":    ASNDollar[2].TypeValue,
				"namedType":     ASNDollar[4].TypeValue,
			}
		}
	case 308:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2957
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence":  "SET",
				"sizeConstraint": ASNDollar[2].TypeValue,
				"namedType":      ASNDollar[4].TypeValue,
			}
		}
	case 309:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2964
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence": "SEQUENCE",
				"constraint":    ASNDollar[2].TypeValue,
				"namedType":     ASNDollar[4].TypeValue,
			}
		}
	case 310:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2971
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence":  "SEQUENCE",
				"sizeConstraint": ASNDollar[2].TypeValue,
				"namedType":      ASNDollar[4].TypeValue,
			}
		}
	case 311:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2985
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"typename":   ASNDollar[2].TypeValue,
			}
		}
	case 312:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2999
		{
			ASNVAL.TypeValue = MAP{
				"type": "BIT_STRING",
			}
		}
	case 313:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:3004
		{
			ASNVAL.TypeValue = MAP{
				"type":      "BIT_STRING",
				"namedBits": ASNDollar[4].TypeValue,
			}
		}
	case 314:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3018
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 315:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3023
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 316:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3035
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"number":     ASNDollar[3].TypeValue,
			}
		}
	case 317:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3041
		{
			ASNVAL.TypeValue = MAP{
				"identifier":   ASNDollar[1].TypeValue,
				"definedValue": ASNDollar[3].TypeValue,
			}
		}
	case 318:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3054
		{
			ASNVAL.TypeValue = MAP{
				"type": "BOOLEAN",
			}
		}
	case 319:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3067
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 320:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3070
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 321:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3092
		{
			ASNVAL.TypeValue = MAP{
				"type": "BMP_STRING",
			}
		}
	case 322:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3097
		{
			ASNVAL.TypeValue = MAP{
				"type": "GENERAL_STRING",
			}
		}
	case 323:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3102
		{
			ASNVAL.TypeValue = MAP{
				"type": "GRAPHIC_STRING",
			}
		}
	case 324:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3107
		{
			ASNVAL.TypeValue = MAP{
				"type": "IA5_STRING",
			}
		}
	case 325:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3112
		{
			ASNVAL.TypeValue = MAP{
				"type": "ISO646_STRING",
			}
		}
	case 326:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3117
		{
			ASNVAL.TypeValue = MAP{
				"type": "NUMERIC_STRING",
			}
		}
	case 327:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3122
		{
			ASNVAL.TypeValue = MAP{
				"type": "PRINTABLE_STRING",
			}
		}
	case 328:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3127
		{
			ASNVAL.TypeValue = MAP{
				"type": "TELETEX_STRING",
			}
		}
	case 329:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3132
		{
			ASNVAL.TypeValue = MAP{
				"type": "T61_STRING",
			}
		}
	case 330:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3137
		{
			ASNVAL.TypeValue = MAP{
				"type": "UNIVERSAL_STRING",
			}
		}
	case 331:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3142
		{
			ASNVAL.TypeValue = MAP{
				"type": "UTF8_STRING",
			}
		}
	case 332:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3147
		{
			ASNVAL.TypeValue = MAP{
				"type": "VIDEO_TEX_STRING",
			}
		}
	case 333:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3152
		{
			ASNVAL.TypeValue = MAP{
				"type": "VISIBLE_STRING",
			}
		}
	case 334:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3164
		{
			ASNVAL.TypeValue = MAP{
				"type": "CHARACTER_STRING",
			}
		}
	case 335:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3176
		{
			ASNVAL.TypeValue = MAP{
				"type":           "CHOICE",
				"alternateTypes": ASNDollar[3].TypeValue,
			}
		}
	case 336:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3190
		{
			ASNVAL.TypeValue = MAP{
				"alternativeTypes": ASNDollar[1].TypeValue,
			}
		}
	case 337:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:3195
		{
			ASNVAL.TypeValue = MAP{
				"alternativeTypes":              ASNDollar[1].TypeValue,
				"extensionAndException":         ASNDollar[3].TypeValue,
				"extensionAdditionAlternatives": ASNDollar[4].TypeValue,
			}
		}
	case 338:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3209
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 339:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3220
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 340:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3225
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 341:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3237
		{
			ASNVAL.TypeValue = nil
		}
	case 342:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3240
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 343:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3251
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 344:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3254
		{
			ASNVAL.TypeValue = nil
		}
	case 345:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3265
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 346:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3270
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 347:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3282
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 348:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3285
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 349:
		ASNDollar = ASNS[ASNpt-6 : ASNpt+1]
//line asn.y:3295
		{
			ASNVAL.TypeValue = MAP{
				"version":          ASNDollar[3].TypeValue,
				"alternativeTypes": ASNDollar[4].TypeValue,
			}
		}
	case 350:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3308
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 351:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3311
		{
			ASNVAL.TypeValue = nil
		}
	case 352:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3322
		{
			ASNVAL.TypeValue = true
		}
	case 353:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3325
		{
			ASNVAL.TypeValue = nil
		}
	case 354:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3335
		{
			ASNVAL.TypeValue = MAP{
				"type": "DATE",
			}
		}
	case 355:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3347
		{
			ASNVAL.TypeValue = MAP{
				"type": "DATE_TIME",
			}
		}
	case 356:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3359
		{
			ASNVAL.TypeValue = MAP{
				"type": "DURATION",
			}
		}
	case 357:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3371
		{
			ASNVAL.TypeValue = MAP{
				"type": "EMBEDDED_PDV",
			}
		}
	case 358:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3383
		{
			ASNVAL.TypeValue = MAP{
				"type":         "ENUMERATED",
				"enumerations": ASNDollar[3].TypeValue,
			}
		}
	case 359:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3398
		{
			ASNVAL.TypeValue = MAP{
				"enumeration": ASNDollar[1].TypeValue,
			}
		}
	case 360:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3403
		{
			ASNVAL.TypeValue = MAP{
				"enumeration": ASNDollar[1].TypeValue,
				"exception":   ASNDollar[4].TypeValue,
			}
		}
	case 361:
		ASNDollar = ASNS[ASNpt-6 : ASNpt+1]
//line asn.y:3409
		{
			ASNVAL.TypeValue = MAP{
				"enumeration":           ASNDollar[1].TypeValue,
				"exception":             ASNDollar[4].TypeValue,
				"additionalEnumeration": ASNDollar[6].TypeValue,
			}
		}
	case 362:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3423
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 363:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3433
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 364:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3444
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 365:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3449
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 366:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3460
		{
			ASNVAL.TypeValue = MAP{
				"name": ASNDollar[1].TypeValue,
			}
		}
	case 367:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3465
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 368:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3477
		{
			ASNVAL.TypeValue = MAP{
				"name":   ASNDollar[1].TypeValue,
				"number": ASNDollar[3].TypeValue,
			}
		}
	case 369:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3483
		{
			ASNVAL.TypeValue = MAP{
				"name":         ASNDollar[1].TypeValue,
				"definedValue": ASNDollar[3].TypeValue,
			}
		}
	case 370:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3496
		{
			ASNVAL.TypeValue = MAP{
				"type": "EXTERNAL",
			}
		}
	case 371:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3508
		{
			ASNVAL.TypeValue = MAP{
				"type":               "INSTANCE_OF",
				"definedObjectClass": ASNDollar[3].TypeValue,
			}
		}
	case 372:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3522
		{
			ASNVAL.TypeValue = MAP{
				"type": "INTEGER",
			}
		}
	case 373:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3527
		{
			ASNVAL.TypeValue = MAP{
				"type":    "INTEGER",
				"numbers": ASNDollar[3].TypeValue,
			}
		}
	case 374:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3541
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 375:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3546
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 376:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3557
		{
			ASNVAL.TypeValue = MAP{
				"type": "OID_IRI",
			}
		}
	case 377:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3569
		{
			ASNVAL.TypeValue = MAP{
				"type": "NULL",
			}
		}
	case 378:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3581
		{
			ASNVAL.TypeValue = MAP{
				"type":               "OBJECT_FIELD",
				"definedObjectClass": ASNDollar[1].TypeValue,
				"fieldName":          ASNDollar[3].TypeValue,
			}
		}
	case 379:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3595
		{
			ASNVAL.TypeValue = MAP{
				"type": "OBJECT_IDENTIFIER",
			}
		}
	case 380:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3607
		{
			ASNVAL.TypeValue = MAP{
				"type": "OCTET_STRING",
			}
		}
	case 381:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3619
		{
			ASNVAL.TypeValue = MAP{
				"type": "REAL",
			}
		}
	case 382:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3631
		{
			ASNVAL.TypeValue = MAP{
				"type": "RELATIVE_OID_IRI",
			}
		}
	case 383:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3643
		{
			ASNVAL.TypeValue = MAP{
				"type": "RELATIVE_OID",
			}
		}
	case 384:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3657
		{
			ASNVAL.TypeValue = MAP{
				"type": "SEQUENCE",
			}
		}
	case 385:
		ASNDollar = ASNS[ASNpt-9 : ASNpt+1]
//line asn.y:3662
		{
			ASNVAL.TypeValue = MAP{
				"type":                  "SEQUENCE",
				"extensionAndException": ASNDollar[3].TypeToken,
			}
		}
	case 386:
		ASNDollar = ASNS[ASNpt-14 : ASNpt+1]
//line asn.y:3668
		{
			ASNVAL.TypeValue = MAP{
				"type":           "SEQUENCE",
				"componentTypes": ASNDollar[3].TypeToken,
			}
		}
	case 387:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3685
		{
			ASNVAL.TypeValue = MAP{
				"rootComponentTypes": ASNDollar[1].TypeValue,
			}
		}
	case 388:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:3690
		{
			ASNVAL.TypeValue = MAP{
				"extensionAndException": ASNDollar[3].TypeValue,
				"extensionAdditions":    ASNDollar[4].TypeValue,
				"rootComponentTypes":    ASNDollar[1].TypeValue,
			}
		}
	case 389:
		ASNDollar = ASNS[ASNpt-7 : ASNpt+1]
//line asn.y:3697
		{
			ASNVAL.TypeValue = MAP{
				"extensionAndException": ASNDollar[3].TypeValue,
				"extensionAdditions":    ASNDollar[4].TypeValue,
				"rootComponentTypes":    append(ASNDollar[1].TypeValue.(LIST), ASNDollar[7].TypeValue.(LIST)),
			}
		}
	case 390:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:3704
		{
			ASNVAL.TypeValue = MAP{
				"extensionAndException": ASNDollar[1].TypeValue,
				"extensionAdditions":    ASNDollar[2].TypeValue,
				"rootComponentTypes":    ASNDollar[5].TypeValue,
			}
		}
	case 391:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3711
		{
			ASNVAL.TypeValue = MAP{
				"extensionAndException": ASNDollar[1].TypeValue,
				"extensionAdditions":    ASNDollar[2].TypeValue,
			}
		}
	case 392:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3724
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 393:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3735
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 394:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3740
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 395:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3754
		{
			ASNVAL.TypeValue = MAP{
				"type":      "COMPONENTS",
				"namedType": ASNDollar[1].TypeValue,
			}
		}
	case 396:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3760
		{
			ASNVAL.TypeValue = MAP{
				"type":      "COMPONENTS",
				"namedType": ASNDollar[1].TypeValue,
				"optional":  true,
			}
		}
	case 397:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3767
		{
			ASNVAL.TypeValue = MAP{
				"type":         "COMPONENTS",
				"namedType":    ASNDollar[1].TypeValue,
				"defaultValue": ASNDollar[3].TypeValue,
			}
		}
	case 398:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3774
		{
			ASNVAL.TypeValue = MAP{
				"type":     "COMPONENTS",
				"typename": ASNDollar[3].TypeValue,
			}
		}
	case 399:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3788
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 400:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3791
		{
			ASNVAL.TypeValue = nil
		}
	case 401:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3802
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 402:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3807
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 403:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3819
		{
			ASNVAL.TypeValue = MAP{
				"componentType": ASNDollar[1].TypeValue,
			}
		}
	case 404:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3824
		{
			ASNVAL.TypeValue = MAP{
				"extensionAdditionGroup": ASNDollar[1].TypeValue,
			}
		}
	case 405:
		ASNDollar = ASNS[ASNpt-6 : ASNpt+1]
//line asn.y:3836
		{
			ASNVAL.TypeValue = MAP{
				"version":        ASNDollar[3].TypeValue,
				"componentTypes": ASNDollar[4].TypeValue,
			}
		}
	case 406:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3849
		{
			ASNVAL.TypeValue = true
		}
	case 407:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3860
		{
			ASNVAL.TypeValue = MAP{
				"type":     "SEQUENCE_OF",
				"typename": ASNDollar[3].TypeValue,
			}
		}
	case 408:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3866
		{
			ASNVAL.TypeValue = MAP{
				"type":      "SEQUENCE_OF",
				"namedType": ASNDollar[3].TypeValue,
			}
		}
	case 409:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3881
		{
			ASNVAL.TypeValue = MAP{
				"type": "SET",
			}
		}
	case 410:
		ASNDollar = ASNS[ASNpt-9 : ASNpt+1]
//line asn.y:3886
		{
			ASNVAL.TypeValue = MAP{
				"type":                  "SET",
				"extensionAndException": ASNDollar[3].TypeToken,
			}
		}
	case 411:
		ASNDollar = ASNS[ASNpt-14 : ASNpt+1]
//line asn.y:3892
		{
			ASNVAL.TypeValue = MAP{
				"type":           "SET",
				"componentTypes": ASNDollar[3].TypeToken,
			}
		}
	case 412:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3906
		{
			ASNVAL.TypeValue = MAP{
				"type":     "SET_OF",
				"typename": ASNDollar[3].TypeValue,
			}
		}
	case 413:
		ASNDollar = ASNS[ASNpt-7 : ASNpt+1]
//line asn.y:3912
		{
			ASNVAL.TypeValue = MAP{
				"type":      "SET_OF",
				"namedType": ASNDollar[3].TypeValue,
			}
		}
	case 414:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3925
		{
			ASNVAL.TypeValue = MAP{
				"type": "TIME",
			}
		}
	case 415:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3937
		{
			ASNVAL.TypeValue = MAP{
				"type": "TIME_OF_DAY",
			}
		}
	case 416:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3950
		{
			ASNVAL.TypeValue = MAP{
				"type":       "PREFIXED",
				"taggedType": ASNDollar[1].TypeValue,
			}
		}
	case 417:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3956
		{
			ASNVAL.TypeValue = MAP{
				"type":                 "PREFIXED",
				"encodingPrefixedType": ASNDollar[1].TypeValue,
			}
		}
	case 418:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3971
		{
			ASNVAL.TypeValue = MAP{
				"tag":      ASNDollar[1].TypeValue,
				"typename": ASNDollar[2].TypeValue,
			}
		}
	case 419:
		ASNDollar = ASNS[ASNpt-6 : ASNpt+1]
//line asn.y:3977
		{
			ASNVAL.TypeValue = MAP{
				"tag":      ASNDollar[1].TypeValue,
				"typename": ASNDollar[2].TypeValue,
				"implicit": true,
			}
		}
	case 420:
		ASNDollar = ASNS[ASNpt-10 : ASNpt+1]
//line asn.y:3984
		{
			ASNVAL.TypeValue = MAP{
				"tag":      ASNDollar[1].TypeValue,
				"typename": ASNDollar[2].TypeValue,
				"explicit": true,
			}
		}
	case 421:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:3998
		{
			ASNVAL.TypeValue = MAP{
				"encodingReference": ASNDollar[2].TypeValue,
				"class":             ASNDollar[3].TypeValue,
				"classNumber":       ASNDollar[4].TypeValue,
			}
		}
	case 422:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4013
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 423:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4026
		{
			ASNVAL.TypeValue = "UNIVERSAL"
		}
	case 424:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4029
		{
			ASNVAL.TypeValue = "APPLICATION"
		}
	case 425:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4032
		{
			ASNVAL.TypeValue = "PRIVATE"
		}
	case 426:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4035
		{
			ASNVAL.TypeValue = nil
		}
	case 427:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4046
		{
			ASNVAL.TypeValue = MAP{
				"number": ASNDollar[1].TypeValue,
			}
		}
	case 428:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4051
		{
			ASNVAL.TypeValue = MAP{
				"definedValue": ASNDollar[1].TypeValue,
			}
		}
	case 429:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4063
		{
			ASNVAL.TypeValue = MAP{
				"encodingPrefix": ASNDollar[1].TypeValue,
				"typename":       ASNDollar[2].TypeValue,
			}
		}
	case 430:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:4076
		{
			ASNVAL.TypeValue = MAP{
				"encodingReference":   ASNDollar[2].TypeValue,
				"encodingInstruction": ASNDollar[3].TypeValue,
			}
		}
	case 431:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4089
		{
			ASNVAL.TypeValue = "TAG"
		}
	case 432:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4092
		{
			ASNVAL.TypeValue = "XER"
		}
	case 433:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4095
		{
			ASNVAL.TypeValue = "PER"
		}
	case 434:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4126
		{
			ASNVAL.TypeValue = MAP{
				"bitString": ASNDollar[1].TypeValue,
			}
		}
	case 435:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4131
		{
			ASNVAL.TypeValue = MAP{
				"boolean": ASNDollar[1].TypeValue,
			}
		}
	case 436:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4136
		{
			ASNVAL.TypeValue = MAP{
				"characterString": ASNDollar[1].TypeValue,
			}
		}
	case 437:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4141
		{
			ASNVAL.TypeValue = MAP{
				"choice": ASNDollar[1].TypeValue,
			}
		}
	case 438:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4146
		{
			ASNVAL.TypeValue = MAP{
				"embeddedPDV": ASNDollar[1].TypeValue,
			}
		}
	case 439:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4151
		{
			ASNVAL.TypeValue = MAP{
				"enumerated": ASNDollar[1].TypeValue,
			}
		}
	case 440:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4156
		{
			ASNVAL.TypeValue = MAP{
				"external": ASNDollar[1].TypeValue,
			}
		}
	case 441:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4161
		{
			ASNVAL.TypeValue = MAP{
				"instanceOf": ASNDollar[1].TypeValue,
			}
		}
	case 442:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4166
		{
			ASNVAL.TypeValue = MAP{
				"integer": ASNDollar[1].TypeValue,
			}
		}
	case 443:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4171
		{
			ASNVAL.TypeValue = MAP{
				"iri": ASNDollar[1].TypeValue,
			}
		}
	case 444:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4176
		{
			ASNVAL.TypeValue = MAP{
				"null": ASNDollar[1].TypeValue,
			}
		}
	case 445:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4181
		{
			ASNVAL.TypeValue = MAP{
				"objectIdentifier": ASNDollar[1].TypeValue,
			}
		}
	case 446:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4186
		{
			ASNVAL.TypeValue = MAP{
				"octetString": ASNDollar[1].TypeValue,
			}
		}
	case 447:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4191
		{
			ASNVAL.TypeValue = MAP{
				"real": ASNDollar[1].TypeValue,
			}
		}
	case 448:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4196
		{
			ASNVAL.TypeValue = MAP{
				"relativeIRI": ASNDollar[1].TypeValue,
			}
		}
	case 449:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4201
		{
			ASNVAL.TypeValue = MAP{
				"relativeOID": ASNDollar[1].TypeValue,
			}
		}
	case 450:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4206
		{
			ASNVAL.TypeValue = MAP{
				"sequence": ASNDollar[1].TypeValue,
			}
		}
	case 451:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4211
		{
			ASNVAL.TypeValue = MAP{
				"sequenceOf": ASNDollar[1].TypeValue,
			}
		}
	case 452:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4216
		{
			ASNVAL.TypeValue = MAP{
				"set": ASNDollar[1].TypeValue,
			}
		}
	case 453:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4221
		{
			ASNVAL.TypeValue = MAP{
				"setOf": ASNDollar[1].TypeValue,
			}
		}
	case 454:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4226
		{
			ASNVAL.TypeValue = MAP{
				"prefixed": ASNDollar[1].TypeValue,
			}
		}
	case 455:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4231
		{
			ASNVAL.TypeValue = MAP{
				"time": ASNDollar[1].TypeValue,
			}
		}
	case 456:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4239
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 457:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4242
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 458:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4245
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 459:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4248
		{
			ASNVAL.TypeValue = nil
		}
	case 460:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4251
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 461:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4257
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 462:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4262
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeToken)
		}
	case 463:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4269
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 464:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4275
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 465:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4281
		{
			ASNVAL.TypeValue = nil
		}
	case 466:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4284
		{

		}
	case 467:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4290
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 468:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4293
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 469:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4296
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 470:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4299
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 471:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4305
		{
			ASNVAL.TypeValue = nil
		}
	case 472:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4311
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 473:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4316
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeToken)
		}
	case 474:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4323
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 475:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4326
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 476:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4329
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 477:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4332
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 478:
		ASNDollar = ASNS[ASNpt-9 : ASNpt+1]
//line asn.y:4338
		{
			ASNVAL.TypeValue = MAP{
				"group": ASNDollar[2].TypeValue,
				"plane": ASNDollar[4].TypeValue,
				"row":   ASNDollar[6].TypeValue,
				"cell":  ASNDollar[8].TypeValue,
			}
		}
	case 479:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4349
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 480:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4355
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 481:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4361
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 482:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4367
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 483:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:4373
		{
			ASNVAL.TypeValue = MAP{
				"tableColumn": ASNDollar[2].TypeValue,
				"tableRow":    ASNDollar[4].TypeValue,
			}
		}
	case 484:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4382
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 485:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4388
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 486:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4394
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 487:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4400
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"value":      ASNDollar[2].TypeToken,
			}
		}
	case 488:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4409
		{
			ASNVAL.TypeValue = nil
		}
	case 489:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4415
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 490:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4421
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 491:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4427
		{
			ASNVAL.TypeValue = nil
		}
	case 492:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4433
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 493:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4436
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 494:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4442
		{
			ASNVAL.TypeValue = "NULL"
		}
	case 495:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4448
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 496:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4451
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 497:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:4454
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 498:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4460
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 499:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4463
		{
			ASNVAL.TypeValue = nil
		}
	case 500:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4469
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 501:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4472
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 502:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4478
		{
			ASNVAL.TypeValue = nil
		}
	case 503:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4481
		{
			ASNVAL.TypeValue = nil
		}
	case 504:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4484
		{
			ASNVAL.TypeValue = nil
		}
	case 505:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4490
		{
			ASNVAL.TypeValue = nil
		}
	case 506:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4496
		{
			ASNVAL.TypeValue = nil
		}
	case 507:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4502
		{
			ASNVAL.TypeValue = nil
		}
	case 508:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4508
		{
			ASNVAL.TypeValue = nil
		}
	case 509:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4511
		{
			ASNVAL.TypeValue = nil
		}
	case 510:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4517
		{
			ASNVAL.TypeValue = nil
		}
	case 511:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4520
		{
			ASNVAL.TypeValue = nil
		}
	case 512:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4523
		{
			ASNVAL.TypeValue = nil
		}
	case 513:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4529
		{
			ASNVAL.TypeValue = nil
		}
	case 514:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4535
		{
			ASNVAL.TypeValue = nil
		}
	case 515:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4541
		{
			ASNVAL.TypeValue = nil
		}
	case 516:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4547
		{
			ASNVAL.TypeValue = nil
		}
	case 517:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4553
		{
			ASNVAL.TypeValue = nil
		}
	case 518:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4559
		{
			ASNVAL.TypeValue = nil
		}
	case 519:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4565
		{
			ASNVAL.TypeValue = nil
		}
	case 520:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4571
		{
			ASNVAL.TypeValue = nil
		}
	case 521:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4577
		{
			ASNVAL.TypeValue = nil
		}
	case 522:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4583
		{
			ASNVAL.TypeValue = nil
		}
	case 523:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4589
		{
			ASNVAL.TypeValue = nil
		}
	case 524:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4595
		{
			ASNVAL.TypeValue = nil
		}
	case 525:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4601
		{
			ASNVAL.TypeValue = nil
		}
	case 526:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4607
		{
			ASNVAL.TypeValue = nil
		}
	case 527:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4613
		{
			ASNVAL.TypeValue = nil
		}
	case 528:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4619
		{
			ASNVAL.TypeValue = nil
		}
	case 529:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4625
		{
			ASNVAL.TypeValue = nil
		}
	case 530:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4631
		{
			ASNVAL.TypeValue = nil
		}
	case 531:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4637
		{
			ASNVAL.TypeValue = nil
		}
	case 532:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4643
		{
			ASNVAL.TypeValue = nil
		}
	case 533:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4649
		{
			ASNVAL.TypeValue = MAP{
				"type":  "EXTERNAL_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 534:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4655
		{
			ASNVAL.TypeValue = MAP{
				"type":  "STRING_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 535:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4661
		{
			ASNVAL.TypeValue = MAP{
				"type":  "NUMBER_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 536:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4667
		{
			ASNVAL.TypeValue = MAP{
				"type":  "PARAMETERIZED_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 537:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4676
		{
			ASNVAL.TypeValue = MAP{
				"module": ASNDollar[1].TypeValue,
				"value":  ASNDollar[3].TypeValue,
			}
		}
	case 538:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4685
		{
			ASNVAL.TypeValue = nil
		}
	case 539:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4691
		{
			ASNVAL.TypeValue = nil
		}
	case 540:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4697
		{
			ASNVAL.TypeValue = nil
		}
	case 541:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4703
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 542:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4706
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 543:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4711
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 544:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4714
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 545:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4720
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeNumber
		}
	case 546:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4723
		{
			ASNVAL.TypeValue = (-1) * ASNDollar[2].TypeNumber
		}
	case 547:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4726
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeNumber
		}
	case 548:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4729
		{
			ASNVAL.TypeValue = (-1) * ASNDollar[2].TypeNumber
		}
	case 549:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4735
		{
			ASNVAL.TypeValue = "::="
		}
	case 550:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4741
		{
			SkipBlock()
		}
	case 551:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4744
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeString
		}
	}
	goto ASNstack /* stack new state and value */
}
