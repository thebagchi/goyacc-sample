// Code generated by goyacc -p ASN asn.y. DO NOT EDIT.

//line asn.y:1

package main

import __yyfmt__ "fmt"

//line asn.y:3
import (
	"bytes"
	"encoding/json"
	"fmt"
)

var code bytes.Buffer

func AddLine(line string) {
	code.WriteString(line)
	code.WriteByte('\n')
}

func JSON(obj interface{}) string {
	data, err := json.MarshalIndent(obj, "", "    ")
	if nil != err {
		fmt.Println("Error: ", err)
		return ""
	}
	return string(data)
}

func Print(line string) {
	fmt.Println(line)
}

func Join(values ...string) string {
	var buffer bytes.Buffer
	for _, value := range values {
		buffer.WriteString(value)
	}
	return buffer.String()
}

func SetResult(l ASNLexer, v VALUE) {
	l.(*Parser).Result = JSON(&v)
}

type Empty struct{}
type (
	VALUE   interface{}
	STRING  string
	NUMBER  float64
	BOOLEAN bool
	LIST    []VALUE
	MAP     map[string]VALUE
)

//line asn.y:50
type ASNSymType struct {
	yys         int
	TypeToken   struct{}
	TypeString  STRING
	TypeNumber  NUMBER
	TypeValue   VALUE
	TypeBoolean BOOLEAN
	TypeMap     MAP
	TypeList    LIST
}

const CURLY_START = 57346
const CURLY_END = 57347
const SQUARE_START = 57348
const SQUARE_END = 57349
const DOUBLE_QUOTE = 57350
const SINGLE_QUOTE = 57351
const COMMA = 57352
const COLON = 57353
const MINUS = 57354
const GREATER_THAN = 57355
const LESS_THAN = 57356
const DOT = 57357
const SLASH = 57358
const ROUND_START = 57359
const ROUND_END = 57360
const EQUALITY = 57361
const APOSTROPHE = 57362
const SPACE = 57363
const PIPE = 57364
const AT_THE_RATE = 57365
const EXCLAMATION = 57366
const CARET = 57367
const SEMI_COMMA = 57368
const ELLIPSIS = 57369
const ABSENT_SYMBOL = 57370
const ABSTRACTSYNTAX_SYMBOL = 57371
const ALL_SYMBOL = 57372
const APPLICATION_SYMBOL = 57373
const AUTOMATIC_SYMBOL = 57374
const BEGIN_SYMBOL = 57375
const BIT_SYMBOL = 57376
const BMPSTRING_SYMBOL = 57377
const BOOLEAN_SYMBOL = 57378
const BY_SYMBOL = 57379
const CHARACTER_SYMBOL = 57380
const CHOICE_SYMBOL = 57381
const CLASS_SYMBOL = 57382
const COMPONENT_SYMBOL = 57383
const COMPONENTS_SYMBOL = 57384
const CONSTRAINED_SYMBOL = 57385
const CONTAINING_SYMBOL = 57386
const DATE_SYMBOL = 57387
const DATETIME_SYMBOL = 57388
const DEFAULT_SYMBOL = 57389
const DEFINITIONS_SYMBOL = 57390
const DURATION_SYMBOL = 57391
const EMBEDDED_SYMBOL = 57392
const ENCODED_SYMBOL = 57393
const ENCODINGCONTROL_SYMBOL = 57394
const END_SYMBOL = 57395
const ENUMERATED_SYMBOL = 57396
const EXCEPT_SYMBOL = 57397
const EXPLICIT_SYMBOL = 57398
const EXPORTS_SYMBOL = 57399
const EXTENSIBILITY_SYMBOL = 57400
const EXTERNEL_SYMBOL = 57401
const FALSE_SYMBOL = 57402
const FROM_SYMBOL = 57403
const GENERALIZEDTIME_SYMBOL = 57404
const GENERALSTRING_SYMBOL = 57405
const GRAPHICSTRING_SYMBOL = 57406
const IA5STRING_SYMBOL = 57407
const IDENTIFIER_SYMBOL = 57408
const IMPLICIT_SYMBOL = 57409
const IMPLIED_SYMBOL = 57410
const IMPORTS_SYMBOL = 57411
const INCLUDES_SYMBOL = 57412
const INSTANCE_SYMBOL = 57413
const INSTRUCTIONS_SYMBOL = 57414
const INTEGER_SYMBOL = 57415
const INTERSECTION_SYMBOL = 57416
const ISO646STRING_SYMBOL = 57417
const MAX_SYMBOL = 57418
const MIN_SYMBOL = 57419
const MINUSINFINITY_SYMBOL = 57420
const NOTANUMBER_SYMBOL = 57421
const NULL_SYMBOL = 57422
const NUMERICSTRING_SYMBOL = 57423
const OBJECT_SYMBOL = 57424
const OBJECTDESCRIPTOR_SYMBOL = 57425
const OCTET_SYMBOL = 57426
const OF_SYMBOL = 57427
const OIDIRI_SYMBOL = 57428
const OPTIONAL_SYMBOL = 57429
const PATTERN_SYMBOL = 57430
const PDV_SYMBOL = 57431
const PLUSINFINITY_SYMBOL = 57432
const PRESENT_SYMBOL = 57433
const PRINTABLESTRING_SYMBOL = 57434
const PRIVATE_SYMBOL = 57435
const REAL_SYMBOL = 57436
const RELATIVEOID_SYMBOL = 57437
const RELATIVEOIDIRI_SYMBOL = 57438
const SEQUENCE_SYMBOL = 57439
const SET_SYMBOL = 57440
const SETTINGS_SYMBOL = 57441
const SIZE_SYMBOL = 57442
const STRING_SYMBOL = 57443
const SYNTAX_SYMBOL = 57444
const T61STRING_SYMBOL = 57445
const TAGS_SYMBOL = 57446
const TELETEXSTRING_SYMBOL = 57447
const TIME_SYMBOL = 57448
const TIMEOFDAY_SYMBOL = 57449
const TRUE_SYMBOL = 57450
const TYPEIDENTIFIER_SYMBOL = 57451
const UNION_SYMBOL = 57452
const UNIQUE_SYMBOL = 57453
const UNIVERSAL_SYMBOL = 57454
const UNIVERSALSTRING_SYMBOL = 57455
const UTCTIME_SYMBOL = 57456
const UTF8STRING_SYMBOL = 57457
const VIDEOTEXSTRING_SYMBOL = 57458
const VISIBLESTRING_SYMBOL = 57459
const WITH_SYMBOL = 57460
const ASSIGNMENT_SYMBOL = 57461
const TokenCapitalString = 57462
const TokenString = 57463
const TokenNumber = 57464
const TokenInteger = 57465
const TokenFloat = 57466
const TokenBoolean = 57467
const TokenBString = 57468
const TokenHString = 57469
const TokenCString = 57470

var ASNToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"CURLY_START",
	"CURLY_END",
	"SQUARE_START",
	"SQUARE_END",
	"DOUBLE_QUOTE",
	"SINGLE_QUOTE",
	"COMMA",
	"COLON",
	"MINUS",
	"GREATER_THAN",
	"LESS_THAN",
	"DOT",
	"SLASH",
	"ROUND_START",
	"ROUND_END",
	"EQUALITY",
	"APOSTROPHE",
	"SPACE",
	"PIPE",
	"AT_THE_RATE",
	"EXCLAMATION",
	"CARET",
	"SEMI_COMMA",
	"ELLIPSIS",
	"ABSENT_SYMBOL",
	"ABSTRACTSYNTAX_SYMBOL",
	"ALL_SYMBOL",
	"APPLICATION_SYMBOL",
	"AUTOMATIC_SYMBOL",
	"BEGIN_SYMBOL",
	"BIT_SYMBOL",
	"BMPSTRING_SYMBOL",
	"BOOLEAN_SYMBOL",
	"BY_SYMBOL",
	"CHARACTER_SYMBOL",
	"CHOICE_SYMBOL",
	"CLASS_SYMBOL",
	"COMPONENT_SYMBOL",
	"COMPONENTS_SYMBOL",
	"CONSTRAINED_SYMBOL",
	"CONTAINING_SYMBOL",
	"DATE_SYMBOL",
	"DATETIME_SYMBOL",
	"DEFAULT_SYMBOL",
	"DEFINITIONS_SYMBOL",
	"DURATION_SYMBOL",
	"EMBEDDED_SYMBOL",
	"ENCODED_SYMBOL",
	"ENCODINGCONTROL_SYMBOL",
	"END_SYMBOL",
	"ENUMERATED_SYMBOL",
	"EXCEPT_SYMBOL",
	"EXPLICIT_SYMBOL",
	"EXPORTS_SYMBOL",
	"EXTENSIBILITY_SYMBOL",
	"EXTERNEL_SYMBOL",
	"FALSE_SYMBOL",
	"FROM_SYMBOL",
	"GENERALIZEDTIME_SYMBOL",
	"GENERALSTRING_SYMBOL",
	"GRAPHICSTRING_SYMBOL",
	"IA5STRING_SYMBOL",
	"IDENTIFIER_SYMBOL",
	"IMPLICIT_SYMBOL",
	"IMPLIED_SYMBOL",
	"IMPORTS_SYMBOL",
	"INCLUDES_SYMBOL",
	"INSTANCE_SYMBOL",
	"INSTRUCTIONS_SYMBOL",
	"INTEGER_SYMBOL",
	"INTERSECTION_SYMBOL",
	"ISO646STRING_SYMBOL",
	"MAX_SYMBOL",
	"MIN_SYMBOL",
	"MINUSINFINITY_SYMBOL",
	"NOTANUMBER_SYMBOL",
	"NULL_SYMBOL",
	"NUMERICSTRING_SYMBOL",
	"OBJECT_SYMBOL",
	"OBJECTDESCRIPTOR_SYMBOL",
	"OCTET_SYMBOL",
	"OF_SYMBOL",
	"OIDIRI_SYMBOL",
	"OPTIONAL_SYMBOL",
	"PATTERN_SYMBOL",
	"PDV_SYMBOL",
	"PLUSINFINITY_SYMBOL",
	"PRESENT_SYMBOL",
	"PRINTABLESTRING_SYMBOL",
	"PRIVATE_SYMBOL",
	"REAL_SYMBOL",
	"RELATIVEOID_SYMBOL",
	"RELATIVEOIDIRI_SYMBOL",
	"SEQUENCE_SYMBOL",
	"SET_SYMBOL",
	"SETTINGS_SYMBOL",
	"SIZE_SYMBOL",
	"STRING_SYMBOL",
	"SYNTAX_SYMBOL",
	"T61STRING_SYMBOL",
	"TAGS_SYMBOL",
	"TELETEXSTRING_SYMBOL",
	"TIME_SYMBOL",
	"TIMEOFDAY_SYMBOL",
	"TRUE_SYMBOL",
	"TYPEIDENTIFIER_SYMBOL",
	"UNION_SYMBOL",
	"UNIQUE_SYMBOL",
	"UNIVERSAL_SYMBOL",
	"UNIVERSALSTRING_SYMBOL",
	"UTCTIME_SYMBOL",
	"UTF8STRING_SYMBOL",
	"VIDEOTEXSTRING_SYMBOL",
	"VISIBLESTRING_SYMBOL",
	"WITH_SYMBOL",
	"ASSIGNMENT_SYMBOL",
	"TokenCapitalString",
	"TokenString",
	"TokenNumber",
	"TokenInteger",
	"TokenFloat",
	"TokenBoolean",
	"TokenBString",
	"TokenHString",
	"TokenCString",
}

var ASNStatenames = [...]string{}

const ASNEofCode = 1
const ASNErrCode = 2
const ASNInitialStackSize = 16

//line asn.y:3711

//line yacctab:1
var ASNExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 45,
	120, 36,
	121, 36,
	-2, 32,
	-1, 141,
	4, 139,
	-2, 132,
	-1, 142,
	4, 140,
	-2, 133,
	-1, 180,
	14, 401,
	15, 401,
	-2, 222,
	-1, 192,
	10, 450,
	-2, 319,
	-1, 232,
	44, 406,
	-2, 367,
	-1, 263,
	17, 319,
	18, 319,
	24, 319,
	51, 319,
	-2, 401,
	-1, 268,
	22, 265,
	110, 265,
	-2, 195,
	-1, 270,
	25, 262,
	74, 262,
	-2, 197,
	-1, 274,
	55, 206,
	-2, 201,
	-1, 278,
	14, 401,
	15, 401,
	-2, 222,
	-1, 292,
	15, 169,
	-2, 258,
	-1, 294,
	15, 170,
	-2, 260,
	-1, 295,
	14, 226,
	15, 226,
	-2, 219,
	-1, 303,
	4, 140,
	-2, 133,
	-1, 311,
	15, 173,
	-2, 136,
	-1, 330,
	17, 319,
	-2, 449,
	-1, 343,
	10, 387,
	-2, 65,
	-1, 350,
	10, 373,
	-2, 66,
	-1, 351,
	10, 389,
	-2, 67,
	-1, 364,
	11, 319,
	17, 319,
	-2, 449,
	-1, 370,
	10, 373,
	-2, 66,
	-1, 372,
	14, 401,
	15, 401,
	-2, 222,
	-1, 373,
	14, 401,
	15, 401,
	-2, 222,
	-1, 376,
	14, 401,
	15, 401,
	-2, 222,
	-1, 395,
	4, 140,
	-2, 133,
	-1, 404,
	10, 373,
	-2, 66,
	-1, 405,
	10, 389,
	-2, 67,
	-1, 406,
	10, 384,
	-2, 377,
	-1, 407,
	10, 385,
	-2, 379,
	-1, 408,
	10, 386,
	-2, 380,
	-1, 435,
	4, 140,
	18, 444,
	-2, 133,
	-1, 437,
	11, 319,
	17, 319,
	-2, 275,
	-1, 443,
	25, 262,
	74, 262,
	-2, 198,
	-1, 470,
	14, 401,
	15, 401,
	-2, 222,
	-1, 474,
	15, 169,
	-2, 278,
	-1, 475,
	11, 281,
	-2, 279,
	-1, 476,
	11, 282,
	-2, 280,
	-1, 479,
	5, 177,
	-2, 447,
	-1, 490,
	4, 136,
	5, 136,
	11, 136,
	15, 173,
	17, 136,
	-2, 447,
}

const ASNPrivate = 57344

const ASNLast = 1448

var ASNAct = [...]int{
	238, 5, 533, 5, 515, 522, 502, 179, 481, 265,
	167, 472, 291, 353, 239, 322, 327, 168, 390, 352,
	313, 270, 315, 272, 274, 161, 248, 21, 354, 371,
	21, 247, 339, 329, 394, 194, 220, 334, 326, 283,
	23, 72, 457, 33, 34, 534, 14, 40, 6, 7,
	23, 65, 65, 505, 39, 38, 233, 83, 83, 68,
	65, 37, 180, 67, 23, 182, 321, 320, 318, 317,
	29, 377, 50, 331, 83, 374, 43, 516, 295, 36,
	51, 338, 51, 62, 142, 93, 139, 156, 140, 372,
	73, 83, 50, 55, 65, 173, 234, 49, 9, 415,
	102, 142, 360, 344, 45, 41, 55, 70, 518, 384,
	23, 477, 244, 360, 158, 152, 146, 157, 411, 368,
	378, 23, 30, 366, 436, 97, 96, 150, 91, 23,
	250, 251, 240, 147, 422, 160, 94, 60, 6, 7,
	409, 23, 249, 299, 149, 188, 56, 23, 90, 163,
	162, 22, 24, 6, 7, 153, 198, 151, 6, 7,
	243, 22, 24, 375, 23, 154, 159, 145, 155, 148,
	186, 189, 6, 7, 200, 22, 24, 171, 231, 232,
	245, 303, 6, 7, 311, 142, 316, 364, 201, 100,
	180, 292, 48, 303, 308, 74, 319, 92, 294, 335,
	191, 193, 187, 190, 548, 328, 304, 178, 181, 61,
	196, 28, 503, 336, 266, 309, 52, 205, 6, 7,
	507, 22, 24, 506, 438, 491, 357, 101, 323, 6,
	7, 445, 22, 24, 350, 27, 71, 357, 20, 341,
	22, 24, 57, 430, 175, 469, 26, 44, 351, 6,
	7, 180, 22, 24, 180, 6, 7, 204, 22, 24,
	359, 69, 452, 549, 303, 358, 356, 547, 370, 99,
	32, 325, 6, 7, 16, 22, 24, 362, 369, 303,
	184, 456, 351, 413, 53, 340, 99, 413, 380, 292,
	31, 441, 197, 413, 359, 42, 294, 142, 521, 358,
	356, 180, 523, 386, 304, 379, 383, 333, 184, 456,
	446, 391, 392, 361, 23, 355, 387, 332, 395, 395,
	362, 395, 395, 184, 183, 184, 183, 382, 312, 340,
	185, 404, 335, 335, 388, 513, 324, 499, 362, 42,
	514, 414, 361, 328, 335, 405, 336, 336, 46, 355,
	427, 540, 343, 397, 497, 399, 401, 408, 336, 498,
	539, 519, 407, 356, 336, 435, 323, 23, 492, 410,
	470, 450, 421, 303, 303, 428, 451, 303, 423, 432,
	385, 23, 425, 292, 292, 420, 343, 292, 316, 403,
	294, 294, 448, 316, 294, 443, 142, 442, 304, 304,
	444, 365, 304, 93, 303, 418, 412, 367, 449, 325,
	419, 550, 355, 335, 200, 453, 328, 412, 462, 455,
	200, 538, 6, 7, 416, 22, 24, 336, 336, 417,
	537, 424, 493, 463, 201, 466, 468, 461, 142, 489,
	381, 429, 479, 440, 402, 174, 359, 439, 474, 343,
	410, 358, 391, 200, 476, 527, 192, 490, 478, 437,
	310, 393, 396, 95, 398, 400, 12, 487, 426, 3,
	486, 303, 8, 342, 324, 6, 7, 485, 22, 24,
	496, 292, 325, 433, 1, 235, 389, 431, 294, 501,
	20, 504, 22, 24, 460, 458, 304, 262, 261, 142,
	473, 471, 258, 257, 517, 256, 293, 509, 434, 474,
	510, 546, 512, 542, 541, 476, 535, 526, 525, 524,
	447, 520, 530, 517, 480, 483, 306, 531, 536, 532,
	297, 296, 459, 290, 529, 289, 288, 267, 464, 454,
	536, 536, 544, 545, 543, 23, 287, 324, 494, 286,
	278, 285, 284, 282, 281, 280, 500, 279, 277, 276,
	275, 483, 376, 269, 273, 373, 271, 139, 156, 140,
	268, 488, 495, 259, 255, 254, 260, 263, 511, 253,
	363, 475, 252, 138, 264, 314, 170, 169, 166, 165,
	98, 54, 164, 244, 298, 158, 152, 146, 157, 144,
	143, 141, 137, 305, 136, 135, 134, 133, 150, 64,
	307, 250, 251, 240, 147, 63, 160, 349, 242, 241,
	467, 301, 348, 249, 528, 149, 508, 465, 347, 346,
	163, 162, 302, 188, 246, 345, 153, 237, 151, 236,
	230, 243, 475, 229, 228, 227, 154, 159, 145, 155,
	148, 300, 226, 6, 7, 233, 22, 24, 225, 231,
	232, 245, 224, 23, 223, 222, 221, 219, 278, 218,
	217, 216, 215, 214, 213, 212, 211, 210, 209, 208,
	207, 269, 206, 203, 202, 139, 156, 140, 199, 132,
	131, 130, 129, 128, 127, 234, 126, 125, 124, 123,
	122, 121, 120, 119, 118, 117, 116, 114, 115, 113,
	112, 244, 298, 158, 152, 146, 157, 111, 110, 109,
	108, 305, 107, 106, 105, 104, 150, 103, 307, 250,
	251, 240, 147, 89, 160, 88, 87, 86, 85, 301,
	84, 249, 177, 149, 176, 82, 81, 80, 163, 162,
	302, 188, 79, 78, 153, 77, 151, 76, 75, 243,
	337, 195, 172, 66, 154, 159, 145, 155, 148, 300,
	59, 6, 7, 233, 22, 24, 58, 231, 232, 245,
	47, 23, 35, 13, 25, 19, 278, 18, 17, 15,
	11, 10, 4, 2, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 156, 140, 0, 0, 0, 0,
	0, 0, 0, 234, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 244,
	298, 158, 152, 146, 157, 0, 0, 0, 0, 305,
	0, 0, 0, 0, 150, 0, 307, 250, 251, 240,
	147, 0, 160, 0, 0, 0, 0, 301, 0, 249,
	0, 149, 0, 0, 0, 0, 163, 162, 302, 188,
	330, 344, 153, 0, 151, 0, 0, 243, 23, 0,
	0, 0, 154, 159, 145, 155, 148, 300, 0, 6,
	7, 0, 22, 24, 0, 231, 232, 245, 0, 0,
	139, 156, 140, 0, 0, 0, 0, 0, 0, 0,
	234, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 244, 0, 158, 152,
	146, 157, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 150, 0, 0, 250, 251, 240, 147, 0, 160,
	0, 0, 0, 0, 0, 0, 249, 0, 149, 0,
	0, 0, 0, 163, 162, 330, 0, 0, 0, 153,
	0, 151, 0, 23, 243, 0, 0, 0, 0, 154,
	159, 145, 155, 148, 0, 0, 6, 7, 0, 22,
	24, 0, 231, 232, 406, 139, 156, 140, 0, 0,
	0, 0, 0, 0, 0, 234, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 244, 0, 158, 152, 146, 157, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 150, 0, 0, 250,
	251, 240, 147, 0, 160, 0, 0, 0, 23, 0,
	0, 249, 0, 149, 0, 0, 0, 0, 163, 162,
	0, 0, 0, 0, 153, 0, 151, 0, 0, 243,
	139, 156, 140, 0, 154, 159, 145, 155, 148, 0,
	0, 6, 7, 0, 22, 24, 0, 231, 232, 245,
	0, 0, 0, 0, 0, 0, 0, 0, 158, 152,
	146, 157, 233, 0, 0, 0, 0, 0, 0, 0,
	23, 150, 482, 0, 0, 0, 0, 147, 0, 160,
	0, 0, 0, 233, 0, 0, 0, 0, 149, 0,
	0, 23, 0, 163, 162, 0, 0, 0, 0, 153,
	0, 151, 234, 0, 0, 0, 0, 0, 0, 154,
	159, 145, 155, 148, 0, 0, 6, 7, 244, 22,
	24, 0, 0, 234, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 484, 0, 250, 251, 240, 244,
	0, 0, 0, 184, 183, 0, 0, 0, 249, 0,
	0, 0, 0, 0, 0, 484, 0, 250, 251, 240,
	0, 0, 0, 139, 156, 140, 243, 0, 0, 249,
	0, 0, 0, 0, 0, 0, 0, 0, 6, 7,
	233, 22, 24, 0, 231, 232, 245, 243, 23, 0,
	0, 158, 152, 146, 157, 0, 0, 0, 0, 6,
	7, 0, 22, 24, 150, 231, 232, 245, 0, 0,
	147, 0, 160, 0, 0, 0, 0, 0, 0, 0,
	234, 149, 0, 0, 0, 0, 163, 162, 0, 0,
	0, 0, 153, 0, 151, 0, 244, 42, 0, 0,
	0, 0, 154, 159, 145, 155, 148, 0, 0, 6,
	7, 0, 0, 0, 250, 251, 240, 0, 0, 0,
	139, 156, 140, 0, 0, 0, 249, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 243, 0, 0, 0, 158, 152,
	146, 157, 0, 0, 0, 0, 6, 7, 0, 22,
	24, 150, 231, 232, 245, 0, 0, 147, 0, 160,
	0, 0, 0, 0, 0, 0, 0, 0, 149, 0,
	139, 156, 140, 163, 162, 0, 0, 0, 0, 153,
	0, 151, 0, 0, 0, 0, 0, 0, 0, 154,
	159, 145, 155, 148, 0, 0, 6, 7, 158, 152,
	146, 157, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 150, 0, 0, 0, 0, 0, 147, 0, 160,
	0, 0, 0, 0, 0, 0, 0, 0, 149, 0,
	0, 0, 0, 163, 162, 0, 0, 0, 0, 153,
	0, 151, 0, 0, 0, 0, 0, 0, 0, 154,
	159, 145, 155, 148, 0, 0, 6, 7,
}

var ASNPact = [...]int{
	-72, -1000, -72, -1000, 50, 462, -1000, -1000, -1000, -74,
	-1000, -1000, 369, 179, -2, 117, -1000, -1000, -1000, -1000,
	253, -1000, -1000, -80, -1000, 21, -43, -49, -50, -1000,
	-1000, -1000, 28, -1000, -1000, 328, 8, -1000, -1000, -1000,
	229, 71, 337, -1000, -1000, 23, 197, 41, 25, 3,
	-72, 33, -1000, 54, -1000, -79, -72, -72, 102, -72,
	-1000, 75, -1000, 459, -1000, -1000, 100, 99, -1000, 393,
	-1000, 41, -1000, -72, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1266, -1000, -1000, -1000, -1000, -1000, -1000,
	-72, -1000, -1000, -72, -72, 440, -1000, -1000, -1000, -1000,
	1326, 284, 328, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -36,
	-1000, -1000, 311, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 315, 45, 45, 452, 452, -1000, 452, -1000, -1000,
	-1000, -1000, -1000, 152, -1000, 237, -1000, -1000, 1216, -1000,
	533, -1000, 456, -72, 1326, -72, -16, -17, 237, -18,
	-19, -1000, 961, -1000, -1000, -1000, -1000, -1000, 302, -1000,
	314, -1000, -1000, 452, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 98, 1216, -1000, -1000, -1000, 327, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 163, -1000, -1000, -1000, -1000, -1000, -1000, 391,
	86, -1000, -1000, 52, 82, -1000, -1000, 98, -1000, 34,
	-1000, 53, -1000, 46, -1000, 34, -1000, -1000, 651, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 452, -1000, -1000, -1000, 1326, 312, 237, 237,
	67, 1216, -72, 309, 301, -1000, 320, -1000, -1000, -1000,
	-72, -1000, 237, -1000, 297, -1000, -1000, 1326, 1326, -1000,
	1326, 1326, 439, 379, 237, -1000, -1000, -1000, -1000, -1000,
	866, 135, 355, -1000, -1000, 270, -1000, -1000, -1000, -1000,
	-72, -1000, 55, 355, -1000, 419, 400, 375, 362, 129,
	270, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	28, -1000, 1216, 225, 1036, 97, 455, 173, 1216, 438,
	276, -1000, 769, 769, -1000, -1000, 769, -1000, -1000, -1000,
	213, 237, 295, -1000, 237, -1000, -1000, -72, -1000, 366,
	-1000, 245, -72, 237, -1000, 1169, 237, -1000, 237, -1000,
	237, -1000, -1000, 52, 266, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 38, 355, -1000, 1216, -1000, -72, -1000, 109,
	28, 28, -1000, -1000, -1000, -1000, -1000, 270, -1000, -1000,
	-1000, -1000, -1000, -1000, 234, 294, 360, 1326, 74, -1000,
	454, -72, -1000, -1000, -1000, -1000, 1098, -1000, -1000, -1000,
	-1000, -72, 355, -1000, 237, 434, -72, -1000, 207, -1000,
	-1000, -1000, -1000, -1000, -1000, 358, -1000, 427, -1000, 1216,
	651, 349, -1000, 326, 452, 237, -1000, 1216, 189, -1000,
	-1000, -1000, 1119, -1000, -1000, -65, -1000, 205, 202, -1000,
	-1000, -1000, 28, -1000, -1000, -1000, -1000, -1000, 1326, 1216,
	-1000, 330, -1000, 62, -1000, 66, -1000, -1000, 351, -1000,
	-1000, -1000, -1000, -1000, 189, 283, 287, -1000, 451, 28,
	-1000, -72, -72, 287, -1000, -1000, -1000, 18, 425, -1000,
	-1000, 283, -1000, 416, 350, 341, 237, -1000, -1000, -72,
	-72, -1000, 176, -1000, 406, -1000, -1000, -1000, -1000, -1000,
	-1000,
}

var ASNPgo = [...]int{
	0, 793, 469, 792, 791, 790, 789, 274, 788, 787,
	785, 784, 783, 782, 780, 192, 97, 776, 770, 137,
	763, 209, 83, 762, 761, 36, 73, 37, 760, 81,
	32, 90, 195, 118, 758, 757, 755, 753, 752, 747,
	746, 745, 143, 78, 38, 744, 742, 16, 12, 33,
	740, 738, 737, 736, 735, 733, 727, 725, 724, 723,
	722, 720, 719, 718, 717, 710, 709, 708, 707, 706,
	705, 704, 703, 702, 701, 700, 699, 698, 697, 696,
	694, 693, 692, 691, 690, 689, 688, 684, 683, 35,
	682, 680, 679, 678, 677, 676, 675, 674, 673, 672,
	671, 670, 669, 667, 666, 665, 664, 662, 658, 652,
	645, 644, 643, 640, 639, 637, 635, 19, 634, 31,
	26, 629, 13, 628, 627, 626, 624, 622, 620, 619,
	618, 617, 28, 236, 615, 609, 607, 606, 605, 604,
	602, 601, 600, 599, 592, 25, 20, 15, 591, 590,
	589, 588, 10, 17, 587, 586, 585, 22, 7, 583,
	582, 580, 579, 575, 574, 573, 572, 9, 570, 29,
	21, 566, 565, 23, 564, 562, 24, 560, 559, 558,
	557, 555, 554, 553, 39, 552, 551, 549, 546, 536,
	535, 533, 531, 530, 526, 524, 8, 520, 519, 518,
	517, 2, 516, 514, 513, 511, 506, 505, 503, 502,
	501, 11, 500, 498, 497, 489, 6, 4, 5, 487,
	34, 486, 18, 105, 0, 14, 485, 484, 477, 473,
}

var ASNR1 = [...]int{
	0, 227, 1, 1, 2, 133, 133, 133, 148, 149,
	3, 12, 12, 4, 4, 5, 6, 6, 7, 7,
	7, 8, 9, 10, 11, 11, 11, 11, 13, 13,
	14, 14, 14, 16, 16, 16, 16, 20, 20, 21,
	21, 22, 22, 134, 135, 135, 15, 15, 17, 17,
	18, 18, 19, 23, 24, 24, 24, 25, 25, 25,
	26, 26, 27, 27, 27, 27, 28, 29, 29, 30,
	31, 31, 31, 32, 32, 32, 32, 32, 32, 32,
	32, 34, 35, 36, 37, 38, 39, 40, 41, 41,
	41, 41, 41, 41, 42, 42, 42, 43, 43, 43,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 57, 57, 57,
	57, 57, 136, 136, 136, 136, 141, 142, 143, 144,
	144, 89, 89, 147, 147, 147, 147, 147, 147, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 138, 139, 145, 145, 145,
	145, 150, 150, 154, 151, 152, 152, 155, 153, 146,
	156, 156, 157, 140, 58, 58, 158, 160, 160, 162,
	164, 164, 164, 165, 166, 167, 167, 168, 168, 170,
	170, 173, 173, 176, 176, 176, 177, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 178, 178, 180,
	181, 192, 192, 182, 193, 193, 194, 194, 195, 195,
	196, 196, 183, 184, 185, 228, 186, 197, 198, 198,
	199, 201, 201, 202, 203, 204, 204, 205, 205, 205,
	205, 200, 187, 188, 189, 190, 191, 179, 179, 179,
	179, 206, 174, 175, 175, 171, 172, 172, 169, 163,
	163, 163, 207, 210, 210, 210, 211, 211, 211, 211,
	211, 212, 212, 208, 208, 213, 214, 215, 215, 216,
	216, 217, 217, 218, 218, 209, 209, 209, 161, 161,
	219, 219, 219, 159, 159, 159, 159, 159, 159, 159,
	159, 220, 59, 59, 221, 221, 222, 222, 60, 61,
	62, 63, 64, 65, 66, 68, 67, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 93, 93, 93, 93,
	93, 116, 116, 117, 94, 95, 95, 114, 114, 114,
	114, 118, 121, 121, 122, 122, 122, 122, 119, 123,
	124, 125, 126, 120, 127, 128, 115, 96, 97, 98,
	99, 100, 101, 101, 103, 104, 229, 104, 105, 105,
	129, 129, 130, 130, 130, 102, 106, 107, 131, 131,
	132, 132, 132, 108, 109, 110, 111, 112, 113, 91,
	92, 45, 44, 46, 47, 48, 49, 50, 51, 52,
	53, 54, 55, 33, 33, 33, 33, 86, 87, 88,
	89, 226, 226, 224, 224, 225, 225, 225, 225, 223,
}

var ASNR2 = [...]int{
	0, 1, 1, 2, 10, 1, 2, 0, 3, 0,
	2, 2, 0, 1, 0, 3, 1, 2, 1, 1,
	1, 1, 1, 4, 2, 2, 2, 0, 2, 0,
	3, 3, 0, 3, 3, 2, 0, 1, 0, 1,
	3, 1, 1, 1, 1, 3, 3, 0, 1, 0,
	1, 2, 3, 2, 1, 1, 0, 3, 4, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 4,
	1, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 4, 3, 4, 3, 4, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 2, 1,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 3, 2, 1, 1, 3, 2, 1,
	1, 3, 1, 3, 2, 1, 4, 1, 1, 1,
	1, 3, 5, 1, 1, 1, 2, 1, 3, 1,
	3, 1, 2, 1, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 0, 4, 1, 2, 1, 1, 1, 2,
	1, 1, 2, 2, 1, 0, 7, 1, 1, 1,
	3, 1, 3, 2, 2, 1, 0, 1, 1, 1,
	0, 5, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 2, 1,
	1, 1, 5, 1, 3, 0, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 6, 1, 3, 2,
	4, 1, 3, 2, 0, 2, 3, 5, 2, 0,
	1, 1, 3, 4, 4, 4, 4, 4, 4, 4,
	4, 2, 2, 5, 1, 3, 4, 4, 1, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	2, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 9, 1,
	1, 1, 1, 5, 1, 1, 1, 3, 1, 1,
	1, 0, 1, 1, 1, 1, 0, 4, 1, 1,
	1, 1, 1, 1, 1, 0, 0, 3, 1, 2,
	1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1, 1, 1, 1, 3, 2, 0,
	0, 1, 1, 1, 1, 1, 2, 1, 2, 3,
}

var ASNChk = [...]int{
	-1000, -227, -1, -2, -3, -224, 120, 121, -2, 48,
	-4, -5, 4, -12, 120, -6, -7, -8, -9, -10,
	121, -225, 123, 12, 124, -11, 67, 56, 32, 72,
	5, -7, 17, 123, 124, -13, 58, 104, 104, 104,
	-225, -223, 11, 68, 18, 33, 11, -14, -15, -16,
	69, 57, 19, -133, -148, 52, -16, -15, -17, -18,
	-19, -21, -22, -134, -135, -224, -20, 30, 26, -21,
	53, -133, 120, -31, -32, -34, -35, -36, -37, -38,
	-39, -40, -41, -224, -50, -51, -52, -53, -54, -55,
	-31, 26, -19, 10, 61, 4, 26, 26, -149, -32,
	-223, -42, -47, -56, -57, -58, -59, -60, -61, -62,
	-63, -64, -65, -66, -68, -67, -69, -70, -71, -72,
	-73, -74, -75, -76, -77, -78, -79, -80, -81, -82,
	-83, -84, -85, -136, -137, -138, -139, -140, -159, 34,
	36, -141, -224, -142, -143, 115, 64, 81, 117, 92,
	75, 105, 63, 103, 113, 116, 35, 65, 62, 114,
	83, -145, 98, 97, -144, -150, -151, -152, -153, -154,
	-155, -22, -23, -224, 5, -42, -45, -46, -223, -158,
	17, -223, 101, 15, 14, 15, -158, -184, 100, -158,
	-184, -89, 4, -89, -89, -24, -25, -33, 4, -86,
	-224, -225, -87, -88, -43, -44, -90, -91, -92, -93,
	-94, -95, -96, -97, -98, -99, -100, -101, -102, -103,
	-25, -104, -105, -106, -107, -108, -109, -110, -111, -112,
	-113, 126, 127, 4, 44, -226, -114, -115, -224, -225,
	80, -129, -130, 108, 60, 128, -118, -119, -120, 90,
	78, 79, -160, -162, -163, -164, -207, -208, -209, -165,
	43, -213, -214, 44, 51, -167, -49, 4, -168, 30,
	-170, -171, -173, -174, -176, -177, -178, -179, 17, -180,
	-181, -182, -183, -184, -185, -186, -187, -188, -189, -190,
	-191, -48, -152, -206, -153, -43, -192, -193, 61, -42,
	118, 88, 99, -224, -145, 70, -194, 77, -48, -49,
	4, -224, -42, -146, -156, -157, -224, 85, 85, -158,
	85, 85, -147, -89, -42, -43, -44, -47, -48, -49,
	4, -26, -33, 5, -27, -224, -225, -28, -29, -30,
	15, -89, -229, -33, 5, -116, -121, -123, -127, -131,
	-224, -225, -117, -122, -132, -29, -30, 128, -119, -120,
	4, -43, 11, -161, 24, 10, 37, -42, 37, -152,
	-224, -169, 55, -172, 22, 110, -175, 25, 74, -169,
	-167, -42, 15, -158, 42, -43, -224, 15, 14, -221,
	-222, -224, 15, -42, -220, -224, -42, -220, -42, -220,
	-42, -220, 5, 10, -224, -225, 128, -119, -120, 5,
	-27, -33, -26, 17, -224, 44, 5, 10, 5, 10,
	10, 10, 5, -132, -29, -30, -33, -224, -225, -43,
	18, -219, -225, -33, -42, -224, 27, 4, 51, -43,
	5, 15, -176, -170, -173, 18, 15, -197, -158, -146,
	5, 10, 17, -157, -42, -147, 15, 4, -29, -33,
	-43, -117, -224, -122, -33, -124, -225, -128, -225, 11,
	10, -210, -211, -212, -152, -42, -47, 37, 4, -224,
	-195, -196, 14, -43, 76, -228, -222, -225, -33, 5,
	-224, 18, 10, 5, -43, -166, -167, 5, 10, 11,
	-43, -215, -216, 23, -196, 118, 18, 18, -125, -225,
	-211, -43, -48, 5, 10, -217, 15, -224, 42, 10,
	-216, 15, -218, 15, -198, -199, -200, 4, -126, -225,
	-224, -217, -218, -201, 27, -202, -224, 5, 5, 10,
	10, -203, -204, -158, -201, -201, -205, 91, 28, 87,
	5,
}

var ASNDef = [...]int{
	0, -2, 1, 2, 0, 14, 453, 454, 3, 12,
	10, 13, 0, 27, 0, 0, 16, 18, 19, 20,
	21, 22, 455, 0, 457, 29, 0, 0, 0, 11,
	15, 17, 0, 456, 458, 0, 0, 24, 25, 26,
	0, 0, 0, 28, 23, -2, 0, 7, 36, 47,
	49, 0, 459, 0, 5, 0, 72, 72, 0, 48,
	50, 0, 39, 41, 42, 43, 0, 0, 35, 37,
	4, 6, 9, 30, 70, 73, 74, 75, 76, 77,
	78, 79, 80, 319, 88, 89, 90, 91, 92, 93,
	31, 46, 51, 0, 0, 0, 33, 34, 8, 71,
	319, 0, 0, 94, 95, 96, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 185, 0,
	318, -2, -2, 134, 135, 149, 150, 151, 152, 153,
	154, 155, 156, 157, 158, 159, 160, 161, 162, 163,
	164, 0, 0, 0, 450, 167, 168, 169, 170, 171,
	175, 40, 52, 56, 45, 81, 83, 85, 401, 184,
	-2, 435, 312, 0, 319, 0, 0, 0, 0, 0,
	0, 137, -2, 174, 178, 53, 54, 55, 449, 443,
	444, 445, 446, 450, 82, 84, 97, 98, 99, 344,
	345, 346, 347, 348, 349, 350, 351, 352, 353, 354,
	355, 356, 357, 358, 359, 360, 361, 362, 363, 364,
	365, 366, -2, 449, 401, 374, 375, 376, 399, 402,
	404, 408, 409, 451, 452, 377, 378, 379, 380, 412,
	413, 414, 299, 187, 188, 189, 269, 270, 271, 190,
	0, 283, 284, -2, 0, 193, 285, 449, -2, 0,
	-2, 0, 199, 0, -2, 0, 203, 204, -2, 207,
	208, 209, 210, 211, 212, 213, 214, 215, 216, 217,
	218, 257, -2, 259, -2, -2, 319, 0, 0, 234,
	0, 401, 0, -2, 0, 221, 224, 227, 86, 87,
	0, -2, 165, 166, 179, 180, 182, 319, 319, 233,
	319, 319, 0, 0, 143, 144, 145, 146, 147, 148,
	-2, 449, 65, 59, 60, 66, 67, 62, 63, 64,
	0, 448, 0, -2, 59, 0, 0, 0, 0, 449,
	-2, -2, 371, 382, 418, 63, 64, 384, 385, 386,
	0, 370, 401, 0, -2, 0, 0, 295, 401, 0,
	-2, 196, -2, -2, 266, 267, -2, 263, 264, 202,
	0, 220, 0, 232, 0, 252, 253, 0, 225, 0,
	314, 0, 0, 303, 307, -2, 304, 308, 305, 309,
	306, 310, 141, 319, -2, -2, -2, -2, -2, 57,
	61, 65, 0, 449, 447, 401, 368, 0, 381, 449,
	0, 0, 417, 419, 420, 421, 68, 444, 389, 397,
	186, 298, 300, 301, 0, -2, 191, -2, 0, 296,
	0, 0, 268, -2, 200, 205, 401, 235, 237, 166,
	313, 0, 449, 181, 311, 0, 0, 58, 0, 68,
	407, 372, 373, 383, 387, 0, 390, 0, 395, 401,
	-2, 0, 273, 0, -2, -2, -2, 401, 0, -2,
	223, 228, 401, 230, 231, 0, 315, 0, 0, 142,
	-2, 69, 0, 393, 302, 192, 194, 272, 319, 401,
	297, 0, 287, 0, 229, 0, 316, 317, 0, 391,
	274, 276, 277, 286, 0, 289, 294, 291, 0, 0,
	288, 0, 0, 294, 236, 238, 239, 0, 0, 392,
	292, 290, 293, 0, 0, 241, 246, 388, 240, 0,
	0, 243, 250, 245, 0, 242, 244, 247, 248, 249,
	251,
}

var ASNTok1 = [...]int{
	1,
}

var ASNTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128,
}

var ASNTok3 = [...]int{
	0,
}

var ASNErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	ASNDebug        = 0
	ASNErrorVerbose = false
)

type ASNLexer interface {
	Lex(lval *ASNSymType) int
	Error(s string)
}

type ASNParser interface {
	Parse(ASNLexer) int
	Lookahead() int
}

type ASNParserImpl struct {
	lval  ASNSymType
	stack [ASNInitialStackSize]ASNSymType
	char  int
}

func (p *ASNParserImpl) Lookahead() int {
	return p.char
}

func ASNNewParser() ASNParser {
	return &ASNParserImpl{}
}

const ASNFlag = -1000

func ASNTokname(c int) string {
	if c >= 1 && c-1 < len(ASNToknames) {
		if ASNToknames[c-1] != "" {
			return ASNToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func ASNStatname(s int) string {
	if s >= 0 && s < len(ASNStatenames) {
		if ASNStatenames[s] != "" {
			return ASNStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func ASNErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !ASNErrorVerbose {
		return "syntax error"
	}

	for _, e := range ASNErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + ASNTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := ASNPact[state]
	for tok := TOKSTART; tok-1 < len(ASNToknames); tok++ {
		if n := base + tok; n >= 0 && n < ASNLast && ASNChk[ASNAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if ASNDef[state] == -2 {
		i := 0
		for ASNExca[i] != -1 || ASNExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; ASNExca[i] >= 0; i += 2 {
			tok := ASNExca[i]
			if tok < TOKSTART || ASNExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if ASNExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += ASNTokname(tok)
	}
	return res
}

func ASNlex1(lex ASNLexer, lval *ASNSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = ASNTok1[0]
		goto out
	}
	if char < len(ASNTok1) {
		token = ASNTok1[char]
		goto out
	}
	if char >= ASNPrivate {
		if char < ASNPrivate+len(ASNTok2) {
			token = ASNTok2[char-ASNPrivate]
			goto out
		}
	}
	for i := 0; i < len(ASNTok3); i += 2 {
		token = ASNTok3[i+0]
		if token == char {
			token = ASNTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = ASNTok2[1] /* unknown char */
	}
	if ASNDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", ASNTokname(token), uint(char))
	}
	return char, token
}

func ASNParse(ASNlex ASNLexer) int {
	return ASNNewParser().Parse(ASNlex)
}

func (ASNrcvr *ASNParserImpl) Parse(ASNlex ASNLexer) int {
	var ASNn int
	var ASNVAL ASNSymType
	var ASNDollar []ASNSymType
	_ = ASNDollar // silence set and not used
	ASNS := ASNrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	ASNstate := 0
	ASNrcvr.char = -1
	ASNtoken := -1 // ASNrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		ASNstate = -1
		ASNrcvr.char = -1
		ASNtoken = -1
	}()
	ASNp := -1
	goto ASNstack

ret0:
	return 0

ret1:
	return 1

ASNstack:
	/* put a state and value onto the stack */
	if ASNDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", ASNTokname(ASNtoken), ASNStatname(ASNstate))
	}

	ASNp++
	if ASNp >= len(ASNS) {
		nyys := make([]ASNSymType, len(ASNS)*2)
		copy(nyys, ASNS)
		ASNS = nyys
	}
	ASNS[ASNp] = ASNVAL
	ASNS[ASNp].yys = ASNstate

ASNnewstate:
	ASNn = ASNPact[ASNstate]
	if ASNn <= ASNFlag {
		goto ASNdefault /* simple state */
	}
	if ASNrcvr.char < 0 {
		ASNrcvr.char, ASNtoken = ASNlex1(ASNlex, &ASNrcvr.lval)
	}
	ASNn += ASNtoken
	if ASNn < 0 || ASNn >= ASNLast {
		goto ASNdefault
	}
	ASNn = ASNAct[ASNn]
	if ASNChk[ASNn] == ASNtoken { /* valid shift */
		ASNrcvr.char = -1
		ASNtoken = -1
		ASNVAL = ASNrcvr.lval
		ASNstate = ASNn
		if Errflag > 0 {
			Errflag--
		}
		goto ASNstack
	}

ASNdefault:
	/* default state action */
	ASNn = ASNDef[ASNstate]
	if ASNn == -2 {
		if ASNrcvr.char < 0 {
			ASNrcvr.char, ASNtoken = ASNlex1(ASNlex, &ASNrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if ASNExca[xi+0] == -1 && ASNExca[xi+1] == ASNstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			ASNn = ASNExca[xi+0]
			if ASNn < 0 || ASNn == ASNtoken {
				break
			}
		}
		ASNn = ASNExca[xi+1]
		if ASNn < 0 {
			goto ret0
		}
	}
	if ASNn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			ASNlex.Error(ASNErrorMessage(ASNstate, ASNtoken))
			Nerrs++
			if ASNDebug >= 1 {
				__yyfmt__.Printf("%s", ASNStatname(ASNstate))
				__yyfmt__.Printf(" saw %s\n", ASNTokname(ASNtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for ASNp >= 0 {
				ASNn = ASNPact[ASNS[ASNp].yys] + ASNErrCode
				if ASNn >= 0 && ASNn < ASNLast {
					ASNstate = ASNAct[ASNn] /* simulate a shift of "error" */
					if ASNChk[ASNstate] == ASNErrCode {
						goto ASNstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if ASNDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", ASNS[ASNp].yys)
				}
				ASNp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if ASNDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", ASNTokname(ASNtoken))
			}
			if ASNtoken == ASNEofCode {
				goto ret1
			}
			ASNrcvr.char = -1
			ASNtoken = -1
			goto ASNnewstate /* try again in the same state */
		}
	}

	/* reduction by production ASNn */
	if ASNDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", ASNn, ASNStatname(ASNstate))
	}

	ASNnt := ASNn
	ASNpt := ASNp
	_ = ASNpt // guard against "declared and not used"

	ASNp -= ASNR2[ASNn]
	// ASNp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if ASNp+1 >= len(ASNS) {
		nyys := make([]ASNSymType, len(ASNS)*2)
		copy(nyys, ASNS)
		ASNS = nyys
	}
	ASNVAL = ASNS[ASNp+1]

	/* consult goto table to find next state */
	ASNn = ASNR1[ASNn]
	ASNg := ASNPgo[ASNn]
	ASNj := ASNg + ASNS[ASNp].yys + 1

	if ASNj >= ASNLast {
		ASNstate = ASNAct[ASNg]
	} else {
		ASNstate = ASNAct[ASNj]
		if ASNChk[ASNstate] != -ASNn {
			ASNstate = ASNAct[ASNg]
		}
	}
	// dummy call; replaced with literal code
	switch ASNnt {

	case 1:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:420
		{
			SetResult(ASNlex, ASNDollar[1].TypeValue)
			Print("Done")
			Print("--------------------------------------------------------------------------------")
			Print(JSON(&ASNDollar[1].TypeValue))
			Print("--------------------------------------------------------------------------------")
		}
	case 2:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:429
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 3:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:434
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 4:
		ASNDollar = ASNS[ASNpt-10 : ASNpt+1]
//line asn.y:464
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"encoding":   ASNDollar[3].TypeValue,
				"tag":        ASNDollar[4].TypeValue,
				"body":       ASNDollar[8].TypeValue,
			}
		}
	case 5:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:480
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 6:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:485
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 7:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:489
		{
			ASNVAL.TypeValue = nil
		}
	case 8:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:501
		{
			ASNVAL.TypeValue = MAP{
				"encodingReference":    ASNDollar[2].TypeString,
				"encodingInstructions": ASNDollar[3].TypeValue,
			}
		}
	case 9:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:516
		{
			ASNVAL.TypeValue = nil
		}
	case 10:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:529
		{
			ASNVAL.TypeValue = MAP{
				"reference":             ASNDollar[1].TypeValue,
				"definitiveIdentifiers": ASNDollar[2].TypeValue,
			}
		}
	case 11:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:543
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 12:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:546
		{
			ASNVAL.TypeValue = ""
		}
	case 13:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:558
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 14:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:561
		{
			ASNVAL.TypeValue = nil
		}
	case 15:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:571
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 16:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:582
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 17:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:587
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 18:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:600
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 19:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:603
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 20:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:606
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 21:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:615
		{
			ASNVAL.TypeValue = MAP{
				"name": ASNDollar[1].TypeString,
			}
		}
	case 22:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:626
		{
			ASNVAL.TypeValue = MAP{
				"number": ASNDollar[1].TypeValue,
			}
		}
	case 23:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:637
		{
			ASNVAL.TypeValue = MAP{
				"name":   ASNDollar[1].TypeString,
				"number": ASNDollar[3].TypeValue,
			}
		}
	case 24:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:653
		{
			ASNVAL.TypeValue = "Implicit"
		}
	case 25:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:656
		{
			ASNVAL.TypeValue = "Explicit"
		}
	case 26:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:659
		{
			ASNVAL.TypeValue = "Automatic"
		}
	case 27:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:662
		{
			ASNVAL.TypeValue = "Explicit"
		}
	case 28:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:673
		{
			ASNVAL.TypeValue = true
		}
	case 29:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:676
		{
			ASNVAL.TypeValue = false
		}
	case 30:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:689
		{
			ASNVAL.TypeValue = MAP{
				"imports":     ASNDollar[1].TypeValue,
				"exports":     ASNDollar[2].TypeValue,
				"assignments": ASNDollar[3].TypeValue,
			}
		}
	case 31:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:698
		{
			ASNVAL.TypeValue = MAP{
				"imports":     ASNDollar[2].TypeValue,
				"exports":     ASNDollar[1].TypeValue,
				"assignments": ASNDollar[3].TypeValue,
			}
		}
	case 32:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:705
		{
			ASNVAL.TypeValue = nil
		}
	case 33:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:717
		{
			ASNVAL.TypeValue = MAP{
				"all":     "false",
				"symbols": ASNDollar[2].TypeValue,
			}
		}
	case 34:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:723
		{
			ASNVAL.TypeValue = MAP{
				"all": "true",
			}
		}
	case 35:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:728
		{
			ASNVAL.TypeValue = MAP{
				"all": "false",
			}
		}
	case 36:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:733
		{
			ASNVAL.TypeValue = MAP{
				"all": "true",
			}
		}
	case 37:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:746
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 38:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:749
		{
			ASNVAL.TypeValue = nil
		}
	case 39:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:760
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 40:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:765
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 41:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:777
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
			}
		}
	case 42:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:782
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedReference": ASNDollar[1].TypeValue,
			}
		}
	case 43:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:801
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 44:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:811
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 45:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:814
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 46:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:825
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 47:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:828
		{
			ASNVAL.TypeValue = nil
		}
	case 48:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:839
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 49:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:842
		{
			ASNVAL.TypeValue = nil
		}
	case 50:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:853
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 51:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:858
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 52:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:869
		{
			ASNVAL.TypeValue = MAP{
				"symbols":   ASNDollar[1].TypeValue,
				"reference": ASNDollar[3].TypeValue,
			}
		}
	case 53:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:882
		{
			ASNVAL.TypeValue = MAP{
				"name":        ASNDollar[1].TypeValue,
				"identifiers": ASNDollar[2].TypeValue,
			}
		}
	case 54:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:897
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 55:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:900
		{
			ASNVAL.TypeValue = nil
		}
	case 56:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:903
		{
			ASNVAL.TypeValue = nil
		}
	case 57:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:914
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 58:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:917
		{
			ASNVAL.TypeValue = ASNDollar[3].TypeValue
		}
	case 59:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:920
		{
			ASNVAL.TypeValue = nil
		}
	case 60:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:931
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 61:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:936
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 62:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:950
		{
			ASNVAL.TypeValue = MAP{
				"name": ASNDollar[1].TypeValue,
			}
		}
	case 63:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:955
		{
			ASNVAL.TypeValue = MAP{
				"number": ASNDollar[1].TypeValue,
			}
		}
	case 64:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:960
		{
			ASNVAL.TypeValue = MAP{
				"nameAndNumber": ASNDollar[1].TypeValue,
			}
		}
	case 65:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:965
		{
			ASNVAL.TypeValue = MAP{
				"definedValue": ASNDollar[1].TypeValue,
			}
		}
	case 66:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:977
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 67:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:988
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 68:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:991
		{
			ASNVAL.TypeValue = MAP{
				"definedValue": ASNDollar[1].TypeValue,
			}
		}
	case 69:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1003
		{
			ASNVAL.TypeValue = MAP{
				"name":   ASNDollar[1].TypeValue,
				"number": ASNDollar[3].TypeValue,
			}
		}
	case 70:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1017
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 71:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1022
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 72:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1026
		{
			ASNVAL.TypeValue = nil
		}
	case 73:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1043
		{
			ASNVAL.TypeValue = MAP{
				"typeAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 74:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1048
		{
			ASNVAL.TypeValue = MAP{
				"valueAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 75:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1053
		{
			ASNVAL.TypeValue = MAP{
				"xmlValueAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 76:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1058
		{
			ASNVAL.TypeValue = MAP{
				"valueSetAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 77:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1063
		{
			ASNVAL.TypeValue = MAP{
				"objectClassAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 78:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1068
		{
			ASNVAL.TypeValue = MAP{
				"objectAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 79:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1073
		{
			ASNVAL.TypeValue = MAP{
				"objectSetAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 80:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1078
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 81:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1092
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"type":      ASNDollar[2].TypeValue,
			}
		}
	case 82:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1108
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"type":      ASNDollar[2].TypeValue,
				"value":     ASNDollar[4].TypeValue,
			}
		}
	case 83:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1124
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"value":     ASNDollar[3].TypeValue,
			}
		}
	case 84:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1140
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"type":      ASNDollar[2].TypeValue,
				"valueSet":  ASNDollar[4].TypeValue,
			}
		}
	case 85:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1156
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"class":     ASNDollar[3].TypeValue,
			}
		}
	case 86:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1172
		{
			ASNVAL.TypeValue = MAP{
				"reference":    ASNDollar[1].TypeValue,
				"definedClass": ASNDollar[2].TypeValue,
				"object":       ASNDollar[4].TypeValue,
			}
		}
	case 87:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1189
		{
			ASNVAL.TypeValue = MAP{
				"reference":    ASNDollar[1].TypeValue,
				"definedClass": ASNDollar[2].TypeValue,
				"objectSet":    ASNDollar[4].TypeValue,
			}
		}
	case 88:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1208
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 89:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1211
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 90:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1214
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 91:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1217
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 92:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1220
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 93:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1223
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 94:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1235
		{
			ASNVAL.TypeValue = MAP{
				"type":       "BUILTIN_TYPE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 95:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1241
		{
			ASNVAL.TypeValue = MAP{
				"type":       "REFERENCED_TYPE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 96:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1247
		{
			ASNVAL.TypeValue = MAP{
				"type":       "CONSTRAINED_TYPE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 97:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1262
		{
			ASNVAL.TypeValue = MAP{
				"type":       "BUILTIN_VALUE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 98:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1268
		{
			ASNVAL.TypeValue = MAP{
				"type":       "REFERENCED_VALUE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 99:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1274
		{
			ASNVAL.TypeValue = MAP{
				"type":       "OBJECT_CLASS_FIELD_VALUE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 100:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1312
		{
			ASNVAL.TypeValue = MAP{
				"bitStringType": ASNDollar[1].TypeValue,
			}
		}
	case 101:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1317
		{
			ASNVAL.TypeValue = MAP{
				"booleanType": ASNDollar[1].TypeValue,
			}
		}
	case 102:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1322
		{
			ASNVAL.TypeValue = MAP{
				"characterStringType": ASNDollar[1].TypeValue,
			}
		}
	case 103:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1327
		{
			ASNVAL.TypeValue = MAP{
				"choiceType": ASNDollar[1].TypeValue,
			}
		}
	case 104:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1332
		{
			ASNVAL.TypeValue = MAP{
				"dateType": ASNDollar[1].TypeValue,
			}
		}
	case 105:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1337
		{
			ASNVAL.TypeValue = MAP{
				"dataTimeType": ASNDollar[1].TypeValue,
			}
		}
	case 106:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1342
		{
			ASNVAL.TypeValue = MAP{
				"durationType": ASNDollar[1].TypeValue,
			}
		}
	case 107:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1347
		{
			ASNVAL.TypeValue = MAP{
				"embeddedPDVType": ASNDollar[1].TypeValue,
			}
		}
	case 108:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1352
		{
			ASNVAL.TypeValue = MAP{
				"enumeratedType": ASNDollar[1].TypeValue,
			}
		}
	case 109:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1357
		{
			ASNVAL.TypeValue = MAP{
				"externalType": ASNDollar[1].TypeValue,
			}
		}
	case 110:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1362
		{
			ASNVAL.TypeValue = MAP{
				"instanceOfType": ASNDollar[1].TypeValue,
			}
		}
	case 111:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1367
		{
			ASNVAL.TypeValue = MAP{
				"integerType": ASNDollar[1].TypeValue,
			}
		}
	case 112:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1372
		{
			ASNVAL.TypeValue = MAP{
				"iriType": ASNDollar[1].TypeValue,
			}
		}
	case 113:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1377
		{
			ASNVAL.TypeValue = MAP{
				"nullType": ASNDollar[1].TypeValue,
			}
		}
	case 114:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1382
		{
			ASNVAL.TypeValue = MAP{
				"objectClassFieldType": ASNDollar[1].TypeValue,
			}
		}
	case 115:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1387
		{
			ASNVAL.TypeValue = MAP{
				"objectIdentifierType": ASNDollar[1].TypeValue,
			}
		}
	case 116:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1392
		{
			ASNVAL.TypeValue = MAP{
				"octetStringType": ASNDollar[1].TypeValue,
			}
		}
	case 117:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1397
		{
			ASNVAL.TypeValue = MAP{
				"realType": ASNDollar[1].TypeValue,
			}
		}
	case 118:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1402
		{
			ASNVAL.TypeValue = MAP{
				"relativeIRIType": ASNDollar[1].TypeValue,
			}
		}
	case 119:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1407
		{
			ASNVAL.TypeValue = MAP{
				"relativeOIDType": ASNDollar[1].TypeValue,
			}
		}
	case 120:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1412
		{
			ASNVAL.TypeValue = MAP{
				"sequenceType": ASNDollar[1].TypeValue,
			}
		}
	case 121:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1417
		{
			ASNVAL.TypeValue = MAP{
				"sequenceOfType": ASNDollar[1].TypeValue,
			}
		}
	case 122:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1422
		{
			ASNVAL.TypeValue = MAP{
				"setType": ASNDollar[1].TypeValue,
			}
		}
	case 123:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1427
		{
			ASNVAL.TypeValue = MAP{
				"setOfType": ASNDollar[1].TypeValue,
			}
		}
	case 124:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1432
		{
			ASNVAL.TypeValue = MAP{
				"prefixedType": ASNDollar[1].TypeValue,
			}
		}
	case 125:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1437
		{
			ASNVAL.TypeValue = MAP{
				"timeType": ASNDollar[1].TypeValue,
			}
		}
	case 126:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1442
		{
			ASNVAL.TypeValue = MAP{
				"timeOfDayType": ASNDollar[1].TypeValue,
			}
		}
	case 127:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1458
		{
			ASNVAL.TypeValue = MAP{
				"definedType": ASNDollar[1].TypeValue,
			}
		}
	case 128:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1463
		{
			ASNVAL.TypeValue = MAP{
				"usefulType": ASNDollar[1].TypeValue,
			}
		}
	case 129:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1468
		{
			ASNVAL.TypeValue = MAP{
				"selectionType": ASNDollar[1].TypeValue,
			}
		}
	case 130:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1473
		{
			ASNVAL.TypeValue = MAP{
				"typeFromObject": ASNDollar[1].TypeValue,
			}
		}
	case 131:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1478
		{
			ASNVAL.TypeValue = MAP{
				"valueSetFromObjects": ASNDollar[1].TypeValue,
			}
		}
	case 132:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1493
		{
			ASNVAL.TypeValue = MAP{
				"externalTypeReference": ASNDollar[1].TypeValue,
			}
		}
	case 133:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1498
		{
			ASNVAL.TypeValue = MAP{
				"typeReference": ASNDollar[1].TypeValue,
			}
		}
	case 134:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1503
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedType": ASNDollar[1].TypeValue,
			}
		}
	case 135:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1508
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedValueSetType": ASNDollar[1].TypeValue,
			}
		}
	case 136:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1522
		{
			ASNVAL.TypeValue = MAP{
				"moduleReference": ASNDollar[1].TypeValue,
				"typeReference":   ASNDollar[2].TypeToken,
			}
		}
	case 137:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1536
		{
			ASNVAL.TypeValue = MAP{
				"simpleDefinedType":   ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 138:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1550
		{
			ASNVAL.TypeValue = MAP{
				"simpleDefinedType":   ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 139:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1564
		{
			ASNVAL.TypeValue = MAP{
				"externalTypeReference": ASNDollar[1].TypeValue,
			}
		}
	case 140:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1569
		{
			ASNVAL.TypeValue = MAP{
				"typeReference": ASNDollar[1].TypeValue,
			}
		}
	case 141:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1580
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[2].TypeValue,
			}
		}
	case 142:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:1585
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[4].TypeValue)
		}
	case 143:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1601
		{
			ASNVAL.TypeValue = MAP{
				"type": ASNDollar[1].TypeValue,
			}
		}
	case 144:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1606
		{
			ASNVAL.TypeValue = MAP{
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 145:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1611
		{
			ASNVAL.TypeValue = MAP{
				"valueSet": ASNDollar[1].TypeValue,
			}
		}
	case 146:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1616
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectClass": ASNDollar[1].TypeValue,
			}
		}
	case 147:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1621
		{
			ASNVAL.TypeValue = MAP{
				"object": ASNDollar[1].TypeValue,
			}
		}
	case 148:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1626
		{
			ASNVAL.TypeValue = MAP{
				"objectSet": ASNDollar[1].TypeValue,
			}
		}
	case 149:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1654
		{
			ASNVAL.TypeValue = STRING(UTF8String)
		}
	case 150:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1657
		{
			ASNVAL.TypeValue = STRING(GraphicString)
		}
	case 151:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1660
		{
			ASNVAL.TypeValue = STRING(NumericString)
		}
	case 152:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1663
		{
			ASNVAL.TypeValue = STRING(VisibleString)
		}
	case 153:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1666
		{
			ASNVAL.TypeValue = STRING(PrintableString)
		}
	case 154:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1669
		{
			ASNVAL.TypeValue = STRING(ISO646String)
		}
	case 155:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1672
		{
			ASNVAL.TypeValue = STRING(TeletexString)
		}
	case 156:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1675
		{
			ASNVAL.TypeValue = STRING(GeneralString)
		}
	case 157:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1678
		{
			ASNVAL.TypeValue = STRING(T61String)
		}
	case 158:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1681
		{
			ASNVAL.TypeValue = STRING(UniversalString)
		}
	case 159:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1684
		{
			ASNVAL.TypeValue = STRING(VideotexString)
		}
	case 160:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1687
		{
			ASNVAL.TypeValue = STRING(BMPString)
		}
	case 161:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1690
		{
			ASNVAL.TypeValue = STRING(IA5String)
		}
	case 162:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1693
		{
			ASNVAL.TypeValue = STRING(GeneralizedTime)
		}
	case 163:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1696
		{
			ASNVAL.TypeValue = STRING(UTCTime)
		}
	case 164:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1699
		{
			ASNVAL.TypeValue = STRING(ObjectDescriptor)
		}
	case 165:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1709
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"type":       ASNDollar[3].TypeValue,
			}
		}
	case 166:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1722
		{
			ASNVAL.TypeValue = MAP{
				"referencedObjects": ASNDollar[1].TypeValue,
				"fieldName":         ASNDollar[2].TypeToken,
			}
		}
	case 167:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1735
		{
			ASNVAL.TypeValue = MAP{
				"definedObject": ASNDollar[1].TypeValue,
			}
		}
	case 168:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1740
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedObject": ASNDollar[1].TypeValue,
			}
		}
	case 169:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1745
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 170:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1750
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 171:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1762
		{
			ASNVAL.TypeValue = MAP{
				"externalObjectReference": ASNDollar[1].TypeValue,
			}
		}
	case 172:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1767
		{
			ASNVAL.TypeValue = MAP{
				"objectReference": ASNDollar[1].TypeValue,
			}
		}
	case 173:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1779
		{
			ASNVAL.TypeValue = MAP{
				"moduleReference": ASNDollar[1].TypeValue,
				"objectReference": ASNDollar[3].TypeValue,
			}
		}
	case 174:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1792
		{
			ASNVAL.TypeValue = MAP{
				"definedObject":       ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 175:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1805
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 176:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1808
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 177:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1818
		{
			ASNVAL.TypeValue = MAP{
				"moduleReference":    ASNDollar[1].TypeValue,
				"objectSetReference": ASNDollar[3].TypeValue,
			}
		}
	case 178:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1831
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet":    ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 179:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1844
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 180:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1855
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 181:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1860
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 182:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1875
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 183:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1885
		{
			ASNVAL.TypeValue = MAP{
				"referencedObjects": ASNDollar[1].TypeValue,
				"fieldname":         ASNDollar[3].TypeValue,
			}
		}
	case 184:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1899
		{
			ASNVAL.TypeValue = MAP{
				"type":       ASNDollar[1].TypeValue,
				"constraint": ASNDollar[2].TypeValue,
			}
		}
	case 185:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1905
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 186:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1915
		{
			ASNVAL.TypeValue = MAP{
				"constraintSpec": ASNDollar[2].TypeValue,
				"exceptionSpec":  ASNDollar[3].TypeValue,
			}
		}
	case 187:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1929
		{
			ASNVAL.TypeValue = MAP{
				"subtypeConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 188:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1934
		{
			ASNVAL.TypeValue = MAP{
				"generalConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 189:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1946
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 190:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1958
		{
			ASNVAL.TypeValue = MAP{
				"rootElementSetSpec": ASNDollar[1].TypeValue,
			}
		}
	case 191:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1963
		{
			ASNVAL.TypeValue = MAP{
				"rootElementSetSpec": ASNDollar[1].TypeValue,
			}
		}
	case 192:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:1968
		{
			ASNVAL.TypeValue = MAP{
				"rootElementSetSpec":       ASNDollar[1].TypeValue,
				"additionalElementSetSpec": ASNDollar[2].TypeToken,
			}
		}
	case 193:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1981
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 194:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1991
		{
			ASNVAL.TypeValue = nil
		}
	case 195:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2002
		{
			ASNVAL.TypeValue = MAP{
				"unions": ASNDollar[1].TypeValue,
			}
		}
	case 196:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2007
		{
			ASNVAL.TypeValue = MAP{
				"exclusions": ASNDollar[1].TypeString,
			}
		}
	case 197:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2020
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 198:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2023
		{
			ASNVAL.TypeValue = MAP{
				"unions":        ASNDollar[1].TypeValue,
				"intersections": ASNDollar[3].TypeValue,
			}
		}
	case 199:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2037
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 200:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2040
		{
			ASNVAL.TypeValue = MAP{
				"intersections":        ASNDollar[1].TypeValue,
				"intersectionElements": ASNDollar[2].TypeValue,
			}
		}
	case 201:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2053
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 202:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2056
		{
			ASNVAL.TypeValue = MAP{
				"elements":   ASNDollar[1].TypeValue,
				"exclusions": ASNDollar[2].TypeValue,
			}
		}
	case 203:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2071
		{
			ASNVAL.TypeValue = MAP{
				"subtypeElements": ASNDollar[1].TypeValue,
			}
		}
	case 204:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2076
		{
			ASNVAL.TypeValue = MAP{
				"objectSetElements": ASNDollar[1].TypeValue,
			}
		}
	case 205:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2081
		{
			ASNVAL.TypeValue = MAP{
				"elementSetSpec": ASNDollar[1].TypeToken,
			}
		}
	case 206:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2093
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 207:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2114
		{
			ASNVAL.TypeValue = MAP{
				"singleValue": ASNDollar[1].TypeValue,
			}
		}
	case 208:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2119
		{
			ASNVAL.TypeValue = MAP{
				"containedSubtype": ASNDollar[1].TypeValue,
			}
		}
	case 209:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2124
		{
			ASNVAL.TypeValue = MAP{
				"valueRange": ASNDollar[1].TypeValue,
			}
		}
	case 210:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2129
		{
			ASNVAL.TypeValue = MAP{
				"permittedAlphabet": ASNDollar[1].TypeValue,
			}
		}
	case 211:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2134
		{
			ASNVAL.TypeValue = MAP{
				"sizeConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 212:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2139
		{
			ASNVAL.TypeValue = MAP{
				"typeConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 213:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2144
		{
			ASNVAL.TypeValue = MAP{
				"innerTypeConstraints": ASNDollar[1].TypeValue,
			}
		}
	case 214:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2149
		{
			ASNVAL.TypeValue = MAP{
				"patternConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 215:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2154
		{
			ASNVAL.TypeValue = MAP{
				"propertySettings": ASNDollar[1].TypeValue,
			}
		}
	case 216:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2159
		{
			ASNVAL.TypeValue = MAP{
				"durationRange": ASNDollar[1].TypeValue,
			}
		}
	case 217:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2164
		{
			ASNVAL.TypeValue = MAP{
				"timePointRange": ASNDollar[1].TypeValue,
			}
		}
	case 218:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2169
		{
			ASNVAL.TypeValue = MAP{
				"recurrenceRange": ASNDollar[1].TypeValue,
			}
		}
	case 219:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2181
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 220:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2191
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 221:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2201
		{
			ASNVAL.TypeValue = "INCLUDES"
		}
	case 222:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2204
		{
			ASNVAL.TypeValue = "INCLUDES"
		}
	case 223:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2214
		{
			ASNVAL.TypeValue = MAP{
				"lowerEndpoint": ASNDollar[1].TypeValue,
				"upperEndpoint": ASNDollar[2].TypeToken,
			}
		}
	case 224:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2227
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 225:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2230
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 226:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2240
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 227:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2243
		{
			ASNVAL.TypeValue = "MIN"
		}
	case 228:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2253
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 229:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2256
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 230:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2266
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 231:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2269
		{
			ASNVAL.TypeValue = "MAX"
		}
	case 232:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2279
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 233:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2289
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 234:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2299
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 235:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2310
		{
			ASNVAL.TypeValue = ASNDollar[3].TypeValue
		}
	case 236:
		ASNDollar = ASNS[ASNpt-7 : ASNpt+1]
//line asn.y:2313
		{
			ASNVAL.TypeValue = ASNDollar[3].TypeValue
		}
	case 237:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2323
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 238:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2334
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 239:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2337
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 240:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2347
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 241:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2358
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 242:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2361
		{
			ASNVAL.TypeValue = MAP{
				"nameConstraint":  ASNDollar[1].TypeValue,
				"typeConstraints": ASNDollar[3].TypeValue,
			}
		}
	case 243:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2374
		{
			ASNVAL.TypeValue = MAP{
				"identifier":          ASNDollar[1].TypeValue,
				"componentConstraint": ASNDollar[2].TypeValue,
			}
		}
	case 244:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2387
		{
			ASNVAL.TypeValue = MAP{
				"valueConstraint":    ASNDollar[1].TypeValue,
				"presenceConstraint": ASNDollar[2].TypeValue,
			}
		}
	case 245:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2400
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 246:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2403
		{
			ASNVAL.TypeValue = nil
		}
	case 247:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2413
		{
			ASNVAL.TypeValue = "PRESENT"
		}
	case 248:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2416
		{
			ASNVAL.TypeValue = "ABSENT"
		}
	case 249:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2419
		{
			ASNVAL.TypeValue = "OPTIONAL"
		}
	case 250:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2422
		{
			ASNVAL.TypeValue = nil
		}
	case 251:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:2432
		{
			ASNVAL.TypeValue = ASNDollar[4].TypeValue
		}
	case 252:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2442
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 253:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2452
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 254:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2462
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 255:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2472
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 256:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2482
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 257:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2495
		{
			ASNVAL.TypeValue = MAP{
				"object": ASNDollar[1].TypeValue,
			}
		}
	case 258:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2500
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 259:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2505
		{
			ASNVAL.TypeValue = MAP{
				"objectSetFromObjects": ASNDollar[1].TypeValue,
			}
		}
	case 260:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2510
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 261:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2522
		{
			ASNVAL.TypeValue = MAP{
				"referencedObjects": ASNDollar[1].TypeValue,
				"fieldName":         ASNDollar[2].TypeToken,
			}
		}
	case 262:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2535
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 263:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2545
		{
			ASNVAL.TypeValue = "INTERSECTION"
		}
	case 264:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2548
		{
			ASNVAL.TypeValue = "INTERSECTION"
		}
	case 265:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2558
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 266:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2568
		{
			ASNVAL.TypeValue = "UNION"
		}
	case 267:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2571
		{
			ASNVAL.TypeValue = "UNION"
		}
	case 268:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2581
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 269:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2593
		{
			ASNVAL.TypeValue = MAP{
				"userDefinedConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 270:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2598
		{
			ASNVAL.TypeValue = MAP{
				"tableConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 271:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2603
		{
			ASNVAL.TypeValue = MAP{
				"contentsConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 272:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:2615
		{
			ASNVAL.TypeValue = ASNDollar[4].TypeValue
		}
	case 273:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2627
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 274:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2632
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 275:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2636
		{
			ASNVAL.TypeValue = nil
		}
	case 276:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2650
		{
			ASNVAL.TypeValue = MAP{
				"governor": ASNDollar[1].TypeValue,
				"value":    ASNDollar[3].TypeValue,
			}
		}
	case 277:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2656
		{
			ASNVAL.TypeValue = MAP{
				"governor": ASNDollar[1].TypeValue,
				"object":   ASNDollar[3].TypeValue,
			}
		}
	case 278:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2662
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 279:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2667
		{
			ASNVAL.TypeValue = MAP{
				"type": ASNDollar[1].TypeValue,
			}
		}
	case 280:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2672
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectClass": ASNDollar[1].TypeValue,
			}
		}
	case 281:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2684
		{
			ASNVAL.TypeValue = MAP{
				"type": ASNDollar[1].TypeValue,
			}
		}
	case 282:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2689
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectClass": ASNDollar[1].TypeValue,
			}
		}
	case 283:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2701
		{
			ASNVAL.TypeValue = MAP{
				"simpleTableConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 284:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2706
		{
			ASNVAL.TypeValue = MAP{
				"componentRelationConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 285:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2718
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 286:
		ASNDollar = ASNS[ASNpt-6 : ASNpt+1]
//line asn.y:2729
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet": ASNDollar[1].TypeToken,
				"atNotations":      ASNDollar[2].TypeValue,
			}
		}
	case 287:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2743
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 288:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2748
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 289:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2759
		{
			ASNVAL.TypeValue = MAP{
				"componentIdList": ASNDollar[2].TypeValue,
			}
		}
	case 290:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2764
		{
			ASNVAL.TypeValue = MAP{
				"componentIdList": ASNDollar[4].TypeValue,
			}
		}
	case 291:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2776
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 292:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2781
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 293:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2792
		{
			ASNVAL.TypeValue = nil
		}
	case 294:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2795
		{
			ASNVAL.TypeValue = nil
		}
	case 295:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2807
		{
			ASNVAL.TypeValue = MAP{
				"type": ASNDollar[2].TypeValue,
			}
		}
	case 296:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2812
		{
			ASNVAL.TypeValue = MAP{
				"value": ASNDollar[3].TypeValue,
			}
		}
	case 297:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:2817
		{
			ASNVAL.TypeValue = MAP{
				"type":  ASNDollar[2].TypeValue,
				"value": ASNDollar[5].TypeValue,
			}
		}
	case 298:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2830
		{

		}
	case 299:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2833
		{
			ASNVAL.TypeValue = nil
		}
	case 300:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2845
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 301:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2848
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 302:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2851
		{
			ASNVAL.TypeValue = MAP{
				"type":  ASNDollar[1].TypeValue,
				"value": ASNDollar[3].TypeValue,
			}
		}
	case 303:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2871
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence": "SET",
				"constraint":    ASNDollar[2].TypeValue,
				"type":          ASNDollar[4].TypeValue,
			}
		}
	case 304:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2878
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence":  "SET",
				"sizeConstraint": ASNDollar[2].TypeValue,
				"type":           ASNDollar[4].TypeValue,
			}
		}
	case 305:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2885
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence": "SEQUENCE",
				"constraint":    ASNDollar[2].TypeValue,
				"type":          ASNDollar[4].TypeValue,
			}
		}
	case 306:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2892
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence":  "SEQUENCE",
				"sizeConstraint": ASNDollar[2].TypeValue,
				"type":           ASNDollar[4].TypeValue,
			}
		}
	case 307:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2899
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence": "SET",
				"constraint":    ASNDollar[2].TypeValue,
				"namedType":     ASNDollar[4].TypeValue,
			}
		}
	case 308:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2906
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence":  "SET",
				"sizeConstraint": ASNDollar[2].TypeValue,
				"namedType":      ASNDollar[4].TypeValue,
			}
		}
	case 309:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2913
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence": "SEQUENCE",
				"constraint":    ASNDollar[2].TypeValue,
				"namedType":     ASNDollar[4].TypeValue,
			}
		}
	case 310:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2920
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence":  "SEQUENCE",
				"sizeConstraint": ASNDollar[2].TypeValue,
				"namedType":      ASNDollar[4].TypeValue,
			}
		}
	case 311:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2934
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"type":       ASNDollar[2].TypeValue,
			}
		}
	case 312:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2948
		{
			ASNVAL.TypeValue = MAP{
				"type": "BIT STRING",
			}
		}
	case 313:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:2953
		{
			ASNVAL.TypeValue = MAP{
				"type":      "BIT STRING",
				"namedBits": ASNDollar[4].TypeValue,
			}
		}
	case 314:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2967
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 315:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2972
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 316:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2984
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"number":     ASNDollar[3].TypeValue,
			}
		}
	case 317:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2990
		{
			ASNVAL.TypeValue = MAP{
				"identifier":   ASNDollar[1].TypeValue,
				"definedValue": ASNDollar[3].TypeValue,
			}
		}
	case 318:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3003
		{
			ASNVAL.TypeValue = MAP{
				"type": "BOOLEAN",
			}
		}
	case 319:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3011
		{
			ASNVAL.TypeValue = nil
		}
	case 320:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3017
		{
			ASNVAL.TypeValue = nil
		}
	case 321:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3023
		{
			ASNVAL.TypeValue = nil
		}
	case 322:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3029
		{
			ASNVAL.TypeValue = nil
		}
	case 323:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3035
		{
			ASNVAL.TypeValue = nil
		}
	case 324:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3041
		{
			ASNVAL.TypeValue = nil
		}
	case 325:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3047
		{
			ASNVAL.TypeValue = nil
		}
	case 326:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3053
		{
			ASNVAL.TypeValue = nil
		}
	case 327:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3059
		{
			ASNVAL.TypeValue = nil
		}
	case 328:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3065
		{
			ASNVAL.TypeValue = nil
		}
	case 329:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3071
		{
			ASNVAL.TypeValue = nil
		}
	case 330:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3077
		{
			ASNVAL.TypeValue = nil
		}
	case 331:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3083
		{
			ASNVAL.TypeValue = nil
		}
	case 332:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3089
		{
			ASNVAL.TypeValue = nil
		}
	case 333:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3095
		{
			ASNVAL.TypeValue = nil
		}
	case 334:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3101
		{
			ASNVAL.TypeValue = nil
		}
	case 335:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3107
		{
			ASNVAL.TypeValue = nil
		}
	case 336:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3113
		{
			ASNVAL.TypeValue = nil
		}
	case 337:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3119
		{
			ASNVAL.TypeValue = nil
		}
	case 338:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3125
		{
			ASNVAL.TypeValue = nil
		}
	case 339:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3131
		{
			ASNVAL.TypeValue = nil
		}
	case 340:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3137
		{
			ASNVAL.TypeValue = nil
		}
	case 341:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3143
		{
			ASNVAL.TypeValue = nil
		}
	case 342:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3149
		{
			ASNVAL.TypeValue = nil
		}
	case 343:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3155
		{
			ASNVAL.TypeValue = nil
		}
	case 344:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3160
		{
			ASNVAL.TypeValue = MAP{
				"bitString": ASNDollar[1].TypeValue,
			}
		}
	case 345:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3165
		{
			ASNVAL.TypeValue = MAP{
				"boolean": ASNDollar[1].TypeValue,
			}
		}
	case 346:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3170
		{
			ASNVAL.TypeValue = MAP{
				"characterString": ASNDollar[1].TypeValue,
			}
		}
	case 347:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3175
		{
			ASNVAL.TypeValue = MAP{
				"choice": ASNDollar[1].TypeValue,
			}
		}
	case 348:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3180
		{
			ASNVAL.TypeValue = MAP{
				"embeddedPDV": ASNDollar[1].TypeValue,
			}
		}
	case 349:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3185
		{
			ASNVAL.TypeValue = MAP{
				"enumerated": ASNDollar[1].TypeValue,
			}
		}
	case 350:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3190
		{
			ASNVAL.TypeValue = MAP{
				"external": ASNDollar[1].TypeValue,
			}
		}
	case 351:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3195
		{
			ASNVAL.TypeValue = MAP{
				"instanceOf": ASNDollar[1].TypeValue,
			}
		}
	case 352:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3200
		{
			ASNVAL.TypeValue = MAP{
				"integer": ASNDollar[1].TypeValue,
			}
		}
	case 353:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3205
		{
			ASNVAL.TypeValue = MAP{
				"iri": ASNDollar[1].TypeValue,
			}
		}
	case 354:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3210
		{
			ASNVAL.TypeValue = MAP{
				"null": ASNDollar[1].TypeValue,
			}
		}
	case 355:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3215
		{
			ASNVAL.TypeValue = MAP{
				"objectIdentifier": ASNDollar[1].TypeValue,
			}
		}
	case 356:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3220
		{
			ASNVAL.TypeValue = MAP{
				"octetString": ASNDollar[1].TypeValue,
			}
		}
	case 357:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3225
		{
			ASNVAL.TypeValue = MAP{
				"real": ASNDollar[1].TypeValue,
			}
		}
	case 358:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3230
		{
			ASNVAL.TypeValue = MAP{
				"relativeIRI": ASNDollar[1].TypeValue,
			}
		}
	case 359:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3235
		{
			ASNVAL.TypeValue = MAP{
				"relativeOID": ASNDollar[1].TypeValue,
			}
		}
	case 360:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3240
		{
			ASNVAL.TypeValue = MAP{
				"sequence": ASNDollar[1].TypeValue,
			}
		}
	case 361:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3245
		{
			ASNVAL.TypeValue = MAP{
				"sequenceOf": ASNDollar[1].TypeValue,
			}
		}
	case 362:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3250
		{
			ASNVAL.TypeValue = MAP{
				"set": ASNDollar[1].TypeValue,
			}
		}
	case 363:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3255
		{
			ASNVAL.TypeValue = MAP{
				"setOf": ASNDollar[1].TypeValue,
			}
		}
	case 364:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3260
		{
			ASNVAL.TypeValue = MAP{
				"prefixed": ASNDollar[1].TypeValue,
			}
		}
	case 365:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3265
		{
			ASNVAL.TypeValue = MAP{
				"time": ASNDollar[1].TypeValue,
			}
		}
	case 366:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3272
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 367:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3275
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 368:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3278
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 369:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3281
		{
			ASNVAL.TypeValue = nil
		}
	case 370:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3284
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 371:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3289
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 372:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3294
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeToken)
		}
	case 373:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3300
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 374:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3305
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 375:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3310
		{
			ASNVAL.TypeValue = nil
		}
	case 376:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3313
		{

		}
	case 377:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3318
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 378:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3321
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 379:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3324
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 380:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3327
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 381:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3332
		{
			ASNVAL.TypeValue = nil
		}
	case 382:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3337
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 383:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3342
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeToken)
		}
	case 384:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3348
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 385:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3351
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 386:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3354
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 387:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3357
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 388:
		ASNDollar = ASNS[ASNpt-9 : ASNpt+1]
//line asn.y:3362
		{
			ASNVAL.TypeValue = MAP{
				"group": ASNDollar[2].TypeValue,
				"plane": ASNDollar[4].TypeValue,
				"row":   ASNDollar[6].TypeValue,
				"cell":  ASNDollar[8].TypeValue,
			}
		}
	case 389:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3372
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 390:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3377
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 391:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3382
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 392:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3387
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 393:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:3392
		{
			ASNVAL.TypeValue = MAP{
				"tableColumn": ASNDollar[2].TypeValue,
				"tableRow":    ASNDollar[4].TypeValue,
			}
		}
	case 394:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3400
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 395:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3405
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 396:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3410
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 397:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3415
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"value":      ASNDollar[2].TypeToken,
			}
		}
	case 398:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3423
		{
			ASNVAL.TypeValue = nil
		}
	case 399:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3428
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 400:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3433
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 401:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3438
		{
			ASNVAL.TypeValue = nil
		}
	case 402:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3443
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 403:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3446
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 404:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3451
		{
			ASNVAL.TypeValue = "NULL"
		}
	case 405:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3457
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 406:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3460
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 407:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3463
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 408:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3468
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 409:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3471
		{
			ASNVAL.TypeValue = nil
		}
	case 410:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3476
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 411:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3479
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 412:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3484
		{
			ASNVAL.TypeValue = nil
		}
	case 413:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3487
		{
			ASNVAL.TypeValue = nil
		}
	case 414:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3490
		{
			ASNVAL.TypeValue = nil
		}
	case 415:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3495
		{
			ASNVAL.TypeValue = nil
		}
	case 416:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3500
		{
			ASNVAL.TypeValue = nil
		}
	case 417:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3505
		{
			ASNVAL.TypeValue = nil
		}
	case 418:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3510
		{
			ASNVAL.TypeValue = nil
		}
	case 419:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3513
		{
			ASNVAL.TypeValue = nil
		}
	case 420:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3518
		{
			ASNVAL.TypeValue = nil
		}
	case 421:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3521
		{
			ASNVAL.TypeValue = nil
		}
	case 422:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3524
		{
			ASNVAL.TypeValue = nil
		}
	case 423:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3529
		{
			ASNVAL.TypeValue = nil
		}
	case 424:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3534
		{
			ASNVAL.TypeValue = nil
		}
	case 425:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3539
		{
			ASNVAL.TypeValue = nil
		}
	case 426:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3544
		{
			ASNVAL.TypeValue = nil
		}
	case 427:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3549
		{
			ASNVAL.TypeValue = nil
		}
	case 428:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3554
		{
			ASNVAL.TypeValue = nil
		}
	case 429:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3559
		{
			ASNVAL.TypeValue = nil
		}
	case 430:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3564
		{
			ASNVAL.TypeValue = nil
		}
	case 431:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3569
		{
			ASNVAL.TypeValue = nil
		}
	case 432:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3574
		{
			ASNVAL.TypeValue = nil
		}
	case 433:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3579
		{
			ASNVAL.TypeValue = nil
		}
	case 434:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3584
		{
			ASNVAL.TypeValue = nil
		}
	case 435:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3589
		{
			ASNVAL.TypeValue = nil
		}
	case 436:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3594
		{
			ASNVAL.TypeValue = nil
		}
	case 437:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3599
		{
			ASNVAL.TypeValue = nil
		}
	case 438:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3604
		{
			ASNVAL.TypeValue = nil
		}
	case 439:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3609
		{
			ASNVAL.TypeValue = nil
		}
	case 440:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3614
		{
			ASNVAL.TypeValue = nil
		}
	case 441:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3619
		{
			ASNVAL.TypeValue = nil
		}
	case 442:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3624
		{
			ASNVAL.TypeValue = nil
		}
	case 443:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3629
		{
			ASNVAL.TypeValue = MAP{
				"type":  "EXTERNAL_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 444:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3635
		{
			ASNVAL.TypeValue = MAP{
				"type":  "STRING_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 445:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3641
		{
			ASNVAL.TypeValue = MAP{
				"type":  "NUMBER_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 446:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3647
		{
			ASNVAL.TypeValue = MAP{
				"type":  "PARAMETERIZED_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 447:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3655
		{
			ASNVAL.TypeValue = MAP{
				"module": ASNDollar[1].TypeValue,
				"value":  ASNDollar[3].TypeValue,
			}
		}
	case 448:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3663
		{
			ASNVAL.TypeValue = nil
		}
	case 449:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3668
		{
			ASNVAL.TypeValue = nil
		}
	case 450:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3673
		{
			ASNVAL.TypeValue = nil
		}
	case 451:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3678
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 452:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3681
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 453:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3686
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 454:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3689
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 455:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3694
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeNumber
		}
	case 456:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3697
		{
			ASNVAL.TypeValue = (-1) * ASNDollar[2].TypeNumber
		}
	case 457:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3700
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeNumber
		}
	case 458:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3703
		{
			ASNVAL.TypeValue = (-1) * ASNDollar[2].TypeNumber
		}
	case 459:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3708
		{
			ASNVAL.TypeValue = "::="
		}
	}
	goto ASNstack /* stack new state and value */
}
