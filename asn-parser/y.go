// Code generated by goyacc -p ASN asn.y. DO NOT EDIT.

//line asn.y:1

package main

import __yyfmt__ "fmt"

//line asn.y:3
import (
	"bytes"
	"encoding/json"
	"fmt"
)

var code bytes.Buffer

func AddLine(line string) {
	code.WriteString(line)
	code.WriteByte('\n')
}

func JSON(obj interface{}) string {
	data, err := json.MarshalIndent(obj, "", "    ")
	if nil != err {
		fmt.Println("Error: ", err)
		return ""
	}
	return string(data)
}

func Print(line string) {
	fmt.Println(line)
}

func Join(values ...string) string {
	var buffer bytes.Buffer
	for _, value := range values {
		buffer.WriteString(value)
	}
	return buffer.String()
}

func SetResult(l ASNLexer, v VALUE) {
	l.(*Parser).Result = JSON(&v)
}

type Empty struct{}
type (
	VALUE   interface{}
	STRING  string
	NUMBER  float64
	BOOLEAN bool
	LIST    []VALUE
	MAP     map[string]VALUE
)

//line asn.y:50
type ASNSymType struct {
	yys         int
	TypeToken   struct{}
	TypeString  STRING
	TypeNumber  NUMBER
	TypeValue   VALUE
	TypeBoolean BOOLEAN
	TypeMap     MAP
	TypeList    LIST
}

const CURLY_START = 57346
const CURLY_END = 57347
const SQUARE_START = 57348
const SQUARE_END = 57349
const DOUBLE_QUOTE = 57350
const SINGLE_QUOTE = 57351
const COMMA = 57352
const COLON = 57353
const MINUS = 57354
const GREATER_THAN = 57355
const LESS_THAN = 57356
const DOT = 57357
const SLASH = 57358
const ROUND_START = 57359
const ROUND_END = 57360
const EQUALITY = 57361
const APOSTROPHE = 57362
const SPACE = 57363
const PIPE = 57364
const AT_THE_RATE = 57365
const EXCLAMATION = 57366
const CARET = 57367
const SEMI_COMMA = 57368
const ABSENT_SYMBOL = 57369
const ABSTRACTSYNTAX_SYMBOL = 57370
const ALL_SYMBOL = 57371
const APPLICATION_SYMBOL = 57372
const AUTOMATIC_SYMBOL = 57373
const BEGIN_SYMBOL = 57374
const BIT_SYMBOL = 57375
const BMPSTRING_SYMBOL = 57376
const BOOLEAN_SYMBOL = 57377
const BY_SYMBOL = 57378
const CHARACTER_SYMBOL = 57379
const CHOICE_SYMBOL = 57380
const CLASS_SYMBOL = 57381
const COMPONENT_SYMBOL = 57382
const COMPONENTS_SYMBOL = 57383
const CONSTRAINED_SYMBOL = 57384
const CONTAINING_SYMBOL = 57385
const DATE_SYMBOL = 57386
const DATETIME_SYMBOL = 57387
const DEFAULT_SYMBOL = 57388
const DEFINITIONS_SYMBOL = 57389
const DURATION_SYMBOL = 57390
const EMBEDDED_SYMBOL = 57391
const ENCODED_SYMBOL = 57392
const ENCODINGCONTROL_SYMBOL = 57393
const END_SYMBOL = 57394
const ENUMERATED_SYMBOL = 57395
const EXCEPT_SYMBOL = 57396
const EXPLICIT_SYMBOL = 57397
const EXPORTS_SYMBOL = 57398
const EXTENSIBILITY_SYMBOL = 57399
const EXTERNEL_SYMBOL = 57400
const FALSE_SYMBOL = 57401
const FROM_SYMBOL = 57402
const GENERALIZEDTIME_SYMBOL = 57403
const GENERALSTRING_SYMBOL = 57404
const GRAPHICSTRING_SYMBOL = 57405
const IA5STRING_SYMBOL = 57406
const IDENTIFIER_SYMBOL = 57407
const IMPLICIT_SYMBOL = 57408
const IMPLIED_SYMBOL = 57409
const IMPORTS_SYMBOL = 57410
const INCLUDES_SYMBOL = 57411
const INSTANCE_SYMBOL = 57412
const INSTRUCTIONS_SYMBOL = 57413
const INTEGER_SYMBOL = 57414
const INTERSECTION_SYMBOL = 57415
const ISO646STRING_SYMBOL = 57416
const MAX_SYMBOL = 57417
const MIN_SYMBOL = 57418
const MINUSINFINITY_SYMBOL = 57419
const NOTANUMBER_SYMBOL = 57420
const NULL_SYMBOL = 57421
const NUMERICSTRING_SYMBOL = 57422
const OBJECT_SYMBOL = 57423
const OBJECTDESCRIPTOR_SYMBOL = 57424
const OCTET_SYMBOL = 57425
const OF_SYMBOL = 57426
const OIDIRI_SYMBOL = 57427
const OPTIONAL_SYMBOL = 57428
const PATTERN_SYMBOL = 57429
const PDV_SYMBOL = 57430
const PLUSINFINITY_SYMBOL = 57431
const PRESENT_SYMBOL = 57432
const PRINTABLESTRING_SYMBOL = 57433
const PRIVATE_SYMBOL = 57434
const REAL_SYMBOL = 57435
const RELATIVEOID_SYMBOL = 57436
const RELATIVEOIDIRI_SYMBOL = 57437
const SEQUENCE_SYMBOL = 57438
const SET_SYMBOL = 57439
const SETTINGS_SYMBOL = 57440
const SIZE_SYMBOL = 57441
const STRING_SYMBOL = 57442
const SYNTAX_SYMBOL = 57443
const T61STRING_SYMBOL = 57444
const TAGS_SYMBOL = 57445
const TELETEXSTRING_SYMBOL = 57446
const TIME_SYMBOL = 57447
const TIMEOFDAY_SYMBOL = 57448
const TRUE_SYMBOL = 57449
const TYPEIDENTIFIER_SYMBOL = 57450
const UNION_SYMBOL = 57451
const UNIQUE_SYMBOL = 57452
const UNIVERSAL_SYMBOL = 57453
const UNIVERSALSTRING_SYMBOL = 57454
const UTCTIME_SYMBOL = 57455
const UTF8STRING_SYMBOL = 57456
const VIDEOTEXSTRING_SYMBOL = 57457
const VISIBLESTRING_SYMBOL = 57458
const WITH_SYMBOL = 57459
const ASSIGNMENT_SYMBOL = 57460
const TokenCapitalString = 57461
const TokenString = 57462
const TokenNumber = 57463
const TokenInteger = 57464
const TokenFloat = 57465
const TokenBoolean = 57466
const TokenBString = 57467
const TokenHString = 57468
const TokenCString = 57469

var ASNToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"CURLY_START",
	"CURLY_END",
	"SQUARE_START",
	"SQUARE_END",
	"DOUBLE_QUOTE",
	"SINGLE_QUOTE",
	"COMMA",
	"COLON",
	"MINUS",
	"GREATER_THAN",
	"LESS_THAN",
	"DOT",
	"SLASH",
	"ROUND_START",
	"ROUND_END",
	"EQUALITY",
	"APOSTROPHE",
	"SPACE",
	"PIPE",
	"AT_THE_RATE",
	"EXCLAMATION",
	"CARET",
	"SEMI_COMMA",
	"ABSENT_SYMBOL",
	"ABSTRACTSYNTAX_SYMBOL",
	"ALL_SYMBOL",
	"APPLICATION_SYMBOL",
	"AUTOMATIC_SYMBOL",
	"BEGIN_SYMBOL",
	"BIT_SYMBOL",
	"BMPSTRING_SYMBOL",
	"BOOLEAN_SYMBOL",
	"BY_SYMBOL",
	"CHARACTER_SYMBOL",
	"CHOICE_SYMBOL",
	"CLASS_SYMBOL",
	"COMPONENT_SYMBOL",
	"COMPONENTS_SYMBOL",
	"CONSTRAINED_SYMBOL",
	"CONTAINING_SYMBOL",
	"DATE_SYMBOL",
	"DATETIME_SYMBOL",
	"DEFAULT_SYMBOL",
	"DEFINITIONS_SYMBOL",
	"DURATION_SYMBOL",
	"EMBEDDED_SYMBOL",
	"ENCODED_SYMBOL",
	"ENCODINGCONTROL_SYMBOL",
	"END_SYMBOL",
	"ENUMERATED_SYMBOL",
	"EXCEPT_SYMBOL",
	"EXPLICIT_SYMBOL",
	"EXPORTS_SYMBOL",
	"EXTENSIBILITY_SYMBOL",
	"EXTERNEL_SYMBOL",
	"FALSE_SYMBOL",
	"FROM_SYMBOL",
	"GENERALIZEDTIME_SYMBOL",
	"GENERALSTRING_SYMBOL",
	"GRAPHICSTRING_SYMBOL",
	"IA5STRING_SYMBOL",
	"IDENTIFIER_SYMBOL",
	"IMPLICIT_SYMBOL",
	"IMPLIED_SYMBOL",
	"IMPORTS_SYMBOL",
	"INCLUDES_SYMBOL",
	"INSTANCE_SYMBOL",
	"INSTRUCTIONS_SYMBOL",
	"INTEGER_SYMBOL",
	"INTERSECTION_SYMBOL",
	"ISO646STRING_SYMBOL",
	"MAX_SYMBOL",
	"MIN_SYMBOL",
	"MINUSINFINITY_SYMBOL",
	"NOTANUMBER_SYMBOL",
	"NULL_SYMBOL",
	"NUMERICSTRING_SYMBOL",
	"OBJECT_SYMBOL",
	"OBJECTDESCRIPTOR_SYMBOL",
	"OCTET_SYMBOL",
	"OF_SYMBOL",
	"OIDIRI_SYMBOL",
	"OPTIONAL_SYMBOL",
	"PATTERN_SYMBOL",
	"PDV_SYMBOL",
	"PLUSINFINITY_SYMBOL",
	"PRESENT_SYMBOL",
	"PRINTABLESTRING_SYMBOL",
	"PRIVATE_SYMBOL",
	"REAL_SYMBOL",
	"RELATIVEOID_SYMBOL",
	"RELATIVEOIDIRI_SYMBOL",
	"SEQUENCE_SYMBOL",
	"SET_SYMBOL",
	"SETTINGS_SYMBOL",
	"SIZE_SYMBOL",
	"STRING_SYMBOL",
	"SYNTAX_SYMBOL",
	"T61STRING_SYMBOL",
	"TAGS_SYMBOL",
	"TELETEXSTRING_SYMBOL",
	"TIME_SYMBOL",
	"TIMEOFDAY_SYMBOL",
	"TRUE_SYMBOL",
	"TYPEIDENTIFIER_SYMBOL",
	"UNION_SYMBOL",
	"UNIQUE_SYMBOL",
	"UNIVERSAL_SYMBOL",
	"UNIVERSALSTRING_SYMBOL",
	"UTCTIME_SYMBOL",
	"UTF8STRING_SYMBOL",
	"VIDEOTEXSTRING_SYMBOL",
	"VISIBLESTRING_SYMBOL",
	"WITH_SYMBOL",
	"ASSIGNMENT_SYMBOL",
	"TokenCapitalString",
	"TokenString",
	"TokenNumber",
	"TokenInteger",
	"TokenFloat",
	"TokenBoolean",
	"TokenBString",
	"TokenHString",
	"TokenCString",
}

var ASNStatenames = [...]string{}

const ASNEofCode = 1
const ASNErrCode = 2
const ASNInitialStackSize = 16

//line asn.y:1844

//line yacctab:1
var ASNExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 45,
	52, 28,
	-2, 32,
	-1, 174,
	43, 158,
	-2, 119,
	-1, 197,
	5, 61,
	-2, 201,
	-1, 208,
	5, 61,
	10, 139,
	-2, 201,
	-1, 215,
	4, 196,
	10, 125,
	-2, 62,
	-1, 216,
	4, 197,
	10, 141,
	-2, 63,
}

const ASNPrivate = 57344

const ASNLast = 351

var ASNAct = [...]int{
	201, 217, 199, 203, 190, 204, 189, 219, 218, 200,
	5, 162, 5, 21, 196, 241, 21, 230, 33, 34,
	30, 66, 23, 146, 65, 6, 7, 23, 14, 39,
	38, 175, 37, 40, 60, 29, 51, 50, 70, 23,
	43, 225, 209, 96, 58, 36, 41, 225, 50, 23,
	28, 89, 51, 69, 68, 23, 9, 48, 59, 234,
	63, 63, 49, 45, 79, 79, 93, 63, 92, 52,
	176, 87, 249, 23, 27, 261, 44, 32, 205, 79,
	23, 205, 16, 232, 23, 26, 186, 228, 237, 227,
	42, 46, 235, 238, 23, 140, 79, 236, 31, 63,
	130, 90, 88, 23, 192, 193, 182, 55, 94, 86,
	67, 54, 266, 262, 6, 7, 191, 240, 239, 89,
	269, 263, 131, 91, 128, 94, 95, 12, 207, 6,
	7, 143, 22, 24, 185, 20, 181, 22, 24, 132,
	142, 1, 138, 135, 136, 180, 6, 7, 139, 22,
	24, 177, 173, 174, 187, 62, 6, 7, 197, 22,
	24, 198, 6, 7, 222, 22, 24, 61, 23, 3,
	222, 53, 8, 23, 214, 184, 216, 181, 183, 220,
	224, 221, 223, 22, 24, 215, 180, 6, 7, 259,
	22, 24, 20, 208, 22, 24, 213, 267, 264, 229,
	226, 6, 7, 257, 22, 24, 212, 211, 188, 210,
	6, 7, 231, 22, 24, 233, 179, 178, 243, 172,
	244, 171, 242, 231, 246, 170, 247, 169, 181, 168,
	167, 166, 245, 165, 229, 181, 250, 180, 253, 143,
	258, 260, 142, 224, 180, 223, 254, 255, 142, 164,
	251, 248, 163, 161, 160, 159, 256, 158, 252, 157,
	156, 155, 154, 265, 153, 152, 151, 268, 150, 149,
	148, 206, 145, 144, 141, 6, 7, 127, 22, 24,
	6, 7, 126, 22, 24, 125, 124, 123, 122, 121,
	120, 119, 118, 117, 116, 115, 114, 113, 112, 111,
	109, 110, 108, 107, 106, 105, 104, 103, 102, 101,
	100, 99, 98, 85, 84, 83, 82, 81, 80, 195,
	194, 97, 134, 133, 147, 78, 77, 76, 75, 74,
	73, 72, 71, 202, 137, 129, 64, 57, 56, 47,
	35, 13, 25, 19, 18, 17, 15, 11, 10, 4,
	2,
}

var ASNPact = [...]int{
	-94, -1000, -94, -1000, 9, 123, -1000, -1000, -1000, -91,
	-1000, -1000, 72, 19, -36, 15, -1000, -1000, -1000, -1000,
	60, -1000, -1000, -104, -1000, -12, -71, -73, -74, -1000,
	-1000, -1000, 61, -1000, -1000, 79, -27, -1000, -1000, -1000,
	58, 31, 80, -1000, -1000, -20, 50, -1000, -4, -31,
	-94, -5, -1000, 2, -94, -94, 45, -94, -1000, 41,
	-1000, 119, -1000, -1000, 42, 40, -1000, 109, -1000, -94,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 79,
	-1000, -1000, -1000, -1000, -1000, -1000, -94, -1000, -1000, -94,
	-94, 117, -1000, -1000, -1000, -1000, 79, 79, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	91, -1000, -1000, -1000, -1000, 27, -1000, -1000, -1000, -1000,
	156, -1000, 63, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 37, 27, -1000, -1000, -1000,
	78, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 82, 161, -1000, -1000,
	66, -1000, -1000, -1000, -1000, -94, -1000, 16, 161, -1000,
	87, 83, 108, 107, 10, 66, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 61, -1000, 27, -1000, -1000,
	-1000, 68, 161, -1000, 27, -1000, -94, -1000, 43, 61,
	61, -1000, -1000, -1000, -1000, -1000, 66, -1000, -1000, -1000,
	57, -1000, -1000, -1000, -1000, -1000, -1000, 103, -1000, 116,
	-1000, -1000, 61, -1000, 102, -1000, 61, 115, -1000, -1000,
}

var ASNPgo = [...]int{
	0, 350, 169, 349, 348, 347, 346, 82, 345, 344,
	343, 342, 341, 340, 339, 57, 62, 338, 337, 44,
	336, 58, 34, 335, 334, 11, 14, 2, 333, 3,
	5, 53, 38, 17, 332, 331, 330, 329, 328, 327,
	326, 325, 43, 23, 324, 323, 322, 321, 320, 319,
	318, 317, 316, 315, 314, 313, 312, 311, 310, 309,
	308, 307, 306, 305, 304, 303, 302, 301, 300, 299,
	298, 297, 296, 295, 294, 293, 292, 291, 290, 289,
	288, 287, 286, 285, 282, 277, 274, 273, 272, 271,
	270, 269, 268, 266, 265, 264, 262, 261, 260, 259,
	257, 255, 254, 253, 252, 249, 233, 231, 230, 229,
	227, 225, 221, 219, 217, 216, 209, 1, 208, 6,
	4, 207, 8, 206, 203, 198, 197, 196, 189, 178,
	175, 174, 7, 171, 167, 155, 46, 9, 0, 151,
	141, 128,
}

var ASNR1 = [...]int{
	0, 140, 1, 1, 2, 133, 3, 12, 12, 4,
	4, 5, 6, 6, 7, 7, 7, 8, 9, 10,
	11, 11, 11, 11, 13, 13, 14, 14, 14, 16,
	16, 16, 16, 20, 20, 21, 21, 22, 22, 134,
	135, 135, 15, 15, 17, 17, 18, 18, 19, 23,
	24, 24, 24, 25, 25, 25, 26, 26, 27, 27,
	27, 27, 28, 29, 29, 30, 31, 31, 31, 32,
	32, 32, 32, 32, 32, 32, 32, 34, 35, 36,
	37, 38, 39, 40, 41, 41, 41, 41, 41, 41,
	42, 42, 42, 43, 43, 43, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 93, 93,
	93, 93, 93, 116, 116, 117, 94, 95, 95, 114,
	114, 114, 114, 118, 121, 121, 122, 122, 122, 122,
	119, 123, 124, 125, 126, 120, 127, 128, 115, 96,
	97, 98, 99, 100, 101, 101, 103, 104, 141, 104,
	105, 105, 129, 129, 130, 130, 130, 102, 106, 107,
	131, 131, 132, 132, 132, 108, 109, 110, 111, 112,
	113, 91, 92, 45, 44, 46, 47, 48, 49, 50,
	51, 52, 53, 54, 55, 33, 33, 33, 33, 86,
	87, 88, 89, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	68, 67, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, 80, 81, 82, 83, 84, 85, 139,
	139, 137, 137, 138, 138, 138, 138, 136,
}

var ASNR2 = [...]int{
	0, 1, 1, 2, 10, 0, 2, 2, 0, 1,
	0, 3, 1, 2, 1, 1, 1, 1, 1, 4,
	2, 2, 2, 0, 2, 0, 3, 3, 0, 3,
	3, 2, 0, 1, 0, 1, 3, 1, 1, 1,
	1, 3, 3, 0, 1, 0, 1, 2, 3, 2,
	1, 1, 0, 3, 4, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 4, 1, 2, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 4, 3,
	4, 3, 4, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 2, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	9, 1, 1, 1, 1, 5, 1, 1, 1, 3,
	1, 1, 1, 0, 1, 1, 1, 1, 0, 4,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 3,
	1, 2, 1, 1, 1, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1, 1, 1, 1, 3,
	2, 0, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
	1, 1, 1, 1, 2, 1, 2, 3,
}

var ASNChk = [...]int{
	-1000, -140, -1, -2, -3, -137, 119, 120, -2, 47,
	-4, -5, 4, -12, 119, -6, -7, -8, -9, -10,
	120, -138, 122, 12, 123, -11, 66, 55, 31, 71,
	5, -7, 17, 122, 123, -13, 57, 103, 103, 103,
	-138, -136, 11, 67, 18, 32, 11, -14, -15, -16,
	68, 56, 19, -133, -16, -15, -17, -18, -19, -21,
	-22, -134, -135, -137, -20, 29, 26, -21, 52, -31,
	-32, -34, -35, -36, -37, -38, -39, -40, -41, -137,
	-50, -51, -52, -53, -54, -55, -31, 26, -19, 10,
	60, 4, 26, 26, -32, -136, -42, -47, -56, -57,
	-58, -59, -60, -61, -62, -63, -64, -65, -66, -68,
	-67, -69, -70, -71, -72, -73, -74, -75, -76, -77,
	-78, -79, -80, -81, -82, -83, -84, -85, -22, -23,
	-137, 5, -42, -45, -46, -136, -136, -24, -25, -33,
	4, -86, -137, -138, -87, -88, -43, -44, -90, -91,
	-92, -93, -94, -95, -96, -97, -98, -99, -100, -101,
	-102, -103, -25, -104, -105, -106, -107, -108, -109, -110,
	-111, -112, -113, 125, 126, 4, 43, -139, -114, -115,
	-137, -138, 79, -129, -130, 107, 59, 127, -118, -119,
	-120, 89, 77, 78, -48, -49, -26, -33, 5, -27,
	-137, -138, -28, -29, -30, 15, -89, -141, -33, 5,
	-116, -121, -123, -127, -131, -137, -138, -117, -122, -132,
	-29, -30, 127, -119, -120, 4, -43, 11, 5, -27,
	-33, -26, 17, -137, 43, 5, 10, 5, 10, 10,
	10, 5, -132, -29, -30, -33, -137, -138, -43, 4,
	-29, -33, -43, -117, -137, -122, -33, -124, -138, -128,
	-138, 18, 10, 5, -125, -138, 10, -126, -138, 5,
}

var ASNDef = [...]int{
	0, -2, 1, 2, 0, 10, 261, 262, 3, 8,
	6, 9, 0, 23, 0, 0, 12, 14, 15, 16,
	17, 18, 263, 0, 265, 25, 0, 0, 0, 7,
	11, 13, 0, 264, 266, 0, 0, 20, 21, 22,
	0, 0, 0, 24, 19, -2, 0, 5, 32, 43,
	45, 0, 267, 0, 68, 68, 0, 44, 46, 0,
	35, 37, 38, 39, 0, 0, 31, 33, 4, 26,
	66, 69, 70, 71, 72, 73, 74, 75, 76, 0,
	84, 85, 86, 87, 88, 89, 27, 42, 47, 0,
	0, 0, 29, 30, 67, 183, 0, 0, 90, 91,
	92, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 36, 48,
	52, 41, 77, 79, 81, 153, 187, 49, 50, 51,
	201, 195, 196, 197, 198, 202, 78, 80, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, -2, 201, 153, 126, 127, 128,
	151, 154, 156, 160, 161, 259, 260, 129, 130, 131,
	132, 164, 165, 166, 82, 83, 0, -2, 55, 56,
	62, 63, 58, 59, 60, 0, 200, 0, -2, 55,
	0, 0, 0, 0, 0, -2, -2, 123, 134, 170,
	59, 60, 136, 137, 138, 0, 122, 153, 53, 57,
	61, 0, 201, 199, 153, 120, 0, 133, 201, 0,
	0, 169, 171, 172, 173, 64, 196, 141, 149, 54,
	0, 64, 159, 124, 125, 135, 139, 0, 142, 0,
	147, 65, 0, 145, 0, 143, 0, 0, 144, 140,
}

var ASNTok1 = [...]int{
	1,
}

var ASNTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127,
}

var ASNTok3 = [...]int{
	0,
}

var ASNErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	ASNDebug        = 0
	ASNErrorVerbose = false
)

type ASNLexer interface {
	Lex(lval *ASNSymType) int
	Error(s string)
}

type ASNParser interface {
	Parse(ASNLexer) int
	Lookahead() int
}

type ASNParserImpl struct {
	lval  ASNSymType
	stack [ASNInitialStackSize]ASNSymType
	char  int
}

func (p *ASNParserImpl) Lookahead() int {
	return p.char
}

func ASNNewParser() ASNParser {
	return &ASNParserImpl{}
}

const ASNFlag = -1000

func ASNTokname(c int) string {
	if c >= 1 && c-1 < len(ASNToknames) {
		if ASNToknames[c-1] != "" {
			return ASNToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func ASNStatname(s int) string {
	if s >= 0 && s < len(ASNStatenames) {
		if ASNStatenames[s] != "" {
			return ASNStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func ASNErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !ASNErrorVerbose {
		return "syntax error"
	}

	for _, e := range ASNErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + ASNTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := ASNPact[state]
	for tok := TOKSTART; tok-1 < len(ASNToknames); tok++ {
		if n := base + tok; n >= 0 && n < ASNLast && ASNChk[ASNAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if ASNDef[state] == -2 {
		i := 0
		for ASNExca[i] != -1 || ASNExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; ASNExca[i] >= 0; i += 2 {
			tok := ASNExca[i]
			if tok < TOKSTART || ASNExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if ASNExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += ASNTokname(tok)
	}
	return res
}

func ASNlex1(lex ASNLexer, lval *ASNSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = ASNTok1[0]
		goto out
	}
	if char < len(ASNTok1) {
		token = ASNTok1[char]
		goto out
	}
	if char >= ASNPrivate {
		if char < ASNPrivate+len(ASNTok2) {
			token = ASNTok2[char-ASNPrivate]
			goto out
		}
	}
	for i := 0; i < len(ASNTok3); i += 2 {
		token = ASNTok3[i+0]
		if token == char {
			token = ASNTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = ASNTok2[1] /* unknown char */
	}
	if ASNDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", ASNTokname(token), uint(char))
	}
	return char, token
}

func ASNParse(ASNlex ASNLexer) int {
	return ASNNewParser().Parse(ASNlex)
}

func (ASNrcvr *ASNParserImpl) Parse(ASNlex ASNLexer) int {
	var ASNn int
	var ASNVAL ASNSymType
	var ASNDollar []ASNSymType
	_ = ASNDollar // silence set and not used
	ASNS := ASNrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	ASNstate := 0
	ASNrcvr.char = -1
	ASNtoken := -1 // ASNrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		ASNstate = -1
		ASNrcvr.char = -1
		ASNtoken = -1
	}()
	ASNp := -1
	goto ASNstack

ret0:
	return 0

ret1:
	return 1

ASNstack:
	/* put a state and value onto the stack */
	if ASNDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", ASNTokname(ASNtoken), ASNStatname(ASNstate))
	}

	ASNp++
	if ASNp >= len(ASNS) {
		nyys := make([]ASNSymType, len(ASNS)*2)
		copy(nyys, ASNS)
		ASNS = nyys
	}
	ASNS[ASNp] = ASNVAL
	ASNS[ASNp].yys = ASNstate

ASNnewstate:
	ASNn = ASNPact[ASNstate]
	if ASNn <= ASNFlag {
		goto ASNdefault /* simple state */
	}
	if ASNrcvr.char < 0 {
		ASNrcvr.char, ASNtoken = ASNlex1(ASNlex, &ASNrcvr.lval)
	}
	ASNn += ASNtoken
	if ASNn < 0 || ASNn >= ASNLast {
		goto ASNdefault
	}
	ASNn = ASNAct[ASNn]
	if ASNChk[ASNn] == ASNtoken { /* valid shift */
		ASNrcvr.char = -1
		ASNtoken = -1
		ASNVAL = ASNrcvr.lval
		ASNstate = ASNn
		if Errflag > 0 {
			Errflag--
		}
		goto ASNstack
	}

ASNdefault:
	/* default state action */
	ASNn = ASNDef[ASNstate]
	if ASNn == -2 {
		if ASNrcvr.char < 0 {
			ASNrcvr.char, ASNtoken = ASNlex1(ASNlex, &ASNrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if ASNExca[xi+0] == -1 && ASNExca[xi+1] == ASNstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			ASNn = ASNExca[xi+0]
			if ASNn < 0 || ASNn == ASNtoken {
				break
			}
		}
		ASNn = ASNExca[xi+1]
		if ASNn < 0 {
			goto ret0
		}
	}
	if ASNn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			ASNlex.Error(ASNErrorMessage(ASNstate, ASNtoken))
			Nerrs++
			if ASNDebug >= 1 {
				__yyfmt__.Printf("%s", ASNStatname(ASNstate))
				__yyfmt__.Printf(" saw %s\n", ASNTokname(ASNtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for ASNp >= 0 {
				ASNn = ASNPact[ASNS[ASNp].yys] + ASNErrCode
				if ASNn >= 0 && ASNn < ASNLast {
					ASNstate = ASNAct[ASNn] /* simulate a shift of "error" */
					if ASNChk[ASNstate] == ASNErrCode {
						goto ASNstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if ASNDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", ASNS[ASNp].yys)
				}
				ASNp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if ASNDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", ASNTokname(ASNtoken))
			}
			if ASNtoken == ASNEofCode {
				goto ret1
			}
			ASNrcvr.char = -1
			ASNtoken = -1
			goto ASNnewstate /* try again in the same state */
		}
	}

	/* reduction by production ASNn */
	if ASNDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", ASNn, ASNStatname(ASNstate))
	}

	ASNnt := ASNn
	ASNpt := ASNp
	_ = ASNpt // guard against "declared and not used"

	ASNp -= ASNR2[ASNn]
	// ASNp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if ASNp+1 >= len(ASNS) {
		nyys := make([]ASNSymType, len(ASNS)*2)
		copy(nyys, ASNS)
		ASNS = nyys
	}
	ASNVAL = ASNS[ASNp+1]

	/* consult goto table to find next state */
	ASNn = ASNR1[ASNn]
	ASNg := ASNPgo[ASNn]
	ASNj := ASNg + ASNS[ASNp].yys + 1

	if ASNj >= ASNLast {
		ASNstate = ASNAct[ASNg]
	} else {
		ASNstate = ASNAct[ASNj]
		if ASNChk[ASNstate] != -ASNn {
			ASNstate = ASNAct[ASNg]
		}
	}
	// dummy call; replaced with literal code
	switch ASNnt {

	case 1:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:332
		{
			SetResult(ASNlex, ASNDollar[1].TypeValue)
			Print("Done")
			Print("--------------------------------------------------------------------------------")
			Print(JSON(&ASNDollar[1].TypeValue))
			Print("--------------------------------------------------------------------------------")
		}
	case 2:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:341
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 3:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:346
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 4:
		ASNDollar = ASNS[ASNpt-10 : ASNpt+1]
//line asn.y:376
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"encoding":   ASNDollar[3].TypeValue,
				"tag":        ASNDollar[4].TypeValue,
				"body":       ASNDollar[8].TypeValue,
			}
		}
	case 5:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:392
		{
			ASNVAL.TypeValue = nil
		}
	case 6:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:405
		{
			ASNVAL.TypeValue = MAP{
				"reference":             ASNDollar[1].TypeValue,
				"definitiveIdentifiers": ASNDollar[2].TypeValue,
			}
		}
	case 7:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:419
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 8:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:422
		{
			ASNVAL.TypeValue = ""
		}
	case 9:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:434
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 10:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:437
		{
			ASNVAL.TypeValue = nil
		}
	case 11:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:447
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 12:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:458
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 13:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:463
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 14:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:476
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 15:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:479
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 16:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:482
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 17:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:491
		{
			ASNVAL.TypeValue = MAP{
				"name": ASNDollar[1].TypeString,
			}
		}
	case 18:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:502
		{
			ASNVAL.TypeValue = MAP{
				"number": ASNDollar[1].TypeValue,
			}
		}
	case 19:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:513
		{
			ASNVAL.TypeValue = MAP{
				"name":   ASNDollar[1].TypeString,
				"number": ASNDollar[3].TypeValue,
			}
		}
	case 20:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:529
		{
			ASNVAL.TypeValue = "Implicit"
		}
	case 21:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:532
		{
			ASNVAL.TypeValue = "Explicit"
		}
	case 22:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:535
		{
			ASNVAL.TypeValue = "Automatic"
		}
	case 23:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:538
		{
			ASNVAL.TypeValue = "Explicit"
		}
	case 24:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:549
		{
			ASNVAL.TypeValue = true
		}
	case 25:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:552
		{
			ASNVAL.TypeValue = false
		}
	case 26:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:565
		{
			ASNVAL.TypeValue = MAP{
				"imports":     ASNDollar[1].TypeValue,
				"exports":     ASNDollar[2].TypeValue,
				"assignments": ASNDollar[3].TypeValue,
			}
		}
	case 27:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:574
		{
			ASNVAL.TypeValue = MAP{
				"imports":     ASNDollar[2].TypeValue,
				"exports":     ASNDollar[1].TypeValue,
				"assignments": ASNDollar[3].TypeValue,
			}
		}
	case 28:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:581
		{
			ASNVAL.TypeValue = nil
		}
	case 29:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:593
		{
			ASNVAL.TypeValue = MAP{
				"all":     "false",
				"symbols": ASNDollar[2].TypeValue,
			}
		}
	case 30:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:599
		{
			ASNVAL.TypeValue = MAP{
				"all": "true",
			}
		}
	case 31:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:604
		{
			ASNVAL.TypeValue = MAP{
				"all": "false",
			}
		}
	case 32:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:609
		{
			ASNVAL.TypeValue = MAP{
				"all": "true",
			}
		}
	case 33:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:622
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 34:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:625
		{
			ASNVAL.TypeValue = nil
		}
	case 35:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:636
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 36:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:641
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 37:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:653
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
			}
		}
	case 38:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:658
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedReference": ASNDollar[1].TypeValue,
			}
		}
	case 39:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:677
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 40:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:687
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 41:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:690
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 42:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:701
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 43:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:704
		{
			ASNVAL.TypeValue = nil
		}
	case 44:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:715
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 45:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:718
		{
			ASNVAL.TypeValue = nil
		}
	case 46:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:729
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 47:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:734
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 48:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:745
		{
			ASNVAL.TypeValue = MAP{
				"symbols":   ASNDollar[1].TypeValue,
				"reference": ASNDollar[3].TypeValue,
			}
		}
	case 49:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:758
		{
			ASNVAL.TypeValue = MAP{
				"name":        ASNDollar[1].TypeValue,
				"identifiers": ASNDollar[2].TypeValue,
			}
		}
	case 50:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:773
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 51:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:776
		{
			ASNVAL.TypeValue = nil
		}
	case 52:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:779
		{
			ASNVAL.TypeValue = nil
		}
	case 53:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:790
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 54:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:793
		{
			ASNVAL.TypeValue = ASNDollar[3].TypeValue
		}
	case 55:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:796
		{
			ASNVAL.TypeValue = nil
		}
	case 56:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:807
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 57:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:812
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 58:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:826
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 59:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:829
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 60:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:832
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 61:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:835
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 62:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:845
		{
			ASNVAL.TypeValue = MAP{
				"name": ASNDollar[1].TypeValue,
			}
		}
	case 63:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:858
		{
			ASNVAL.TypeValue = MAP{
				"number": ASNDollar[1].TypeValue,
			}
		}
	case 64:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:863
		{
			ASNVAL.TypeValue = MAP{
				"number": ASNDollar[1].TypeValue,
			}
		}
	case 65:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:875
		{
			ASNVAL.TypeValue = MAP{
				"name":   ASNDollar[1].TypeValue,
				"number": ASNDollar[3].TypeValue,
			}
		}
	case 66:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:889
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 67:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:894
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 68:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:898
		{
			ASNVAL.TypeValue = nil
		}
	case 69:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:915
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 70:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:918
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 71:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:921
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 72:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:924
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 73:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:927
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 74:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:930
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 75:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:933
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 76:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:936
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 77:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:941
		{
			ASNVAL.TypeValue = MAP{
				"assignment": "TYPE",
				"reference":  ASNDollar[1].TypeValue,
				"type":       ASNDollar[2].TypeValue,
			}
		}
	case 78:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:950
		{
			ASNVAL.TypeValue = MAP{
				"assignment": "VALUE",
				"reference":  ASNDollar[1].TypeValue,
				"type":       ASNDollar[2].TypeValue,
				"value":      ASNDollar[4].TypeValue,
			}
		}
	case 79:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:960
		{
			ASNVAL.TypeValue = MAP{
				"assignment": "XML_VALUE",
				"reference":  ASNDollar[1].TypeValue,
				"value":      ASNDollar[3].TypeValue,
			}
		}
	case 80:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:969
		{
			ASNVAL.TypeValue = MAP{
				"assignment": "VALUE_SET",
				"reference":  ASNDollar[1].TypeValue,
				"type":       ASNDollar[2].TypeValue,
				"values":     ASNDollar[4].TypeValue,
			}
		}
	case 81:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:979
		{
			ASNVAL.TypeValue = MAP{
				"assignment": "OBJECT_CLASS",
				"reference":  ASNDollar[1].TypeValue,
				"class":      ASNDollar[3].TypeValue,
			}
		}
	case 82:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:988
		{
			ASNVAL.TypeValue = MAP{
				"assignment": "OBJECT",
				"reference":  ASNDollar[1].TypeValue,
				"class":      ASNDollar[2].TypeValue,
				"value":      ASNDollar[4].TypeValue,
			}
		}
	case 83:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:998
		{
			ASNVAL.TypeValue = MAP{
				"assignment": "OBJECT_SET",
				"reference":  ASNDollar[1].TypeValue,
				"class":      ASNDollar[2].TypeValue,
				"values":     ASNDollar[4].TypeValue,
			}
		}
	case 84:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1008
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 85:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1011
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 86:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1014
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 87:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1017
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 88:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1020
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 89:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1023
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 90:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1028
		{
			ASNVAL.TypeValue = MAP{
				"type":       "BUILTIN_TYPE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 91:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1034
		{
			ASNVAL.TypeValue = MAP{
				"type":       "REFERENCED_TYPE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 92:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1040
		{
			ASNVAL.TypeValue = MAP{
				"type":       "CONSTRAINED_TYPE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 93:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1048
		{
			ASNVAL.TypeValue = MAP{
				"type":       "BUILTIN_VALUE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 94:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1054
		{
			ASNVAL.TypeValue = MAP{
				"type":       "REFERENCED_VALUE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 95:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1060
		{
			ASNVAL.TypeValue = MAP{
				"type":       "OBJECT_CLASS_FIELD_VALUE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 96:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1068
		{
			ASNVAL.TypeValue = MAP{
				"bitString": ASNDollar[1].TypeValue,
			}
		}
	case 97:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1073
		{
			ASNVAL.TypeValue = MAP{
				"boolean": ASNDollar[1].TypeValue,
			}
		}
	case 98:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1078
		{
			ASNVAL.TypeValue = MAP{
				"characterString": ASNDollar[1].TypeValue,
			}
		}
	case 99:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1083
		{
			ASNVAL.TypeValue = MAP{
				"choice": ASNDollar[1].TypeValue,
			}
		}
	case 100:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1088
		{
			ASNVAL.TypeValue = MAP{
				"embeddedPDV": ASNDollar[1].TypeValue,
			}
		}
	case 101:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1093
		{
			ASNVAL.TypeValue = MAP{
				"enumerated": ASNDollar[1].TypeValue,
			}
		}
	case 102:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1098
		{
			ASNVAL.TypeValue = MAP{
				"external": ASNDollar[1].TypeValue,
			}
		}
	case 103:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1103
		{
			ASNVAL.TypeValue = MAP{
				"instanceOf": ASNDollar[1].TypeValue,
			}
		}
	case 104:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1108
		{
			ASNVAL.TypeValue = MAP{
				"integer": ASNDollar[1].TypeValue,
			}
		}
	case 105:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1113
		{
			ASNVAL.TypeValue = MAP{
				"iri": ASNDollar[1].TypeValue,
			}
		}
	case 106:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1118
		{
			ASNVAL.TypeValue = MAP{
				"null": ASNDollar[1].TypeValue,
			}
		}
	case 107:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1123
		{
			ASNVAL.TypeValue = MAP{
				"objectIdentifier": ASNDollar[1].TypeValue,
			}
		}
	case 108:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1128
		{
			ASNVAL.TypeValue = MAP{
				"octetString": ASNDollar[1].TypeValue,
			}
		}
	case 109:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1133
		{
			ASNVAL.TypeValue = MAP{
				"real": ASNDollar[1].TypeValue,
			}
		}
	case 110:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1138
		{
			ASNVAL.TypeValue = MAP{
				"relativeIRI": ASNDollar[1].TypeValue,
			}
		}
	case 111:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1143
		{
			ASNVAL.TypeValue = MAP{
				"relativeOID": ASNDollar[1].TypeValue,
			}
		}
	case 112:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1148
		{
			ASNVAL.TypeValue = MAP{
				"sequence": ASNDollar[1].TypeValue,
			}
		}
	case 113:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1153
		{
			ASNVAL.TypeValue = MAP{
				"sequenceOf": ASNDollar[1].TypeValue,
			}
		}
	case 114:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1158
		{
			ASNVAL.TypeValue = MAP{
				"set": ASNDollar[1].TypeValue,
			}
		}
	case 115:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1163
		{
			ASNVAL.TypeValue = MAP{
				"setOf": ASNDollar[1].TypeValue,
			}
		}
	case 116:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1168
		{
			ASNVAL.TypeValue = MAP{
				"prefixed": ASNDollar[1].TypeValue,
			}
		}
	case 117:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1173
		{
			ASNVAL.TypeValue = MAP{
				"time": ASNDollar[1].TypeValue,
			}
		}
	case 118:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1180
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 119:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1183
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 120:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1186
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 121:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1189
		{
			ASNVAL.TypeValue = nil
		}
	case 122:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1192
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 123:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1197
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 124:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1202
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeToken)
		}
	case 125:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1208
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 126:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1213
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 127:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1218
		{
			ASNVAL.TypeValue = nil
		}
	case 128:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1221
		{

		}
	case 129:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1226
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 130:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1229
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 131:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1232
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 132:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1235
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 133:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1240
		{
			ASNVAL.TypeValue = nil
		}
	case 134:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1245
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 135:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1250
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeToken)
		}
	case 136:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1256
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 137:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1259
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 138:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1262
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 139:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1265
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 140:
		ASNDollar = ASNS[ASNpt-9 : ASNpt+1]
//line asn.y:1270
		{
			ASNVAL.TypeValue = MAP{
				"group": ASNDollar[2].TypeValue,
				"plane": ASNDollar[4].TypeValue,
				"row":   ASNDollar[6].TypeValue,
				"cell":  ASNDollar[8].TypeValue,
			}
		}
	case 141:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1280
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 142:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1285
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 143:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1290
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 144:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1295
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 145:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:1300
		{
			ASNVAL.TypeValue = MAP{
				"tableColumn": ASNDollar[2].TypeValue,
				"tableRow":    ASNDollar[4].TypeValue,
			}
		}
	case 146:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1308
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 147:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1313
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 148:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1318
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 149:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1323
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"value":      ASNDollar[2].TypeToken,
			}
		}
	case 150:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1331
		{
			ASNVAL.TypeValue = nil
		}
	case 151:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1336
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 152:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1341
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 153:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1346
		{
			ASNVAL.TypeValue = nil
		}
	case 154:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1351
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 155:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1354
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 156:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1359
		{
			ASNVAL.TypeValue = "NULL"
		}
	case 157:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1365
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 158:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1368
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 159:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1371
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 160:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1376
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 161:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1379
		{
			ASNVAL.TypeValue = nil
		}
	case 162:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1384
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 163:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1387
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 164:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1392
		{
			ASNVAL.TypeValue = nil
		}
	case 165:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1395
		{
			ASNVAL.TypeValue = nil
		}
	case 166:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1398
		{
			ASNVAL.TypeValue = nil
		}
	case 167:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1403
		{
			ASNVAL.TypeValue = nil
		}
	case 168:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1408
		{
			ASNVAL.TypeValue = nil
		}
	case 169:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1413
		{
			ASNVAL.TypeValue = nil
		}
	case 170:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1418
		{
			ASNVAL.TypeValue = nil
		}
	case 171:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1421
		{
			ASNVAL.TypeValue = nil
		}
	case 172:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1426
		{
			ASNVAL.TypeValue = nil
		}
	case 173:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1429
		{
			ASNVAL.TypeValue = nil
		}
	case 174:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1432
		{
			ASNVAL.TypeValue = nil
		}
	case 175:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1437
		{
			ASNVAL.TypeValue = nil
		}
	case 176:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1442
		{
			ASNVAL.TypeValue = nil
		}
	case 177:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1447
		{
			ASNVAL.TypeValue = nil
		}
	case 178:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1452
		{
			ASNVAL.TypeValue = nil
		}
	case 179:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1457
		{
			ASNVAL.TypeValue = nil
		}
	case 180:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1462
		{
			ASNVAL.TypeValue = nil
		}
	case 181:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1467
		{
			ASNVAL.TypeValue = nil
		}
	case 182:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1472
		{
			ASNVAL.TypeValue = nil
		}
	case 183:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1477
		{
			ASNVAL.TypeValue = nil
		}
	case 184:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1482
		{
			ASNVAL.TypeValue = nil
		}
	case 185:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1487
		{
			ASNVAL.TypeValue = nil
		}
	case 186:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1492
		{
			ASNVAL.TypeValue = nil
		}
	case 187:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1497
		{
			ASNVAL.TypeValue = nil
		}
	case 188:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1502
		{
			ASNVAL.TypeValue = nil
		}
	case 189:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1507
		{
			ASNVAL.TypeValue = nil
		}
	case 190:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1512
		{
			ASNVAL.TypeValue = nil
		}
	case 191:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1517
		{
			ASNVAL.TypeValue = nil
		}
	case 192:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1522
		{
			ASNVAL.TypeValue = nil
		}
	case 193:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1527
		{
			ASNVAL.TypeValue = nil
		}
	case 194:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1532
		{
			ASNVAL.TypeValue = nil
		}
	case 195:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1537
		{
			ASNVAL.TypeValue = MAP{
				"type":  "EXTERNAL_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 196:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1543
		{
			ASNVAL.TypeValue = MAP{
				"type":  "STRING_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 197:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1549
		{
			ASNVAL.TypeValue = MAP{
				"type":  "NUMBER_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 198:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1555
		{
			ASNVAL.TypeValue = MAP{
				"type":  "PARAMETERIZED_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 199:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1563
		{
			ASNVAL.TypeValue = MAP{
				"module": ASNDollar[1].TypeValue,
				"value":  ASNDollar[3].TypeValue,
			}
		}
	case 200:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1571
		{
			ASNVAL.TypeValue = nil
		}
	case 201:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1576
		{
			ASNVAL.TypeValue = nil
		}
	case 202:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1581
		{
			ASNVAL.TypeValue = nil
		}
	case 203:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1586
		{

		}
	case 204:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1589
		{

		}
	case 205:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1592
		{

		}
	case 206:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1595
		{

		}
	case 207:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1598
		{

		}
	case 208:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1601
		{

		}
	case 209:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1604
		{

		}
	case 210:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1607
		{

		}
	case 211:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1610
		{

		}
	case 212:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1613
		{

		}
	case 213:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1616
		{

		}
	case 214:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1619
		{

		}
	case 215:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1622
		{

		}
	case 216:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1625
		{

		}
	case 217:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1628
		{

		}
	case 218:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1631
		{

		}
	case 219:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1634
		{

		}
	case 220:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1637
		{

		}
	case 221:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1640
		{

		}
	case 222:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1643
		{

		}
	case 223:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1646
		{

		}
	case 224:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1649
		{

		}
	case 225:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1652
		{

		}
	case 226:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1655
		{

		}
	case 227:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1658
		{

		}
	case 228:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1661
		{

		}
	case 229:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1664
		{

		}
	case 230:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1669
		{
			ASNVAL.TypeValue = nil
		}
	case 231:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1674
		{
			ASNVAL.TypeValue = nil
		}
	case 232:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1679
		{
			ASNVAL.TypeValue = nil
		}
	case 233:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1684
		{
			ASNVAL.TypeValue = nil
		}
	case 234:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1689
		{
			ASNVAL.TypeValue = nil
		}
	case 235:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1693
		{
			ASNVAL.TypeValue = nil
		}
	case 236:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1698
		{
			ASNVAL.TypeValue = nil
		}
	case 237:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1702
		{
			ASNVAL.TypeValue = nil
		}
	case 238:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1706
		{
			ASNVAL.TypeValue = nil
		}
	case 239:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1711
		{
			ASNVAL.TypeValue = nil
		}
	case 240:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1716
		{
			ASNVAL.TypeValue = nil
		}
	case 241:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1721
		{
			ASNVAL.TypeValue = nil
		}
	case 242:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1726
		{
			ASNVAL.TypeValue = nil
		}
	case 243:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1731
		{
			ASNVAL.TypeValue = nil
		}
	case 244:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1736
		{
			ASNVAL.TypeValue = nil
		}
	case 245:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1741
		{
			ASNVAL.TypeValue = nil
		}
	case 246:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1746
		{
			ASNVAL.TypeValue = nil
		}
	case 247:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1751
		{
			ASNVAL.TypeValue = nil
		}
	case 248:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1756
		{
			ASNVAL.TypeValue = nil
		}
	case 249:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1761
		{
			ASNVAL.TypeValue = nil
		}
	case 250:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1766
		{
			ASNVAL.TypeValue = nil
		}
	case 251:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1771
		{
			ASNVAL.TypeValue = nil
		}
	case 252:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1776
		{
			ASNVAL.TypeValue = nil
		}
	case 253:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1781
		{
			ASNVAL.TypeValue = nil
		}
	case 254:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1786
		{
			ASNVAL.TypeValue = nil
		}
	case 255:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1791
		{
			ASNVAL.TypeValue = nil
		}
	case 256:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1796
		{
			ASNVAL.TypeValue = nil
		}
	case 257:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1801
		{
			ASNVAL.TypeValue = nil
		}
	case 258:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1806
		{
			ASNVAL.TypeValue = nil
		}
	case 259:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1811
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 260:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1814
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 261:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1819
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 262:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1822
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 263:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1827
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeNumber
		}
	case 264:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1830
		{
			ASNVAL.TypeValue = (-1) * ASNDollar[2].TypeNumber
		}
	case 265:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1833
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeNumber
		}
	case 266:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1836
		{
			ASNVAL.TypeValue = (-1) * ASNDollar[2].TypeNumber
		}
	case 267:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1841
		{
			ASNVAL.TypeValue = "::="
		}
	}
	goto ASNstack /* stack new state and value */
}
