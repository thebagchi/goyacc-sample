// Code generated by goyacc -p ASN asn.y. DO NOT EDIT.

//line asn.y:1

package main

import __yyfmt__ "fmt"

//line asn.y:3
import (
	"bytes"
	"encoding/json"
	"fmt"
)

var code bytes.Buffer

func AddLine(line string) {
	code.WriteString(line)
	code.WriteByte('\n')
}

func JSON(obj interface{}) string {
	data, err := json.MarshalIndent(obj, "", "    ")
	if nil != err {
		fmt.Println("Error: ", err)
		return ""
	}
	return string(data)
}

func Print(line string) {
	fmt.Println(line)
}

func Join(values ...string) string {
	var buffer bytes.Buffer
	for _, value := range values {
		buffer.WriteString(value)
	}
	return buffer.String()
}

func SkipBlock() {
	parser.ExpectBlock = true
}

func SetResult(l ASNLexer, v VALUE) {
	l.(*Parser).Result = JSON(&v)
}

type Empty struct{}
type (
	VALUE   interface{}
	STRING  string
	NUMBER  float64
	BOOLEAN bool
	LIST    []VALUE
	MAP     map[string]VALUE
)

//line asn.y:56
type ASNSymType struct {
	yys         int
	TypeToken   struct{}
	TypeString  STRING
	TypeNumber  NUMBER
	TypeValue   VALUE
	TypeBoolean BOOLEAN
	TypeMap     MAP
	TypeList    LIST
}

const CURLY_START = 57346
const CURLY_END = 57347
const SQUARE_START = 57348
const SQUARE_END = 57349
const DOUBLE_QUOTE = 57350
const SINGLE_QUOTE = 57351
const COMMA = 57352
const COLON = 57353
const MINUS = 57354
const GREATER_THAN = 57355
const LESS_THAN = 57356
const DOT = 57357
const SLASH = 57358
const ROUND_START = 57359
const ROUND_END = 57360
const EQUALITY = 57361
const APOSTROPHE = 57362
const SPACE = 57363
const PIPE = 57364
const AT_THE_RATE = 57365
const EXCLAMATION = 57366
const CARET = 57367
const SEMI_COMMA = 57368
const ELLIPSIS = 57369
const ABSENT_SYMBOL = 57370
const ABSTRACTSYNTAX_SYMBOL = 57371
const ALL_SYMBOL = 57372
const APPLICATION_SYMBOL = 57373
const AUTOMATIC_SYMBOL = 57374
const BEGIN_SYMBOL = 57375
const BIT_SYMBOL = 57376
const BMPSTRING_SYMBOL = 57377
const BOOLEAN_SYMBOL = 57378
const BY_SYMBOL = 57379
const CHARACTER_SYMBOL = 57380
const CHOICE_SYMBOL = 57381
const CLASS_SYMBOL = 57382
const COMPONENT_SYMBOL = 57383
const COMPONENTS_SYMBOL = 57384
const CONSTRAINED_SYMBOL = 57385
const CONTAINING_SYMBOL = 57386
const DATE_SYMBOL = 57387
const DATETIME_SYMBOL = 57388
const DEFAULT_SYMBOL = 57389
const DEFINITIONS_SYMBOL = 57390
const DURATION_SYMBOL = 57391
const EMBEDDED_SYMBOL = 57392
const ENCODED_SYMBOL = 57393
const ENCODINGCONTROL_SYMBOL = 57394
const END_SYMBOL = 57395
const ENUMERATED_SYMBOL = 57396
const EXCEPT_SYMBOL = 57397
const EXPLICIT_SYMBOL = 57398
const EXPORTS_SYMBOL = 57399
const EXTENSIBILITY_SYMBOL = 57400
const EXTERNEL_SYMBOL = 57401
const FALSE_SYMBOL = 57402
const FROM_SYMBOL = 57403
const GENERALIZEDTIME_SYMBOL = 57404
const GENERALSTRING_SYMBOL = 57405
const GRAPHICSTRING_SYMBOL = 57406
const IA5STRING_SYMBOL = 57407
const IDENTIFIER_SYMBOL = 57408
const IMPLICIT_SYMBOL = 57409
const IMPLIED_SYMBOL = 57410
const IMPORTS_SYMBOL = 57411
const INCLUDES_SYMBOL = 57412
const INSTANCE_SYMBOL = 57413
const INSTRUCTIONS_SYMBOL = 57414
const INTEGER_SYMBOL = 57415
const INTERSECTION_SYMBOL = 57416
const ISO646STRING_SYMBOL = 57417
const MAX_SYMBOL = 57418
const MIN_SYMBOL = 57419
const MINUSINFINITY_SYMBOL = 57420
const NOTANUMBER_SYMBOL = 57421
const NULL_SYMBOL = 57422
const NUMERICSTRING_SYMBOL = 57423
const OBJECT_SYMBOL = 57424
const OBJECTDESCRIPTOR_SYMBOL = 57425
const OCTET_SYMBOL = 57426
const OF_SYMBOL = 57427
const OIDIRI_SYMBOL = 57428
const OPTIONAL_SYMBOL = 57429
const PATTERN_SYMBOL = 57430
const PDV_SYMBOL = 57431
const PLUSINFINITY_SYMBOL = 57432
const PRESENT_SYMBOL = 57433
const PRINTABLESTRING_SYMBOL = 57434
const PRIVATE_SYMBOL = 57435
const REAL_SYMBOL = 57436
const RELATIVEOID_SYMBOL = 57437
const RELATIVEOIDIRI_SYMBOL = 57438
const SEQUENCE_SYMBOL = 57439
const SET_SYMBOL = 57440
const SETTINGS_SYMBOL = 57441
const SIZE_SYMBOL = 57442
const STRING_SYMBOL = 57443
const SYNTAX_SYMBOL = 57444
const T61STRING_SYMBOL = 57445
const TAGS_SYMBOL = 57446
const TELETEXSTRING_SYMBOL = 57447
const TIME_SYMBOL = 57448
const TIMEOFDAY_SYMBOL = 57449
const TRUE_SYMBOL = 57450
const TYPEIDENTIFIER_SYMBOL = 57451
const UNION_SYMBOL = 57452
const UNIQUE_SYMBOL = 57453
const UNIVERSAL_SYMBOL = 57454
const UNIVERSALSTRING_SYMBOL = 57455
const UTCTIME_SYMBOL = 57456
const UTF8STRING_SYMBOL = 57457
const VIDEOTEXSTRING_SYMBOL = 57458
const VISIBLESTRING_SYMBOL = 57459
const WITH_SYMBOL = 57460
const ASSIGNMENT_SYMBOL = 57461
const TAG_SYMBOL = 57462
const XER_SYMBOL = 57463
const PER_SYMBOL = 57464
const TokenCapitalString = 57465
const TokenString = 57466
const TokenNumber = 57467
const TokenInteger = 57468
const TokenFloat = 57469
const TokenBoolean = 57470
const TokenBString = 57471
const TokenHString = 57472
const TokenCString = 57473
const TokenBlock = 57474

var ASNToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"CURLY_START",
	"CURLY_END",
	"SQUARE_START",
	"SQUARE_END",
	"DOUBLE_QUOTE",
	"SINGLE_QUOTE",
	"COMMA",
	"COLON",
	"MINUS",
	"GREATER_THAN",
	"LESS_THAN",
	"DOT",
	"SLASH",
	"ROUND_START",
	"ROUND_END",
	"EQUALITY",
	"APOSTROPHE",
	"SPACE",
	"PIPE",
	"AT_THE_RATE",
	"EXCLAMATION",
	"CARET",
	"SEMI_COMMA",
	"ELLIPSIS",
	"ABSENT_SYMBOL",
	"ABSTRACTSYNTAX_SYMBOL",
	"ALL_SYMBOL",
	"APPLICATION_SYMBOL",
	"AUTOMATIC_SYMBOL",
	"BEGIN_SYMBOL",
	"BIT_SYMBOL",
	"BMPSTRING_SYMBOL",
	"BOOLEAN_SYMBOL",
	"BY_SYMBOL",
	"CHARACTER_SYMBOL",
	"CHOICE_SYMBOL",
	"CLASS_SYMBOL",
	"COMPONENT_SYMBOL",
	"COMPONENTS_SYMBOL",
	"CONSTRAINED_SYMBOL",
	"CONTAINING_SYMBOL",
	"DATE_SYMBOL",
	"DATETIME_SYMBOL",
	"DEFAULT_SYMBOL",
	"DEFINITIONS_SYMBOL",
	"DURATION_SYMBOL",
	"EMBEDDED_SYMBOL",
	"ENCODED_SYMBOL",
	"ENCODINGCONTROL_SYMBOL",
	"END_SYMBOL",
	"ENUMERATED_SYMBOL",
	"EXCEPT_SYMBOL",
	"EXPLICIT_SYMBOL",
	"EXPORTS_SYMBOL",
	"EXTENSIBILITY_SYMBOL",
	"EXTERNEL_SYMBOL",
	"FALSE_SYMBOL",
	"FROM_SYMBOL",
	"GENERALIZEDTIME_SYMBOL",
	"GENERALSTRING_SYMBOL",
	"GRAPHICSTRING_SYMBOL",
	"IA5STRING_SYMBOL",
	"IDENTIFIER_SYMBOL",
	"IMPLICIT_SYMBOL",
	"IMPLIED_SYMBOL",
	"IMPORTS_SYMBOL",
	"INCLUDES_SYMBOL",
	"INSTANCE_SYMBOL",
	"INSTRUCTIONS_SYMBOL",
	"INTEGER_SYMBOL",
	"INTERSECTION_SYMBOL",
	"ISO646STRING_SYMBOL",
	"MAX_SYMBOL",
	"MIN_SYMBOL",
	"MINUSINFINITY_SYMBOL",
	"NOTANUMBER_SYMBOL",
	"NULL_SYMBOL",
	"NUMERICSTRING_SYMBOL",
	"OBJECT_SYMBOL",
	"OBJECTDESCRIPTOR_SYMBOL",
	"OCTET_SYMBOL",
	"OF_SYMBOL",
	"OIDIRI_SYMBOL",
	"OPTIONAL_SYMBOL",
	"PATTERN_SYMBOL",
	"PDV_SYMBOL",
	"PLUSINFINITY_SYMBOL",
	"PRESENT_SYMBOL",
	"PRINTABLESTRING_SYMBOL",
	"PRIVATE_SYMBOL",
	"REAL_SYMBOL",
	"RELATIVEOID_SYMBOL",
	"RELATIVEOIDIRI_SYMBOL",
	"SEQUENCE_SYMBOL",
	"SET_SYMBOL",
	"SETTINGS_SYMBOL",
	"SIZE_SYMBOL",
	"STRING_SYMBOL",
	"SYNTAX_SYMBOL",
	"T61STRING_SYMBOL",
	"TAGS_SYMBOL",
	"TELETEXSTRING_SYMBOL",
	"TIME_SYMBOL",
	"TIMEOFDAY_SYMBOL",
	"TRUE_SYMBOL",
	"TYPEIDENTIFIER_SYMBOL",
	"UNION_SYMBOL",
	"UNIQUE_SYMBOL",
	"UNIVERSAL_SYMBOL",
	"UNIVERSALSTRING_SYMBOL",
	"UTCTIME_SYMBOL",
	"UTF8STRING_SYMBOL",
	"VIDEOTEXSTRING_SYMBOL",
	"VISIBLESTRING_SYMBOL",
	"WITH_SYMBOL",
	"ASSIGNMENT_SYMBOL",
	"TAG_SYMBOL",
	"XER_SYMBOL",
	"PER_SYMBOL",
	"TokenCapitalString",
	"TokenString",
	"TokenNumber",
	"TokenInteger",
	"TokenFloat",
	"TokenBoolean",
	"TokenBString",
	"TokenHString",
	"TokenCString",
	"TokenBlock",
}

var ASNStatenames = [...]string{}

const ASNEofCode = 1
const ASNErrCode = 2
const ASNInitialStackSize = 16

//line asn.y:4881

//line yacctab:1
var ASNExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 45,
	123, 36,
	124, 36,
	-2, 32,
	-1, 100,
	15, 523,
	-2, 520,
	-1, 165,
	4, 139,
	-2, 132,
	-1, 166,
	4, 140,
	-2, 133,
	-1, 207,
	15, 222,
	-2, 503,
	-1, 234,
	10, 539,
	15, 523,
	-2, 503,
	-1, 311,
	22, 265,
	110, 265,
	-2, 195,
	-1, 313,
	25, 262,
	74, 262,
	-2, 197,
	-1, 317,
	55, 206,
	-2, 201,
	-1, 321,
	15, 222,
	-2, 503,
	-1, 335,
	15, 169,
	-2, 258,
	-1, 337,
	15, 170,
	-2, 260,
	-1, 338,
	14, 226,
	15, 226,
	-2, 219,
	-1, 346,
	4, 140,
	-2, 133,
	-1, 351,
	14, 492,
	15, 492,
	-2, 377,
	-1, 379,
	4, 140,
	-2, 133,
	-1, 385,
	15, 173,
	-2, 136,
	-1, 397,
	15, 523,
	-2, 538,
	-1, 418,
	10, 477,
	-2, 65,
	-1, 425,
	10, 461,
	-2, 66,
	-1, 426,
	10, 479,
	-2, 67,
	-1, 438,
	15, 523,
	-2, 538,
	-1, 444,
	10, 461,
	-2, 66,
	-1, 446,
	15, 222,
	-2, 503,
	-1, 447,
	15, 222,
	-2, 503,
	-1, 450,
	15, 222,
	-2, 503,
	-1, 491,
	15, 523,
	-2, 503,
	-1, 492,
	10, 461,
	-2, 66,
	-1, 493,
	10, 479,
	-2, 67,
	-1, 494,
	10, 474,
	-2, 467,
	-1, 495,
	10, 475,
	-2, 469,
	-1, 496,
	10, 476,
	-2, 470,
	-1, 526,
	4, 140,
	11, 133,
	17, 133,
	-2, 533,
	-1, 528,
	11, 523,
	15, 523,
	-2, 275,
	-1, 534,
	25, 262,
	74, 262,
	-2, 198,
	-1, 572,
	15, 222,
	-2, 503,
	-1, 576,
	15, 169,
	-2, 278,
	-1, 577,
	11, 281,
	-2, 279,
	-1, 578,
	11, 282,
	-2, 280,
	-1, 581,
	5, 177,
	-2, 536,
	-1, 602,
	4, 136,
	5, 136,
	11, 136,
	15, 173,
	17, 136,
	-2, 536,
	-1, 731,
	10, 406,
	-2, 352,
}

const ASNPrivate = 57344

const ASNLast = 1912

var ASNAct = [...]int{
	166, 5, 703, 5, 701, 704, 718, 710, 661, 702,
	722, 700, 338, 671, 361, 654, 623, 620, 639, 614,
	705, 366, 334, 465, 187, 206, 574, 410, 308, 583,
	427, 291, 437, 237, 367, 389, 290, 356, 313, 445,
	369, 354, 414, 415, 315, 393, 193, 428, 342, 317,
	407, 65, 65, 396, 23, 236, 23, 83, 83, 264,
	65, 434, 419, 326, 33, 34, 706, 204, 185, 23,
	277, 6, 7, 238, 83, 68, 72, 14, 23, 67,
	584, 725, 434, 617, 39, 38, 37, 230, 217, 210,
	23, 83, 689, 555, 65, 199, 401, 554, 30, 448,
	688, 553, 212, 715, 694, 23, 599, 382, 381, 62,
	278, 375, 374, 214, 714, 451, 51, 706, 29, 50,
	74, 626, 43, 556, 216, 51, 280, 284, 50, 672,
	36, 60, 101, 9, 55, 665, 446, 546, 55, 70,
	21, 642, 586, 21, 293, 294, 285, 6, 7, 201,
	458, 102, 706, 23, 713, 640, 292, 73, 402, 71,
	40, 579, 442, 695, 452, 6, 7, 693, 22, 24,
	22, 24, 6, 7, 279, 513, 440, 400, 192, 45,
	6, 7, 23, 22, 24, 218, 223, 449, 431, 6,
	7, 92, 22, 24, 99, 275, 276, 288, 6, 7,
	244, 6, 7, 197, 22, 24, 283, 53, 346, 431,
	357, 99, 363, 277, 368, 90, 373, 20, 248, 22,
	24, 23, 379, 219, 224, 6, 7, 225, 385, 61,
	357, 352, 362, 6, 7, 346, 231, 232, 6, 7,
	207, 561, 378, 411, 93, 233, 235, 392, 380, 23,
	207, 249, 49, 278, 337, 48, 372, 395, 242, 240,
	220, 309, 353, 6, 7, 20, 23, 22, 24, 280,
	377, 387, 731, 207, 546, 384, 347, 386, 425, 283,
	28, 69, 370, 391, 529, 586, 643, 293, 294, 285,
	390, 435, 548, 6, 7, 94, 22, 24, 527, 292,
	97, 56, 394, 417, 27, 57, 96, 346, 226, 433,
	91, 444, 438, 615, 432, 26, 52, 279, 619, 435,
	429, 430, 346, 222, 618, 401, 603, 245, 596, 595,
	536, 503, 6, 7, 521, 22, 24, 571, 275, 276,
	288, 221, 433, 207, 207, 283, 460, 432, 44, 416,
	454, 505, 544, 429, 430, 441, 222, 459, 453, 466,
	6, 7, 474, 22, 24, 32, 42, 457, 337, 532,
	412, 505, 207, 228, 559, 379, 379, 6, 7, 41,
	22, 24, 379, 379, 228, 227, 335, 402, 455, 436,
	347, 16, 228, 227, 653, 478, 480, 42, 492, 244,
	655, 209, 483, 485, 209, 426, 400, 31, 411, 411,
	392, 537, 470, 488, 403, 404, 405, 506, 463, 411,
	395, 461, 456, 477, 479, 518, 416, 229, 470, 496,
	482, 484, 462, 742, 495, 502, 712, 283, 426, 526,
	429, 430, 687, 283, 676, 469, 391, 346, 346, 520,
	611, 346, 436, 390, 436, 530, 637, 228, 559, 504,
	505, 638, 357, 100, 357, 394, 609, 515, 516, 504,
	363, 610, 514, 406, 368, 244, 46, 373, 545, 42,
	542, 205, 208, 509, 539, 543, 534, 525, 510, 443,
	547, 739, 346, 337, 337, 535, 533, 337, 720, 732,
	335, 541, 507, 540, 392, 411, 244, 508, 549, 564,
	730, 244, 711, 475, 395, 347, 347, 552, 476, 347,
	712, 709, 683, 557, 682, 493, 498, 558, 473, 651,
	621, 241, 502, 581, 644, 412, 412, 627, 283, 604,
	391, 565, 433, 592, 466, 244, 412, 432, 562, 572,
	585, 512, 412, 511, 491, 472, 469, 468, 439, 394,
	602, 93, 519, 743, 696, 560, 523, 588, 501, 500,
	733, 489, 283, 346, 408, 23, 645, 577, 716, 593,
	283, 594, 708, 409, 606, 283, 699, 681, 680, 664,
	23, 663, 612, 363, 605, 601, 578, 585, 531, 490,
	363, 608, 550, 471, 467, 600, 383, 628, 629, 418,
	376, 200, 283, 625, 616, 698, 641, 697, 659, 337,
	630, 234, 598, 597, 635, 335, 335, 580, 368, 335,
	528, 358, 412, 412, 636, 215, 213, 634, 245, 568,
	570, 347, 418, 211, 95, 363, 648, 649, 12, 647,
	3, 631, 388, 8, 668, 641, 650, 487, 652, 577,
	674, 660, 363, 678, 486, 625, 677, 481, 587, 1,
	399, 670, 589, 669, 188, 497, 675, 398, 578, 162,
	161, 724, 362, 674, 674, 721, 6, 7, 371, 22,
	24, 646, 365, 364, 624, 622, 690, 691, 363, 363,
	686, 6, 7, 591, 22, 24, 360, 576, 359, 142,
	707, 141, 363, 363, 679, 283, 464, 723, 726, 717,
	522, 613, 305, 304, 575, 729, 573, 727, 719, 418,
	499, 363, 633, 363, 301, 736, 735, 300, 723, 363,
	363, 740, 738, 737, 741, 299, 336, 734, 692, 685,
	684, 335, 673, 658, 657, 656, 517, 538, 582, 349,
	340, 339, 333, 332, 728, 331, 330, 329, 328, 327,
	524, 325, 324, 662, 323, 322, 320, 319, 318, 667,
	450, 316, 447, 314, 311, 607, 302, 298, 297, 576,
	296, 295, 138, 355, 196, 195, 191, 190, 98, 54,
	189, 168, 167, 165, 137, 136, 551, 135, 134, 133,
	64, 63, 424, 310, 287, 194, 286, 569, 423, 666,
	632, 23, 567, 422, 421, 289, 321, 420, 282, 281,
	274, 273, 272, 271, 270, 269, 268, 563, 267, 312,
	266, 265, 566, 139, 180, 140, 263, 186, 143, 262,
	261, 260, 303, 306, 144, 145, 259, 258, 146, 147,
	307, 662, 257, 148, 256, 255, 254, 253, 149, 280,
	341, 182, 176, 170, 181, 252, 590, 251, 250, 348,
	150, 247, 151, 246, 174, 243, 350, 293, 294, 351,
	171, 154, 184, 155, 132, 152, 131, 344, 130, 292,
	129, 173, 128, 156, 158, 157, 159, 160, 345, 222,
	127, 126, 177, 125, 175, 163, 164, 279, 124, 123,
	122, 121, 178, 183, 169, 179, 172, 343, 120, 277,
	119, 194, 6, 7, 118, 22, 24, 23, 275, 276,
	288, 117, 321, 116, 114, 115, 113, 112, 111, 110,
	109, 108, 107, 106, 105, 312, 104, 103, 89, 139,
	180, 140, 88, 186, 143, 87, 86, 85, 84, 278,
	144, 145, 203, 202, 146, 147, 82, 81, 80, 148,
	79, 78, 77, 76, 149, 280, 341, 182, 176, 170,
	181, 75, 413, 239, 198, 348, 150, 66, 151, 59,
	174, 58, 350, 293, 294, 351, 171, 154, 184, 155,
	47, 152, 35, 344, 13, 292, 25, 173, 19, 156,
	158, 157, 159, 160, 345, 222, 18, 17, 177, 15,
	175, 163, 164, 279, 11, 10, 4, 2, 178, 183,
	169, 179, 172, 343, 0, 277, 0, 194, 6, 7,
	0, 22, 24, 23, 275, 276, 288, 0, 321, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 180, 140, 0, 186,
	143, 0, 0, 0, 0, 278, 144, 145, 0, 0,
	146, 147, 0, 0, 0, 148, 0, 0, 0, 0,
	149, 280, 341, 182, 176, 170, 181, 0, 0, 0,
	0, 348, 150, 0, 151, 0, 174, 0, 350, 293,
	294, 351, 171, 154, 184, 155, 0, 152, 0, 344,
	0, 292, 0, 173, 0, 156, 158, 157, 159, 160,
	345, 222, 0, 0, 177, 0, 175, 163, 164, 279,
	0, 0, 0, 0, 178, 183, 169, 179, 172, 343,
	0, 397, 419, 194, 6, 7, 0, 22, 24, 23,
	275, 276, 288, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 180, 140, 0, 186, 143, 0, 0, 0,
	0, 278, 144, 145, 0, 0, 146, 147, 0, 0,
	0, 148, 0, 0, 0, 0, 149, 280, 0, 182,
	176, 170, 181, 0, 0, 0, 0, 0, 150, 0,
	151, 0, 174, 0, 0, 293, 294, 351, 171, 154,
	184, 155, 0, 152, 0, 0, 0, 292, 0, 173,
	0, 156, 158, 157, 159, 160, 0, 0, 0, 277,
	177, 194, 175, 163, 164, 279, 0, 23, 0, 0,
	178, 183, 169, 179, 172, 0, 0, 0, 0, 0,
	6, 7, 0, 22, 24, 0, 275, 276, 494, 139,
	180, 140, 0, 186, 143, 0, 0, 0, 0, 278,
	144, 145, 0, 0, 146, 147, 0, 0, 0, 148,
	0, 0, 0, 0, 149, 280, 0, 182, 176, 170,
	181, 0, 0, 0, 0, 0, 150, 0, 151, 0,
	174, 0, 0, 293, 294, 351, 171, 154, 184, 155,
	0, 152, 0, 0, 0, 292, 0, 173, 0, 156,
	158, 157, 159, 160, 0, 0, 0, 397, 177, 194,
	175, 163, 164, 279, 0, 23, 0, 0, 178, 183,
	169, 179, 172, 0, 0, 0, 0, 0, 6, 7,
	0, 22, 24, 0, 275, 276, 288, 139, 180, 140,
	0, 186, 143, 0, 0, 0, 0, 278, 144, 145,
	0, 0, 146, 147, 0, 0, 0, 148, 0, 0,
	0, 0, 149, 280, 0, 182, 176, 170, 181, 0,
	0, 0, 0, 0, 150, 0, 151, 0, 174, 0,
	0, 293, 294, 351, 171, 154, 184, 155, 0, 152,
	0, 0, 0, 292, 0, 173, 0, 156, 158, 157,
	159, 160, 0, 0, 0, 0, 177, 194, 175, 163,
	164, 279, 0, 23, 0, 0, 178, 183, 169, 179,
	172, 0, 0, 0, 0, 0, 6, 7, 0, 22,
	24, 0, 275, 276, 288, 139, 180, 140, 0, 186,
	143, 0, 0, 0, 0, 0, 144, 145, 0, 0,
	146, 147, 0, 0, 0, 148, 0, 0, 0, 0,
	149, 0, 0, 182, 176, 170, 181, 0, 0, 0,
	0, 0, 150, 0, 151, 0, 174, 0, 0, 0,
	0, 153, 171, 154, 184, 155, 0, 152, 0, 0,
	0, 0, 0, 173, 0, 156, 158, 157, 159, 160,
	0, 194, 0, 0, 177, 0, 175, 163, 164, 228,
	227, 0, 0, 0, 178, 183, 169, 179, 172, 0,
	0, 0, 0, 0, 6, 7, 0, 22, 24, 139,
	180, 140, 0, 186, 143, 0, 0, 0, 0, 0,
	144, 145, 0, 0, 146, 147, 0, 0, 0, 148,
	0, 0, 0, 0, 149, 0, 0, 182, 176, 170,
	181, 0, 0, 0, 0, 0, 150, 0, 151, 0,
	174, 0, 0, 0, 0, 153, 171, 154, 184, 155,
	0, 152, 0, 0, 0, 0, 0, 173, 0, 156,
	158, 157, 159, 160, 194, 0, 0, 0, 177, 42,
	175, 163, 164, 0, 0, 0, 0, 0, 178, 183,
	169, 179, 172, 0, 0, 0, 0, 0, 6, 7,
	0, 0, 139, 180, 140, 0, 186, 143, 0, 0,
	0, 0, 0, 144, 145, 0, 0, 146, 147, 0,
	0, 0, 148, 0, 0, 0, 0, 149, 0, 0,
	182, 176, 170, 181, 0, 0, 0, 0, 0, 150,
	0, 151, 0, 174, 0, 0, 0, 0, 153, 171,
	154, 184, 155, 0, 152, 0, 0, 0, 0, 0,
	173, 0, 156, 158, 157, 159, 160, 194, 0, 0,
	0, 177, 0, 175, 163, 164, 0, 0, 0, 0,
	0, 178, 183, 169, 179, 172, 0, 0, 0, 0,
	0, 6, 7, 0, 0, 139, 180, 140, 0, 186,
	143, 0, 0, 0, 0, 0, 144, 145, 0, 0,
	146, 147, 0, 0, 277, 148, 0, 0, 0, 0,
	149, 0, 23, 182, 176, 170, 181, 0, 0, 0,
	0, 0, 150, 0, 151, 0, 174, 0, 0, 0,
	0, 153, 171, 154, 184, 155, 0, 152, 0, 0,
	0, 0, 0, 173, 278, 156, 158, 157, 159, 160,
	0, 0, 0, 0, 177, 0, 175, 163, 164, 0,
	280, 0, 0, 0, 178, 183, 169, 179, 172, 0,
	0, 0, 0, 0, 6, 7, 0, 0, 293, 294,
	285, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	292, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 279, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 6, 7, 0, 22, 24, 0, 275,
	276, 288,
}

var ASNPact = [...]int{
	-52, -1000, -52, -1000, 85, 644, -1000, -1000, -1000, -46,
	-1000, -1000, 141, 248, 46, 93, -1000, -1000, -1000, -1000,
	348, -1000, -1000, -62, -1000, 72, -18, -19, -20, -1000,
	-1000, -1000, 44, -1000, -1000, 468, 54, -1000, -1000, -1000,
	330, 146, 465, -1000, -1000, 59, 297, 82, 68, 50,
	-52, 49, -1000, 86, -1000, -47, -52, -52, 284, -52,
	-1000, 234, -1000, 640, -1000, -1000, 280, 274, -1000, 551,
	-1000, 82, -1000, -52, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1638, -1000, -1000, -1000, -1000, -1000, -1000,
	-52, -1000, -1000, -52, -52, 606, -1000, -1000, -1000, -1000,
	1731, 355, 386, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -12,
	-1000, -1000, -1000, 639, -1000, -1000, -1000, 13, 632, -1000,
	28, 631, -1000, -1000, 58, -13, -1000, -1000, -1000, 256,
	223, -1000, -1000, -1000, -1000, -1000, 370, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 412, -14, 1731, 1731, 617,
	617, -1000, 617, -1000, -50, -1000, -1000, -1000, -1000, 254,
	-1000, 327, -1000, -1000, 389, 1780, -1000, 809, -1000, -52,
	627, -52, -1000, -52, -1000, -52, -1000, -1000, 27, 26,
	605, 1731, 327, 23, 22, 601, 1731, -52, 1731, -52,
	-1000, 327, 327, -1000, 1353, -1000, -1000, 294, 462, -1000,
	-1000, -1000, 578, -1000, 411, -1000, -1000, 617, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 57, 1780, -1000,
	-1000, -1000, -1000, 441, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 288, -1000, -1000, -1000, -1000,
	-1000, -1000, 548, 139, -1000, -1000, 1255, 125, -1000, -1000,
	57, -1000, 81, -1000, 77, -1000, 90, -1000, 81, -1000,
	-1000, 925, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 617, -1000, -1000, -1000, 1731,
	407, 327, 327, 108, 1780, -52, 378, 406, -1000, 418,
	-1000, -1000, -1000, -1000, -1000, 403, -1000, -1000, -52, 599,
	547, 546, -1000, 1731, 598, 545, 518, -1000, 345, -1000,
	-1000, 508, -1000, 345, 1731, 1731, -1000, 327, -1000, 1545,
	-1000, 1731, 1731, -1000, 327, -1000, 327, -1000, 565, 594,
	544, 327, -1000, -1000, 389, -1000, -1000, 1157, 42, 562,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 563, 42, -1000,
	-1000, 334, -1000, -1000, -1000, -1000, -52, -1000, 42, -1000,
	497, 478, 543, 541, 170, 334, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 44, -1000, 1780, 316, 1451, 271,
	626, 233, 1780, 593, 354, -1000, 1041, 1041, -1000, -1000,
	1041, -1000, -1000, -1000, 312, 327, 396, -1000, 327, -1000,
	-1000, -52, -1000, -52, 475, -1000, 335, -1000, 247, -52,
	327, -1000, 265, -52, 42, -1000, -52, 327, -1000, 327,
	-1000, 4, 327, -1000, 327, -1000, -1, -5, 56, -50,
	-1000, 1255, 443, -1000, -1000, -1000, -1000, 558, -1000, -1000,
	-1000, -1000, -1000, -1000, 237, 42, -1000, -1000, -52, -1000,
	78, 44, 44, -1000, -1000, -1000, -1000, -1000, 334, -1000,
	-1000, -1000, -1000, -1000, -1000, 326, 359, 539, 1731, 124,
	-1000, 623, -52, -1000, -1000, -1000, -1000, 66, -1000, -1000,
	-1000, -1000, -1000, -52, 42, 533, 288, -1000, 288, -1000,
	311, 310, -1000, 619, 618, 21, 1731, 65, 590, -52,
	-1000, -1000, 308, -1000, -1000, -1000, -1000, 529, -1000, 589,
	-1000, 1780, 925, 461, -1000, 439, 617, 327, 389, 1780,
	290, -1000, -1000, -1000, 209, -1000, -1000, -35, -1000, 306,
	300, 520, 115, -1000, 527, -1000, -1000, 247, 247, -52,
	327, -1000, -1000, -1000, 44, -1000, -1000, -1000, -1000, -1000,
	1731, 1780, -1000, 451, -1000, 140, -1000, 99, -1000, -1000,
	-1000, 259, 524, -1000, -1000, -1000, 570, -52, 520, 520,
	-1000, 565, 519, -1000, -1000, -1000, -1000, -1000, 290, 379,
	385, -1000, 614, -1000, 115, 44, -1000, 518, 586, 584,
	79, 44, -1000, -52, -52, 385, -1000, -1000, -1000, 102,
	-1000, -52, 433, -1000, -1000, 1731, 583, -1000, -1000, 379,
	-1000, 582, 514, 512, 327, 435, -1000, 3, -6, 327,
	-1000, -1000, -52, -52, -1000, 76, -1000, 557, 613, 611,
	581, -1000, -1000, -1000, -1000, -1000, -1000, 110, 110, -1000,
	577, 511, 502, 510, -1000, 67, 18, 573, -1000, 247,
	488, 75, 24, -1000, 1780, 1731, -1000, 502, 500, -1000,
	245, 489, -1000, -1000, -1000, 564, -1000, -1000, 327, 488,
	24, -1000, 75, 44, -1000, 481, -1000, -1000, 24, 24,
	426, -1000, 556, -1000,
}

var ASNPgo = [...]int{
	0, 1037, 650, 1036, 1035, 1034, 1029, 391, 1027, 1026,
	1018, 1016, 1014, 1012, 1010, 255, 252, 1001, 999, 131,
	997, 229, 109, 994, 993, 59, 50, 27, 992, 42,
	43, 157, 120, 331, 991, 983, 982, 981, 980, 978,
	977, 976, 48, 12, 45, 973, 972, 67, 22, 53,
	968, 967, 966, 965, 962, 958, 957, 956, 954, 953,
	952, 951, 950, 949, 948, 947, 946, 945, 944, 943,
	941, 934, 930, 928, 921, 920, 919, 918, 913, 911,
	910, 902, 900, 898, 896, 894, 885, 883, 881, 55,
	878, 877, 875, 867, 866, 865, 864, 862, 857, 856,
	851, 850, 849, 846, 841, 840, 838, 836, 835, 834,
	833, 832, 831, 830, 829, 828, 827, 825, 36, 31,
	824, 30, 823, 822, 820, 819, 818, 817, 816, 814,
	812, 47, 159, 811, 810, 809, 808, 807, 805, 804,
	803, 802, 801, 800, 68, 41, 35, 799, 798, 797,
	796, 178, 46, 795, 794, 793, 37, 25, 792, 791,
	32, 790, 788, 787, 786, 785, 28, 784, 39, 38,
	783, 782, 44, 781, 780, 49, 778, 777, 776, 775,
	774, 772, 771, 63, 769, 768, 767, 766, 765, 763,
	762, 761, 760, 759, 758, 29, 757, 755, 754, 753,
	13, 752, 750, 749, 748, 746, 745, 737, 734, 726,
	26, 724, 723, 722, 721, 19, 18, 15, 720, 20,
	716, 23, 711, 709, 708, 706, 9, 703, 17, 14,
	695, 16, 694, 693, 8, 692, 691, 21, 34, 40,
	688, 11, 4, 7, 6, 2, 5, 685, 10, 681,
	680, 679, 24, 33, 677, 675, 674, 670, 379, 0,
	127, 670, 669, 668, 667, 666, 664, 663, 657, 652,
	651, 651,
}

var ASNR1 = [...]int{
	0, 262, 1, 1, 2, 132, 132, 132, 147, 148,
	3, 12, 12, 4, 4, 5, 6, 6, 7, 7,
	7, 8, 9, 10, 11, 11, 11, 11, 13, 13,
	14, 14, 14, 16, 16, 16, 16, 20, 20, 21,
	21, 22, 22, 133, 134, 134, 15, 15, 17, 17,
	18, 18, 19, 23, 24, 24, 24, 25, 25, 25,
	26, 26, 27, 27, 27, 27, 28, 29, 29, 30,
	31, 31, 31, 32, 32, 32, 32, 32, 32, 32,
	32, 34, 35, 36, 37, 38, 39, 40, 41, 41,
	41, 41, 41, 41, 42, 42, 42, 43, 43, 43,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 57, 57, 57,
	57, 57, 135, 135, 135, 135, 140, 141, 142, 143,
	143, 89, 89, 146, 146, 146, 146, 146, 146, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 137, 138, 144, 144, 144,
	144, 149, 149, 153, 150, 151, 151, 154, 152, 145,
	155, 155, 156, 139, 58, 58, 157, 159, 159, 161,
	163, 163, 163, 164, 165, 166, 166, 167, 167, 169,
	169, 172, 172, 175, 175, 175, 176, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 179,
	180, 191, 191, 181, 192, 192, 193, 193, 194, 194,
	195, 195, 182, 183, 184, 263, 185, 196, 197, 197,
	198, 200, 200, 201, 202, 203, 203, 204, 204, 204,
	204, 199, 186, 187, 188, 189, 190, 178, 178, 178,
	178, 205, 173, 174, 174, 170, 171, 171, 168, 162,
	162, 162, 206, 209, 209, 209, 210, 210, 210, 210,
	210, 211, 211, 207, 207, 212, 213, 214, 214, 215,
	215, 216, 216, 217, 217, 208, 208, 208, 160, 160,
	218, 218, 218, 158, 158, 158, 158, 158, 158, 158,
	158, 219, 59, 59, 220, 220, 221, 221, 60, 61,
	61, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 223, 62, 224, 224, 225, 229,
	229, 226, 226, 227, 227, 230, 230, 231, 231, 232,
	234, 234, 228, 228, 63, 64, 65, 66, 68, 233,
	233, 233, 235, 236, 237, 237, 238, 238, 239, 239,
	67, 69, 70, 70, 240, 240, 71, 72, 73, 74,
	75, 76, 77, 78, 264, 265, 79, 241, 241, 241,
	241, 241, 242, 245, 245, 246, 246, 246, 246, 243,
	243, 247, 247, 248, 248, 249, 244, 80, 80, 266,
	267, 81, 268, 82, 84, 85, 83, 83, 269, 270,
	250, 252, 253, 254, 254, 254, 254, 255, 255, 251,
	256, 257, 257, 257, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 93, 93, 93, 93,
	93, 116, 116, 94, 94, 95, 95, 114, 114, 114,
	114, 117, 120, 120, 121, 121, 121, 121, 118, 122,
	123, 124, 125, 119, 126, 127, 115, 96, 97, 98,
	99, 101, 103, 104, 104, 104, 105, 105, 128, 128,
	129, 129, 129, 100, 102, 106, 107, 130, 130, 131,
	131, 131, 108, 109, 110, 111, 112, 113, 91, 92,
	45, 44, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 33, 33, 33, 33, 86, 87, 88, 89,
	259, 259, 260, 260, 260, 260, 258, 271, 261,
}

var ASNR2 = [...]int{
	0, 1, 1, 2, 10, 1, 2, 0, 3, 0,
	2, 2, 0, 1, 0, 3, 1, 2, 1, 1,
	1, 1, 1, 4, 2, 2, 2, 0, 2, 0,
	3, 3, 0, 3, 3, 2, 0, 1, 0, 1,
	3, 1, 1, 1, 1, 3, 3, 0, 1, 0,
	1, 2, 3, 2, 1, 1, 0, 3, 4, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 4,
	1, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 4, 3, 4, 3, 4, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 2, 1,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 3, 2, 1, 1, 3, 2, 1,
	1, 3, 1, 3, 2, 1, 4, 1, 1, 1,
	1, 3, 5, 1, 1, 1, 2, 1, 3, 1,
	3, 1, 2, 1, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 0, 4, 1, 2, 1, 1, 1, 2,
	1, 1, 2, 2, 1, 0, 7, 1, 1, 1,
	3, 1, 3, 2, 2, 1, 0, 1, 1, 1,
	0, 5, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 2, 1,
	1, 1, 5, 1, 3, 0, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 6, 1, 3, 2,
	4, 1, 3, 2, 0, 2, 3, 5, 2, 0,
	1, 1, 3, 4, 4, 4, 4, 4, 4, 4,
	4, 2, 2, 5, 1, 3, 4, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 4, 1, 5, 1, 1,
	3, 1, 2, 2, 0, 1, 3, 1, 1, 6,
	2, 0, 2, 0, 1, 1, 1, 2, 4, 1,
	4, 6, 1, 1, 1, 3, 1, 1, 4, 4,
	1, 3, 1, 4, 1, 3, 1, 1, 3, 2,
	2, 1, 1, 1, 0, 0, 14, 1, 5, 7,
	5, 3, 1, 1, 3, 1, 2, 3, 3, 2,
	0, 1, 3, 1, 1, 6, 2, 3, 3, 0,
	0, 14, 0, 7, 1, 1, 1, 1, 0, 0,
	10, 5, 2, 1, 1, 1, 0, 1, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	2, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 9, 1,
	1, 1, 1, 5, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 0, 0, 0, 3, 1, 2, 1,
	1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1, 1, 1, 1, 3, 2, 0, 0,
	1, 1, 1, 2, 1, 2, 3, 0, 2,
}

var ASNChk = [...]int{
	-1000, -262, -1, -2, -3, -259, 123, 124, -2, 48,
	-4, -5, 4, -12, 123, -6, -7, -8, -9, -10,
	124, -260, 126, 12, 127, -11, 67, 56, 32, 72,
	5, -7, 17, 126, 127, -13, 58, 104, 104, 104,
	-260, -258, 11, 68, 18, 33, 11, -14, -15, -16,
	69, 57, 19, -132, -147, 52, -16, -15, -17, -18,
	-19, -21, -22, -133, -134, -259, -20, 30, 26, -21,
	53, -132, 123, -31, -32, -34, -35, -36, -37, -38,
	-39, -40, -41, -259, -50, -51, -52, -53, -54, -55,
	-31, 26, -19, 10, 61, 4, 26, 26, -148, -32,
	-258, -42, -47, -56, -57, -58, -59, -60, -61, -62,
	-63, -64, -65, -66, -68, -67, -69, -70, -71, -72,
	-73, -74, -75, -76, -77, -78, -79, -80, -81, -82,
	-83, -84, -85, -135, -136, -137, -138, -139, -158, 34,
	36, -222, -223, 39, 45, 46, 49, 50, 54, 59,
	71, 73, 86, 80, 82, 84, 94, 96, 95, 97,
	98, -250, -251, 106, 107, -140, -259, -141, -142, 115,
	64, 81, 117, 92, 75, 105, 63, 103, 113, 116,
	35, 65, 62, 114, 83, -144, 38, -252, -256, -143,
	-149, -150, -151, -152, 6, -153, -154, -22, -23, -259,
	5, -42, -45, -46, -47, -258, -157, 17, -258, 15,
	101, 4, 89, 4, 85, 4, 66, 101, -157, -183,
	4, 85, 100, -157, -183, 4, 85, 15, 14, 15,
	101, -42, -42, -89, 4, -89, -89, -253, 123, -24,
	-25, -33, 4, -86, -259, -260, -87, -88, -43, -44,
	-90, -91, -92, -93, -94, -95, -96, -97, -98, -99,
	-100, -101, -102, -103, -25, -104, -105, -106, -107, -108,
	-109, -110, -111, -112, -113, 129, 130, 4, 44, 108,
	60, -114, -115, -259, -260, 80, -128, -129, 131, -117,
	-118, -119, 90, 78, 79, -159, -161, -162, -163, -206,
	-207, -208, -164, 43, -212, -213, 44, 51, -166, -49,
	4, -167, 30, -169, -170, -172, -173, -175, -176, -177,
	-178, 17, -179, -180, -181, -182, -183, -184, -185, -186,
	-187, -188, -189, -190, -48, -151, -205, -152, -43, -191,
	-192, 61, -42, 118, 88, 99, -259, -144, 70, -193,
	77, 80, -48, -49, -145, -155, -156, -259, 4, -224,
	-225, -229, -219, -259, -233, -235, -237, -238, -259, -239,
	-47, -240, -239, -259, 85, 85, 5, -42, -219, -259,
	-157, 85, 85, 5, -42, -259, -42, -145, -269, -146,
	-89, -42, -43, -44, -47, -48, -49, 4, -254, -257,
	112, 31, 93, 120, 121, 122, 11, -26, -33, 5,
	-27, -259, -260, -28, -29, -30, 15, -89, -33, 5,
	-116, -120, -122, -126, -130, -259, -260, -121, -131, -29,
	-30, 131, -118, -119, 4, -43, 11, -160, 24, 10,
	37, -42, 37, -151, -259, -168, 55, -171, 22, 110,
	-174, 25, 74, -168, -166, -42, 15, -157, 42, -43,
	-259, 15, 14, 15, -220, -221, -259, 5, 10, 10,
	-42, 5, 10, 10, 17, 5, 10, -42, -219, -42,
	-219, -264, -42, -219, -42, -219, -266, -268, -252, 6,
	5, 10, -259, -260, 131, -118, -119, -255, -260, -33,
	7, 5, -27, -33, -26, 17, -259, 5, 10, 5,
	10, 10, 10, 5, -131, -29, -30, -33, -259, -260,
	-43, 18, -218, -260, -33, -42, -259, 27, 4, 51,
	-43, 5, 15, -175, -169, -172, 18, 15, -196, -157,
	-145, -156, 5, 10, 17, -226, 27, -219, 27, -238,
	-260, -33, -239, 97, 98, 98, 67, -253, -146, 15,
	7, 4, -29, -33, -259, -121, -33, -123, -260, -127,
	-260, 11, 10, -209, -210, -211, -151, -42, -47, 37,
	4, -259, -194, -195, 14, -43, 76, -263, -221, -260,
	-33, -227, 10, -160, -160, 18, 18, 4, 4, 85,
	-42, 5, -259, 18, 10, 5, -43, -165, -166, 5,
	10, 11, -43, -214, -215, 23, -195, 118, 18, 18,
	-228, 10, -230, -231, -232, -219, 6, 10, -226, -226,
	-219, -270, -124, -260, -210, -43, -48, 5, 10, -216,
	15, -259, 42, 27, 10, 6, -236, -237, -228, -228,
	-252, 10, -215, 15, -217, 15, -197, -198, -199, 4,
	-231, -234, -260, 5, 5, 56, -125, -260, -259, -216,
	-217, -200, 27, -201, -259, -229, 11, -265, -267, -42,
	5, 5, 10, 10, -202, -203, -157, 7, 97, 98,
	-200, -200, -204, 91, 28, 87, 7, 4, 4, 5,
	-241, -242, -226, -245, -246, -219, 42, -241, 5, 10,
	-243, 10, 10, 87, 47, 85, 5, -226, -244, -228,
	10, -247, -248, -246, -249, 6, -246, -43, -42, -243,
	10, 27, 10, 6, -228, -244, -242, -248, -234, 10,
	-245, -242, 7, 7,
}

var ASNDef = [...]int{
	0, -2, 1, 2, 0, 14, 540, 541, 3, 12,
	10, 13, 0, 27, 0, 0, 16, 18, 19, 20,
	21, 22, 542, 0, 544, 29, 0, 0, 0, 11,
	15, 17, 0, 543, 545, 0, 0, 24, 25, 26,
	0, 0, 0, 28, 23, -2, 0, 7, 36, 47,
	49, 0, 546, 0, 5, 0, 72, 72, 0, 48,
	50, 0, 39, 41, 42, 43, 0, 0, 35, 37,
	4, 6, 9, 30, 70, 73, 74, 75, 76, 77,
	78, 79, 80, 523, 88, 89, 90, 91, 92, 93,
	31, 46, 51, 0, 0, 0, 33, 34, 8, 71,
	-2, 0, 0, 94, 95, 96, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 185, 0,
	318, 319, 320, 0, 354, 355, 356, 0, 0, 370,
	0, 372, 376, 377, 0, 0, 381, 382, 383, 0,
	0, 416, 417, 414, 415, -2, -2, 134, 135, 149,
	150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
	160, 161, 162, 163, 164, 0, 0, 523, 523, 539,
	167, 168, 169, 170, 0, 171, 175, 40, 52, 56,
	45, 81, 83, 85, 0, 503, 184, -2, 524, 0,
	312, 0, 357, 0, 523, 0, 379, 380, 0, 0,
	0, 523, 0, 0, 0, 0, 523, 0, 523, 0,
	334, 418, 429, 137, -2, 174, 178, 426, 0, 53,
	54, 55, 538, 532, 533, 534, 535, 539, 82, 84,
	97, 98, 99, 434, 435, 436, 437, 438, 439, 440,
	441, 442, 443, 444, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 455, 456, 457, 538, 503, 463,
	464, 465, 466, 489, 491, 492, 496, 497, 467, 468,
	469, 470, 500, 501, 502, 299, 187, 188, 189, 269,
	270, 271, 190, 0, 283, 284, 503, 0, 193, 285,
	538, -2, 0, -2, 0, 199, 0, -2, 0, 203,
	204, -2, 207, 208, 209, 210, 211, 212, 213, 214,
	215, 216, 217, 218, 257, -2, 259, -2, -2, 523,
	0, 0, 234, 0, 503, 0, -2, 0, 221, 224,
	227, -2, 86, 87, 378, 179, 180, 182, 0, 0,
	336, 338, 339, 523, 0, 359, 362, 364, 366, 367,
	371, 0, 374, 0, 523, 523, 384, 407, 408, -2,
	233, 523, 523, 409, 412, -2, 165, 166, 0, 0,
	0, 143, 144, 145, 146, 147, 148, -2, 538, 0,
	423, 424, 425, 431, 432, 433, 422, 538, 65, 59,
	60, 66, 67, 62, 63, 64, 0, 537, -2, 59,
	0, 0, 0, 0, 538, -2, -2, 472, 507, 63,
	64, 474, 475, 476, 0, 460, 503, 0, -2, 0,
	0, 295, 503, 0, -2, 196, -2, -2, 266, 267,
	-2, 263, 264, 202, 0, 220, 0, 232, 0, 252,
	253, 0, 225, 0, 0, 314, 0, 335, 0, 0,
	311, 358, 0, 0, 538, 373, 0, 305, 309, 306,
	310, 0, 303, 307, 304, 308, 0, 0, 0, 0,
	141, -2, -2, -2, -2, -2, -2, 0, 427, 428,
	430, 57, 61, 65, 0, 538, 536, 458, 0, 471,
	538, 0, 0, 506, 508, 509, 510, 68, 533, 479,
	487, 186, 298, 300, 301, 0, -2, 191, -2, 0,
	296, 0, 0, 268, -2, 200, 205, 503, 235, 237,
	166, 181, 313, 0, 538, 344, 299, 340, 299, 365,
	0, 0, 375, 0, 0, 0, 523, 426, 0, 0,
	421, 58, 0, 68, 462, 473, 477, 0, 480, 0,
	485, 503, -2, 0, 273, 0, -2, -2, -2, 503,
	0, -2, 223, 228, 503, 230, 231, 0, 315, 0,
	0, 353, 0, 342, 360, 368, 369, 0, 0, 0,
	419, 142, -2, 69, 0, 483, 302, 192, 194, 272,
	523, 503, 297, 0, 287, 0, 229, 0, 316, 317,
	337, 0, 343, 345, 347, 348, 0, 0, 353, 353,
	413, 0, 0, 481, 274, 276, 277, 286, 0, 289,
	294, 291, 0, 352, 0, 351, 361, 363, 0, 0,
	0, 0, 288, 0, 0, 294, 236, 238, 239, 0,
	346, 0, 0, 385, 410, 523, 0, 482, 292, 290,
	293, 0, 0, 241, 246, 0, 350, 0, 0, 420,
	478, 240, 0, 0, 243, 250, 245, 0, 0, 0,
	0, 242, 244, 247, 248, 249, 349, 0, 0, 251,
	0, 387, 400, 392, 393, 395, 0, 0, 386, 0,
	353, 0, 0, 396, 503, 523, 411, 400, 0, 391,
	0, 399, 401, 403, 404, 0, 394, 397, 398, 353,
	0, -2, 0, 351, 388, 0, 390, 402, 0, 0,
	0, 389, 0, 405,
}

var ASNTok1 = [...]int{
	1,
}

var ASNTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132,
}

var ASNTok3 = [...]int{
	0,
}

var ASNErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	ASNDebug        = 0
	ASNErrorVerbose = false
)

type ASNLexer interface {
	Lex(lval *ASNSymType) int
	Error(s string)
}

type ASNParser interface {
	Parse(ASNLexer) int
	Lookahead() int
}

type ASNParserImpl struct {
	lval  ASNSymType
	stack [ASNInitialStackSize]ASNSymType
	char  int
}

func (p *ASNParserImpl) Lookahead() int {
	return p.char
}

func ASNNewParser() ASNParser {
	return &ASNParserImpl{}
}

const ASNFlag = -1000

func ASNTokname(c int) string {
	if c >= 1 && c-1 < len(ASNToknames) {
		if ASNToknames[c-1] != "" {
			return ASNToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func ASNStatname(s int) string {
	if s >= 0 && s < len(ASNStatenames) {
		if ASNStatenames[s] != "" {
			return ASNStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func ASNErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !ASNErrorVerbose {
		return "syntax error"
	}

	for _, e := range ASNErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + ASNTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := ASNPact[state]
	for tok := TOKSTART; tok-1 < len(ASNToknames); tok++ {
		if n := base + tok; n >= 0 && n < ASNLast && ASNChk[ASNAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if ASNDef[state] == -2 {
		i := 0
		for ASNExca[i] != -1 || ASNExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; ASNExca[i] >= 0; i += 2 {
			tok := ASNExca[i]
			if tok < TOKSTART || ASNExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if ASNExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += ASNTokname(tok)
	}
	return res
}

func ASNlex1(lex ASNLexer, lval *ASNSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = ASNTok1[0]
		goto out
	}
	if char < len(ASNTok1) {
		token = ASNTok1[char]
		goto out
	}
	if char >= ASNPrivate {
		if char < ASNPrivate+len(ASNTok2) {
			token = ASNTok2[char-ASNPrivate]
			goto out
		}
	}
	for i := 0; i < len(ASNTok3); i += 2 {
		token = ASNTok3[i+0]
		if token == char {
			token = ASNTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = ASNTok2[1] /* unknown char */
	}
	if ASNDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", ASNTokname(token), uint(char))
	}
	return char, token
}

func ASNParse(ASNlex ASNLexer) int {
	return ASNNewParser().Parse(ASNlex)
}

func (ASNrcvr *ASNParserImpl) Parse(ASNlex ASNLexer) int {
	var ASNn int
	var ASNVAL ASNSymType
	var ASNDollar []ASNSymType
	_ = ASNDollar // silence set and not used
	ASNS := ASNrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	ASNstate := 0
	ASNrcvr.char = -1
	ASNtoken := -1 // ASNrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		ASNstate = -1
		ASNrcvr.char = -1
		ASNtoken = -1
	}()
	ASNp := -1
	goto ASNstack

ret0:
	return 0

ret1:
	return 1

ASNstack:
	/* put a state and value onto the stack */
	if ASNDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", ASNTokname(ASNtoken), ASNStatname(ASNstate))
	}

	ASNp++
	if ASNp >= len(ASNS) {
		nyys := make([]ASNSymType, len(ASNS)*2)
		copy(nyys, ASNS)
		ASNS = nyys
	}
	ASNS[ASNp] = ASNVAL
	ASNS[ASNp].yys = ASNstate

ASNnewstate:
	ASNn = ASNPact[ASNstate]
	if ASNn <= ASNFlag {
		goto ASNdefault /* simple state */
	}
	if ASNrcvr.char < 0 {
		ASNrcvr.char, ASNtoken = ASNlex1(ASNlex, &ASNrcvr.lval)
	}
	ASNn += ASNtoken
	if ASNn < 0 || ASNn >= ASNLast {
		goto ASNdefault
	}
	ASNn = ASNAct[ASNn]
	if ASNChk[ASNn] == ASNtoken { /* valid shift */
		ASNrcvr.char = -1
		ASNtoken = -1
		ASNVAL = ASNrcvr.lval
		ASNstate = ASNn
		if Errflag > 0 {
			Errflag--
		}
		goto ASNstack
	}

ASNdefault:
	/* default state action */
	ASNn = ASNDef[ASNstate]
	if ASNn == -2 {
		if ASNrcvr.char < 0 {
			ASNrcvr.char, ASNtoken = ASNlex1(ASNlex, &ASNrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if ASNExca[xi+0] == -1 && ASNExca[xi+1] == ASNstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			ASNn = ASNExca[xi+0]
			if ASNn < 0 || ASNn == ASNtoken {
				break
			}
		}
		ASNn = ASNExca[xi+1]
		if ASNn < 0 {
			goto ret0
		}
	}
	if ASNn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			ASNlex.Error(ASNErrorMessage(ASNstate, ASNtoken))
			Nerrs++
			if ASNDebug >= 1 {
				__yyfmt__.Printf("%s", ASNStatname(ASNstate))
				__yyfmt__.Printf(" saw %s\n", ASNTokname(ASNtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for ASNp >= 0 {
				ASNn = ASNPact[ASNS[ASNp].yys] + ASNErrCode
				if ASNn >= 0 && ASNn < ASNLast {
					ASNstate = ASNAct[ASNn] /* simulate a shift of "error" */
					if ASNChk[ASNstate] == ASNErrCode {
						goto ASNstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if ASNDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", ASNS[ASNp].yys)
				}
				ASNp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if ASNDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", ASNTokname(ASNtoken))
			}
			if ASNtoken == ASNEofCode {
				goto ret1
			}
			ASNrcvr.char = -1
			ASNtoken = -1
			goto ASNnewstate /* try again in the same state */
		}
	}

	/* reduction by production ASNn */
	if ASNDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", ASNn, ASNStatname(ASNstate))
	}

	ASNnt := ASNn
	ASNpt := ASNp
	_ = ASNpt // guard against "declared and not used"

	ASNp -= ASNR2[ASNn]
	// ASNp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if ASNp+1 >= len(ASNS) {
		nyys := make([]ASNSymType, len(ASNS)*2)
		copy(nyys, ASNS)
		ASNS = nyys
	}
	ASNVAL = ASNS[ASNp+1]

	/* consult goto table to find next state */
	ASNn = ASNR1[ASNn]
	ASNg := ASNPgo[ASNn]
	ASNj := ASNg + ASNS[ASNp].yys + 1

	if ASNj >= ASNLast {
		ASNstate = ASNAct[ASNg]
	} else {
		ASNstate = ASNAct[ASNj]
		if ASNChk[ASNstate] != -ASNn {
			ASNstate = ASNAct[ASNg]
		}
	}
	// dummy call; replaced with literal code
	switch ASNnt {

	case 1:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:465
		{
			SetResult(ASNlex, ASNDollar[1].TypeValue)
			Print("Done")
			Print("--------------------------------------------------------------------------------")
			Print(JSON(&ASNDollar[1].TypeValue))
			Print("--------------------------------------------------------------------------------")
		}
	case 2:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:474
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 3:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:479
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 4:
		ASNDollar = ASNS[ASNpt-10 : ASNpt+1]
//line asn.y:509
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"encoding":   ASNDollar[3].TypeValue,
				"tag":        ASNDollar[4].TypeValue,
				"body":       ASNDollar[8].TypeValue,
			}
		}
	case 5:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:525
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 6:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:530
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 7:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:534
		{
			ASNVAL.TypeValue = nil
		}
	case 8:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:546
		{
			ASNVAL.TypeValue = MAP{
				"encodingReference":    ASNDollar[2].TypeString,
				"encodingInstructions": ASNDollar[3].TypeValue,
			}
		}
	case 9:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:561
		{
			ASNVAL.TypeValue = nil
		}
	case 10:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:574
		{
			ASNVAL.TypeValue = MAP{
				"reference":             ASNDollar[1].TypeValue,
				"definitiveIdentifiers": ASNDollar[2].TypeValue,
			}
		}
	case 11:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:588
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 12:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:591
		{
			ASNVAL.TypeValue = STRING("")
		}
	case 13:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:603
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 14:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:606
		{
			ASNVAL.TypeValue = nil
		}
	case 15:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:616
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 16:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:627
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 17:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:632
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 18:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:645
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 19:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:648
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 20:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:651
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 21:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:660
		{
			ASNVAL.TypeValue = MAP{
				"name": ASNDollar[1].TypeString,
			}
		}
	case 22:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:671
		{
			ASNVAL.TypeValue = MAP{
				"number": ASNDollar[1].TypeValue,
			}
		}
	case 23:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:682
		{
			ASNVAL.TypeValue = MAP{
				"name":   ASNDollar[1].TypeString,
				"number": ASNDollar[3].TypeValue,
			}
		}
	case 24:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:698
		{
			ASNVAL.TypeValue = STRING("IMPLICIT")
		}
	case 25:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:701
		{
			ASNVAL.TypeValue = STRING("EXPLICIT")
		}
	case 26:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:704
		{
			ASNVAL.TypeValue = STRING("AUTOMATIC")
		}
	case 27:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:707
		{
			ASNVAL.TypeValue = STRING("EXPLICIT")
		}
	case 28:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:718
		{
			ASNVAL.TypeValue = true
		}
	case 29:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:721
		{
			ASNVAL.TypeValue = false
		}
	case 30:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:734
		{
			ASNVAL.TypeValue = MAP{
				"imports":     ASNDollar[1].TypeValue,
				"exports":     ASNDollar[2].TypeValue,
				"assignments": ASNDollar[3].TypeValue,
			}
		}
	case 31:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:743
		{
			ASNVAL.TypeValue = MAP{
				"imports":     ASNDollar[2].TypeValue,
				"exports":     ASNDollar[1].TypeValue,
				"assignments": ASNDollar[3].TypeValue,
			}
		}
	case 32:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:750
		{
			ASNVAL.TypeValue = nil
		}
	case 33:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:762
		{
			ASNVAL.TypeValue = MAP{
				"all":     "false",
				"symbols": ASNDollar[2].TypeValue,
			}
		}
	case 34:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:768
		{
			ASNVAL.TypeValue = MAP{
				"all": "true",
			}
		}
	case 35:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:773
		{
			ASNVAL.TypeValue = MAP{
				"all": "false",
			}
		}
	case 36:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:778
		{
			ASNVAL.TypeValue = MAP{
				"all": "true",
			}
		}
	case 37:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:791
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 38:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:794
		{
			ASNVAL.TypeValue = nil
		}
	case 39:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:805
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 40:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:810
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 41:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:822
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
			}
		}
	case 42:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:827
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedReference": ASNDollar[1].TypeValue,
			}
		}
	case 43:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:846
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 44:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:856
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 45:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:859
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 46:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:870
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 47:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:873
		{
			ASNVAL.TypeValue = nil
		}
	case 48:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:884
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 49:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:887
		{
			ASNVAL.TypeValue = nil
		}
	case 50:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:898
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 51:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:903
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 52:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:914
		{
			ASNVAL.TypeValue = MAP{
				"symbols":   ASNDollar[1].TypeValue,
				"reference": ASNDollar[3].TypeValue,
			}
		}
	case 53:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:927
		{
			ASNVAL.TypeValue = MAP{
				"name":        ASNDollar[1].TypeValue,
				"identifiers": ASNDollar[2].TypeValue,
			}
		}
	case 54:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:942
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 55:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:945
		{
			ASNVAL.TypeValue = nil
		}
	case 56:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:948
		{
			ASNVAL.TypeValue = nil
		}
	case 57:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:959
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 58:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:962
		{
			ASNVAL.TypeValue = ASNDollar[3].TypeValue
		}
	case 59:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:965
		{
			ASNVAL.TypeValue = nil
		}
	case 60:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:976
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 61:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:981
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 62:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:995
		{
			ASNVAL.TypeValue = MAP{
				"name": ASNDollar[1].TypeValue,
			}
		}
	case 63:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1000
		{
			ASNVAL.TypeValue = MAP{
				"number": ASNDollar[1].TypeValue,
			}
		}
	case 64:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1005
		{
			ASNVAL.TypeValue = MAP{
				"nameAndNumber": ASNDollar[1].TypeValue,
			}
		}
	case 65:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1010
		{
			ASNVAL.TypeValue = MAP{
				"definedValue": ASNDollar[1].TypeValue,
			}
		}
	case 66:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1022
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 67:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1033
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 68:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1036
		{
			ASNVAL.TypeValue = MAP{
				"definedValue": ASNDollar[1].TypeValue,
			}
		}
	case 69:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1048
		{
			ASNVAL.TypeValue = MAP{
				"name":   ASNDollar[1].TypeValue,
				"number": ASNDollar[3].TypeValue,
			}
		}
	case 70:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1062
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 71:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1067
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 72:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1071
		{
			ASNVAL.TypeValue = nil
		}
	case 73:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1088
		{
			ASNVAL.TypeValue = MAP{
				"typeAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 74:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1093
		{
			ASNVAL.TypeValue = MAP{
				"valueAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 75:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1098
		{
			ASNVAL.TypeValue = MAP{
				"xmlValueAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 76:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1103
		{
			ASNVAL.TypeValue = MAP{
				"valueSetAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 77:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1108
		{
			ASNVAL.TypeValue = MAP{
				"objectClassAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 78:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1113
		{
			ASNVAL.TypeValue = MAP{
				"objectAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 79:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1118
		{
			ASNVAL.TypeValue = MAP{
				"objectSetAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 80:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1123
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 81:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1137
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"typename":  ASNDollar[2].TypeValue,
			}
		}
	case 82:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1153
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"typename":  ASNDollar[2].TypeValue,
				"value":     ASNDollar[4].TypeValue,
			}
		}
	case 83:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1169
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"value":     ASNDollar[3].TypeValue,
			}
		}
	case 84:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1185
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"typename":  ASNDollar[2].TypeValue,
				"valueSet":  ASNDollar[4].TypeValue,
			}
		}
	case 85:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1201
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"class":     ASNDollar[3].TypeValue,
			}
		}
	case 86:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1217
		{
			ASNVAL.TypeValue = MAP{
				"reference":    ASNDollar[1].TypeValue,
				"definedClass": ASNDollar[2].TypeValue,
				"object":       ASNDollar[4].TypeValue,
			}
		}
	case 87:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1234
		{
			ASNVAL.TypeValue = MAP{
				"reference":    ASNDollar[1].TypeValue,
				"definedClass": ASNDollar[2].TypeValue,
				"objectSet":    ASNDollar[4].TypeValue,
			}
		}
	case 88:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1253
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 89:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1256
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 90:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1259
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 91:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1262
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 92:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1265
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 93:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1268
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 94:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1280
		{
			ASNVAL.TypeValue = MAP{
				"type":       "BUILTIN_TYPE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 95:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1286
		{
			ASNVAL.TypeValue = MAP{
				"type":       "REFERENCED_TYPE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 96:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1292
		{
			ASNVAL.TypeValue = MAP{
				"type":       "CONSTRAINED_TYPE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 97:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1307
		{
			ASNVAL.TypeValue = MAP{
				"type":       "BUILTIN_VALUE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 98:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1313
		{
			ASNVAL.TypeValue = MAP{
				"type":       "REFERENCED_VALUE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 99:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1319
		{
			ASNVAL.TypeValue = MAP{
				"type":       "OBJECT_CLASS_FIELD_VALUE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 100:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1357
		{
			ASNVAL.TypeValue = MAP{
				"bitStringType": ASNDollar[1].TypeValue,
			}
		}
	case 101:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1362
		{
			ASNVAL.TypeValue = MAP{
				"booleanType": ASNDollar[1].TypeValue,
			}
		}
	case 102:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1367
		{
			ASNVAL.TypeValue = MAP{
				"characterStringType": ASNDollar[1].TypeValue,
			}
		}
	case 103:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1372
		{
			ASNVAL.TypeValue = MAP{
				"choiceType": ASNDollar[1].TypeValue,
			}
		}
	case 104:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1377
		{
			ASNVAL.TypeValue = MAP{
				"dateType": ASNDollar[1].TypeValue,
			}
		}
	case 105:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1382
		{
			ASNVAL.TypeValue = MAP{
				"dataTimeType": ASNDollar[1].TypeValue,
			}
		}
	case 106:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1387
		{
			ASNVAL.TypeValue = MAP{
				"durationType": ASNDollar[1].TypeValue,
			}
		}
	case 107:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1392
		{
			ASNVAL.TypeValue = MAP{
				"embeddedPDVType": ASNDollar[1].TypeValue,
			}
		}
	case 108:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1397
		{
			ASNVAL.TypeValue = MAP{
				"enumeratedType": ASNDollar[1].TypeValue,
			}
		}
	case 109:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1402
		{
			ASNVAL.TypeValue = MAP{
				"externalType": ASNDollar[1].TypeValue,
			}
		}
	case 110:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1407
		{
			ASNVAL.TypeValue = MAP{
				"instanceOfType": ASNDollar[1].TypeValue,
			}
		}
	case 111:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1412
		{
			ASNVAL.TypeValue = MAP{
				"integerType": ASNDollar[1].TypeValue,
			}
		}
	case 112:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1417
		{
			ASNVAL.TypeValue = MAP{
				"iriType": ASNDollar[1].TypeValue,
			}
		}
	case 113:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1422
		{
			ASNVAL.TypeValue = MAP{
				"nullType": ASNDollar[1].TypeValue,
			}
		}
	case 114:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1427
		{
			ASNVAL.TypeValue = MAP{
				"objectClassFieldType": ASNDollar[1].TypeValue,
			}
		}
	case 115:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1432
		{
			ASNVAL.TypeValue = MAP{
				"objectIdentifierType": ASNDollar[1].TypeValue,
			}
		}
	case 116:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1437
		{
			ASNVAL.TypeValue = MAP{
				"octetStringType": ASNDollar[1].TypeValue,
			}
		}
	case 117:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1442
		{
			ASNVAL.TypeValue = MAP{
				"realType": ASNDollar[1].TypeValue,
			}
		}
	case 118:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1447
		{
			ASNVAL.TypeValue = MAP{
				"relativeIRIType": ASNDollar[1].TypeValue,
			}
		}
	case 119:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1452
		{
			ASNVAL.TypeValue = MAP{
				"relativeOIDType": ASNDollar[1].TypeValue,
			}
		}
	case 120:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1457
		{
			ASNVAL.TypeValue = MAP{
				"sequenceType": ASNDollar[1].TypeValue,
			}
		}
	case 121:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1462
		{
			ASNVAL.TypeValue = MAP{
				"sequenceOfType": ASNDollar[1].TypeValue,
			}
		}
	case 122:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1467
		{
			ASNVAL.TypeValue = MAP{
				"setType": ASNDollar[1].TypeValue,
			}
		}
	case 123:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1472
		{
			ASNVAL.TypeValue = MAP{
				"setOfType": ASNDollar[1].TypeValue,
			}
		}
	case 124:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1477
		{
			ASNVAL.TypeValue = MAP{
				"prefixedType": ASNDollar[1].TypeValue,
			}
		}
	case 125:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1482
		{
			ASNVAL.TypeValue = MAP{
				"timeType": ASNDollar[1].TypeValue,
			}
		}
	case 126:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1487
		{
			ASNVAL.TypeValue = MAP{
				"timeOfDayType": ASNDollar[1].TypeValue,
			}
		}
	case 127:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1503
		{
			ASNVAL.TypeValue = MAP{
				"definedType": ASNDollar[1].TypeValue,
			}
		}
	case 128:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1508
		{
			ASNVAL.TypeValue = MAP{
				"usefulType": ASNDollar[1].TypeValue,
			}
		}
	case 129:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1513
		{
			ASNVAL.TypeValue = MAP{
				"selectionType": ASNDollar[1].TypeValue,
			}
		}
	case 130:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1518
		{
			ASNVAL.TypeValue = MAP{
				"typeFromObject": ASNDollar[1].TypeValue,
			}
		}
	case 131:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1523
		{
			ASNVAL.TypeValue = MAP{
				"valueSetFromObjects": ASNDollar[1].TypeValue,
			}
		}
	case 132:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1538
		{
			ASNVAL.TypeValue = MAP{
				"externalTypeReference": ASNDollar[1].TypeValue,
			}
		}
	case 133:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1543
		{
			ASNVAL.TypeValue = MAP{
				"typeReference": ASNDollar[1].TypeValue,
			}
		}
	case 134:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1548
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedType": ASNDollar[1].TypeValue,
			}
		}
	case 135:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1553
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedValueSetType": ASNDollar[1].TypeValue,
			}
		}
	case 136:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1567
		{
			ASNVAL.TypeValue = MAP{
				"moduleReference": ASNDollar[1].TypeValue,
				"typeReference":   ASNDollar[2].TypeToken,
			}
		}
	case 137:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1581
		{
			ASNVAL.TypeValue = MAP{
				"simpleDefinedType":   ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 138:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1595
		{
			ASNVAL.TypeValue = MAP{
				"simpleDefinedType":   ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 139:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1609
		{
			ASNVAL.TypeValue = MAP{
				"externalTypeReference": ASNDollar[1].TypeValue,
			}
		}
	case 140:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1614
		{
			ASNVAL.TypeValue = MAP{
				"typeReference": ASNDollar[1].TypeValue,
			}
		}
	case 141:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1625
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[2].TypeValue,
			}
		}
	case 142:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:1630
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[4].TypeValue)
		}
	case 143:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1646
		{
			ASNVAL.TypeValue = MAP{
				"type": ASNDollar[1].TypeValue,
			}
		}
	case 144:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1651
		{
			ASNVAL.TypeValue = MAP{
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 145:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1656
		{
			ASNVAL.TypeValue = MAP{
				"valueSet": ASNDollar[1].TypeValue,
			}
		}
	case 146:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1661
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectClass": ASNDollar[1].TypeValue,
			}
		}
	case 147:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1666
		{
			ASNVAL.TypeValue = MAP{
				"object": ASNDollar[1].TypeValue,
			}
		}
	case 148:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1671
		{
			ASNVAL.TypeValue = MAP{
				"objectSet": ASNDollar[1].TypeValue,
			}
		}
	case 149:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1699
		{
			ASNVAL.TypeValue = STRING(UTF8String)
		}
	case 150:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1702
		{
			ASNVAL.TypeValue = STRING(GraphicString)
		}
	case 151:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1705
		{
			ASNVAL.TypeValue = STRING(NumericString)
		}
	case 152:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1708
		{
			ASNVAL.TypeValue = STRING(VisibleString)
		}
	case 153:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1711
		{
			ASNVAL.TypeValue = STRING(PrintableString)
		}
	case 154:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1714
		{
			ASNVAL.TypeValue = STRING(ISO646String)
		}
	case 155:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1717
		{
			ASNVAL.TypeValue = STRING(TeletexString)
		}
	case 156:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1720
		{
			ASNVAL.TypeValue = STRING(GeneralString)
		}
	case 157:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1723
		{
			ASNVAL.TypeValue = STRING(T61String)
		}
	case 158:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1726
		{
			ASNVAL.TypeValue = STRING(UniversalString)
		}
	case 159:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1729
		{
			ASNVAL.TypeValue = STRING(VideotexString)
		}
	case 160:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1732
		{
			ASNVAL.TypeValue = STRING(BMPString)
		}
	case 161:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1735
		{
			ASNVAL.TypeValue = STRING(IA5String)
		}
	case 162:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1738
		{
			ASNVAL.TypeValue = STRING(GeneralizedTime)
		}
	case 163:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1741
		{
			ASNVAL.TypeValue = STRING(UTCTime)
		}
	case 164:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1744
		{
			ASNVAL.TypeValue = STRING(ObjectDescriptor)
		}
	case 165:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1754
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"typename":   ASNDollar[3].TypeValue,
			}
		}
	case 166:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1767
		{
			ASNVAL.TypeValue = MAP{
				"referencedObjects": ASNDollar[1].TypeValue,
				"fieldName":         ASNDollar[2].TypeToken,
			}
		}
	case 167:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1780
		{
			ASNVAL.TypeValue = MAP{
				"definedObject": ASNDollar[1].TypeValue,
			}
		}
	case 168:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1785
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedObject": ASNDollar[1].TypeValue,
			}
		}
	case 169:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1790
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 170:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1795
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 171:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1807
		{
			ASNVAL.TypeValue = MAP{
				"externalObjectReference": ASNDollar[1].TypeValue,
			}
		}
	case 172:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1812
		{
			ASNVAL.TypeValue = MAP{
				"objectReference": ASNDollar[1].TypeValue,
			}
		}
	case 173:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1824
		{
			ASNVAL.TypeValue = MAP{
				"moduleReference": ASNDollar[1].TypeValue,
				"objectReference": ASNDollar[3].TypeValue,
			}
		}
	case 174:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1837
		{
			ASNVAL.TypeValue = MAP{
				"definedObject":       ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 175:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1850
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 176:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1853
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 177:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1863
		{
			ASNVAL.TypeValue = MAP{
				"moduleReference":    ASNDollar[1].TypeValue,
				"objectSetReference": ASNDollar[3].TypeValue,
			}
		}
	case 178:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1876
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet":    ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 179:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1889
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 180:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1900
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 181:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1905
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 182:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1920
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 183:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1930
		{
			ASNVAL.TypeValue = MAP{
				"referencedObjects": ASNDollar[1].TypeValue,
				"fieldname":         ASNDollar[3].TypeValue,
			}
		}
	case 184:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1944
		{
			ASNVAL.TypeValue = MAP{
				"typename":   ASNDollar[1].TypeValue,
				"constraint": ASNDollar[2].TypeValue,
			}
		}
	case 185:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1950
		{
			ASNVAL.TypeValue = MAP{
				"typename": ASNDollar[1].TypeValue,
			}
		}
	case 186:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1962
		{
			ASNVAL.TypeValue = MAP{
				"constraintSpec": ASNDollar[2].TypeValue,
				"exceptionSpec":  ASNDollar[3].TypeValue,
			}
		}
	case 187:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1976
		{
			ASNVAL.TypeValue = MAP{
				"subtypeConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 188:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1981
		{
			ASNVAL.TypeValue = MAP{
				"generalConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 189:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1993
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 190:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2005
		{
			ASNVAL.TypeValue = MAP{
				"rootElementSetSpec": ASNDollar[1].TypeValue,
			}
		}
	case 191:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2010
		{
			ASNVAL.TypeValue = MAP{
				"rootElementSetSpec": ASNDollar[1].TypeValue,
			}
		}
	case 192:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:2015
		{
			ASNVAL.TypeValue = MAP{
				"rootElementSetSpec":       ASNDollar[1].TypeValue,
				"additionalElementSetSpec": ASNDollar[2].TypeToken,
			}
		}
	case 193:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2028
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 194:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2038
		{
			ASNVAL.TypeValue = nil
		}
	case 195:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2049
		{
			ASNVAL.TypeValue = MAP{
				"unions": ASNDollar[1].TypeValue,
			}
		}
	case 196:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2054
		{
			ASNVAL.TypeValue = MAP{
				"exclusions": ASNDollar[1].TypeString,
			}
		}
	case 197:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2067
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 198:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2070
		{
			ASNVAL.TypeValue = MAP{
				"unions":        ASNDollar[1].TypeValue,
				"intersections": ASNDollar[3].TypeValue,
			}
		}
	case 199:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2084
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 200:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2087
		{
			ASNVAL.TypeValue = MAP{
				"intersections":        ASNDollar[1].TypeValue,
				"intersectionElements": ASNDollar[2].TypeValue,
			}
		}
	case 201:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2100
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 202:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2103
		{
			ASNVAL.TypeValue = MAP{
				"elements":   ASNDollar[1].TypeValue,
				"exclusions": ASNDollar[2].TypeValue,
			}
		}
	case 203:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2118
		{
			ASNVAL.TypeValue = MAP{
				"subtypeElements": ASNDollar[1].TypeValue,
			}
		}
	case 204:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2123
		{
			ASNVAL.TypeValue = MAP{
				"objectSetElements": ASNDollar[1].TypeValue,
			}
		}
	case 205:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2128
		{
			ASNVAL.TypeValue = MAP{
				"elementSetSpec": ASNDollar[1].TypeToken,
			}
		}
	case 206:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2140
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 207:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2161
		{
			ASNVAL.TypeValue = MAP{
				"singleValue": ASNDollar[1].TypeValue,
			}
		}
	case 208:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2166
		{
			ASNVAL.TypeValue = MAP{
				"containedSubtype": ASNDollar[1].TypeValue,
			}
		}
	case 209:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2171
		{
			ASNVAL.TypeValue = MAP{
				"valueRange": ASNDollar[1].TypeValue,
			}
		}
	case 210:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2176
		{
			ASNVAL.TypeValue = MAP{
				"permittedAlphabet": ASNDollar[1].TypeValue,
			}
		}
	case 211:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2181
		{
			ASNVAL.TypeValue = MAP{
				"sizeConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 212:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2186
		{
			ASNVAL.TypeValue = MAP{
				"typeConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 213:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2191
		{
			ASNVAL.TypeValue = MAP{
				"innerTypeConstraints": ASNDollar[1].TypeValue,
			}
		}
	case 214:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2196
		{
			ASNVAL.TypeValue = MAP{
				"patternConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 215:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2201
		{
			ASNVAL.TypeValue = MAP{
				"propertySettings": ASNDollar[1].TypeValue,
			}
		}
	case 216:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2206
		{
			ASNVAL.TypeValue = MAP{
				"durationRange": ASNDollar[1].TypeValue,
			}
		}
	case 217:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2211
		{
			ASNVAL.TypeValue = MAP{
				"timePointRange": ASNDollar[1].TypeValue,
			}
		}
	case 218:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2216
		{
			ASNVAL.TypeValue = MAP{
				"recurrenceRange": ASNDollar[1].TypeValue,
			}
		}
	case 219:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2228
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 220:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2238
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 221:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2248
		{
			ASNVAL.TypeValue = STRING("INCLUDES")
		}
	case 222:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2251
		{
			ASNVAL.TypeValue = STRING("INCLUDES")
		}
	case 223:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2261
		{
			ASNVAL.TypeValue = MAP{
				"lowerEndpoint": ASNDollar[1].TypeValue,
				"upperEndpoint": ASNDollar[2].TypeToken,
			}
		}
	case 224:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2274
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 225:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2277
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 226:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2287
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 227:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2290
		{
			ASNVAL.TypeValue = STRING("MIN")
		}
	case 228:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2300
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 229:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2303
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 230:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2313
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 231:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2316
		{
			ASNVAL.TypeValue = STRING("MAX")
		}
	case 232:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2326
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 233:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2336
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 234:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2346
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 235:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2357
		{
			ASNVAL.TypeValue = ASNDollar[3].TypeValue
		}
	case 236:
		ASNDollar = ASNS[ASNpt-7 : ASNpt+1]
//line asn.y:2360
		{
			ASNVAL.TypeValue = ASNDollar[3].TypeValue
		}
	case 237:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2370
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 238:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2381
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 239:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2384
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 240:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2394
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 241:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2405
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 242:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2408
		{
			ASNVAL.TypeValue = MAP{
				"nameConstraint":  ASNDollar[1].TypeValue,
				"typeConstraints": ASNDollar[3].TypeValue,
			}
		}
	case 243:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2421
		{
			ASNVAL.TypeValue = MAP{
				"identifier":          ASNDollar[1].TypeValue,
				"componentConstraint": ASNDollar[2].TypeValue,
			}
		}
	case 244:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2434
		{
			ASNVAL.TypeValue = MAP{
				"valueConstraint":    ASNDollar[1].TypeValue,
				"presenceConstraint": ASNDollar[2].TypeValue,
			}
		}
	case 245:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2447
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 246:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2450
		{
			ASNVAL.TypeValue = nil
		}
	case 247:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2460
		{
			ASNVAL.TypeValue = STRING("PRESENT")
		}
	case 248:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2463
		{
			ASNVAL.TypeValue = STRING("ABSENT")
		}
	case 249:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2466
		{
			ASNVAL.TypeValue = STRING("OPTIONAL")
		}
	case 250:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2469
		{
			ASNVAL.TypeValue = nil
		}
	case 251:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:2479
		{
			ASNVAL.TypeValue = ASNDollar[4].TypeValue
		}
	case 252:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2489
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 253:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2499
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 254:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2509
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 255:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2519
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 256:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2529
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 257:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2542
		{
			ASNVAL.TypeValue = MAP{
				"object": ASNDollar[1].TypeValue,
			}
		}
	case 258:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2547
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 259:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2552
		{
			ASNVAL.TypeValue = MAP{
				"objectSetFromObjects": ASNDollar[1].TypeValue,
			}
		}
	case 260:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2557
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 261:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2569
		{
			ASNVAL.TypeValue = MAP{
				"referencedObjects": ASNDollar[1].TypeValue,
				"fieldName":         ASNDollar[2].TypeToken,
			}
		}
	case 262:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2582
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 263:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2592
		{
			ASNVAL.TypeValue = STRING("INTERSECTION")
		}
	case 264:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2595
		{
			ASNVAL.TypeValue = STRING("INTERSECTION")
		}
	case 265:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2605
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 266:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2615
		{
			ASNVAL.TypeValue = STRING("UNION")
		}
	case 267:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2618
		{
			ASNVAL.TypeValue = STRING("UNION")
		}
	case 268:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2628
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 269:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2640
		{
			ASNVAL.TypeValue = MAP{
				"userDefinedConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 270:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2645
		{
			ASNVAL.TypeValue = MAP{
				"tableConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 271:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2650
		{
			ASNVAL.TypeValue = MAP{
				"contentsConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 272:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:2662
		{
			ASNVAL.TypeValue = ASNDollar[4].TypeValue
		}
	case 273:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2674
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 274:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2679
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 275:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2683
		{
			ASNVAL.TypeValue = nil
		}
	case 276:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2697
		{
			ASNVAL.TypeValue = MAP{
				"governor": ASNDollar[1].TypeValue,
				"value":    ASNDollar[3].TypeValue,
			}
		}
	case 277:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2703
		{
			ASNVAL.TypeValue = MAP{
				"governor": ASNDollar[1].TypeValue,
				"object":   ASNDollar[3].TypeValue,
			}
		}
	case 278:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2709
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 279:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2714
		{
			ASNVAL.TypeValue = MAP{
				"type": ASNDollar[1].TypeValue,
			}
		}
	case 280:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2719
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectClass": ASNDollar[1].TypeValue,
			}
		}
	case 281:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2731
		{
			ASNVAL.TypeValue = MAP{
				"typename": ASNDollar[1].TypeValue,
			}
		}
	case 282:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2736
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectClass": ASNDollar[1].TypeValue,
			}
		}
	case 283:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2748
		{
			ASNVAL.TypeValue = MAP{
				"simpleTableConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 284:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2753
		{
			ASNVAL.TypeValue = MAP{
				"componentRelationConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 285:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2765
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 286:
		ASNDollar = ASNS[ASNpt-6 : ASNpt+1]
//line asn.y:2776
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet": ASNDollar[1].TypeToken,
				"atNotations":      ASNDollar[2].TypeValue,
			}
		}
	case 287:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2790
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 288:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2795
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 289:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2806
		{
			ASNVAL.TypeValue = MAP{
				"componentIdList": ASNDollar[2].TypeValue,
			}
		}
	case 290:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2811
		{
			ASNVAL.TypeValue = MAP{
				"componentIdList": ASNDollar[4].TypeValue,
			}
		}
	case 291:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2823
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 292:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2828
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 293:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2839
		{
			ASNVAL.TypeValue = nil
		}
	case 294:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2842
		{
			ASNVAL.TypeValue = nil
		}
	case 295:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2854
		{
			ASNVAL.TypeValue = MAP{
				"typename": ASNDollar[2].TypeValue,
			}
		}
	case 296:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2859
		{
			ASNVAL.TypeValue = MAP{
				"value": ASNDollar[3].TypeValue,
			}
		}
	case 297:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:2864
		{
			ASNVAL.TypeValue = MAP{
				"typename": ASNDollar[2].TypeValue,
				"value":    ASNDollar[5].TypeValue,
			}
		}
	case 298:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2877
		{
			ASNVAL.TypeValue = MAP{
				"exceptionIdentification": ASNDollar[1].TypeToken,
			}
		}
	case 299:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2882
		{
			ASNVAL.TypeValue = nil
		}
	case 300:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2894
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 301:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2897
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 302:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2900
		{
			ASNVAL.TypeValue = MAP{
				"typename": ASNDollar[1].TypeValue,
				"value":    ASNDollar[3].TypeValue,
			}
		}
	case 303:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2920
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence": "SET",
				"constraint":    ASNDollar[2].TypeValue,
				"typename":      ASNDollar[4].TypeValue,
			}
		}
	case 304:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2927
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence":  "SET",
				"sizeConstraint": ASNDollar[2].TypeValue,
				"typename":       ASNDollar[4].TypeValue,
			}
		}
	case 305:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2934
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence": "SEQUENCE",
				"constraint":    ASNDollar[2].TypeValue,
				"typename":      ASNDollar[4].TypeValue,
			}
		}
	case 306:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2941
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence":  "SEQUENCE",
				"sizeConstraint": ASNDollar[2].TypeValue,
				"typename":       ASNDollar[4].TypeValue,
			}
		}
	case 307:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2948
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence": "SET",
				"constraint":    ASNDollar[2].TypeValue,
				"namedType":     ASNDollar[4].TypeValue,
			}
		}
	case 308:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2955
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence":  "SET",
				"sizeConstraint": ASNDollar[2].TypeValue,
				"namedType":      ASNDollar[4].TypeValue,
			}
		}
	case 309:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2962
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence": "SEQUENCE",
				"constraint":    ASNDollar[2].TypeValue,
				"namedType":     ASNDollar[4].TypeValue,
			}
		}
	case 310:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2969
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence":  "SEQUENCE",
				"sizeConstraint": ASNDollar[2].TypeValue,
				"namedType":      ASNDollar[4].TypeValue,
			}
		}
	case 311:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2983
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"typename":   ASNDollar[2].TypeValue,
			}
		}
	case 312:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2997
		{
			ASNVAL.TypeValue = MAP{
				"type": "BIT_STRING",
			}
		}
	case 313:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:3002
		{
			ASNVAL.TypeValue = MAP{
				"type":      "BIT_STRING",
				"namedBits": ASNDollar[4].TypeValue,
			}
		}
	case 314:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3016
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 315:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3021
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 316:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3033
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"number":     ASNDollar[3].TypeValue,
			}
		}
	case 317:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3039
		{
			ASNVAL.TypeValue = MAP{
				"identifier":   ASNDollar[1].TypeValue,
				"definedValue": ASNDollar[3].TypeValue,
			}
		}
	case 318:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3052
		{
			ASNVAL.TypeValue = MAP{
				"type": "BOOLEAN",
			}
		}
	case 319:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3065
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 320:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3068
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 321:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3090
		{
			ASNVAL.TypeValue = MAP{
				"type": "BMP_STRING",
			}
		}
	case 322:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3095
		{
			ASNVAL.TypeValue = MAP{
				"type": "GENERAL_STRING",
			}
		}
	case 323:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3100
		{
			ASNVAL.TypeValue = MAP{
				"type": "GRAPHIC_STRING",
			}
		}
	case 324:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3105
		{
			ASNVAL.TypeValue = MAP{
				"type": "IA5_STRING",
			}
		}
	case 325:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3110
		{
			ASNVAL.TypeValue = MAP{
				"type": "ISO646_STRING",
			}
		}
	case 326:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3115
		{
			ASNVAL.TypeValue = MAP{
				"type": "NUMERIC_STRING",
			}
		}
	case 327:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3120
		{
			ASNVAL.TypeValue = MAP{
				"type": "PRINTABLE_STRING",
			}
		}
	case 328:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3125
		{
			ASNVAL.TypeValue = MAP{
				"type": "TELETEX_STRING",
			}
		}
	case 329:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3130
		{
			ASNVAL.TypeValue = MAP{
				"type": "T61_STRING",
			}
		}
	case 330:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3135
		{
			ASNVAL.TypeValue = MAP{
				"type": "UNIVERSAL_STRING",
			}
		}
	case 331:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3140
		{
			ASNVAL.TypeValue = MAP{
				"type": "UTF8_STRING",
			}
		}
	case 332:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3145
		{
			ASNVAL.TypeValue = MAP{
				"type": "VIDEO_TEX_STRING",
			}
		}
	case 333:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3150
		{
			ASNVAL.TypeValue = MAP{
				"type": "VISIBLE_STRING",
			}
		}
	case 334:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3162
		{
			ASNVAL.TypeValue = MAP{
				"type": "CHARACTER_STRING",
			}
		}
	case 335:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3174
		{
			ASNVAL.TypeValue = MAP{
				"type":           "CHOICE",
				"alternateTypes": ASNDollar[3].TypeValue,
			}
		}
	case 336:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3188
		{
			ASNVAL.TypeValue = MAP{
				"alternativeTypes": ASNDollar[1].TypeValue,
			}
		}
	case 337:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:3193
		{
			ASNVAL.TypeValue = MAP{
				"alternativeTypes":              ASNDollar[1].TypeValue,
				"extensionAndException":         ASNDollar[3].TypeValue,
				"extensionAdditionAlternatives": ASNDollar[4].TypeValue,
			}
		}
	case 338:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3207
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 339:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3218
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 340:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3223
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 341:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3235
		{
			ASNVAL.TypeValue = nil
		}
	case 342:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3238
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 343:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3249
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 344:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3252
		{
			ASNVAL.TypeValue = nil
		}
	case 345:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3263
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 346:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3268
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 347:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3280
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 348:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3283
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 349:
		ASNDollar = ASNS[ASNpt-6 : ASNpt+1]
//line asn.y:3293
		{
			ASNVAL.TypeValue = MAP{
				"version":          ASNDollar[3].TypeValue,
				"alternativeTypes": ASNDollar[4].TypeValue,
			}
		}
	case 350:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3306
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 351:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3309
		{
			ASNVAL.TypeValue = nil
		}
	case 352:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3320
		{
			ASNVAL.TypeValue = true
		}
	case 353:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3323
		{
			ASNVAL.TypeValue = nil
		}
	case 354:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3333
		{
			ASNVAL.TypeValue = MAP{
				"type": "DATE",
			}
		}
	case 355:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3345
		{
			ASNVAL.TypeValue = MAP{
				"type": "DATE_TIME",
			}
		}
	case 356:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3357
		{
			ASNVAL.TypeValue = MAP{
				"type": "DURATION",
			}
		}
	case 357:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3369
		{
			ASNVAL.TypeValue = MAP{
				"type": "EMBEDDED_PDV",
			}
		}
	case 358:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3381
		{
			ASNVAL.TypeValue = MAP{
				"type":         "ENUMERATED",
				"enumerations": ASNDollar[3].TypeValue,
			}
		}
	case 359:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3396
		{
			ASNVAL.TypeValue = MAP{
				"enumeration": ASNDollar[1].TypeValue,
			}
		}
	case 360:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3401
		{
			ASNVAL.TypeValue = MAP{
				"enumeration": ASNDollar[1].TypeValue,
				"exception":   ASNDollar[4].TypeValue,
			}
		}
	case 361:
		ASNDollar = ASNS[ASNpt-6 : ASNpt+1]
//line asn.y:3407
		{
			ASNVAL.TypeValue = MAP{
				"enumeration":           ASNDollar[1].TypeValue,
				"exception":             ASNDollar[4].TypeValue,
				"additionalEnumeration": ASNDollar[6].TypeValue,
			}
		}
	case 362:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3421
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 363:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3431
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 364:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3442
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 365:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3447
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 366:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3458
		{
			ASNVAL.TypeValue = MAP{
				"name": ASNDollar[1].TypeValue,
			}
		}
	case 367:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3463
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 368:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3475
		{
			ASNVAL.TypeValue = MAP{
				"name":   ASNDollar[1].TypeValue,
				"number": ASNDollar[3].TypeValue,
			}
		}
	case 369:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3481
		{
			ASNVAL.TypeValue = MAP{
				"name":         ASNDollar[1].TypeValue,
				"definedValue": ASNDollar[3].TypeValue,
			}
		}
	case 370:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3494
		{
			ASNVAL.TypeValue = MAP{
				"type": "EXTERNAL",
			}
		}
	case 371:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3506
		{
			ASNVAL.TypeValue = MAP{
				"type":               "INSTANCE_OF",
				"definedObjectClass": ASNDollar[3].TypeValue,
			}
		}
	case 372:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3520
		{
			ASNVAL.TypeValue = MAP{
				"type": "INTEGER",
			}
		}
	case 373:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3525
		{
			ASNVAL.TypeValue = MAP{
				"type":    "INTEGER",
				"numbers": ASNDollar[3].TypeValue,
			}
		}
	case 374:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3539
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 375:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3544
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 376:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3555
		{
			ASNVAL.TypeValue = MAP{
				"type": "OID_IRI",
			}
		}
	case 377:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3567
		{
			ASNVAL.TypeValue = MAP{
				"type": "NULL",
			}
		}
	case 378:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3579
		{
			ASNVAL.TypeValue = MAP{
				"type":               "OBJECT_FIELD",
				"definedObjectClass": ASNDollar[1].TypeValue,
				"fieldName":          ASNDollar[3].TypeValue,
			}
		}
	case 379:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3593
		{
			ASNVAL.TypeValue = MAP{
				"type": "OBJECT_IDENTIFIER",
			}
		}
	case 380:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3605
		{
			ASNVAL.TypeValue = MAP{
				"type": "OCTET_STRING",
			}
		}
	case 381:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3617
		{
			ASNVAL.TypeValue = MAP{
				"type": "REAL",
			}
		}
	case 382:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3629
		{
			ASNVAL.TypeValue = MAP{
				"type": "RELATIVE_OID_IRI",
			}
		}
	case 383:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3641
		{
			ASNVAL.TypeValue = MAP{
				"type": "RELATIVE_OID",
			}
		}
	case 384:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3655
		{
			ASNVAL.TypeValue = MAP{
				"type": "SEQUENCE",
			}
		}
	case 385:
		ASNDollar = ASNS[ASNpt-9 : ASNpt+1]
//line asn.y:3660
		{
			ASNVAL.TypeValue = MAP{
				"type":                  "SEQUENCE",
				"extensionAndException": ASNDollar[3].TypeToken,
			}
		}
	case 386:
		ASNDollar = ASNS[ASNpt-14 : ASNpt+1]
//line asn.y:3666
		{
			ASNVAL.TypeValue = MAP{
				"type":           "SEQUENCE",
				"componentTypes": ASNDollar[3].TypeToken,
			}
		}
	case 387:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3683
		{
			ASNVAL.TypeValue = MAP{
				"rootComponentTypes": ASNDollar[1].TypeValue,
			}
		}
	case 388:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:3688
		{
			ASNVAL.TypeValue = MAP{
				"extensionAndException": ASNDollar[3].TypeValue,
				"extensionAdditions":    ASNDollar[4].TypeValue,
				"rootComponentTypes":    ASNDollar[1].TypeValue,
			}
		}
	case 389:
		ASNDollar = ASNS[ASNpt-7 : ASNpt+1]
//line asn.y:3695
		{
			ASNVAL.TypeValue = MAP{
				"extensionAndException": ASNDollar[3].TypeValue,
				"extensionAdditions":    ASNDollar[4].TypeValue,
				"rootComponentTypes":    append(ASNDollar[1].TypeValue.(LIST), ASNDollar[7].TypeValue.(LIST)),
			}
		}
	case 390:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:3702
		{
			ASNVAL.TypeValue = MAP{
				"extensionAndException": ASNDollar[1].TypeValue,
				"extensionAdditions":    ASNDollar[2].TypeValue,
				"rootComponentTypes":    ASNDollar[5].TypeValue,
			}
		}
	case 391:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3709
		{
			ASNVAL.TypeValue = MAP{
				"extensionAndException": ASNDollar[1].TypeValue,
				"extensionAdditions":    ASNDollar[2].TypeValue,
			}
		}
	case 392:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3722
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 393:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3733
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 394:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3738
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 395:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3752
		{
			ASNVAL.TypeValue = MAP{
				"type":      "COMPONENTS",
				"namedType": ASNDollar[1].TypeValue,
			}
		}
	case 396:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3758
		{
			ASNVAL.TypeValue = MAP{
				"type":      "COMPONENTS",
				"namedType": ASNDollar[1].TypeValue,
				"optional":  true,
			}
		}
	case 397:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3765
		{
			ASNVAL.TypeValue = MAP{
				"type":         "COMPONENTS",
				"namedType":    ASNDollar[1].TypeValue,
				"defaultValue": ASNDollar[3].TypeValue,
			}
		}
	case 398:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3772
		{
			ASNVAL.TypeValue = MAP{
				"type":     "COMPONENTS",
				"typename": ASNDollar[3].TypeValue,
			}
		}
	case 399:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3786
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 400:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3789
		{
			ASNVAL.TypeValue = nil
		}
	case 401:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3800
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 402:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3805
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 403:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3817
		{
			ASNVAL.TypeValue = MAP{
				"componentType": ASNDollar[1].TypeValue,
			}
		}
	case 404:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3822
		{
			ASNVAL.TypeValue = MAP{
				"extensionAdditionGroup": ASNDollar[1].TypeValue,
			}
		}
	case 405:
		ASNDollar = ASNS[ASNpt-6 : ASNpt+1]
//line asn.y:3834
		{
			ASNVAL.TypeValue = MAP{
				"version":        ASNDollar[3].TypeValue,
				"componentTypes": ASNDollar[4].TypeValue,
			}
		}
	case 406:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3847
		{
			ASNVAL.TypeValue = true
		}
	case 407:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3858
		{
			ASNVAL.TypeValue = MAP{
				"type":     "SEQUENCE_OF",
				"typename": ASNDollar[3].TypeValue,
			}
		}
	case 408:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3864
		{
			ASNVAL.TypeValue = MAP{
				"type":      "SEQUENCE_OF",
				"namedType": ASNDollar[3].TypeValue,
			}
		}
	case 409:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3879
		{
			ASNVAL.TypeValue = MAP{
				"type": "SET",
			}
		}
	case 410:
		ASNDollar = ASNS[ASNpt-9 : ASNpt+1]
//line asn.y:3884
		{
			ASNVAL.TypeValue = MAP{
				"type":                  "SET",
				"extensionAndException": ASNDollar[3].TypeToken,
			}
		}
	case 411:
		ASNDollar = ASNS[ASNpt-14 : ASNpt+1]
//line asn.y:3890
		{
			ASNVAL.TypeValue = MAP{
				"type":           "SET",
				"componentTypes": ASNDollar[3].TypeToken,
			}
		}
	case 412:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3904
		{
			ASNVAL.TypeValue = MAP{
				"type":     "SET_OF",
				"typename": ASNDollar[3].TypeValue,
			}
		}
	case 413:
		ASNDollar = ASNS[ASNpt-7 : ASNpt+1]
//line asn.y:3910
		{
			ASNVAL.TypeValue = MAP{
				"type":      "SET_OF",
				"namedType": ASNDollar[3].TypeValue,
			}
		}
	case 414:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3923
		{
			ASNVAL.TypeValue = MAP{
				"type": "TIME",
			}
		}
	case 415:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3935
		{
			ASNVAL.TypeValue = MAP{
				"type": "TIME_OF_DAY",
			}
		}
	case 416:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3948
		{
			ASNVAL.TypeValue = MAP{
				"type":       "PREFIXED",
				"taggedType": ASNDollar[1].TypeValue,
			}
		}
	case 417:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3954
		{
			ASNVAL.TypeValue = MAP{
				"type":                 "PREFIXED",
				"encodingPrefixedType": ASNDollar[1].TypeValue,
			}
		}
	case 418:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3969
		{
			ASNVAL.TypeValue = MAP{
				"tag":      ASNDollar[1].TypeValue,
				"typename": ASNDollar[2].TypeValue,
			}
		}
	case 419:
		ASNDollar = ASNS[ASNpt-6 : ASNpt+1]
//line asn.y:3975
		{
			ASNVAL.TypeValue = MAP{
				"tag":      ASNDollar[1].TypeValue,
				"typename": ASNDollar[2].TypeValue,
				"implicit": true,
			}
		}
	case 420:
		ASNDollar = ASNS[ASNpt-10 : ASNpt+1]
//line asn.y:3982
		{
			ASNVAL.TypeValue = MAP{
				"tag":      ASNDollar[1].TypeValue,
				"typename": ASNDollar[2].TypeValue,
				"explicit": true,
			}
		}
	case 421:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:3996
		{
			ASNVAL.TypeValue = MAP{
				"encodingReference": ASNDollar[2].TypeValue,
				"class":             ASNDollar[3].TypeValue,
				"classNumber":       ASNDollar[4].TypeValue,
			}
		}
	case 422:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4011
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 423:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4024
		{
			ASNVAL.TypeValue = STRING("UNIVERSAL")
		}
	case 424:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4027
		{
			ASNVAL.TypeValue = STRING("APPLICATION")
		}
	case 425:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4030
		{
			ASNVAL.TypeValue = STRING("PRIVATE")
		}
	case 426:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4033
		{
			ASNVAL.TypeValue = nil
		}
	case 427:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4044
		{
			ASNVAL.TypeValue = MAP{
				"number": ASNDollar[1].TypeValue,
			}
		}
	case 428:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4049
		{
			ASNVAL.TypeValue = MAP{
				"definedValue": ASNDollar[1].TypeValue,
			}
		}
	case 429:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4061
		{
			ASNVAL.TypeValue = MAP{
				"encodingPrefix": ASNDollar[1].TypeValue,
				"typename":       ASNDollar[2].TypeValue,
			}
		}
	case 430:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:4074
		{
			ASNVAL.TypeValue = MAP{
				"encodingReference":   ASNDollar[2].TypeValue,
				"encodingInstruction": ASNDollar[3].TypeValue,
			}
		}
	case 431:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4087
		{
			ASNVAL.TypeValue = STRING("TAG")
		}
	case 432:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4090
		{
			ASNVAL.TypeValue = STRING("XER")
		}
	case 433:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4093
		{
			ASNVAL.TypeValue = STRING("PER")
		}
	case 434:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4124
		{
			ASNVAL.TypeValue = MAP{
				"bitString": ASNDollar[1].TypeValue,
			}
		}
	case 435:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4129
		{
			ASNVAL.TypeValue = MAP{
				"boolean": ASNDollar[1].TypeValue,
			}
		}
	case 436:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4134
		{
			ASNVAL.TypeValue = MAP{
				"characterString": ASNDollar[1].TypeValue,
			}
		}
	case 437:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4139
		{
			ASNVAL.TypeValue = MAP{
				"choice": ASNDollar[1].TypeValue,
			}
		}
	case 438:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4144
		{
			ASNVAL.TypeValue = MAP{
				"embeddedPDV": ASNDollar[1].TypeValue,
			}
		}
	case 439:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4149
		{
			ASNVAL.TypeValue = MAP{
				"enumerated": ASNDollar[1].TypeValue,
			}
		}
	case 440:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4154
		{
			ASNVAL.TypeValue = MAP{
				"external": ASNDollar[1].TypeValue,
			}
		}
	case 441:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4159
		{
			ASNVAL.TypeValue = MAP{
				"instanceOf": ASNDollar[1].TypeValue,
			}
		}
	case 442:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4164
		{
			ASNVAL.TypeValue = MAP{
				"integer": ASNDollar[1].TypeValue,
			}
		}
	case 443:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4169
		{
			ASNVAL.TypeValue = MAP{
				"iri": ASNDollar[1].TypeValue,
			}
		}
	case 444:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4174
		{
			ASNVAL.TypeValue = MAP{
				"null": ASNDollar[1].TypeValue,
			}
		}
	case 445:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4179
		{
			ASNVAL.TypeValue = MAP{
				"objectIdentifier": ASNDollar[1].TypeValue,
			}
		}
	case 446:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4184
		{
			ASNVAL.TypeValue = MAP{
				"octetString": ASNDollar[1].TypeValue,
			}
		}
	case 447:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4189
		{
			ASNVAL.TypeValue = MAP{
				"real": ASNDollar[1].TypeValue,
			}
		}
	case 448:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4194
		{
			ASNVAL.TypeValue = MAP{
				"relativeIRI": ASNDollar[1].TypeValue,
			}
		}
	case 449:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4199
		{
			ASNVAL.TypeValue = MAP{
				"relativeOID": ASNDollar[1].TypeValue,
			}
		}
	case 450:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4204
		{
			ASNVAL.TypeValue = MAP{
				"sequence": ASNDollar[1].TypeValue,
			}
		}
	case 451:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4209
		{
			ASNVAL.TypeValue = MAP{
				"sequenceOf": ASNDollar[1].TypeValue,
			}
		}
	case 452:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4214
		{
			ASNVAL.TypeValue = MAP{
				"set": ASNDollar[1].TypeValue,
			}
		}
	case 453:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4219
		{
			ASNVAL.TypeValue = MAP{
				"setOf": ASNDollar[1].TypeValue,
			}
		}
	case 454:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4224
		{
			ASNVAL.TypeValue = MAP{
				"prefixed": ASNDollar[1].TypeValue,
			}
		}
	case 455:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4229
		{
			ASNVAL.TypeValue = MAP{
				"time": ASNDollar[1].TypeValue,
			}
		}
	case 456:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4245
		{
			ASNVAL.TypeValue = MAP{
				"bstring": ASNDollar[1].TypeString,
			}
		}
	case 457:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4250
		{
			ASNVAL.TypeValue = MAP{
				"hstring": ASNDollar[1].TypeString,
			}
		}
	case 458:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4255
		{
			ASNVAL.TypeValue = MAP{
				"indentifiers": ASNDollar[2].TypeValue,
			}
		}
	case 459:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4260
		{
			ASNVAL.TypeValue = nil
		}
	case 460:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4263
		{
			ASNVAL.TypeValue = MAP{
				"bstring": ASNDollar[2].TypeValue,
			}
		}
	case 461:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4276
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 462:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4281
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeToken)
		}
	case 463:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4292
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 464:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4295
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 465:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4306
		{
			ASNVAL.TypeValue = MAP{
				"restrictedCharacterString": ASNDollar[1].TypeValue,
			}
		}
	case 466:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4311
		{
			ASNVAL.TypeValue = MAP{
				"unrestrictedCharacterString": ASNDollar[1].TypeValue,
			}
		}
	case 467:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4326
		{
			ASNVAL.TypeValue = MAP{
				"cstring": ASNDollar[1].TypeString,
			}
		}
	case 468:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4331
		{
			ASNVAL.TypeValue = MAP{
				"characterStringList": ASNDollar[1].TypeValue,
			}
		}
	case 469:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4336
		{
			ASNVAL.TypeValue = MAP{
				"quadruple": ASNDollar[1].TypeValue,
			}
		}
	case 470:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4341
		{
			ASNVAL.TypeValue = MAP{
				"tuple": ASNDollar[1].TypeValue,
			}
		}
	case 471:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4352
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 472:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4363
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 473:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4368
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeToken)
		}
	case 474:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4382
		{
			ASNVAL.TypeValue = MAP{
				"cstring": ASNDollar[1].TypeString,
			}
		}
	case 475:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4387
		{
			ASNVAL.TypeValue = MAP{
				"quadruple": ASNDollar[1].TypeValue,
			}
		}
	case 476:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4392
		{
			ASNVAL.TypeValue = MAP{
				"tuple": ASNDollar[1].TypeValue,
			}
		}
	case 477:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4397
		{
			ASNVAL.TypeValue = MAP{
				"definedValue": ASNDollar[1].TypeValue,
			}
		}
	case 478:
		ASNDollar = ASNS[ASNpt-9 : ASNpt+1]
//line asn.y:4408
		{
			ASNVAL.TypeValue = MAP{
				"group": ASNDollar[2].TypeValue,
				"plane": ASNDollar[4].TypeValue,
				"row":   ASNDollar[6].TypeValue,
				"cell":  ASNDollar[8].TypeValue,
			}
		}
	case 479:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4422
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 480:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4431
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 481:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4440
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 482:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4449
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 483:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:4458
		{
			ASNVAL.TypeValue = MAP{
				"tableColumn": ASNDollar[2].TypeValue,
				"tableRow":    ASNDollar[4].TypeValue,
			}
		}
	case 484:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4470
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 485:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4479
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 486:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4488
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 487:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4497
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"value":      ASNDollar[2].TypeToken,
			}
		}
	case 488:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4509
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 489:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4518
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 490:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4527
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 491:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4538
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 492:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4547
		{
			ASNVAL.TypeValue = STRING("NULL")
		}
	case 493:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4559
		{
			ASNVAL.TypeValue = MAP{
				"bstring": ASNDollar[1].TypeString,
			}
		}
	case 494:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4564
		{
			ASNVAL.TypeValue = MAP{
				"hstring": ASNDollar[1].TypeString,
			}
		}
	case 495:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4569
		{
			ASNVAL.TypeValue = MAP{
				"value": ASNDollar[2].TypeValue,
			}
		}
	case 496:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4582
		{
			ASNVAL.TypeValue = MAP{
				"numericRealValue": ASNDollar[1].TypeValue,
			}
		}
	case 497:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4587
		{
			ASNVAL.TypeValue = MAP{
				"specialRealValue": ASNDollar[1].TypeValue,
			}
		}
	case 498:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4601
		{
			ASNVAL.TypeValue = MAP{
				"realNumber": ASNDollar[1].TypeValue,
			}
		}
	case 499:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4606
		{
			ASNVAL.TypeValue = MAP{
				"sequenceValue": ASNDollar[1].TypeValue,
			}
		}
	case 500:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4614
		{
			ASNVAL.TypeValue = STRING("PLUS_INFINITY")
		}
	case 501:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4617
		{
			ASNVAL.TypeValue = STRING("MINUS_INFINITY")
		}
	case 502:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4620
		{
			ASNVAL.TypeValue = STRING("NOT_A_NUMBER")
		}
	case 503:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4626
		{
			ASNVAL.TypeValue = nil
		}
	case 504:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4632
		{
			ASNVAL.TypeValue = nil
		}
	case 505:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4638
		{
			ASNVAL.TypeValue = nil
		}
	case 506:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4644
		{
			ASNVAL.TypeValue = nil
		}
	case 507:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4650
		{
			ASNVAL.TypeValue = nil
		}
	case 508:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4653
		{
			ASNVAL.TypeValue = nil
		}
	case 509:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4659
		{
			ASNVAL.TypeValue = nil
		}
	case 510:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4662
		{
			ASNVAL.TypeValue = nil
		}
	case 511:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4665
		{
			ASNVAL.TypeValue = nil
		}
	case 512:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4671
		{
			ASNVAL.TypeValue = nil
		}
	case 513:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4677
		{
			ASNVAL.TypeValue = nil
		}
	case 514:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4683
		{
			ASNVAL.TypeValue = nil
		}
	case 515:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4689
		{
			ASNVAL.TypeValue = nil
		}
	case 516:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4695
		{
			ASNVAL.TypeValue = nil
		}
	case 517:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4701
		{
			ASNVAL.TypeValue = nil
		}
	case 518:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4707
		{
			ASNVAL.TypeValue = nil
		}
	case 519:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4713
		{
			ASNVAL.TypeValue = nil
		}
	case 520:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4719
		{
			ASNVAL.TypeValue = nil
		}
	case 521:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4725
		{
			ASNVAL.TypeValue = nil
		}
	case 522:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4731
		{
			ASNVAL.TypeValue = nil
		}
	case 523:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4737
		{
			ASNVAL.TypeValue = nil
		}
	case 524:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4743
		{
			ASNVAL.TypeValue = nil
		}
	case 525:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4749
		{
			ASNVAL.TypeValue = nil
		}
	case 526:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4755
		{
			ASNVAL.TypeValue = nil
		}
	case 527:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4761
		{
			ASNVAL.TypeValue = nil
		}
	case 528:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4767
		{
			ASNVAL.TypeValue = nil
		}
	case 529:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4773
		{
			ASNVAL.TypeValue = nil
		}
	case 530:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4779
		{
			ASNVAL.TypeValue = nil
		}
	case 531:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4785
		{
			ASNVAL.TypeValue = nil
		}
	case 532:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4791
		{
			ASNVAL.TypeValue = MAP{
				"type":  "EXTERNAL_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 533:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4797
		{
			ASNVAL.TypeValue = MAP{
				"type":  "STRING_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 534:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4803
		{
			ASNVAL.TypeValue = MAP{
				"type":  "NUMBER_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 535:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4809
		{
			ASNVAL.TypeValue = MAP{
				"type":  "PARAMETERIZED_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 536:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4818
		{
			ASNVAL.TypeValue = MAP{
				"module": ASNDollar[1].TypeValue,
				"value":  ASNDollar[3].TypeValue,
			}
		}
	case 537:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4827
		{
			ASNVAL.TypeValue = nil
		}
	case 538:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4833
		{
			ASNVAL.TypeValue = nil
		}
	case 539:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4839
		{
			ASNVAL.TypeValue = nil
		}
	case 540:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4845
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 541:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4848
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 542:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4854
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeNumber
		}
	case 543:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4857
		{
			ASNVAL.TypeValue = (-1) * ASNDollar[2].TypeNumber
		}
	case 544:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4860
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeNumber
		}
	case 545:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4863
		{
			ASNVAL.TypeValue = (-1) * ASNDollar[2].TypeNumber
		}
	case 546:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4869
		{
			ASNVAL.TypeValue = STRING("::=")
		}
	case 547:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4875
		{
			SkipBlock()
		}
	case 548:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4878
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeString
		}
	}
	goto ASNstack /* stack new state and value */
}
