// Code generated by goyacc -p ASN asn.y. DO NOT EDIT.

//line asn.y:1

package main

import __yyfmt__ "fmt"

//line asn.y:3
import (
	"bytes"
	"encoding/json"
	"fmt"
)

var code bytes.Buffer

func AddLine(line string) {
	code.WriteString(line)
	code.WriteByte('\n')
}

func JSON(obj interface{}) string {
	data, err := json.MarshalIndent(obj, "", "    ")
	if nil != err {
		fmt.Println("Error: ", err)
		return ""
	}
	return string(data)
}

func Print(line string) {
	fmt.Println(line)
}

func Join(values ...string) string {
	var buffer bytes.Buffer
	for _, value := range values {
		buffer.WriteString(value)
	}
	return buffer.String()
}

func SkipBlock() {
	parser.ExpectBlock = true
}

func SetResult(l ASNLexer, v VALUE) {
	l.(*Parser).Result = JSON(&v)
}

type Empty struct{}
type (
	VALUE   interface{}
	STRING  string
	NUMBER  float64
	BOOLEAN bool
	LIST    []VALUE
	MAP     map[string]VALUE
)

//line asn.y:56
type ASNSymType struct {
	yys         int
	TypeToken   struct{}
	TypeString  STRING
	TypeNumber  NUMBER
	TypeValue   VALUE
	TypeBoolean BOOLEAN
	TypeMap     MAP
	TypeList    LIST
}

const CURLY_START = 57346
const CURLY_END = 57347
const SQUARE_START = 57348
const SQUARE_END = 57349
const DOUBLE_QUOTE = 57350
const SINGLE_QUOTE = 57351
const COMMA = 57352
const COLON = 57353
const MINUS = 57354
const GREATER_THAN = 57355
const LESS_THAN = 57356
const DOT = 57357
const SLASH = 57358
const ROUND_START = 57359
const ROUND_END = 57360
const EQUALITY = 57361
const APOSTROPHE = 57362
const SPACE = 57363
const PIPE = 57364
const AT_THE_RATE = 57365
const EXCLAMATION = 57366
const CARET = 57367
const SEMI_COMMA = 57368
const ELLIPSIS = 57369
const ABSENT_SYMBOL = 57370
const ABSTRACTSYNTAX_SYMBOL = 57371
const ALL_SYMBOL = 57372
const APPLICATION_SYMBOL = 57373
const AUTOMATIC_SYMBOL = 57374
const BEGIN_SYMBOL = 57375
const BIT_SYMBOL = 57376
const BMPSTRING_SYMBOL = 57377
const BOOLEAN_SYMBOL = 57378
const BY_SYMBOL = 57379
const CHARACTER_SYMBOL = 57380
const CHOICE_SYMBOL = 57381
const CLASS_SYMBOL = 57382
const COMPONENT_SYMBOL = 57383
const COMPONENTS_SYMBOL = 57384
const CONSTRAINED_SYMBOL = 57385
const CONTAINING_SYMBOL = 57386
const DATE_SYMBOL = 57387
const DATETIME_SYMBOL = 57388
const DEFAULT_SYMBOL = 57389
const DEFINITIONS_SYMBOL = 57390
const DURATION_SYMBOL = 57391
const EMBEDDED_SYMBOL = 57392
const ENCODED_SYMBOL = 57393
const ENCODINGCONTROL_SYMBOL = 57394
const END_SYMBOL = 57395
const ENUMERATED_SYMBOL = 57396
const EXCEPT_SYMBOL = 57397
const EXPLICIT_SYMBOL = 57398
const EXPORTS_SYMBOL = 57399
const EXTENSIBILITY_SYMBOL = 57400
const EXTERNEL_SYMBOL = 57401
const FALSE_SYMBOL = 57402
const FROM_SYMBOL = 57403
const GENERALIZEDTIME_SYMBOL = 57404
const GENERALSTRING_SYMBOL = 57405
const GRAPHICSTRING_SYMBOL = 57406
const IA5STRING_SYMBOL = 57407
const IDENTIFIER_SYMBOL = 57408
const IMPLICIT_SYMBOL = 57409
const IMPLIED_SYMBOL = 57410
const IMPORTS_SYMBOL = 57411
const INCLUDES_SYMBOL = 57412
const INSTANCE_SYMBOL = 57413
const INSTRUCTIONS_SYMBOL = 57414
const INTEGER_SYMBOL = 57415
const INTERSECTION_SYMBOL = 57416
const ISO646STRING_SYMBOL = 57417
const MAX_SYMBOL = 57418
const MIN_SYMBOL = 57419
const MINUSINFINITY_SYMBOL = 57420
const NOTANUMBER_SYMBOL = 57421
const NULL_SYMBOL = 57422
const NUMERICSTRING_SYMBOL = 57423
const OBJECT_SYMBOL = 57424
const OBJECTDESCRIPTOR_SYMBOL = 57425
const OCTET_SYMBOL = 57426
const OF_SYMBOL = 57427
const OIDIRI_SYMBOL = 57428
const OPTIONAL_SYMBOL = 57429
const PATTERN_SYMBOL = 57430
const PDV_SYMBOL = 57431
const PLUSINFINITY_SYMBOL = 57432
const PRESENT_SYMBOL = 57433
const PRINTABLESTRING_SYMBOL = 57434
const PRIVATE_SYMBOL = 57435
const REAL_SYMBOL = 57436
const RELATIVEOID_SYMBOL = 57437
const RELATIVEOIDIRI_SYMBOL = 57438
const SEQUENCE_SYMBOL = 57439
const SET_SYMBOL = 57440
const SETTINGS_SYMBOL = 57441
const SIZE_SYMBOL = 57442
const STRING_SYMBOL = 57443
const SYNTAX_SYMBOL = 57444
const T61STRING_SYMBOL = 57445
const TAGS_SYMBOL = 57446
const TELETEXSTRING_SYMBOL = 57447
const TIME_SYMBOL = 57448
const TIMEOFDAY_SYMBOL = 57449
const TRUE_SYMBOL = 57450
const TYPEIDENTIFIER_SYMBOL = 57451
const UNION_SYMBOL = 57452
const UNIQUE_SYMBOL = 57453
const UNIVERSAL_SYMBOL = 57454
const UNIVERSALSTRING_SYMBOL = 57455
const UTCTIME_SYMBOL = 57456
const UTF8STRING_SYMBOL = 57457
const VIDEOTEXSTRING_SYMBOL = 57458
const VISIBLESTRING_SYMBOL = 57459
const WITH_SYMBOL = 57460
const ASSIGNMENT_SYMBOL = 57461
const TAG_SYMBOL = 57462
const XER_SYMBOL = 57463
const PER_SYMBOL = 57464
const TokenCapitalString = 57465
const TokenString = 57466
const TokenNumber = 57467
const TokenInteger = 57468
const TokenFloat = 57469
const TokenBoolean = 57470
const TokenBString = 57471
const TokenHString = 57472
const TokenCString = 57473
const TokenBlock = 57474

var ASNToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"CURLY_START",
	"CURLY_END",
	"SQUARE_START",
	"SQUARE_END",
	"DOUBLE_QUOTE",
	"SINGLE_QUOTE",
	"COMMA",
	"COLON",
	"MINUS",
	"GREATER_THAN",
	"LESS_THAN",
	"DOT",
	"SLASH",
	"ROUND_START",
	"ROUND_END",
	"EQUALITY",
	"APOSTROPHE",
	"SPACE",
	"PIPE",
	"AT_THE_RATE",
	"EXCLAMATION",
	"CARET",
	"SEMI_COMMA",
	"ELLIPSIS",
	"ABSENT_SYMBOL",
	"ABSTRACTSYNTAX_SYMBOL",
	"ALL_SYMBOL",
	"APPLICATION_SYMBOL",
	"AUTOMATIC_SYMBOL",
	"BEGIN_SYMBOL",
	"BIT_SYMBOL",
	"BMPSTRING_SYMBOL",
	"BOOLEAN_SYMBOL",
	"BY_SYMBOL",
	"CHARACTER_SYMBOL",
	"CHOICE_SYMBOL",
	"CLASS_SYMBOL",
	"COMPONENT_SYMBOL",
	"COMPONENTS_SYMBOL",
	"CONSTRAINED_SYMBOL",
	"CONTAINING_SYMBOL",
	"DATE_SYMBOL",
	"DATETIME_SYMBOL",
	"DEFAULT_SYMBOL",
	"DEFINITIONS_SYMBOL",
	"DURATION_SYMBOL",
	"EMBEDDED_SYMBOL",
	"ENCODED_SYMBOL",
	"ENCODINGCONTROL_SYMBOL",
	"END_SYMBOL",
	"ENUMERATED_SYMBOL",
	"EXCEPT_SYMBOL",
	"EXPLICIT_SYMBOL",
	"EXPORTS_SYMBOL",
	"EXTENSIBILITY_SYMBOL",
	"EXTERNEL_SYMBOL",
	"FALSE_SYMBOL",
	"FROM_SYMBOL",
	"GENERALIZEDTIME_SYMBOL",
	"GENERALSTRING_SYMBOL",
	"GRAPHICSTRING_SYMBOL",
	"IA5STRING_SYMBOL",
	"IDENTIFIER_SYMBOL",
	"IMPLICIT_SYMBOL",
	"IMPLIED_SYMBOL",
	"IMPORTS_SYMBOL",
	"INCLUDES_SYMBOL",
	"INSTANCE_SYMBOL",
	"INSTRUCTIONS_SYMBOL",
	"INTEGER_SYMBOL",
	"INTERSECTION_SYMBOL",
	"ISO646STRING_SYMBOL",
	"MAX_SYMBOL",
	"MIN_SYMBOL",
	"MINUSINFINITY_SYMBOL",
	"NOTANUMBER_SYMBOL",
	"NULL_SYMBOL",
	"NUMERICSTRING_SYMBOL",
	"OBJECT_SYMBOL",
	"OBJECTDESCRIPTOR_SYMBOL",
	"OCTET_SYMBOL",
	"OF_SYMBOL",
	"OIDIRI_SYMBOL",
	"OPTIONAL_SYMBOL",
	"PATTERN_SYMBOL",
	"PDV_SYMBOL",
	"PLUSINFINITY_SYMBOL",
	"PRESENT_SYMBOL",
	"PRINTABLESTRING_SYMBOL",
	"PRIVATE_SYMBOL",
	"REAL_SYMBOL",
	"RELATIVEOID_SYMBOL",
	"RELATIVEOIDIRI_SYMBOL",
	"SEQUENCE_SYMBOL",
	"SET_SYMBOL",
	"SETTINGS_SYMBOL",
	"SIZE_SYMBOL",
	"STRING_SYMBOL",
	"SYNTAX_SYMBOL",
	"T61STRING_SYMBOL",
	"TAGS_SYMBOL",
	"TELETEXSTRING_SYMBOL",
	"TIME_SYMBOL",
	"TIMEOFDAY_SYMBOL",
	"TRUE_SYMBOL",
	"TYPEIDENTIFIER_SYMBOL",
	"UNION_SYMBOL",
	"UNIQUE_SYMBOL",
	"UNIVERSAL_SYMBOL",
	"UNIVERSALSTRING_SYMBOL",
	"UTCTIME_SYMBOL",
	"UTF8STRING_SYMBOL",
	"VIDEOTEXSTRING_SYMBOL",
	"VISIBLESTRING_SYMBOL",
	"WITH_SYMBOL",
	"ASSIGNMENT_SYMBOL",
	"TAG_SYMBOL",
	"XER_SYMBOL",
	"PER_SYMBOL",
	"TokenCapitalString",
	"TokenString",
	"TokenNumber",
	"TokenInteger",
	"TokenFloat",
	"TokenBoolean",
	"TokenBString",
	"TokenHString",
	"TokenCString",
	"TokenBlock",
}

var ASNStatenames = [...]string{}

const ASNEofCode = 1
const ASNErrCode = 2
const ASNInitialStackSize = 16

//line asn.y:5117

//line yacctab:1
var ASNExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 45,
	123, 36,
	124, 36,
	-2, 32,
	-1, 100,
	15, 542,
	-2, 539,
	-1, 165,
	4, 139,
	-2, 132,
	-1, 166,
	4, 140,
	-2, 133,
	-1, 207,
	15, 222,
	-2, 536,
	-1, 234,
	10, 558,
	15, 542,
	-2, 536,
	-1, 312,
	22, 265,
	110, 265,
	-2, 195,
	-1, 314,
	25, 262,
	74, 262,
	-2, 197,
	-1, 318,
	55, 206,
	-2, 201,
	-1, 322,
	15, 222,
	-2, 536,
	-1, 336,
	15, 169,
	-2, 258,
	-1, 338,
	15, 170,
	-2, 260,
	-1, 339,
	14, 226,
	15, 226,
	-2, 219,
	-1, 347,
	4, 140,
	-2, 133,
	-1, 352,
	14, 492,
	15, 492,
	-2, 377,
	-1, 380,
	4, 140,
	-2, 133,
	-1, 386,
	15, 173,
	-2, 136,
	-1, 398,
	15, 542,
	-2, 536,
	-1, 419,
	10, 477,
	-2, 65,
	-1, 429,
	10, 461,
	-2, 66,
	-1, 430,
	10, 479,
	-2, 67,
	-1, 449,
	15, 542,
	-2, 557,
	-1, 455,
	10, 461,
	-2, 66,
	-1, 457,
	15, 222,
	-2, 536,
	-1, 458,
	15, 222,
	-2, 536,
	-1, 461,
	15, 222,
	-2, 536,
	-1, 502,
	15, 542,
	-2, 536,
	-1, 503,
	10, 461,
	-2, 66,
	-1, 504,
	10, 503,
	-2, 144,
	-1, 544,
	4, 140,
	11, 133,
	17, 133,
	-2, 552,
	-1, 546,
	11, 542,
	15, 542,
	-2, 275,
	-1, 552,
	25, 262,
	74, 262,
	-2, 198,
	-1, 601,
	15, 222,
	-2, 536,
	-1, 605,
	15, 169,
	-2, 278,
	-1, 606,
	11, 281,
	-2, 279,
	-1, 607,
	11, 282,
	-2, 280,
	-1, 610,
	5, 177,
	-2, 555,
	-1, 631,
	4, 136,
	5, 136,
	11, 136,
	15, 173,
	17, 136,
	-2, 555,
	-1, 762,
	10, 406,
	-2, 352,
}

const ASNPrivate = 57344

const ASNLast = 2294

var ASNAct = [...]int{
	283, 5, 734, 5, 732, 735, 741, 749, 692, 731,
	753, 733, 702, 206, 362, 685, 654, 670, 645, 651,
	448, 612, 367, 603, 535, 433, 309, 476, 335, 445,
	370, 187, 390, 292, 431, 411, 291, 368, 318, 193,
	736, 408, 355, 237, 316, 432, 185, 456, 357, 236,
	397, 65, 65, 314, 204, 394, 264, 83, 83, 327,
	65, 33, 34, 238, 737, 23, 703, 402, 415, 444,
	564, 72, 23, 68, 83, 521, 14, 67, 648, 277,
	192, 416, 23, 285, 166, 737, 39, 23, 402, 613,
	511, 83, 6, 7, 65, 199, 38, 37, 230, 217,
	284, 166, 30, 459, 210, 720, 573, 572, 756, 23,
	719, 571, 212, 21, 657, 62, 21, 746, 628, 278,
	383, 745, 588, 382, 29, 671, 376, 375, 51, 403,
	23, 214, 50, 40, 43, 280, 23, 36, 102, 574,
	50, 462, 216, 60, 737, 6, 7, 51, 401, 696,
	403, 615, 509, 294, 295, 286, 404, 405, 406, 23,
	579, 744, 6, 7, 74, 293, 6, 7, 23, 401,
	6, 7, 457, 218, 223, 55, 6, 7, 9, 22,
	24, 23, 673, 279, 343, 410, 22, 24, 166, 166,
	463, 460, 23, 6, 7, 73, 22, 24, 6, 7,
	244, 22, 24, 92, 275, 276, 289, 242, 347, 197,
	358, 608, 364, 469, 369, 23, 374, 41, 725, 219,
	224, 20, 380, 22, 24, 6, 7, 166, 386, 166,
	358, 6, 7, 6, 7, 347, 381, 353, 99, 233,
	235, 6, 7, 412, 22, 24, 373, 338, 20, 584,
	22, 24, 363, 90, 348, 99, 240, 71, 310, 354,
	207, 249, 379, 396, 93, 55, 70, 28, 101, 371,
	6, 7, 388, 22, 24, 48, 61, 726, 429, 6,
	7, 724, 22, 24, 391, 201, 447, 49, 336, 395,
	241, 27, 6, 7, 547, 22, 24, 418, 453, 451,
	245, 100, 26, 6, 7, 53, 22, 24, 347, 225,
	45, 439, 455, 762, 438, 94, 564, 674, 566, 205,
	208, 545, 207, 347, 97, 57, 6, 7, 69, 22,
	24, 449, 96, 409, 91, 646, 56, 339, 52, 650,
	649, 166, 632, 413, 220, 439, 435, 471, 438, 465,
	625, 624, 600, 417, 554, 513, 468, 207, 207, 436,
	477, 539, 338, 44, 42, 166, 207, 464, 419, 348,
	207, 562, 231, 232, 485, 32, 380, 380, 430, 536,
	435, 166, 16, 380, 380, 441, 446, 42, 228, 227,
	226, 209, 454, 436, 228, 577, 228, 227, 31, 503,
	244, 684, 419, 336, 686, 222, 378, 209, 555, 412,
	412, 385, 430, 387, 474, 472, 489, 491, 514, 392,
	412, 499, 467, 494, 496, 221, 526, 396, 417, 229,
	473, 773, 439, 718, 743, 438, 480, 668, 707, 642,
	222, 640, 669, 770, 510, 447, 641, 560, 391, 531,
	544, 512, 561, 395, 532, 529, 441, 407, 347, 347,
	530, 512, 347, 46, 527, 517, 42, 435, 537, 528,
	518, 522, 515, 358, 538, 358, 751, 516, 763, 486,
	436, 364, 761, 557, 487, 369, 244, 742, 374, 419,
	507, 563, 452, 743, 523, 740, 551, 338, 338, 430,
	506, 338, 714, 347, 348, 348, 553, 524, 348, 413,
	413, 713, 552, 412, 244, 558, 525, 582, 570, 244,
	413, 565, 567, 559, 484, 466, 413, 682, 652, 594,
	675, 396, 658, 594, 634, 576, 621, 447, 336, 336,
	542, 601, 336, 248, 575, 446, 520, 166, 510, 481,
	541, 610, 586, 583, 593, 585, 519, 395, 596, 502,
	488, 490, 477, 244, 483, 481, 598, 493, 495, 480,
	479, 450, 393, 93, 599, 166, 569, 597, 631, 774,
	727, 578, 580, 392, 508, 622, 568, 623, 764, 617,
	500, 676, 747, 739, 730, 712, 711, 695, 694, 635,
	630, 607, 347, 549, 581, 501, 482, 478, 384, 587,
	377, 200, 729, 413, 413, 434, 440, 728, 690, 245,
	590, 592, 364, 636, 234, 627, 626, 605, 639, 364,
	609, 546, 359, 215, 543, 647, 213, 446, 659, 660,
	211, 338, 166, 95, 12, 440, 662, 672, 348, 434,
	389, 3, 498, 619, 8, 709, 497, 708, 492, 369,
	616, 1, 656, 618, 428, 665, 427, 426, 443, 661,
	442, 667, 400, 188, 505, 399, 364, 162, 161, 679,
	680, 678, 336, 470, 755, 699, 672, 392, 683, 633,
	752, 705, 691, 364, 681, 372, 607, 166, 677, 366,
	365, 655, 701, 700, 653, 620, 361, 706, 360, 142,
	141, 475, 540, 644, 705, 705, 656, 306, 305, 717,
	604, 602, 605, 302, 301, 300, 721, 722, 337, 364,
	364, 606, 723, 363, 716, 664, 504, 715, 704, 738,
	689, 688, 687, 364, 364, 556, 611, 166, 754, 757,
	350, 341, 748, 340, 334, 760, 333, 332, 331, 629,
	330, 750, 364, 329, 364, 328, 767, 533, 766, 754,
	364, 364, 771, 769, 768, 772, 326, 693, 325, 534,
	765, 324, 323, 698, 321, 320, 319, 461, 277, 317,
	458, 548, 285, 533, 315, 441, 23, 312, 228, 577,
	638, 513, 303, 299, 298, 297, 296, 138, 356, 196,
	195, 191, 190, 98, 54, 189, 168, 167, 165, 137,
	136, 135, 134, 133, 64, 63, 606, 425, 278, 288,
	287, 591, 424, 697, 663, 589, 423, 422, 290, 421,
	393, 533, 282, 281, 280, 274, 273, 272, 271, 270,
	269, 268, 267, 266, 265, 263, 262, 261, 260, 259,
	258, 257, 294, 295, 286, 693, 256, 255, 595, 254,
	253, 252, 251, 250, 293, 247, 246, 243, 132, 131,
	130, 710, 129, 128, 127, 126, 125, 124, 123, 122,
	121, 120, 279, 614, 119, 118, 117, 116, 114, 115,
	113, 112, 111, 110, 109, 108, 107, 6, 7, 106,
	22, 24, 105, 275, 276, 289, 104, 103, 89, 88,
	87, 86, 85, 84, 203, 202, 311, 82, 194, 81,
	285, 759, 533, 80, 23, 79, 78, 77, 637, 322,
	76, 75, 414, 239, 198, 66, 643, 59, 58, 47,
	35, 614, 313, 13, 25, 19, 139, 180, 140, 18,
	186, 143, 17, 15, 11, 304, 307, 144, 145, 10,
	4, 146, 147, 308, 2, 0, 148, 0, 0, 0,
	666, 149, 280, 342, 182, 176, 170, 181, 0, 0,
	0, 0, 349, 150, 0, 151, 0, 174, 0, 351,
	294, 295, 352, 171, 154, 184, 155, 0, 152, 0,
	345, 0, 293, 0, 173, 0, 156, 158, 157, 159,
	160, 346, 222, 0, 0, 177, 0, 175, 163, 164,
	279, 0, 0, 0, 0, 178, 183, 169, 179, 172,
	344, 0, 0, 0, 0, 6, 7, 0, 22, 24,
	0, 275, 276, 289, 277, 0, 194, 0, 285, 0,
	0, 0, 23, 0, 0, 0, 0, 322, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	313, 0, 0, 758, 139, 180, 140, 0, 186, 143,
	0, 0, 0, 0, 278, 144, 145, 0, 0, 146,
	147, 0, 0, 0, 148, 0, 0, 0, 0, 149,
	280, 342, 182, 176, 170, 181, 0, 0, 0, 0,
	349, 150, 0, 151, 0, 174, 0, 351, 294, 295,
	352, 171, 154, 184, 155, 0, 152, 0, 345, 0,
	293, 0, 173, 0, 156, 158, 157, 159, 160, 346,
	222, 0, 0, 177, 0, 175, 163, 164, 279, 0,
	0, 0, 0, 178, 183, 169, 179, 172, 344, 0,
	0, 0, 0, 6, 7, 0, 22, 24, 0, 275,
	276, 289, 277, 0, 194, 0, 285, 0, 0, 0,
	23, 0, 0, 0, 0, 322, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 180, 140, 0, 186, 143, 0, 0,
	0, 0, 278, 144, 145, 0, 0, 146, 147, 0,
	0, 0, 148, 0, 0, 0, 0, 149, 280, 342,
	182, 176, 170, 181, 0, 0, 0, 0, 349, 150,
	0, 151, 0, 174, 0, 351, 294, 295, 352, 171,
	154, 184, 155, 0, 152, 0, 345, 0, 293, 0,
	173, 0, 156, 158, 157, 159, 160, 346, 222, 0,
	0, 177, 0, 175, 163, 164, 279, 0, 0, 0,
	0, 178, 183, 169, 179, 172, 344, 0, 0, 0,
	0, 6, 7, 0, 22, 24, 0, 275, 276, 289,
	398, 420, 194, 0, 285, 0, 0, 0, 23, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 180, 140, 0, 186, 143, 0, 0, 0, 0,
	278, 144, 145, 0, 0, 146, 147, 0, 0, 0,
	148, 0, 0, 0, 0, 149, 280, 0, 182, 176,
	170, 181, 0, 0, 0, 0, 0, 150, 0, 151,
	0, 174, 0, 0, 294, 295, 352, 171, 154, 184,
	155, 0, 152, 0, 0, 0, 293, 0, 173, 0,
	156, 158, 157, 159, 160, 0, 0, 0, 0, 177,
	0, 175, 163, 164, 279, 0, 0, 0, 0, 178,
	183, 169, 179, 172, 0, 0, 0, 0, 0, 6,
	7, 0, 22, 24, 0, 275, 276, 437, 277, 0,
	194, 0, 285, 0, 0, 0, 23, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 180,
	140, 0, 186, 143, 0, 0, 0, 0, 278, 144,
	145, 0, 0, 146, 147, 0, 0, 0, 148, 0,
	0, 0, 0, 149, 280, 0, 182, 176, 170, 181,
	0, 0, 0, 0, 0, 150, 0, 151, 0, 174,
	0, 0, 294, 295, 352, 171, 154, 184, 155, 0,
	152, 0, 0, 0, 293, 0, 173, 0, 156, 158,
	157, 159, 160, 0, 0, 0, 0, 177, 0, 175,
	163, 164, 279, 0, 0, 0, 0, 178, 183, 169,
	179, 172, 0, 0, 0, 0, 0, 6, 7, 0,
	22, 24, 0, 275, 276, 289, 398, 0, 194, 0,
	285, 0, 0, 0, 23, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 180, 140, 0,
	186, 143, 0, 0, 0, 0, 278, 144, 145, 0,
	0, 146, 147, 0, 0, 0, 148, 0, 0, 0,
	0, 149, 280, 0, 182, 176, 170, 181, 0, 0,
	0, 0, 0, 150, 0, 151, 0, 174, 0, 0,
	294, 295, 352, 171, 154, 184, 155, 0, 152, 0,
	0, 0, 293, 0, 173, 0, 156, 158, 157, 159,
	160, 0, 0, 0, 0, 177, 194, 175, 163, 164,
	279, 0, 23, 0, 0, 178, 183, 169, 179, 172,
	0, 0, 0, 0, 0, 6, 7, 0, 22, 24,
	0, 275, 276, 289, 139, 180, 140, 0, 186, 143,
	0, 0, 0, 0, 0, 144, 145, 0, 0, 146,
	147, 0, 0, 0, 148, 0, 0, 0, 0, 149,
	0, 0, 182, 176, 170, 181, 0, 0, 0, 0,
	0, 150, 0, 151, 0, 174, 0, 0, 0, 0,
	153, 171, 154, 184, 155, 0, 152, 0, 0, 0,
	0, 0, 173, 0, 156, 158, 157, 159, 160, 0,
	194, 0, 0, 177, 0, 175, 163, 164, 228, 227,
	0, 0, 0, 178, 183, 169, 179, 172, 0, 0,
	0, 0, 0, 6, 7, 0, 22, 24, 139, 180,
	140, 0, 186, 143, 0, 0, 0, 0, 0, 144,
	145, 0, 0, 146, 147, 0, 0, 0, 148, 0,
	0, 0, 0, 149, 0, 0, 182, 176, 170, 181,
	0, 0, 0, 0, 0, 150, 0, 151, 0, 174,
	0, 0, 0, 0, 153, 171, 154, 184, 155, 0,
	152, 0, 0, 0, 0, 0, 173, 0, 156, 158,
	157, 159, 160, 194, 0, 0, 0, 177, 42, 175,
	163, 164, 0, 0, 0, 0, 0, 178, 183, 169,
	179, 172, 0, 0, 0, 0, 0, 6, 7, 0,
	0, 139, 180, 140, 0, 186, 143, 0, 0, 0,
	0, 0, 144, 145, 0, 0, 146, 147, 0, 0,
	0, 148, 0, 0, 0, 0, 149, 0, 0, 182,
	176, 170, 181, 0, 0, 0, 0, 0, 150, 0,
	151, 0, 174, 0, 0, 0, 0, 153, 171, 154,
	184, 155, 0, 152, 0, 0, 0, 0, 0, 173,
	0, 156, 158, 157, 159, 160, 194, 0, 0, 0,
	177, 0, 175, 163, 164, 0, 0, 0, 0, 0,
	178, 183, 169, 179, 172, 0, 0, 0, 0, 0,
	6, 7, 0, 0, 139, 180, 140, 0, 186, 143,
	0, 0, 0, 0, 0, 144, 145, 0, 0, 146,
	147, 0, 0, 0, 148, 0, 0, 0, 0, 149,
	0, 0, 182, 176, 170, 181, 0, 0, 0, 0,
	0, 150, 0, 151, 0, 174, 0, 0, 0, 0,
	153, 171, 154, 184, 155, 0, 152, 0, 0, 0,
	0, 0, 173, 0, 156, 158, 157, 159, 160, 0,
	0, 0, 0, 177, 0, 175, 163, 164, 0, 0,
	0, 0, 0, 178, 183, 169, 179, 172, 277, 0,
	0, 0, 285, 6, 7, 441, 23, 0, 0, 550,
	0, 513, 277, 0, 0, 0, 285, 0, 0, 441,
	23, 0, 0, 417, 0, 513, 0, 0, 0, 277,
	0, 0, 0, 285, 0, 0, 0, 23, 278, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 278, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 278,
	0, 0, 294, 295, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 280, 294, 295, 286, 277,
	420, 0, 0, 285, 0, 0, 0, 23, 293, 0,
	0, 615, 279, 294, 295, 286, 277, 0, 0, 0,
	285, 0, 0, 0, 23, 293, 279, 6, 7, 0,
	22, 24, 0, 275, 276, 289, 0, 0, 0, 278,
	0, 6, 7, 279, 22, 24, 0, 275, 276, 289,
	0, 0, 0, 0, 0, 280, 278, 0, 6, 7,
	0, 22, 24, 0, 275, 276, 289, 0, 0, 0,
	0, 0, 280, 294, 295, 286, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 0, 0, 0, 0,
	294, 295, 286, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 293, 279, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 6, 7,
	279, 22, 24, 0, 275, 276, 437, 0, 0, 0,
	0, 0, 0, 0, 0, 6, 7, 0, 22, 24,
	0, 275, 276, 289,
}

var ASNPact = [...]int{
	-31, -1000, -31, -1000, 130, 640, -1000, -1000, -1000, -47,
	-1000, -1000, 124, 235, 52, 97, -1000, -1000, -1000, -1000,
	358, -1000, -1000, -65, -1000, 79, -7, -8, -18, -1000,
	-1000, -1000, 60, -1000, -1000, 455, 66, -1000, -1000, -1000,
	345, 277, 452, -1000, -1000, 71, 319, 123, 90, 63,
	-31, 47, -1000, 213, -1000, -52, -31, -31, 308, -31,
	-1000, 254, -1000, 639, -1000, -1000, 306, 298, -1000, 563,
	-1000, 123, -1000, -31, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1847, -1000, -1000, -1000, -1000, -1000, -1000,
	-31, -1000, -1000, -31, -31, 606, -1000, -1000, -1000, -1000,
	1940, 353, 376, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3,
	-1000, -1000, -1000, 636, -1000, -1000, -1000, 23, 632, -1000,
	46, 629, -1000, -1000, 76, -2, -1000, -1000, -1000, 340,
	305, -1000, -1000, -1000, -1000, -1000, 382, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 414, -3, 1940, 1940, 620,
	620, -1000, 620, -1000, -60, -1000, -1000, -1000, -1000, 203,
	-1000, 349, -1000, -1000, 392, 2162, -1000, 922, -1000, -31,
	628, -31, -1000, -31, -1000, -31, -1000, -1000, 42, 41,
	605, 1940, 349, 38, 35, 603, 1940, -31, 1940, -31,
	-1000, 349, 349, -1000, 1562, -1000, -1000, 36, 446, -1000,
	-1000, -1000, 180, -1000, 413, -1000, -1000, 620, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2145, 2162, -1000,
	-1000, -1000, -1000, 445, -1000, 53, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 307, -1000, -1000, -1000,
	-1000, -1000, -1000, 561, 262, -1000, -1000, 1434, 261, -1000,
	-1000, 2145, -1000, 117, -1000, 81, -1000, 116, -1000, 117,
	-1000, -1000, 1050, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 620, -1000, -1000, -1000,
	1940, 407, 349, 349, 171, 2162, -31, 374, 400, -1000,
	416, -1000, -1000, -1000, -1000, -1000, 399, -1000, -1000, -31,
	602, 560, 559, -1000, 1940, 601, 554, 514, -1000, 357,
	-1000, -1000, 474, -1000, 357, 1940, 1940, -1000, 349, -1000,
	1754, -1000, 1940, 1940, -1000, 349, -1000, 349, -1000, 584,
	600, 549, 349, -1000, -1000, 392, -1000, -1000, 1306, 169,
	577, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 147, 169,
	-1000, -1000, 338, -1000, -1000, -1000, -1000, -31, -1000, 169,
	-1000, 467, 460, 546, 536, 70, 459, 450, 444, 2068,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2162, 363, 363, 169, -1000, -1000, -1000, 343, 1660,
	294, 627, 243, 2162, 598, 2054, -1000, 1178, 1178, -1000,
	-1000, 1178, -1000, -1000, -1000, 336, 349, 393, -1000, 349,
	-1000, -1000, -31, -1000, -31, 442, -1000, 354, -1000, 289,
	-31, 349, -1000, 291, -31, 169, -1000, -31, 349, -1000,
	349, -1000, 14, 349, -1000, 349, -1000, 9, 8, 72,
	-60, -1000, 1434, 784, -1000, 574, -1000, -1000, -1000, -1000,
	-1000, -1000, 156, 169, -1000, -1000, -31, -1000, 118, 60,
	60, -1000, -1000, -1000, -1000, -1000, 338, -1000, -31, -1000,
	2162, -1000, -31, -1000, -1000, 569, 169, 566, -1000, -1000,
	-1000, -1000, -1000, 341, 380, 531, 1940, 174, -1000, 626,
	-31, -1000, -1000, -1000, -1000, 75, -1000, -1000, -1000, -1000,
	-1000, -31, 169, 526, 307, -1000, 307, -1000, 333, 332,
	-1000, 622, 621, 33, 1940, 57, 595, -31, -1000, -1000,
	324, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 60, 524,
	-1000, 594, -1000, -1000, 2162, -1000, -1000, -1000, 363, -1000,
	2162, 1050, 436, -1000, 428, 620, 349, 392, 2162, 312,
	-1000, -1000, -1000, 2085, -1000, -1000, -40, -1000, 322, 321,
	518, 108, -1000, 522, -1000, -1000, 289, 289, -31, 349,
	-1000, -1000, -1000, -1000, 60, -1000, -1000, -1000, -1000, -1000,
	-1000, 1940, 2162, -1000, 432, -1000, 110, -1000, 140, -1000,
	-1000, -1000, 290, 520, -1000, -1000, -1000, 585, -31, 518,
	518, -1000, 584, 517, -1000, -1000, -1000, -1000, -1000, 312,
	386, 389, -1000, 614, -1000, 108, 60, -1000, 514, 593,
	592, 93, 60, -1000, -31, -31, 389, -1000, -1000, -1000,
	39, -1000, -31, 427, -1000, -1000, 1940, 591, -1000, -1000,
	386, -1000, 590, 501, 492, 349, 426, -1000, 13, 7,
	349, -1000, -1000, -31, -31, -1000, 190, -1000, 573, 613,
	608, 589, -1000, -1000, -1000, -1000, -1000, -1000, 43, 43,
	-1000, 588, 485, 477, 483, -1000, 74, 32, 587, -1000,
	289, 466, 102, 22, -1000, 2162, 1940, -1000, 477, 472,
	-1000, 286, 468, -1000, -1000, -1000, 582, -1000, -1000, 349,
	466, 22, -1000, 102, 60, -1000, 433, -1000, -1000, 22,
	22, 424, -1000, 572, -1000,
}

var ASNPgo = [...]int{
	0, 974, 651, 970, 969, 964, 963, 382, 962, 959,
	955, 954, 953, 950, 949, 275, 287, 948, 947, 143,
	945, 276, 115, 944, 943, 56, 41, 35, 942, 68,
	81, 195, 164, 90, 941, 940, 937, 936, 935, 933,
	929, 927, 184, 337, 55, 925, 924, 54, 28, 50,
	923, 922, 921, 920, 919, 918, 917, 916, 912, 909,
	906, 905, 904, 903, 902, 901, 900, 899, 898, 897,
	896, 895, 894, 891, 890, 889, 888, 887, 886, 885,
	884, 883, 882, 880, 879, 878, 877, 876, 875, 49,
	873, 872, 871, 870, 869, 867, 866, 861, 860, 859,
	858, 857, 856, 855, 854, 853, 852, 851, 850, 849,
	848, 847, 846, 845, 843, 842, 839, 838, 36, 33,
	837, 34, 836, 835, 834, 833, 832, 831, 830, 829,
	827, 45, 257, 825, 824, 823, 822, 821, 820, 819,
	818, 817, 816, 815, 46, 42, 32, 814, 813, 812,
	811, 80, 39, 810, 809, 808, 48, 13, 807, 806,
	20, 805, 804, 803, 802, 800, 26, 797, 47, 53,
	794, 790, 44, 789, 787, 38, 786, 785, 784, 782,
	781, 778, 776, 59, 765, 763, 760, 758, 757, 756,
	754, 753, 751, 750, 746, 21, 745, 742, 741, 740,
	12, 738, 737, 734, 732, 728, 725, 724, 723, 721,
	23, 720, 718, 717, 713, 18, 17, 15, 712, 40,
	711, 27, 710, 709, 708, 706, 11, 705, 19, 14,
	704, 16, 701, 700, 8, 699, 698, 22, 37, 30,
	695, 9, 4, 6, 7, 2, 5, 690, 10, 684,
	678, 677, 31, 43, 675, 674, 673, 672, 670, 24,
	29, 668, 667, 25, 666, 664, 217, 0, 100, 664,
	661, 660, 658, 657, 656, 655, 652, 650, 646, 646,
}

var ASNR1 = [...]int{
	0, 270, 1, 1, 2, 132, 132, 132, 147, 148,
	3, 12, 12, 4, 4, 5, 6, 6, 7, 7,
	7, 8, 9, 10, 11, 11, 11, 11, 13, 13,
	14, 14, 14, 16, 16, 16, 16, 20, 20, 21,
	21, 22, 22, 133, 134, 134, 15, 15, 17, 17,
	18, 18, 19, 23, 24, 24, 24, 25, 25, 25,
	26, 26, 27, 27, 27, 27, 28, 29, 29, 30,
	31, 31, 31, 32, 32, 32, 32, 32, 32, 32,
	32, 34, 35, 36, 37, 38, 39, 40, 41, 41,
	41, 41, 41, 41, 42, 42, 42, 43, 43, 43,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 57, 57, 57,
	57, 57, 135, 135, 135, 135, 140, 141, 142, 143,
	143, 89, 89, 146, 146, 146, 146, 146, 146, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 137, 138, 144, 144, 144,
	144, 149, 149, 153, 150, 151, 151, 154, 152, 145,
	155, 155, 156, 139, 58, 58, 157, 159, 159, 161,
	163, 163, 163, 164, 165, 166, 166, 167, 167, 169,
	169, 172, 172, 175, 175, 175, 176, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 179,
	180, 191, 191, 181, 192, 192, 193, 193, 194, 194,
	195, 195, 182, 183, 184, 271, 185, 196, 197, 197,
	198, 200, 200, 201, 202, 203, 203, 204, 204, 204,
	204, 199, 186, 187, 188, 189, 190, 178, 178, 178,
	178, 205, 173, 174, 174, 170, 171, 171, 168, 162,
	162, 162, 206, 209, 209, 209, 210, 210, 210, 210,
	210, 211, 211, 207, 207, 212, 213, 214, 214, 215,
	215, 216, 216, 217, 217, 208, 208, 208, 160, 160,
	218, 218, 218, 158, 158, 158, 158, 158, 158, 158,
	158, 219, 59, 59, 220, 220, 221, 221, 60, 61,
	61, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 223, 62, 224, 224, 225, 229,
	229, 226, 226, 227, 227, 230, 230, 231, 231, 232,
	234, 234, 228, 228, 63, 64, 65, 66, 68, 233,
	233, 233, 235, 236, 237, 237, 238, 238, 239, 239,
	67, 69, 70, 70, 240, 240, 71, 72, 73, 74,
	75, 76, 77, 78, 272, 273, 79, 241, 241, 241,
	241, 241, 242, 245, 245, 246, 246, 246, 246, 243,
	243, 247, 247, 248, 248, 249, 244, 80, 80, 274,
	275, 81, 276, 82, 84, 85, 83, 83, 277, 278,
	250, 252, 253, 254, 254, 254, 254, 255, 255, 251,
	256, 257, 257, 257, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 93, 93, 93, 93,
	93, 116, 116, 94, 94, 95, 95, 114, 114, 114,
	114, 117, 120, 120, 121, 121, 121, 121, 118, 122,
	123, 124, 125, 119, 126, 127, 115, 96, 97, 98,
	99, 101, 103, 104, 104, 104, 105, 105, 128, 128,
	129, 129, 129, 100, 102, 258, 260, 260, 259, 259,
	106, 261, 107, 130, 130, 131, 131, 131, 108, 108,
	262, 262, 263, 109, 109, 109, 264, 264, 265, 265,
	110, 110, 111, 111, 111, 112, 113, 91, 92, 45,
	44, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 33, 33, 33, 33, 86, 87, 88, 89, 267,
	267, 268, 268, 268, 268, 266, 279, 269,
}

var ASNR2 = [...]int{
	0, 1, 1, 2, 10, 1, 2, 0, 3, 0,
	2, 2, 0, 1, 0, 3, 1, 2, 1, 1,
	1, 1, 1, 4, 2, 2, 2, 0, 2, 0,
	3, 3, 0, 3, 3, 2, 0, 1, 0, 1,
	3, 1, 1, 1, 1, 3, 3, 0, 1, 0,
	1, 2, 3, 2, 1, 1, 0, 3, 4, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 4,
	1, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 4, 3, 4, 3, 4, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 2, 1,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 3, 2, 1, 1, 3, 2, 1,
	1, 3, 1, 3, 2, 1, 4, 1, 1, 1,
	1, 3, 5, 1, 1, 1, 2, 1, 3, 1,
	3, 1, 2, 1, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 0, 4, 1, 2, 1, 1, 1, 2,
	1, 1, 2, 2, 1, 0, 7, 1, 1, 1,
	3, 1, 3, 2, 2, 1, 0, 1, 1, 1,
	0, 5, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 2, 1,
	1, 1, 5, 1, 3, 0, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 6, 1, 3, 2,
	4, 1, 3, 2, 0, 2, 3, 5, 2, 0,
	1, 1, 3, 4, 4, 4, 4, 4, 4, 4,
	4, 2, 2, 5, 1, 3, 4, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 4, 1, 5, 1, 1,
	3, 1, 2, 2, 0, 1, 3, 1, 1, 6,
	2, 0, 2, 0, 1, 1, 1, 2, 4, 1,
	4, 6, 1, 1, 1, 3, 1, 1, 4, 4,
	1, 3, 1, 4, 1, 3, 1, 1, 3, 2,
	2, 1, 1, 1, 0, 0, 14, 1, 5, 7,
	5, 3, 1, 1, 3, 1, 2, 3, 3, 2,
	0, 1, 3, 1, 1, 6, 2, 3, 3, 0,
	0, 14, 0, 7, 1, 1, 1, 1, 0, 0,
	10, 5, 2, 1, 1, 1, 0, 1, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	2, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 9, 1,
	1, 1, 1, 5, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 2, 1, 1, 3, 0,
	4, 1, 3, 1, 2, 1, 1, 1, 3, 2,
	1, 3, 2, 3, 3, 2, 1, 3, 1, 3,
	3, 2, 3, 3, 2, 1, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1, 1, 1, 1, 3, 2, 0, 0, 1,
	1, 1, 2, 1, 2, 3, 0, 2,
}

var ASNChk = [...]int{
	-1000, -270, -1, -2, -3, -267, 123, 124, -2, 48,
	-4, -5, 4, -12, 123, -6, -7, -8, -9, -10,
	124, -268, 126, 12, 127, -11, 67, 56, 32, 72,
	5, -7, 17, 126, 127, -13, 58, 104, 104, 104,
	-268, -266, 11, 68, 18, 33, 11, -14, -15, -16,
	69, 57, 19, -132, -147, 52, -16, -15, -17, -18,
	-19, -21, -22, -133, -134, -267, -20, 30, 26, -21,
	53, -132, 123, -31, -32, -34, -35, -36, -37, -38,
	-39, -40, -41, -267, -50, -51, -52, -53, -54, -55,
	-31, 26, -19, 10, 61, 4, 26, 26, -148, -32,
	-266, -42, -47, -56, -57, -58, -59, -60, -61, -62,
	-63, -64, -65, -66, -68, -67, -69, -70, -71, -72,
	-73, -74, -75, -76, -77, -78, -79, -80, -81, -82,
	-83, -84, -85, -135, -136, -137, -138, -139, -158, 34,
	36, -222, -223, 39, 45, 46, 49, 50, 54, 59,
	71, 73, 86, 80, 82, 84, 94, 96, 95, 97,
	98, -250, -251, 106, 107, -140, -267, -141, -142, 115,
	64, 81, 117, 92, 75, 105, 63, 103, 113, 116,
	35, 65, 62, 114, 83, -144, 38, -252, -256, -143,
	-149, -150, -151, -152, 6, -153, -154, -22, -23, -267,
	5, -42, -45, -46, -47, -266, -157, 17, -266, 15,
	101, 4, 89, 4, 85, 4, 66, 101, -157, -183,
	4, 85, 100, -157, -183, 4, 85, 15, 14, 15,
	101, -42, -42, -89, 4, -89, -89, -253, 123, -24,
	-25, -33, 4, -86, -267, -268, -87, -88, -43, -44,
	-90, -91, -92, -93, -94, -95, -96, -97, -98, -99,
	-100, -101, -102, -103, -25, -104, -105, -106, -107, -108,
	-109, -110, -111, -112, -113, 129, 130, 4, 44, 108,
	60, -114, -115, -267, -268, 8, 80, -128, -129, 131,
	-117, -118, -119, 90, 78, 79, -159, -161, -162, -163,
	-206, -207, -208, -164, 43, -212, -213, 44, 51, -166,
	-49, 4, -167, 30, -169, -170, -172, -173, -175, -176,
	-177, -178, 17, -179, -180, -181, -182, -183, -184, -185,
	-186, -187, -188, -189, -190, -48, -151, -205, -152, -43,
	-191, -192, 61, -42, 118, 88, 99, -267, -144, 70,
	-193, 77, 80, -48, -49, -145, -155, -156, -267, 4,
	-224, -225, -229, -219, -267, -233, -235, -237, -238, -267,
	-239, -47, -240, -239, -267, 85, 85, 5, -42, -219,
	-267, -157, 85, 85, 5, -42, -267, -42, -145, -277,
	-146, -89, -42, -43, -44, -47, -48, -49, 4, -254,
	-257, 112, 31, 93, 120, 121, 122, 11, -26, -33,
	5, -27, -267, -268, -28, -29, -30, 15, -89, -33,
	5, -116, -120, -122, -126, -130, -262, -264, -265, -267,
	-268, -121, -131, -263, -43, -29, -30, 131, -118, -119,
	-43, 11, -258, -261, 16, -260, -268, -267, -160, 24,
	10, 37, -42, 37, -151, -267, -168, 55, -171, 22,
	110, -174, 25, 74, -168, -166, -42, 15, -157, 42,
	-43, -267, 15, 14, 15, -220, -221, -267, 5, 10,
	10, -42, 5, 10, 10, 17, 5, 10, -42, -219,
	-42, -219, -272, -42, -219, -42, -219, -274, -276, -252,
	6, 5, 10, -267, -43, -255, -268, -33, 7, 5,
	-27, -33, -26, 17, -267, 5, 10, 5, 10, 10,
	10, 5, -131, -29, -30, -33, -267, 5, 10, 5,
	10, 5, 10, -43, -43, -259, 16, -259, -260, 18,
	-218, -268, -33, -42, -267, 27, 4, 51, -43, 5,
	15, -175, -169, -172, 18, 15, -196, -157, -145, -156,
	5, 10, 17, -226, 27, -219, 27, -238, -268, -33,
	-239, 97, 98, 98, 67, -253, -146, 15, 7, 4,
	-29, -33, -267, -121, 131, -118, -119, -33, 4, -123,
	-268, -127, -268, -263, -267, -43, -263, 8, -260, 8,
	11, 10, -209, -210, -211, -151, -42, -47, 37, 4,
	-267, -194, -195, 14, -43, 76, -271, -221, -268, -33,
	-227, 10, -160, -160, 18, 18, 4, 4, 85, -42,
	5, -267, 18, -268, 10, 5, -259, -43, -165, -166,
	5, 10, 11, -43, -214, -215, 23, -195, 118, 18,
	18, -228, 10, -230, -231, -232, -219, 6, 10, -226,
	-226, -219, -278, -124, -268, -210, -43, -48, 5, 10,
	-216, 15, -267, 42, 27, 10, 6, -236, -237, -228,
	-228, -252, 10, -215, 15, -217, 15, -197, -198, -199,
	4, -231, -234, -268, 5, 5, 56, -125, -268, -267,
	-216, -217, -200, 27, -201, -267, -229, 11, -273, -275,
	-42, 5, 5, 10, 10, -202, -203, -157, 7, 97,
	98, -200, -200, -204, 91, 28, 87, 7, 4, 4,
	5, -241, -242, -226, -245, -246, -219, 42, -241, 5,
	10, -243, 10, 10, 87, 47, 85, 5, -226, -244,
	-228, 10, -247, -248, -246, -249, 6, -246, -43, -42,
	-243, 10, 27, 10, 6, -228, -244, -242, -248, -234,
	10, -245, -242, 7, 7,
}

var ASNDef = [...]int{
	0, -2, 1, 2, 0, 14, 559, 560, 3, 12,
	10, 13, 0, 27, 0, 0, 16, 18, 19, 20,
	21, 22, 561, 0, 563, 29, 0, 0, 0, 11,
	15, 17, 0, 562, 564, 0, 0, 24, 25, 26,
	0, 0, 0, 28, 23, -2, 0, 7, 36, 47,
	49, 0, 565, 0, 5, 0, 72, 72, 0, 48,
	50, 0, 39, 41, 42, 43, 0, 0, 35, 37,
	4, 6, 9, 30, 70, 73, 74, 75, 76, 77,
	78, 79, 80, 542, 88, 89, 90, 91, 92, 93,
	31, 46, 51, 0, 0, 0, 33, 34, 8, 71,
	-2, 0, 0, 94, 95, 96, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 185, 0,
	318, 319, 320, 0, 354, 355, 356, 0, 0, 370,
	0, 372, 376, 377, 0, 0, 381, 382, 383, 0,
	0, 416, 417, 414, 415, -2, -2, 134, 135, 149,
	150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
	160, 161, 162, 163, 164, 0, 0, 542, 542, 558,
	167, 168, 169, 170, 0, 171, 175, 40, 52, 56,
	45, 81, 83, 85, 0, 536, 184, -2, 543, 0,
	312, 0, 357, 0, 542, 0, 379, 380, 0, 0,
	0, 542, 0, 0, 0, 0, 542, 0, 542, 0,
	334, 418, 429, 137, -2, 174, 178, 426, 0, 53,
	54, 55, 557, 551, 552, 553, 554, 558, 82, 84,
	97, 98, 99, 434, 435, 436, 437, 438, 439, 440,
	441, 442, 443, 444, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 455, 456, 457, 536, 536, 463,
	464, 465, 466, 489, 491, 0, 492, 496, 497, 467,
	468, 469, 470, 500, 501, 502, 299, 187, 188, 189,
	269, 270, 271, 190, 0, 283, 284, 536, 0, 193,
	285, 536, -2, 0, -2, 0, 199, 0, -2, 0,
	203, 204, -2, 207, 208, 209, 210, 211, 212, 213,
	214, 215, 216, 217, 218, 257, -2, 259, -2, -2,
	542, 0, 0, 234, 0, 536, 0, -2, 0, 221,
	224, 227, -2, 86, 87, 378, 179, 180, 182, 0,
	0, 336, 338, 339, 542, 0, 359, 362, 364, 366,
	367, 371, 0, 374, 0, 542, 542, 384, 407, 408,
	-2, 233, 542, 542, 409, 412, -2, 165, 166, 0,
	0, 0, 143, 144, 145, 146, 147, 148, -2, 557,
	0, 423, 424, 425, 431, 432, 433, 422, 557, 65,
	59, 60, 66, 67, 62, 63, 64, 0, 556, -2,
	59, 0, 0, 0, 0, 557, 0, 0, 0, -2,
	-2, 472, 513, 520, 503, 63, 64, 467, 469, 470,
	460, 536, 509, 509, 0, 511, 506, 507, 0, -2,
	0, 0, 295, 536, 0, -2, 196, -2, -2, 266,
	267, -2, 263, 264, 202, 0, 220, 0, 232, 0,
	252, 253, 0, 225, 0, 0, 314, 0, 335, 0,
	0, 311, 358, 0, 0, 557, 373, 0, 305, 309,
	306, 310, 0, 303, 307, 304, 308, 0, 0, 0,
	0, 141, -2, -2, -2, 0, 427, 428, 430, 57,
	61, 65, 0, 557, 555, 458, 0, 471, 557, 0,
	0, 512, 514, 515, 516, 68, 552, 518, 0, 523,
	536, 524, 0, 503, 487, 0, 0, 0, 505, 186,
	298, 300, 301, 0, -2, 191, -2, 0, 296, 0,
	0, 268, -2, 200, 205, 536, 235, 237, 166, 181,
	313, 0, 557, 344, 299, 340, 299, 365, 0, 0,
	375, 0, 0, 0, 542, 426, 0, 0, 421, 58,
	0, 68, 462, 473, 474, 475, 476, 477, 0, 0,
	480, 0, 485, 521, 536, 503, 529, 504, 509, 510,
	536, -2, 0, 273, 0, -2, -2, -2, 536, 0,
	-2, 223, 228, 536, 230, 231, 0, 315, 0, 0,
	353, 0, 342, 360, 368, 369, 0, 0, 0, 419,
	142, -2, 69, 479, 0, 483, 508, 302, 192, 194,
	272, 542, 536, 297, 0, 287, 0, 229, 0, 316,
	317, 337, 0, 343, 345, 347, 348, 0, 0, 353,
	353, 413, 0, 0, 481, 274, 276, 277, 286, 0,
	289, 294, 291, 0, 352, 0, 351, 361, 363, 0,
	0, 0, 0, 288, 0, 0, 294, 236, 238, 239,
	0, 346, 0, 0, 385, 410, 542, 0, 482, 292,
	290, 293, 0, 0, 241, 246, 0, 350, 0, 0,
	420, 478, 240, 0, 0, 243, 250, 245, 0, 0,
	0, 0, 242, 244, 247, 248, 249, 349, 0, 0,
	251, 0, 387, 400, 392, 393, 395, 0, 0, 386,
	0, 353, 0, 0, 396, 536, 542, 411, 400, 0,
	391, 0, 399, 401, 403, 404, 0, 394, 397, 398,
	353, 0, -2, 0, 351, 388, 0, 390, 402, 0,
	0, 0, 389, 0, 405,
}

var ASNTok1 = [...]int{
	1,
}

var ASNTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132,
}

var ASNTok3 = [...]int{
	0,
}

var ASNErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	ASNDebug        = 0
	ASNErrorVerbose = false
)

type ASNLexer interface {
	Lex(lval *ASNSymType) int
	Error(s string)
}

type ASNParser interface {
	Parse(ASNLexer) int
	Lookahead() int
}

type ASNParserImpl struct {
	lval  ASNSymType
	stack [ASNInitialStackSize]ASNSymType
	char  int
}

func (p *ASNParserImpl) Lookahead() int {
	return p.char
}

func ASNNewParser() ASNParser {
	return &ASNParserImpl{}
}

const ASNFlag = -1000

func ASNTokname(c int) string {
	if c >= 1 && c-1 < len(ASNToknames) {
		if ASNToknames[c-1] != "" {
			return ASNToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func ASNStatname(s int) string {
	if s >= 0 && s < len(ASNStatenames) {
		if ASNStatenames[s] != "" {
			return ASNStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func ASNErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !ASNErrorVerbose {
		return "syntax error"
	}

	for _, e := range ASNErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + ASNTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := ASNPact[state]
	for tok := TOKSTART; tok-1 < len(ASNToknames); tok++ {
		if n := base + tok; n >= 0 && n < ASNLast && ASNChk[ASNAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if ASNDef[state] == -2 {
		i := 0
		for ASNExca[i] != -1 || ASNExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; ASNExca[i] >= 0; i += 2 {
			tok := ASNExca[i]
			if tok < TOKSTART || ASNExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if ASNExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += ASNTokname(tok)
	}
	return res
}

func ASNlex1(lex ASNLexer, lval *ASNSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = ASNTok1[0]
		goto out
	}
	if char < len(ASNTok1) {
		token = ASNTok1[char]
		goto out
	}
	if char >= ASNPrivate {
		if char < ASNPrivate+len(ASNTok2) {
			token = ASNTok2[char-ASNPrivate]
			goto out
		}
	}
	for i := 0; i < len(ASNTok3); i += 2 {
		token = ASNTok3[i+0]
		if token == char {
			token = ASNTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = ASNTok2[1] /* unknown char */
	}
	if ASNDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", ASNTokname(token), uint(char))
	}
	return char, token
}

func ASNParse(ASNlex ASNLexer) int {
	return ASNNewParser().Parse(ASNlex)
}

func (ASNrcvr *ASNParserImpl) Parse(ASNlex ASNLexer) int {
	var ASNn int
	var ASNVAL ASNSymType
	var ASNDollar []ASNSymType
	_ = ASNDollar // silence set and not used
	ASNS := ASNrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	ASNstate := 0
	ASNrcvr.char = -1
	ASNtoken := -1 // ASNrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		ASNstate = -1
		ASNrcvr.char = -1
		ASNtoken = -1
	}()
	ASNp := -1
	goto ASNstack

ret0:
	return 0

ret1:
	return 1

ASNstack:
	/* put a state and value onto the stack */
	if ASNDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", ASNTokname(ASNtoken), ASNStatname(ASNstate))
	}

	ASNp++
	if ASNp >= len(ASNS) {
		nyys := make([]ASNSymType, len(ASNS)*2)
		copy(nyys, ASNS)
		ASNS = nyys
	}
	ASNS[ASNp] = ASNVAL
	ASNS[ASNp].yys = ASNstate

ASNnewstate:
	ASNn = ASNPact[ASNstate]
	if ASNn <= ASNFlag {
		goto ASNdefault /* simple state */
	}
	if ASNrcvr.char < 0 {
		ASNrcvr.char, ASNtoken = ASNlex1(ASNlex, &ASNrcvr.lval)
	}
	ASNn += ASNtoken
	if ASNn < 0 || ASNn >= ASNLast {
		goto ASNdefault
	}
	ASNn = ASNAct[ASNn]
	if ASNChk[ASNn] == ASNtoken { /* valid shift */
		ASNrcvr.char = -1
		ASNtoken = -1
		ASNVAL = ASNrcvr.lval
		ASNstate = ASNn
		if Errflag > 0 {
			Errflag--
		}
		goto ASNstack
	}

ASNdefault:
	/* default state action */
	ASNn = ASNDef[ASNstate]
	if ASNn == -2 {
		if ASNrcvr.char < 0 {
			ASNrcvr.char, ASNtoken = ASNlex1(ASNlex, &ASNrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if ASNExca[xi+0] == -1 && ASNExca[xi+1] == ASNstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			ASNn = ASNExca[xi+0]
			if ASNn < 0 || ASNn == ASNtoken {
				break
			}
		}
		ASNn = ASNExca[xi+1]
		if ASNn < 0 {
			goto ret0
		}
	}
	if ASNn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			ASNlex.Error(ASNErrorMessage(ASNstate, ASNtoken))
			Nerrs++
			if ASNDebug >= 1 {
				__yyfmt__.Printf("%s", ASNStatname(ASNstate))
				__yyfmt__.Printf(" saw %s\n", ASNTokname(ASNtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for ASNp >= 0 {
				ASNn = ASNPact[ASNS[ASNp].yys] + ASNErrCode
				if ASNn >= 0 && ASNn < ASNLast {
					ASNstate = ASNAct[ASNn] /* simulate a shift of "error" */
					if ASNChk[ASNstate] == ASNErrCode {
						goto ASNstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if ASNDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", ASNS[ASNp].yys)
				}
				ASNp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if ASNDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", ASNTokname(ASNtoken))
			}
			if ASNtoken == ASNEofCode {
				goto ret1
			}
			ASNrcvr.char = -1
			ASNtoken = -1
			goto ASNnewstate /* try again in the same state */
		}
	}

	/* reduction by production ASNn */
	if ASNDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", ASNn, ASNStatname(ASNstate))
	}

	ASNnt := ASNn
	ASNpt := ASNp
	_ = ASNpt // guard against "declared and not used"

	ASNp -= ASNR2[ASNn]
	// ASNp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if ASNp+1 >= len(ASNS) {
		nyys := make([]ASNSymType, len(ASNS)*2)
		copy(nyys, ASNS)
		ASNS = nyys
	}
	ASNVAL = ASNS[ASNp+1]

	/* consult goto table to find next state */
	ASNn = ASNR1[ASNn]
	ASNg := ASNPgo[ASNn]
	ASNj := ASNg + ASNS[ASNp].yys + 1

	if ASNj >= ASNLast {
		ASNstate = ASNAct[ASNg]
	} else {
		ASNstate = ASNAct[ASNj]
		if ASNChk[ASNstate] != -ASNn {
			ASNstate = ASNAct[ASNg]
		}
	}
	// dummy call; replaced with literal code
	switch ASNnt {

	case 1:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:473
		{
			SetResult(ASNlex, ASNDollar[1].TypeValue)
			Print("Done")
			Print("--------------------------------------------------------------------------------")
			Print(JSON(&ASNDollar[1].TypeValue))
			Print("--------------------------------------------------------------------------------")
		}
	case 2:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:482
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 3:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:487
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 4:
		ASNDollar = ASNS[ASNpt-10 : ASNpt+1]
//line asn.y:517
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"encoding":   ASNDollar[3].TypeValue,
				"tag":        ASNDollar[4].TypeValue,
				"body":       ASNDollar[8].TypeValue,
			}
		}
	case 5:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:533
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 6:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:538
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 7:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:542
		{
			ASNVAL.TypeValue = nil
		}
	case 8:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:554
		{
			ASNVAL.TypeValue = MAP{
				"encodingReference":    ASNDollar[2].TypeString,
				"encodingInstructions": ASNDollar[3].TypeValue,
			}
		}
	case 9:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:569
		{
			ASNVAL.TypeValue = nil
		}
	case 10:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:582
		{
			ASNVAL.TypeValue = MAP{
				"reference":             ASNDollar[1].TypeValue,
				"definitiveIdentifiers": ASNDollar[2].TypeValue,
			}
		}
	case 11:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:596
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 12:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:599
		{
			ASNVAL.TypeValue = STRING("")
		}
	case 13:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:611
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 14:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:614
		{
			ASNVAL.TypeValue = nil
		}
	case 15:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:624
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 16:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:635
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 17:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:640
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 18:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:653
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 19:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:656
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 20:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:659
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 21:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:668
		{
			ASNVAL.TypeValue = MAP{
				"name": ASNDollar[1].TypeString,
			}
		}
	case 22:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:679
		{
			ASNVAL.TypeValue = MAP{
				"number": ASNDollar[1].TypeValue,
			}
		}
	case 23:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:690
		{
			ASNVAL.TypeValue = MAP{
				"name":   ASNDollar[1].TypeString,
				"number": ASNDollar[3].TypeValue,
			}
		}
	case 24:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:706
		{
			ASNVAL.TypeValue = STRING("IMPLICIT")
		}
	case 25:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:709
		{
			ASNVAL.TypeValue = STRING("EXPLICIT")
		}
	case 26:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:712
		{
			ASNVAL.TypeValue = STRING("AUTOMATIC")
		}
	case 27:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:715
		{
			ASNVAL.TypeValue = STRING("EXPLICIT")
		}
	case 28:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:726
		{
			ASNVAL.TypeValue = true
		}
	case 29:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:729
		{
			ASNVAL.TypeValue = false
		}
	case 30:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:742
		{
			ASNVAL.TypeValue = MAP{
				"imports":     ASNDollar[1].TypeValue,
				"exports":     ASNDollar[2].TypeValue,
				"assignments": ASNDollar[3].TypeValue,
			}
		}
	case 31:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:751
		{
			ASNVAL.TypeValue = MAP{
				"imports":     ASNDollar[2].TypeValue,
				"exports":     ASNDollar[1].TypeValue,
				"assignments": ASNDollar[3].TypeValue,
			}
		}
	case 32:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:758
		{
			ASNVAL.TypeValue = nil
		}
	case 33:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:770
		{
			ASNVAL.TypeValue = MAP{
				"all":     "false",
				"symbols": ASNDollar[2].TypeValue,
			}
		}
	case 34:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:776
		{
			ASNVAL.TypeValue = MAP{
				"all": "true",
			}
		}
	case 35:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:781
		{
			ASNVAL.TypeValue = MAP{
				"all": "false",
			}
		}
	case 36:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:786
		{
			ASNVAL.TypeValue = MAP{
				"all": "true",
			}
		}
	case 37:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:799
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 38:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:802
		{
			ASNVAL.TypeValue = nil
		}
	case 39:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:813
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 40:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:818
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 41:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:830
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
			}
		}
	case 42:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:835
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedReference": ASNDollar[1].TypeValue,
			}
		}
	case 43:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:854
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 44:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:864
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 45:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:867
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 46:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:878
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 47:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:881
		{
			ASNVAL.TypeValue = nil
		}
	case 48:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:892
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 49:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:895
		{
			ASNVAL.TypeValue = nil
		}
	case 50:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:906
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 51:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:911
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 52:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:922
		{
			ASNVAL.TypeValue = MAP{
				"symbols":   ASNDollar[1].TypeValue,
				"reference": ASNDollar[3].TypeValue,
			}
		}
	case 53:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:935
		{
			ASNVAL.TypeValue = MAP{
				"name":        ASNDollar[1].TypeValue,
				"identifiers": ASNDollar[2].TypeValue,
			}
		}
	case 54:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:950
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 55:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:953
		{
			ASNVAL.TypeValue = nil
		}
	case 56:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:956
		{
			ASNVAL.TypeValue = nil
		}
	case 57:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:967
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 58:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:970
		{
			ASNVAL.TypeValue = ASNDollar[3].TypeValue
		}
	case 59:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:973
		{
			ASNVAL.TypeValue = nil
		}
	case 60:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:984
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 61:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:989
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 62:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1003
		{
			ASNVAL.TypeValue = MAP{
				"name": ASNDollar[1].TypeValue,
			}
		}
	case 63:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1008
		{
			ASNVAL.TypeValue = MAP{
				"number": ASNDollar[1].TypeValue,
			}
		}
	case 64:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1013
		{
			ASNVAL.TypeValue = MAP{
				"nameAndNumber": ASNDollar[1].TypeValue,
			}
		}
	case 65:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1018
		{
			ASNVAL.TypeValue = MAP{
				"definedValue": ASNDollar[1].TypeValue,
			}
		}
	case 66:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1030
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 67:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1041
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 68:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1044
		{
			ASNVAL.TypeValue = MAP{
				"definedValue": ASNDollar[1].TypeValue,
			}
		}
	case 69:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1056
		{
			ASNVAL.TypeValue = MAP{
				"name":   ASNDollar[1].TypeValue,
				"number": ASNDollar[3].TypeValue,
			}
		}
	case 70:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1070
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 71:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1075
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 72:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1079
		{
			ASNVAL.TypeValue = nil
		}
	case 73:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1096
		{
			ASNVAL.TypeValue = MAP{
				"typeAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 74:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1101
		{
			ASNVAL.TypeValue = MAP{
				"valueAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 75:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1106
		{
			ASNVAL.TypeValue = MAP{
				"xmlValueAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 76:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1111
		{
			ASNVAL.TypeValue = MAP{
				"valueSetAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 77:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1116
		{
			ASNVAL.TypeValue = MAP{
				"objectClassAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 78:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1121
		{
			ASNVAL.TypeValue = MAP{
				"objectAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 79:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1126
		{
			ASNVAL.TypeValue = MAP{
				"objectSetAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 80:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1131
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedAssignment": ASNDollar[1].TypeValue,
			}
		}
	case 81:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1145
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"typename":  ASNDollar[2].TypeValue,
			}
		}
	case 82:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1161
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"typename":  ASNDollar[2].TypeValue,
				"value":     ASNDollar[4].TypeValue,
			}
		}
	case 83:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1177
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"value":     ASNDollar[3].TypeValue,
			}
		}
	case 84:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1193
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"typename":  ASNDollar[2].TypeValue,
				"valueSet":  ASNDollar[4].TypeValue,
			}
		}
	case 85:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1209
		{
			ASNVAL.TypeValue = MAP{
				"reference": ASNDollar[1].TypeValue,
				"class":     ASNDollar[3].TypeValue,
			}
		}
	case 86:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1225
		{
			ASNVAL.TypeValue = MAP{
				"reference":    ASNDollar[1].TypeValue,
				"definedClass": ASNDollar[2].TypeValue,
				"object":       ASNDollar[4].TypeValue,
			}
		}
	case 87:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1242
		{
			ASNVAL.TypeValue = MAP{
				"reference":    ASNDollar[1].TypeValue,
				"definedClass": ASNDollar[2].TypeValue,
				"objectSet":    ASNDollar[4].TypeValue,
			}
		}
	case 88:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1261
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 89:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1264
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 90:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1267
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 91:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1270
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 92:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1273
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 93:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1276
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 94:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1288
		{
			ASNVAL.TypeValue = MAP{
				"type":       "BUILTIN_TYPE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 95:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1294
		{
			ASNVAL.TypeValue = MAP{
				"type":       "REFERENCED_TYPE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 96:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1300
		{
			ASNVAL.TypeValue = MAP{
				"type":       "CONSTRAINED_TYPE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 97:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1315
		{
			ASNVAL.TypeValue = MAP{
				"type":       "BUILTIN_VALUE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 98:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1321
		{
			ASNVAL.TypeValue = MAP{
				"type":       "REFERENCED_VALUE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 99:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1327
		{
			ASNVAL.TypeValue = MAP{
				"type":       "OBJECT_CLASS_FIELD_VALUE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 100:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1365
		{
			ASNVAL.TypeValue = MAP{
				"bitStringType": ASNDollar[1].TypeValue,
			}
		}
	case 101:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1370
		{
			ASNVAL.TypeValue = MAP{
				"booleanType": ASNDollar[1].TypeValue,
			}
		}
	case 102:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1375
		{
			ASNVAL.TypeValue = MAP{
				"characterStringType": ASNDollar[1].TypeValue,
			}
		}
	case 103:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1380
		{
			ASNVAL.TypeValue = MAP{
				"choiceType": ASNDollar[1].TypeValue,
			}
		}
	case 104:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1385
		{
			ASNVAL.TypeValue = MAP{
				"dateType": ASNDollar[1].TypeValue,
			}
		}
	case 105:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1390
		{
			ASNVAL.TypeValue = MAP{
				"dataTimeType": ASNDollar[1].TypeValue,
			}
		}
	case 106:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1395
		{
			ASNVAL.TypeValue = MAP{
				"durationType": ASNDollar[1].TypeValue,
			}
		}
	case 107:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1400
		{
			ASNVAL.TypeValue = MAP{
				"embeddedPDVType": ASNDollar[1].TypeValue,
			}
		}
	case 108:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1405
		{
			ASNVAL.TypeValue = MAP{
				"enumeratedType": ASNDollar[1].TypeValue,
			}
		}
	case 109:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1410
		{
			ASNVAL.TypeValue = MAP{
				"externalType": ASNDollar[1].TypeValue,
			}
		}
	case 110:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1415
		{
			ASNVAL.TypeValue = MAP{
				"instanceOfType": ASNDollar[1].TypeValue,
			}
		}
	case 111:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1420
		{
			ASNVAL.TypeValue = MAP{
				"integerType": ASNDollar[1].TypeValue,
			}
		}
	case 112:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1425
		{
			ASNVAL.TypeValue = MAP{
				"iriType": ASNDollar[1].TypeValue,
			}
		}
	case 113:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1430
		{
			ASNVAL.TypeValue = MAP{
				"nullType": ASNDollar[1].TypeValue,
			}
		}
	case 114:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1435
		{
			ASNVAL.TypeValue = MAP{
				"objectClassFieldType": ASNDollar[1].TypeValue,
			}
		}
	case 115:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1440
		{
			ASNVAL.TypeValue = MAP{
				"objectIdentifierType": ASNDollar[1].TypeValue,
			}
		}
	case 116:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1445
		{
			ASNVAL.TypeValue = MAP{
				"octetStringType": ASNDollar[1].TypeValue,
			}
		}
	case 117:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1450
		{
			ASNVAL.TypeValue = MAP{
				"realType": ASNDollar[1].TypeValue,
			}
		}
	case 118:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1455
		{
			ASNVAL.TypeValue = MAP{
				"relativeIRIType": ASNDollar[1].TypeValue,
			}
		}
	case 119:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1460
		{
			ASNVAL.TypeValue = MAP{
				"relativeOIDType": ASNDollar[1].TypeValue,
			}
		}
	case 120:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1465
		{
			ASNVAL.TypeValue = MAP{
				"sequenceType": ASNDollar[1].TypeValue,
			}
		}
	case 121:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1470
		{
			ASNVAL.TypeValue = MAP{
				"sequenceOfType": ASNDollar[1].TypeValue,
			}
		}
	case 122:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1475
		{
			ASNVAL.TypeValue = MAP{
				"setType": ASNDollar[1].TypeValue,
			}
		}
	case 123:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1480
		{
			ASNVAL.TypeValue = MAP{
				"setOfType": ASNDollar[1].TypeValue,
			}
		}
	case 124:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1485
		{
			ASNVAL.TypeValue = MAP{
				"prefixedType": ASNDollar[1].TypeValue,
			}
		}
	case 125:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1490
		{
			ASNVAL.TypeValue = MAP{
				"timeType": ASNDollar[1].TypeValue,
			}
		}
	case 126:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1495
		{
			ASNVAL.TypeValue = MAP{
				"timeOfDayType": ASNDollar[1].TypeValue,
			}
		}
	case 127:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1511
		{
			ASNVAL.TypeValue = MAP{
				"definedType": ASNDollar[1].TypeValue,
			}
		}
	case 128:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1516
		{
			ASNVAL.TypeValue = MAP{
				"usefulType": ASNDollar[1].TypeValue,
			}
		}
	case 129:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1521
		{
			ASNVAL.TypeValue = MAP{
				"selectionType": ASNDollar[1].TypeValue,
			}
		}
	case 130:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1526
		{
			ASNVAL.TypeValue = MAP{
				"typeFromObject": ASNDollar[1].TypeValue,
			}
		}
	case 131:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1531
		{
			ASNVAL.TypeValue = MAP{
				"valueSetFromObjects": ASNDollar[1].TypeValue,
			}
		}
	case 132:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1546
		{
			ASNVAL.TypeValue = MAP{
				"externalTypeReference": ASNDollar[1].TypeValue,
			}
		}
	case 133:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1551
		{
			ASNVAL.TypeValue = MAP{
				"typeReference": ASNDollar[1].TypeValue,
			}
		}
	case 134:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1556
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedType": ASNDollar[1].TypeValue,
			}
		}
	case 135:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1561
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedValueSetType": ASNDollar[1].TypeValue,
			}
		}
	case 136:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1575
		{
			ASNVAL.TypeValue = MAP{
				"moduleReference": ASNDollar[1].TypeValue,
				"typeReference":   ASNDollar[2].TypeToken,
			}
		}
	case 137:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1589
		{
			ASNVAL.TypeValue = MAP{
				"simpleDefinedType":   ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 138:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1603
		{
			ASNVAL.TypeValue = MAP{
				"simpleDefinedType":   ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 139:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1617
		{
			ASNVAL.TypeValue = MAP{
				"externalTypeReference": ASNDollar[1].TypeValue,
			}
		}
	case 140:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1622
		{
			ASNVAL.TypeValue = MAP{
				"typeReference": ASNDollar[1].TypeValue,
			}
		}
	case 141:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1633
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[2].TypeValue,
			}
		}
	case 142:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:1638
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[4].TypeValue)
		}
	case 143:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1654
		{
			ASNVAL.TypeValue = MAP{
				"type": ASNDollar[1].TypeValue,
			}
		}
	case 144:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1659
		{
			ASNVAL.TypeValue = MAP{
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 145:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1664
		{
			ASNVAL.TypeValue = MAP{
				"valueSet": ASNDollar[1].TypeValue,
			}
		}
	case 146:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1669
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectClass": ASNDollar[1].TypeValue,
			}
		}
	case 147:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1674
		{
			ASNVAL.TypeValue = MAP{
				"object": ASNDollar[1].TypeValue,
			}
		}
	case 148:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1679
		{
			ASNVAL.TypeValue = MAP{
				"objectSet": ASNDollar[1].TypeValue,
			}
		}
	case 149:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1707
		{
			ASNVAL.TypeValue = STRING(UTF8String)
		}
	case 150:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1710
		{
			ASNVAL.TypeValue = STRING(GraphicString)
		}
	case 151:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1713
		{
			ASNVAL.TypeValue = STRING(NumericString)
		}
	case 152:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1716
		{
			ASNVAL.TypeValue = STRING(VisibleString)
		}
	case 153:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1719
		{
			ASNVAL.TypeValue = STRING(PrintableString)
		}
	case 154:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1722
		{
			ASNVAL.TypeValue = STRING(ISO646String)
		}
	case 155:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1725
		{
			ASNVAL.TypeValue = STRING(TeletexString)
		}
	case 156:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1728
		{
			ASNVAL.TypeValue = STRING(GeneralString)
		}
	case 157:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1731
		{
			ASNVAL.TypeValue = STRING(T61String)
		}
	case 158:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1734
		{
			ASNVAL.TypeValue = STRING(UniversalString)
		}
	case 159:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1737
		{
			ASNVAL.TypeValue = STRING(VideotexString)
		}
	case 160:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1740
		{
			ASNVAL.TypeValue = STRING(BMPString)
		}
	case 161:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1743
		{
			ASNVAL.TypeValue = STRING(IA5String)
		}
	case 162:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1746
		{
			ASNVAL.TypeValue = STRING(GeneralizedTime)
		}
	case 163:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1749
		{
			ASNVAL.TypeValue = STRING(UTCTime)
		}
	case 164:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1752
		{
			ASNVAL.TypeValue = STRING(ObjectDescriptor)
		}
	case 165:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1762
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"typename":   ASNDollar[3].TypeValue,
			}
		}
	case 166:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1775
		{
			ASNVAL.TypeValue = MAP{
				"referencedObjects": ASNDollar[1].TypeValue,
				"fieldName":         ASNDollar[2].TypeToken,
			}
		}
	case 167:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1788
		{
			ASNVAL.TypeValue = MAP{
				"definedObject": ASNDollar[1].TypeValue,
			}
		}
	case 168:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1793
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedObject": ASNDollar[1].TypeValue,
			}
		}
	case 169:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1798
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 170:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1803
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 171:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1815
		{
			ASNVAL.TypeValue = MAP{
				"externalObjectReference": ASNDollar[1].TypeValue,
			}
		}
	case 172:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1820
		{
			ASNVAL.TypeValue = MAP{
				"objectReference": ASNDollar[1].TypeValue,
			}
		}
	case 173:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1832
		{
			ASNVAL.TypeValue = MAP{
				"moduleReference": ASNDollar[1].TypeValue,
				"objectReference": ASNDollar[3].TypeValue,
			}
		}
	case 174:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1845
		{
			ASNVAL.TypeValue = MAP{
				"definedObject":       ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 175:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1858
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 176:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1861
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 177:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1871
		{
			ASNVAL.TypeValue = MAP{
				"moduleReference":    ASNDollar[1].TypeValue,
				"objectSetReference": ASNDollar[3].TypeValue,
			}
		}
	case 178:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1884
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet":    ASNDollar[1].TypeValue,
				"actualParameterList": ASNDollar[2].TypeValue,
			}
		}
	case 179:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1897
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 180:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1908
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 181:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1913
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 182:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1928
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 183:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1938
		{
			ASNVAL.TypeValue = MAP{
				"referencedObjects": ASNDollar[1].TypeValue,
				"fieldname":         ASNDollar[3].TypeValue,
			}
		}
	case 184:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1952
		{
			ASNVAL.TypeValue = MAP{
				"typename":   ASNDollar[1].TypeValue,
				"constraint": ASNDollar[2].TypeValue,
			}
		}
	case 185:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1958
		{
			ASNVAL.TypeValue = MAP{
				"typename": ASNDollar[1].TypeValue,
			}
		}
	case 186:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:1970
		{
			ASNVAL.TypeValue = MAP{
				"constraintSpec": ASNDollar[2].TypeValue,
				"exceptionSpec":  ASNDollar[3].TypeValue,
			}
		}
	case 187:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1984
		{
			ASNVAL.TypeValue = MAP{
				"subtypeConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 188:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1989
		{
			ASNVAL.TypeValue = MAP{
				"generalConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 189:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2001
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 190:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2013
		{
			ASNVAL.TypeValue = MAP{
				"rootElementSetSpec": ASNDollar[1].TypeValue,
			}
		}
	case 191:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2018
		{
			ASNVAL.TypeValue = MAP{
				"rootElementSetSpec": ASNDollar[1].TypeValue,
			}
		}
	case 192:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:2023
		{
			ASNVAL.TypeValue = MAP{
				"rootElementSetSpec":       ASNDollar[1].TypeValue,
				"additionalElementSetSpec": ASNDollar[2].TypeToken,
			}
		}
	case 193:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2036
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 194:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2046
		{
			ASNVAL.TypeValue = nil
		}
	case 195:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2057
		{
			ASNVAL.TypeValue = MAP{
				"unions": ASNDollar[1].TypeValue,
			}
		}
	case 196:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2062
		{
			ASNVAL.TypeValue = MAP{
				"exclusions": ASNDollar[1].TypeString,
			}
		}
	case 197:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2075
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 198:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2078
		{
			ASNVAL.TypeValue = MAP{
				"unions":        ASNDollar[1].TypeValue,
				"intersections": ASNDollar[3].TypeValue,
			}
		}
	case 199:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2092
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 200:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2095
		{
			ASNVAL.TypeValue = MAP{
				"intersections":        ASNDollar[1].TypeValue,
				"intersectionElements": ASNDollar[2].TypeValue,
			}
		}
	case 201:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2108
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 202:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2111
		{
			ASNVAL.TypeValue = MAP{
				"elements":   ASNDollar[1].TypeValue,
				"exclusions": ASNDollar[2].TypeValue,
			}
		}
	case 203:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2126
		{
			ASNVAL.TypeValue = MAP{
				"subtypeElements": ASNDollar[1].TypeValue,
			}
		}
	case 204:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2131
		{
			ASNVAL.TypeValue = MAP{
				"objectSetElements": ASNDollar[1].TypeValue,
			}
		}
	case 205:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2136
		{
			ASNVAL.TypeValue = MAP{
				"elementSetSpec": ASNDollar[1].TypeToken,
			}
		}
	case 206:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2148
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 207:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2169
		{
			ASNVAL.TypeValue = MAP{
				"singleValue": ASNDollar[1].TypeValue,
			}
		}
	case 208:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2174
		{
			ASNVAL.TypeValue = MAP{
				"containedSubtype": ASNDollar[1].TypeValue,
			}
		}
	case 209:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2179
		{
			ASNVAL.TypeValue = MAP{
				"valueRange": ASNDollar[1].TypeValue,
			}
		}
	case 210:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2184
		{
			ASNVAL.TypeValue = MAP{
				"permittedAlphabet": ASNDollar[1].TypeValue,
			}
		}
	case 211:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2189
		{
			ASNVAL.TypeValue = MAP{
				"sizeConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 212:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2194
		{
			ASNVAL.TypeValue = MAP{
				"typeConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 213:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2199
		{
			ASNVAL.TypeValue = MAP{
				"innerTypeConstraints": ASNDollar[1].TypeValue,
			}
		}
	case 214:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2204
		{
			ASNVAL.TypeValue = MAP{
				"patternConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 215:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2209
		{
			ASNVAL.TypeValue = MAP{
				"propertySettings": ASNDollar[1].TypeValue,
			}
		}
	case 216:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2214
		{
			ASNVAL.TypeValue = MAP{
				"durationRange": ASNDollar[1].TypeValue,
			}
		}
	case 217:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2219
		{
			ASNVAL.TypeValue = MAP{
				"timePointRange": ASNDollar[1].TypeValue,
			}
		}
	case 218:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2224
		{
			ASNVAL.TypeValue = MAP{
				"recurrenceRange": ASNDollar[1].TypeValue,
			}
		}
	case 219:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2236
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 220:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2246
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 221:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2256
		{
			ASNVAL.TypeValue = STRING("INCLUDES")
		}
	case 222:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2259
		{
			ASNVAL.TypeValue = STRING("INCLUDES")
		}
	case 223:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2269
		{
			ASNVAL.TypeValue = MAP{
				"lowerEndpoint": ASNDollar[1].TypeValue,
				"upperEndpoint": ASNDollar[2].TypeToken,
			}
		}
	case 224:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2282
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 225:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2285
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 226:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2295
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 227:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2298
		{
			ASNVAL.TypeValue = STRING("MIN")
		}
	case 228:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2308
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 229:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2311
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 230:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2321
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 231:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2324
		{
			ASNVAL.TypeValue = STRING("MAX")
		}
	case 232:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2334
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 233:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2344
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 234:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2354
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 235:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2365
		{
			ASNVAL.TypeValue = ASNDollar[3].TypeValue
		}
	case 236:
		ASNDollar = ASNS[ASNpt-7 : ASNpt+1]
//line asn.y:2368
		{
			ASNVAL.TypeValue = ASNDollar[3].TypeValue
		}
	case 237:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2378
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 238:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2389
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 239:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2392
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 240:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2402
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 241:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2413
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 242:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2416
		{
			ASNVAL.TypeValue = MAP{
				"nameConstraint":  ASNDollar[1].TypeValue,
				"typeConstraints": ASNDollar[3].TypeValue,
			}
		}
	case 243:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2429
		{
			ASNVAL.TypeValue = MAP{
				"identifier":          ASNDollar[1].TypeValue,
				"componentConstraint": ASNDollar[2].TypeValue,
			}
		}
	case 244:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2442
		{
			ASNVAL.TypeValue = MAP{
				"valueConstraint":    ASNDollar[1].TypeValue,
				"presenceConstraint": ASNDollar[2].TypeValue,
			}
		}
	case 245:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2455
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 246:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2458
		{
			ASNVAL.TypeValue = nil
		}
	case 247:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2468
		{
			ASNVAL.TypeValue = STRING("PRESENT")
		}
	case 248:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2471
		{
			ASNVAL.TypeValue = STRING("ABSENT")
		}
	case 249:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2474
		{
			ASNVAL.TypeValue = STRING("OPTIONAL")
		}
	case 250:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2477
		{
			ASNVAL.TypeValue = nil
		}
	case 251:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:2487
		{
			ASNVAL.TypeValue = ASNDollar[4].TypeValue
		}
	case 252:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2497
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 253:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2507
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 254:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2517
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 255:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2527
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 256:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2537
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 257:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2550
		{
			ASNVAL.TypeValue = MAP{
				"object": ASNDollar[1].TypeValue,
			}
		}
	case 258:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2555
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 259:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2560
		{
			ASNVAL.TypeValue = MAP{
				"objectSetFromObjects": ASNDollar[1].TypeValue,
			}
		}
	case 260:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2565
		{
			ASNVAL.TypeValue = MAP{
				"parameterizedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 261:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2577
		{
			ASNVAL.TypeValue = MAP{
				"referencedObjects": ASNDollar[1].TypeValue,
				"fieldName":         ASNDollar[2].TypeToken,
			}
		}
	case 262:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2590
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 263:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2600
		{
			ASNVAL.TypeValue = STRING("INTERSECTION")
		}
	case 264:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2603
		{
			ASNVAL.TypeValue = STRING("INTERSECTION")
		}
	case 265:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2613
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 266:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2623
		{
			ASNVAL.TypeValue = STRING("UNION")
		}
	case 267:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2626
		{
			ASNVAL.TypeValue = STRING("UNION")
		}
	case 268:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2636
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 269:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2648
		{
			ASNVAL.TypeValue = MAP{
				"userDefinedConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 270:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2653
		{
			ASNVAL.TypeValue = MAP{
				"tableConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 271:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2658
		{
			ASNVAL.TypeValue = MAP{
				"contentsConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 272:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:2670
		{
			ASNVAL.TypeValue = ASNDollar[4].TypeValue
		}
	case 273:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2682
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 274:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2687
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 275:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2691
		{
			ASNVAL.TypeValue = nil
		}
	case 276:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2705
		{
			ASNVAL.TypeValue = MAP{
				"governor": ASNDollar[1].TypeValue,
				"value":    ASNDollar[3].TypeValue,
			}
		}
	case 277:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2711
		{
			ASNVAL.TypeValue = MAP{
				"governor": ASNDollar[1].TypeValue,
				"object":   ASNDollar[3].TypeValue,
			}
		}
	case 278:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2717
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet": ASNDollar[1].TypeValue,
			}
		}
	case 279:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2722
		{
			ASNVAL.TypeValue = MAP{
				"type": ASNDollar[1].TypeValue,
			}
		}
	case 280:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2727
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectClass": ASNDollar[1].TypeValue,
			}
		}
	case 281:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2739
		{
			ASNVAL.TypeValue = MAP{
				"typename": ASNDollar[1].TypeValue,
			}
		}
	case 282:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2744
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectClass": ASNDollar[1].TypeValue,
			}
		}
	case 283:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2756
		{
			ASNVAL.TypeValue = MAP{
				"simpleTableConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 284:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2761
		{
			ASNVAL.TypeValue = MAP{
				"componentRelationConstraint": ASNDollar[1].TypeValue,
			}
		}
	case 285:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2773
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 286:
		ASNDollar = ASNS[ASNpt-6 : ASNpt+1]
//line asn.y:2784
		{
			ASNVAL.TypeValue = MAP{
				"definedObjectSet": ASNDollar[1].TypeToken,
				"atNotations":      ASNDollar[2].TypeValue,
			}
		}
	case 287:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2798
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 288:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2803
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 289:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2814
		{
			ASNVAL.TypeValue = MAP{
				"componentIdList": ASNDollar[2].TypeValue,
			}
		}
	case 290:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2819
		{
			ASNVAL.TypeValue = MAP{
				"componentIdList": ASNDollar[4].TypeValue,
			}
		}
	case 291:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2831
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 292:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2836
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 293:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2847
		{
			ASNVAL.TypeValue = nil
		}
	case 294:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2850
		{
			ASNVAL.TypeValue = nil
		}
	case 295:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2862
		{
			ASNVAL.TypeValue = MAP{
				"typename": ASNDollar[2].TypeValue,
			}
		}
	case 296:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2867
		{
			ASNVAL.TypeValue = MAP{
				"value": ASNDollar[3].TypeValue,
			}
		}
	case 297:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:2872
		{
			ASNVAL.TypeValue = MAP{
				"typename": ASNDollar[2].TypeValue,
				"value":    ASNDollar[5].TypeValue,
			}
		}
	case 298:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2885
		{
			ASNVAL.TypeValue = MAP{
				"exceptionIdentification": ASNDollar[1].TypeToken,
			}
		}
	case 299:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:2890
		{
			ASNVAL.TypeValue = nil
		}
	case 300:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2902
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 301:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:2905
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 302:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:2908
		{
			ASNVAL.TypeValue = MAP{
				"typename": ASNDollar[1].TypeValue,
				"value":    ASNDollar[3].TypeValue,
			}
		}
	case 303:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2928
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence": "SET",
				"constraint":    ASNDollar[2].TypeValue,
				"typename":      ASNDollar[4].TypeValue,
			}
		}
	case 304:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2935
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence":  "SET",
				"sizeConstraint": ASNDollar[2].TypeValue,
				"typename":       ASNDollar[4].TypeValue,
			}
		}
	case 305:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2942
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence": "SEQUENCE",
				"constraint":    ASNDollar[2].TypeValue,
				"typename":      ASNDollar[4].TypeValue,
			}
		}
	case 306:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2949
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence":  "SEQUENCE",
				"sizeConstraint": ASNDollar[2].TypeValue,
				"typename":       ASNDollar[4].TypeValue,
			}
		}
	case 307:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2956
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence": "SET",
				"constraint":    ASNDollar[2].TypeValue,
				"namedType":     ASNDollar[4].TypeValue,
			}
		}
	case 308:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2963
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence":  "SET",
				"sizeConstraint": ASNDollar[2].TypeValue,
				"namedType":      ASNDollar[4].TypeValue,
			}
		}
	case 309:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2970
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence": "SEQUENCE",
				"constraint":    ASNDollar[2].TypeValue,
				"namedType":     ASNDollar[4].TypeValue,
			}
		}
	case 310:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:2977
		{
			ASNVAL.TypeValue = MAP{
				"setOrSequence":  "SEQUENCE",
				"sizeConstraint": ASNDollar[2].TypeValue,
				"namedType":      ASNDollar[4].TypeValue,
			}
		}
	case 311:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:2991
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"typename":   ASNDollar[2].TypeValue,
			}
		}
	case 312:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3005
		{
			ASNVAL.TypeValue = MAP{
				"type": "BIT_STRING",
			}
		}
	case 313:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:3010
		{
			ASNVAL.TypeValue = MAP{
				"type":      "BIT_STRING",
				"namedBits": ASNDollar[4].TypeValue,
			}
		}
	case 314:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3024
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 315:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3029
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 316:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3041
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"number":     ASNDollar[3].TypeValue,
			}
		}
	case 317:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3047
		{
			ASNVAL.TypeValue = MAP{
				"identifier":   ASNDollar[1].TypeValue,
				"definedValue": ASNDollar[3].TypeValue,
			}
		}
	case 318:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3060
		{
			ASNVAL.TypeValue = MAP{
				"type": "BOOLEAN",
			}
		}
	case 319:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3073
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 320:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3076
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 321:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3098
		{
			ASNVAL.TypeValue = MAP{
				"type": "BMP_STRING",
			}
		}
	case 322:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3103
		{
			ASNVAL.TypeValue = MAP{
				"type": "GENERAL_STRING",
			}
		}
	case 323:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3108
		{
			ASNVAL.TypeValue = MAP{
				"type": "GRAPHIC_STRING",
			}
		}
	case 324:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3113
		{
			ASNVAL.TypeValue = MAP{
				"type": "IA5_STRING",
			}
		}
	case 325:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3118
		{
			ASNVAL.TypeValue = MAP{
				"type": "ISO646_STRING",
			}
		}
	case 326:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3123
		{
			ASNVAL.TypeValue = MAP{
				"type": "NUMERIC_STRING",
			}
		}
	case 327:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3128
		{
			ASNVAL.TypeValue = MAP{
				"type": "PRINTABLE_STRING",
			}
		}
	case 328:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3133
		{
			ASNVAL.TypeValue = MAP{
				"type": "TELETEX_STRING",
			}
		}
	case 329:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3138
		{
			ASNVAL.TypeValue = MAP{
				"type": "T61_STRING",
			}
		}
	case 330:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3143
		{
			ASNVAL.TypeValue = MAP{
				"type": "UNIVERSAL_STRING",
			}
		}
	case 331:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3148
		{
			ASNVAL.TypeValue = MAP{
				"type": "UTF8_STRING",
			}
		}
	case 332:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3153
		{
			ASNVAL.TypeValue = MAP{
				"type": "VIDEO_TEX_STRING",
			}
		}
	case 333:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3158
		{
			ASNVAL.TypeValue = MAP{
				"type": "VISIBLE_STRING",
			}
		}
	case 334:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3170
		{
			ASNVAL.TypeValue = MAP{
				"type": "CHARACTER_STRING",
			}
		}
	case 335:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3182
		{
			ASNVAL.TypeValue = MAP{
				"type":           "CHOICE",
				"alternateTypes": ASNDollar[3].TypeValue,
			}
		}
	case 336:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3196
		{
			ASNVAL.TypeValue = MAP{
				"alternativeTypes": ASNDollar[1].TypeValue,
			}
		}
	case 337:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:3201
		{
			ASNVAL.TypeValue = MAP{
				"alternativeTypes":              ASNDollar[1].TypeValue,
				"extensionAndException":         ASNDollar[3].TypeValue,
				"extensionAdditionAlternatives": ASNDollar[4].TypeValue,
			}
		}
	case 338:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3215
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 339:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3226
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 340:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3231
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 341:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3243
		{
			ASNVAL.TypeValue = nil
		}
	case 342:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3246
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 343:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3257
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 344:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3260
		{
			ASNVAL.TypeValue = nil
		}
	case 345:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3271
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 346:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3276
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 347:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3288
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 348:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3291
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 349:
		ASNDollar = ASNS[ASNpt-6 : ASNpt+1]
//line asn.y:3301
		{
			ASNVAL.TypeValue = MAP{
				"version":          ASNDollar[3].TypeValue,
				"alternativeTypes": ASNDollar[4].TypeValue,
			}
		}
	case 350:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3314
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 351:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3317
		{
			ASNVAL.TypeValue = nil
		}
	case 352:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3328
		{
			ASNVAL.TypeValue = true
		}
	case 353:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3331
		{
			ASNVAL.TypeValue = nil
		}
	case 354:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3341
		{
			ASNVAL.TypeValue = MAP{
				"type": "DATE",
			}
		}
	case 355:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3353
		{
			ASNVAL.TypeValue = MAP{
				"type": "DATE_TIME",
			}
		}
	case 356:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3365
		{
			ASNVAL.TypeValue = MAP{
				"type": "DURATION",
			}
		}
	case 357:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3377
		{
			ASNVAL.TypeValue = MAP{
				"type": "EMBEDDED_PDV",
			}
		}
	case 358:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3389
		{
			ASNVAL.TypeValue = MAP{
				"type":         "ENUMERATED",
				"enumerations": ASNDollar[3].TypeValue,
			}
		}
	case 359:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3404
		{
			ASNVAL.TypeValue = MAP{
				"enumeration": ASNDollar[1].TypeValue,
			}
		}
	case 360:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3409
		{
			ASNVAL.TypeValue = MAP{
				"enumeration": ASNDollar[1].TypeValue,
				"exception":   ASNDollar[4].TypeValue,
			}
		}
	case 361:
		ASNDollar = ASNS[ASNpt-6 : ASNpt+1]
//line asn.y:3415
		{
			ASNVAL.TypeValue = MAP{
				"enumeration":           ASNDollar[1].TypeValue,
				"exception":             ASNDollar[4].TypeValue,
				"additionalEnumeration": ASNDollar[6].TypeValue,
			}
		}
	case 362:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3429
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 363:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3439
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 364:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3450
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 365:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3455
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 366:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3466
		{
			ASNVAL.TypeValue = MAP{
				"name": ASNDollar[1].TypeValue,
			}
		}
	case 367:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3471
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 368:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3483
		{
			ASNVAL.TypeValue = MAP{
				"name":   ASNDollar[1].TypeValue,
				"number": ASNDollar[3].TypeValue,
			}
		}
	case 369:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3489
		{
			ASNVAL.TypeValue = MAP{
				"name":         ASNDollar[1].TypeValue,
				"definedValue": ASNDollar[3].TypeValue,
			}
		}
	case 370:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3502
		{
			ASNVAL.TypeValue = MAP{
				"type": "EXTERNAL",
			}
		}
	case 371:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3514
		{
			ASNVAL.TypeValue = MAP{
				"type":               "INSTANCE_OF",
				"definedObjectClass": ASNDollar[3].TypeValue,
			}
		}
	case 372:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3528
		{
			ASNVAL.TypeValue = MAP{
				"type": "INTEGER",
			}
		}
	case 373:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:3533
		{
			ASNVAL.TypeValue = MAP{
				"type":    "INTEGER",
				"numbers": ASNDollar[3].TypeValue,
			}
		}
	case 374:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3547
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 375:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3552
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 376:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3563
		{
			ASNVAL.TypeValue = MAP{
				"type": "OID_IRI",
			}
		}
	case 377:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3575
		{
			ASNVAL.TypeValue = MAP{
				"type": "NULL",
			}
		}
	case 378:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3587
		{
			ASNVAL.TypeValue = MAP{
				"type":               "OBJECT_FIELD",
				"definedObjectClass": ASNDollar[1].TypeValue,
				"fieldName":          ASNDollar[3].TypeValue,
			}
		}
	case 379:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3601
		{
			ASNVAL.TypeValue = MAP{
				"type": "OBJECT_IDENTIFIER",
			}
		}
	case 380:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3613
		{
			ASNVAL.TypeValue = MAP{
				"type": "OCTET_STRING",
			}
		}
	case 381:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3625
		{
			ASNVAL.TypeValue = MAP{
				"type": "REAL",
			}
		}
	case 382:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3637
		{
			ASNVAL.TypeValue = MAP{
				"type": "RELATIVE_OID_IRI",
			}
		}
	case 383:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3649
		{
			ASNVAL.TypeValue = MAP{
				"type": "RELATIVE_OID",
			}
		}
	case 384:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3663
		{
			ASNVAL.TypeValue = MAP{
				"type": "SEQUENCE",
			}
		}
	case 385:
		ASNDollar = ASNS[ASNpt-9 : ASNpt+1]
//line asn.y:3668
		{
			ASNVAL.TypeValue = MAP{
				"type":                  "SEQUENCE",
				"extensionAndException": ASNDollar[3].TypeToken,
			}
		}
	case 386:
		ASNDollar = ASNS[ASNpt-14 : ASNpt+1]
//line asn.y:3674
		{
			ASNVAL.TypeValue = MAP{
				"type":           "SEQUENCE",
				"componentTypes": ASNDollar[3].TypeToken,
			}
		}
	case 387:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3691
		{
			ASNVAL.TypeValue = MAP{
				"rootComponentTypes": ASNDollar[1].TypeValue,
			}
		}
	case 388:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:3696
		{
			ASNVAL.TypeValue = MAP{
				"extensionAndException": ASNDollar[3].TypeValue,
				"extensionAdditions":    ASNDollar[4].TypeValue,
				"rootComponentTypes":    ASNDollar[1].TypeValue,
			}
		}
	case 389:
		ASNDollar = ASNS[ASNpt-7 : ASNpt+1]
//line asn.y:3703
		{
			ASNVAL.TypeValue = MAP{
				"extensionAndException": ASNDollar[3].TypeValue,
				"extensionAdditions":    ASNDollar[4].TypeValue,
				"rootComponentTypes":    append(ASNDollar[1].TypeValue.(LIST), ASNDollar[7].TypeValue.(LIST)),
			}
		}
	case 390:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:3710
		{
			ASNVAL.TypeValue = MAP{
				"extensionAndException": ASNDollar[1].TypeValue,
				"extensionAdditions":    ASNDollar[2].TypeValue,
				"rootComponentTypes":    ASNDollar[5].TypeValue,
			}
		}
	case 391:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3717
		{
			ASNVAL.TypeValue = MAP{
				"extensionAndException": ASNDollar[1].TypeValue,
				"extensionAdditions":    ASNDollar[2].TypeValue,
			}
		}
	case 392:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3730
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 393:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3741
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 394:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3746
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 395:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3760
		{
			ASNVAL.TypeValue = MAP{
				"type":      "COMPONENTS",
				"namedType": ASNDollar[1].TypeValue,
			}
		}
	case 396:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3766
		{
			ASNVAL.TypeValue = MAP{
				"type":      "COMPONENTS",
				"namedType": ASNDollar[1].TypeValue,
				"optional":  true,
			}
		}
	case 397:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3773
		{
			ASNVAL.TypeValue = MAP{
				"type":         "COMPONENTS",
				"namedType":    ASNDollar[1].TypeValue,
				"defaultValue": ASNDollar[3].TypeValue,
			}
		}
	case 398:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3780
		{
			ASNVAL.TypeValue = MAP{
				"type":     "COMPONENTS",
				"typename": ASNDollar[3].TypeValue,
			}
		}
	case 399:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3794
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 400:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:3797
		{
			ASNVAL.TypeValue = nil
		}
	case 401:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3808
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 402:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3813
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 403:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3825
		{
			ASNVAL.TypeValue = MAP{
				"componentType": ASNDollar[1].TypeValue,
			}
		}
	case 404:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3830
		{
			ASNVAL.TypeValue = MAP{
				"extensionAdditionGroup": ASNDollar[1].TypeValue,
			}
		}
	case 405:
		ASNDollar = ASNS[ASNpt-6 : ASNpt+1]
//line asn.y:3842
		{
			ASNVAL.TypeValue = MAP{
				"version":        ASNDollar[3].TypeValue,
				"componentTypes": ASNDollar[4].TypeValue,
			}
		}
	case 406:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3855
		{
			ASNVAL.TypeValue = true
		}
	case 407:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3866
		{
			ASNVAL.TypeValue = MAP{
				"type":     "SEQUENCE_OF",
				"typename": ASNDollar[3].TypeValue,
			}
		}
	case 408:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3872
		{
			ASNVAL.TypeValue = MAP{
				"type":      "SEQUENCE_OF",
				"namedType": ASNDollar[3].TypeValue,
			}
		}
	case 409:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3887
		{
			ASNVAL.TypeValue = MAP{
				"type": "SET",
			}
		}
	case 410:
		ASNDollar = ASNS[ASNpt-9 : ASNpt+1]
//line asn.y:3892
		{
			ASNVAL.TypeValue = MAP{
				"type":                  "SET",
				"extensionAndException": ASNDollar[3].TypeToken,
			}
		}
	case 411:
		ASNDollar = ASNS[ASNpt-14 : ASNpt+1]
//line asn.y:3898
		{
			ASNVAL.TypeValue = MAP{
				"type":           "SET",
				"componentTypes": ASNDollar[3].TypeToken,
			}
		}
	case 412:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:3912
		{
			ASNVAL.TypeValue = MAP{
				"type":     "SET_OF",
				"typename": ASNDollar[3].TypeValue,
			}
		}
	case 413:
		ASNDollar = ASNS[ASNpt-7 : ASNpt+1]
//line asn.y:3918
		{
			ASNVAL.TypeValue = MAP{
				"type":      "SET_OF",
				"namedType": ASNDollar[3].TypeValue,
			}
		}
	case 414:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3931
		{
			ASNVAL.TypeValue = MAP{
				"type": "TIME",
			}
		}
	case 415:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3943
		{
			ASNVAL.TypeValue = MAP{
				"type": "TIME_OF_DAY",
			}
		}
	case 416:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3956
		{
			ASNVAL.TypeValue = MAP{
				"type":       "PREFIXED",
				"taggedType": ASNDollar[1].TypeValue,
			}
		}
	case 417:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:3962
		{
			ASNVAL.TypeValue = MAP{
				"type":                 "PREFIXED",
				"encodingPrefixedType": ASNDollar[1].TypeValue,
			}
		}
	case 418:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:3977
		{
			ASNVAL.TypeValue = MAP{
				"tag":      ASNDollar[1].TypeValue,
				"typename": ASNDollar[2].TypeValue,
			}
		}
	case 419:
		ASNDollar = ASNS[ASNpt-6 : ASNpt+1]
//line asn.y:3983
		{
			ASNVAL.TypeValue = MAP{
				"tag":      ASNDollar[1].TypeValue,
				"typename": ASNDollar[2].TypeValue,
				"implicit": true,
			}
		}
	case 420:
		ASNDollar = ASNS[ASNpt-10 : ASNpt+1]
//line asn.y:3990
		{
			ASNVAL.TypeValue = MAP{
				"tag":      ASNDollar[1].TypeValue,
				"typename": ASNDollar[2].TypeValue,
				"explicit": true,
			}
		}
	case 421:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:4004
		{
			ASNVAL.TypeValue = MAP{
				"encodingReference": ASNDollar[2].TypeValue,
				"class":             ASNDollar[3].TypeValue,
				"classNumber":       ASNDollar[4].TypeValue,
			}
		}
	case 422:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4019
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 423:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4032
		{
			ASNVAL.TypeValue = STRING("UNIVERSAL")
		}
	case 424:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4035
		{
			ASNVAL.TypeValue = STRING("APPLICATION")
		}
	case 425:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4038
		{
			ASNVAL.TypeValue = STRING("PRIVATE")
		}
	case 426:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4041
		{
			ASNVAL.TypeValue = nil
		}
	case 427:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4052
		{
			ASNVAL.TypeValue = MAP{
				"number": ASNDollar[1].TypeValue,
			}
		}
	case 428:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4057
		{
			ASNVAL.TypeValue = MAP{
				"definedValue": ASNDollar[1].TypeValue,
			}
		}
	case 429:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4069
		{
			ASNVAL.TypeValue = MAP{
				"encodingPrefix": ASNDollar[1].TypeValue,
				"typename":       ASNDollar[2].TypeValue,
			}
		}
	case 430:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:4082
		{
			ASNVAL.TypeValue = MAP{
				"encodingReference":   ASNDollar[2].TypeValue,
				"encodingInstruction": ASNDollar[3].TypeValue,
			}
		}
	case 431:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4095
		{
			ASNVAL.TypeValue = STRING("TAG")
		}
	case 432:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4098
		{
			ASNVAL.TypeValue = STRING("XER")
		}
	case 433:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4101
		{
			ASNVAL.TypeValue = STRING("PER")
		}
	case 434:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4132
		{
			ASNVAL.TypeValue = MAP{
				"bitString": ASNDollar[1].TypeValue,
			}
		}
	case 435:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4137
		{
			ASNVAL.TypeValue = MAP{
				"boolean": ASNDollar[1].TypeValue,
			}
		}
	case 436:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4142
		{
			ASNVAL.TypeValue = MAP{
				"characterString": ASNDollar[1].TypeValue,
			}
		}
	case 437:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4147
		{
			ASNVAL.TypeValue = MAP{
				"choice": ASNDollar[1].TypeValue,
			}
		}
	case 438:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4152
		{
			ASNVAL.TypeValue = MAP{
				"embeddedPDV": ASNDollar[1].TypeValue,
			}
		}
	case 439:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4157
		{
			ASNVAL.TypeValue = MAP{
				"enumerated": ASNDollar[1].TypeValue,
			}
		}
	case 440:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4162
		{
			ASNVAL.TypeValue = MAP{
				"external": ASNDollar[1].TypeValue,
			}
		}
	case 441:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4167
		{
			ASNVAL.TypeValue = MAP{
				"instanceOf": ASNDollar[1].TypeValue,
			}
		}
	case 442:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4172
		{
			ASNVAL.TypeValue = MAP{
				"integer": ASNDollar[1].TypeValue,
			}
		}
	case 443:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4177
		{
			ASNVAL.TypeValue = MAP{
				"iri": ASNDollar[1].TypeValue,
			}
		}
	case 444:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4182
		{
			ASNVAL.TypeValue = MAP{
				"null": ASNDollar[1].TypeValue,
			}
		}
	case 445:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4187
		{
			ASNVAL.TypeValue = MAP{
				"objectIdentifier": ASNDollar[1].TypeValue,
			}
		}
	case 446:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4192
		{
			ASNVAL.TypeValue = MAP{
				"octetString": ASNDollar[1].TypeValue,
			}
		}
	case 447:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4197
		{
			ASNVAL.TypeValue = MAP{
				"real": ASNDollar[1].TypeValue,
			}
		}
	case 448:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4202
		{
			ASNVAL.TypeValue = MAP{
				"relativeIRI": ASNDollar[1].TypeValue,
			}
		}
	case 449:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4207
		{
			ASNVAL.TypeValue = MAP{
				"relativeOID": ASNDollar[1].TypeValue,
			}
		}
	case 450:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4212
		{
			ASNVAL.TypeValue = MAP{
				"sequence": ASNDollar[1].TypeValue,
			}
		}
	case 451:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4217
		{
			ASNVAL.TypeValue = MAP{
				"sequenceOf": ASNDollar[1].TypeValue,
			}
		}
	case 452:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4222
		{
			ASNVAL.TypeValue = MAP{
				"set": ASNDollar[1].TypeValue,
			}
		}
	case 453:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4227
		{
			ASNVAL.TypeValue = MAP{
				"setOf": ASNDollar[1].TypeValue,
			}
		}
	case 454:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4232
		{
			ASNVAL.TypeValue = MAP{
				"prefixed": ASNDollar[1].TypeValue,
			}
		}
	case 455:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4237
		{
			ASNVAL.TypeValue = MAP{
				"time": ASNDollar[1].TypeValue,
			}
		}
	case 456:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4253
		{
			ASNVAL.TypeValue = MAP{
				"bstring": ASNDollar[1].TypeString,
			}
		}
	case 457:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4258
		{
			ASNVAL.TypeValue = MAP{
				"hstring": ASNDollar[1].TypeString,
			}
		}
	case 458:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4263
		{
			ASNVAL.TypeValue = MAP{
				"indentifiers": ASNDollar[2].TypeValue,
			}
		}
	case 459:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4268
		{
			ASNVAL.TypeValue = nil
		}
	case 460:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4271
		{
			ASNVAL.TypeValue = MAP{
				"bstring": ASNDollar[2].TypeValue,
			}
		}
	case 461:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4284
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 462:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4289
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeToken)
		}
	case 463:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4300
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 464:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4303
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 465:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4314
		{
			ASNVAL.TypeValue = MAP{
				"restrictedCharacterString": ASNDollar[1].TypeValue,
			}
		}
	case 466:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4319
		{
			ASNVAL.TypeValue = MAP{
				"unrestrictedCharacterString": ASNDollar[1].TypeValue,
			}
		}
	case 467:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4334
		{
			ASNVAL.TypeValue = MAP{
				"cstring": ASNDollar[1].TypeString,
			}
		}
	case 468:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4339
		{
			ASNVAL.TypeValue = MAP{
				"characterStringList": ASNDollar[1].TypeValue,
			}
		}
	case 469:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4344
		{
			ASNVAL.TypeValue = MAP{
				"quadruple": ASNDollar[1].TypeValue,
			}
		}
	case 470:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4349
		{
			ASNVAL.TypeValue = MAP{
				"tuple": ASNDollar[1].TypeValue,
			}
		}
	case 471:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4360
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 472:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4371
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 473:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4376
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeToken)
		}
	case 474:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4390
		{
			ASNVAL.TypeValue = MAP{
				"cstring": ASNDollar[1].TypeString,
			}
		}
	case 475:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4395
		{
			ASNVAL.TypeValue = MAP{
				"quadruple": ASNDollar[1].TypeValue,
			}
		}
	case 476:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4400
		{
			ASNVAL.TypeValue = MAP{
				"tuple": ASNDollar[1].TypeValue,
			}
		}
	case 477:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4405
		{
			ASNVAL.TypeValue = MAP{
				"definedValue": ASNDollar[1].TypeValue,
			}
		}
	case 478:
		ASNDollar = ASNS[ASNpt-9 : ASNpt+1]
//line asn.y:4416
		{
			ASNVAL.TypeValue = MAP{
				"group": ASNDollar[2].TypeValue,
				"plane": ASNDollar[4].TypeValue,
				"row":   ASNDollar[6].TypeValue,
				"cell":  ASNDollar[8].TypeValue,
			}
		}
	case 479:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4430
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 480:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4439
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 481:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4448
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 482:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4457
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 483:
		ASNDollar = ASNS[ASNpt-5 : ASNpt+1]
//line asn.y:4466
		{
			ASNVAL.TypeValue = MAP{
				"tableColumn": ASNDollar[2].TypeValue,
				"tableRow":    ASNDollar[4].TypeValue,
			}
		}
	case 484:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4478
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 485:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4487
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 486:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4496
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 487:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4505
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"value":      ASNDollar[2].TypeToken,
			}
		}
	case 488:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4517
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 489:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4526
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 490:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4535
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 491:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4546
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 492:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4555
		{
			ASNVAL.TypeValue = STRING("NULL")
		}
	case 493:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4567
		{
			ASNVAL.TypeValue = MAP{
				"bstring": ASNDollar[1].TypeString,
			}
		}
	case 494:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4572
		{
			ASNVAL.TypeValue = MAP{
				"hstring": ASNDollar[1].TypeString,
			}
		}
	case 495:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4577
		{
			ASNVAL.TypeValue = MAP{
				"value": ASNDollar[2].TypeValue,
			}
		}
	case 496:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4590
		{
			ASNVAL.TypeValue = MAP{
				"numericRealValue": ASNDollar[1].TypeValue,
			}
		}
	case 497:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4595
		{
			ASNVAL.TypeValue = MAP{
				"specialRealValue": ASNDollar[1].TypeValue,
			}
		}
	case 498:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4609
		{
			ASNVAL.TypeValue = MAP{
				"realNumber": ASNDollar[1].TypeValue,
			}
		}
	case 499:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4614
		{
			ASNVAL.TypeValue = MAP{
				"sequenceValue": ASNDollar[1].TypeValue,
			}
		}
	case 500:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4628
		{
			ASNVAL.TypeValue = STRING("PLUS_INFINITY")
		}
	case 501:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4631
		{
			ASNVAL.TypeValue = STRING("MINUS_INFINITY")
		}
	case 502:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4634
		{
			ASNVAL.TypeValue = STRING("NOT_A_NUMBER")
		}
	case 503:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4643
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 504:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:4656
		{
			ASNVAL.TypeValue = MAP{
				"firstArcIdentifier":       ASNDollar[2].TypeValue,
				"subsequentArcIndentifier": ASNDollar[3].TypeValue,
			}
		}
	case 505:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4669
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 506:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4680
		{
			ASNVAL.TypeValue = MAP{
				"integerUnicodeLabel": ASNDollar[1].TypeValue,
			}
		}
	case 507:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4685
		{
			ASNVAL.TypeValue = MAP{
				"nonintegerUnicodeLabel": ASNDollar[1].TypeValue,
			}
		}
	case 508:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4698
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[2].TypeValue,
			}
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 509:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4704
		{
			ASNVAL.TypeValue = LIST{}
		}
	case 510:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:4718
		{
			ASNVAL.TypeValue = MAP{
				"firstRelativeArcIdentifier": ASNDollar[2].TypeValue,
				"subsequentArcIdentifier":    ASNDollar[3].TypeValue,
			}
		}
	case 511:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4731
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 512:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4741
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 513:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4752
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 514:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4757
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 515:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4770
		{
			ASNVAL.TypeValue = MAP{
				"number": ASNDollar[1].TypeValue,
			}
		}
	case 516:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4775
		{
			ASNVAL.TypeValue = MAP{
				"nameAndNumber": ASNDollar[1].TypeValue,
			}
		}
	case 517:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4780
		{
			ASNVAL.TypeValue = MAP{
				"definedValue": ASNDollar[1].TypeValue,
			}
		}
	case 518:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4793
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 519:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4796
		{
			ASNVAL.TypeValue = nil
		}
	case 520:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4807
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 521:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4812
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeToken)
		}
	case 522:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4822
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"value":      ASNDollar[2].TypeValue,
			}
		}
	case 523:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4837
		{
			ASNVAL.TypeValue = MAP{
				"valueList": ASNDollar[1].TypeToken,
			}
		}
	case 524:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4842
		{
			ASNVAL.TypeValue = MAP{
				"namedValueList": ASNDollar[1].TypeToken,
			}
		}
	case 525:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4847
		{
			ASNVAL.TypeValue = nil
		}
	case 526:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4858
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 527:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4863
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeToken)
		}
	case 528:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4875
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 529:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4880
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeToken)
		}
	case 530:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4892
		{
			ASNVAL.TypeValue = MAP{
				"componentValueList": ASNDollar[1].TypeToken,
			}
		}
	case 531:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4897
		{
			ASNVAL.TypeValue = nil
		}
	case 532:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4909
		{
			ASNVAL.TypeValue = MAP{
				"valueList": ASNDollar[1].TypeToken,
			}
		}
	case 533:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:4914
		{
			ASNVAL.TypeValue = MAP{
				"namedValueList": ASNDollar[1].TypeToken,
			}
		}
	case 534:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:4919
		{
			ASNVAL.TypeValue = nil
		}
	case 535:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:4928
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 536:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4937
		{
			ASNVAL.TypeValue = nil
		}
	case 537:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4943
		{
			ASNVAL.TypeValue = nil
		}
	case 538:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4949
		{
			ASNVAL.TypeValue = nil
		}
	case 539:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4955
		{
			ASNVAL.TypeValue = nil
		}
	case 540:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4961
		{
			ASNVAL.TypeValue = nil
		}
	case 541:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4967
		{
			ASNVAL.TypeValue = nil
		}
	case 542:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4973
		{
			ASNVAL.TypeValue = nil
		}
	case 543:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4979
		{
			ASNVAL.TypeValue = nil
		}
	case 544:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4985
		{
			ASNVAL.TypeValue = nil
		}
	case 545:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4991
		{
			ASNVAL.TypeValue = nil
		}
	case 546:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:4997
		{
			ASNVAL.TypeValue = nil
		}
	case 547:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:5003
		{
			ASNVAL.TypeValue = nil
		}
	case 548:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:5009
		{
			ASNVAL.TypeValue = nil
		}
	case 549:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:5015
		{
			ASNVAL.TypeValue = nil
		}
	case 550:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:5021
		{
			ASNVAL.TypeValue = nil
		}
	case 551:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:5027
		{
			ASNVAL.TypeValue = MAP{
				"type":  "EXTERNAL_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 552:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:5033
		{
			ASNVAL.TypeValue = MAP{
				"type":  "STRING_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 553:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:5039
		{
			ASNVAL.TypeValue = MAP{
				"type":  "NUMBER_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 554:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:5045
		{
			ASNVAL.TypeValue = MAP{
				"type":  "PARAMETERIZED_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 555:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:5054
		{
			ASNVAL.TypeValue = MAP{
				"module": ASNDollar[1].TypeValue,
				"value":  ASNDollar[3].TypeValue,
			}
		}
	case 556:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:5063
		{
			ASNVAL.TypeValue = nil
		}
	case 557:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:5069
		{
			ASNVAL.TypeValue = nil
		}
	case 558:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:5075
		{
			ASNVAL.TypeValue = nil
		}
	case 559:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:5081
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 560:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:5084
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 561:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:5090
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeNumber
		}
	case 562:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:5093
		{
			ASNVAL.TypeValue = (-1) * ASNDollar[2].TypeNumber
		}
	case 563:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:5096
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeNumber
		}
	case 564:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:5099
		{
			ASNVAL.TypeValue = (-1) * ASNDollar[2].TypeNumber
		}
	case 565:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:5105
		{
			ASNVAL.TypeValue = STRING("::=")
		}
	case 566:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:5111
		{
			SkipBlock()
		}
	case 567:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:5114
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeString
		}
	}
	goto ASNstack /* stack new state and value */
}
