// Code generated by goyacc -p ASN asn.y. DO NOT EDIT.

//line asn.y:1

package main

import __yyfmt__ "fmt"

//line asn.y:3
import (
	"bytes"
	"encoding/json"
	"fmt"
)

var code bytes.Buffer

func AddLine(line string) {
	code.WriteString(line)
	code.WriteByte('\n')
}

func JSON(obj interface{}) string {
	data, err := json.MarshalIndent(obj, "", "    ")
	if nil != err {
		fmt.Println("Error: ", err)
		return ""
	}
	return string(data)
}

func Print(line string) {
	fmt.Println(line)
}

func Join(values ...string) string {
	var buffer bytes.Buffer
	for _, value := range values {
		buffer.WriteString(value)
	}
	return buffer.String()
}

func SetResult(l ASNLexer, v VALUE) {
	l.(*Parser).Result = JSON(&v)
}

type Empty struct{}
type (
	VALUE   interface{}
	STRING  string
	NUMBER  float64
	BOOLEAN bool
	LIST    []VALUE
	MAP     map[string]VALUE
)

//line asn.y:50
type ASNSymType struct {
	yys         int
	TypeToken   struct{}
	TypeString  STRING
	TypeNumber  NUMBER
	TypeValue   VALUE
	TypeBoolean BOOLEAN
	TypeMap     MAP
	TypeList    LIST
}

const CURLY_START = 57346
const CURLY_END = 57347
const SQUARE_START = 57348
const SQUARE_END = 57349
const DOUBLE_QUOTE = 57350
const SINGLE_QUOTE = 57351
const COMMA = 57352
const COLON = 57353
const MINUS = 57354
const GREATER_THAN = 57355
const LESS_THAN = 57356
const DOT = 57357
const SLASH = 57358
const ROUND_START = 57359
const ROUND_END = 57360
const EQUALITY = 57361
const APOSTROPHE = 57362
const SPACE = 57363
const PIPE = 57364
const AT_THE_RATE = 57365
const EXCLAMATION = 57366
const CARET = 57367
const SEMI_COMMA = 57368
const ABSENT_SYMBOL = 57369
const ABSTRACTSYNTAX_SYMBOL = 57370
const ALL_SYMBOL = 57371
const APPLICATION_SYMBOL = 57372
const AUTOMATIC_SYMBOL = 57373
const BEGIN_SYMBOL = 57374
const BIT_SYMBOL = 57375
const BMPSTRING_SYMBOL = 57376
const BOOLEAN_SYMBOL = 57377
const BY_SYMBOL = 57378
const CHARACTER_SYMBOL = 57379
const CHOICE_SYMBOL = 57380
const CLASS_SYMBOL = 57381
const COMPONENT_SYMBOL = 57382
const COMPONENTS_SYMBOL = 57383
const CONSTRAINED_SYMBOL = 57384
const CONTAINING_SYMBOL = 57385
const DATE_SYMBOL = 57386
const DATETIME_SYMBOL = 57387
const DEFAULT_SYMBOL = 57388
const DEFINITIONS_SYMBOL = 57389
const DURATION_SYMBOL = 57390
const EMBEDDED_SYMBOL = 57391
const ENCODED_SYMBOL = 57392
const ENCODINGCONTROL_SYMBOL = 57393
const END_SYMBOL = 57394
const ENUMERATED_SYMBOL = 57395
const EXCEPT_SYMBOL = 57396
const EXPLICIT_SYMBOL = 57397
const EXPORTS_SYMBOL = 57398
const EXTENSIBILITY_SYMBOL = 57399
const EXTERNEL_SYMBOL = 57400
const FALSE_SYMBOL = 57401
const FROM_SYMBOL = 57402
const GENERALIZEDTIME_SYMBOL = 57403
const GENERALSTRING_SYMBOL = 57404
const GRAPHICSTRING_SYMBOL = 57405
const IA5STRING_SYMBOL = 57406
const IDENTIFIER_SYMBOL = 57407
const IMPLICIT_SYMBOL = 57408
const IMPLIED_SYMBOL = 57409
const IMPORTS_SYMBOL = 57410
const INCLUDES_SYMBOL = 57411
const INSTANCE_SYMBOL = 57412
const INSTRUCTIONS_SYMBOL = 57413
const INTEGER_SYMBOL = 57414
const INTERSECTION_SYMBOL = 57415
const ISO646STRING_SYMBOL = 57416
const MAX_SYMBOL = 57417
const MIN_SYMBOL = 57418
const MINUSINFINITY_SYMBOL = 57419
const NOTANUMBER_SYMBOL = 57420
const NULL_SYMBOL = 57421
const NUMERICSTRING_SYMBOL = 57422
const OBJECT_SYMBOL = 57423
const OBJECTDESCRIPTOR_SYMBOL = 57424
const OCTET_SYMBOL = 57425
const OF_SYMBOL = 57426
const OIDIRI_SYMBOL = 57427
const OPTIONAL_SYMBOL = 57428
const PATTERN_SYMBOL = 57429
const PDV_SYMBOL = 57430
const PLUSINFINITY_SYMBOL = 57431
const PRESENT_SYMBOL = 57432
const PRINTABLESTRING_SYMBOL = 57433
const PRIVATE_SYMBOL = 57434
const REAL_SYMBOL = 57435
const RELATIVEOID_SYMBOL = 57436
const RELATIVEOIDIRI_SYMBOL = 57437
const SEQUENCE_SYMBOL = 57438
const SET_SYMBOL = 57439
const SETTINGS_SYMBOL = 57440
const SIZE_SYMBOL = 57441
const STRING_SYMBOL = 57442
const SYNTAX_SYMBOL = 57443
const T61STRING_SYMBOL = 57444
const TAGS_SYMBOL = 57445
const TELETEXSTRING_SYMBOL = 57446
const TIME_SYMBOL = 57447
const TIMEOFDAY_SYMBOL = 57448
const TRUE_SYMBOL = 57449
const TYPEIDENTIFIER_SYMBOL = 57450
const UNION_SYMBOL = 57451
const UNIQUE_SYMBOL = 57452
const UNIVERSAL_SYMBOL = 57453
const UNIVERSALSTRING_SYMBOL = 57454
const UTCTIME_SYMBOL = 57455
const UTF8STRING_SYMBOL = 57456
const VIDEOTEXSTRING_SYMBOL = 57457
const VISIBLESTRING_SYMBOL = 57458
const WITH_SYMBOL = 57459
const ASSIGNMENT_SYMBOL = 57460
const TokenCapitalString = 57461
const TokenString = 57462
const TokenNumber = 57463
const TokenInteger = 57464
const TokenFloat = 57465
const TokenBoolean = 57466
const TokenBString = 57467
const TokenHString = 57468
const TokenCString = 57469

var ASNToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"CURLY_START",
	"CURLY_END",
	"SQUARE_START",
	"SQUARE_END",
	"DOUBLE_QUOTE",
	"SINGLE_QUOTE",
	"COMMA",
	"COLON",
	"MINUS",
	"GREATER_THAN",
	"LESS_THAN",
	"DOT",
	"SLASH",
	"ROUND_START",
	"ROUND_END",
	"EQUALITY",
	"APOSTROPHE",
	"SPACE",
	"PIPE",
	"AT_THE_RATE",
	"EXCLAMATION",
	"CARET",
	"SEMI_COMMA",
	"ABSENT_SYMBOL",
	"ABSTRACTSYNTAX_SYMBOL",
	"ALL_SYMBOL",
	"APPLICATION_SYMBOL",
	"AUTOMATIC_SYMBOL",
	"BEGIN_SYMBOL",
	"BIT_SYMBOL",
	"BMPSTRING_SYMBOL",
	"BOOLEAN_SYMBOL",
	"BY_SYMBOL",
	"CHARACTER_SYMBOL",
	"CHOICE_SYMBOL",
	"CLASS_SYMBOL",
	"COMPONENT_SYMBOL",
	"COMPONENTS_SYMBOL",
	"CONSTRAINED_SYMBOL",
	"CONTAINING_SYMBOL",
	"DATE_SYMBOL",
	"DATETIME_SYMBOL",
	"DEFAULT_SYMBOL",
	"DEFINITIONS_SYMBOL",
	"DURATION_SYMBOL",
	"EMBEDDED_SYMBOL",
	"ENCODED_SYMBOL",
	"ENCODINGCONTROL_SYMBOL",
	"END_SYMBOL",
	"ENUMERATED_SYMBOL",
	"EXCEPT_SYMBOL",
	"EXPLICIT_SYMBOL",
	"EXPORTS_SYMBOL",
	"EXTENSIBILITY_SYMBOL",
	"EXTERNEL_SYMBOL",
	"FALSE_SYMBOL",
	"FROM_SYMBOL",
	"GENERALIZEDTIME_SYMBOL",
	"GENERALSTRING_SYMBOL",
	"GRAPHICSTRING_SYMBOL",
	"IA5STRING_SYMBOL",
	"IDENTIFIER_SYMBOL",
	"IMPLICIT_SYMBOL",
	"IMPLIED_SYMBOL",
	"IMPORTS_SYMBOL",
	"INCLUDES_SYMBOL",
	"INSTANCE_SYMBOL",
	"INSTRUCTIONS_SYMBOL",
	"INTEGER_SYMBOL",
	"INTERSECTION_SYMBOL",
	"ISO646STRING_SYMBOL",
	"MAX_SYMBOL",
	"MIN_SYMBOL",
	"MINUSINFINITY_SYMBOL",
	"NOTANUMBER_SYMBOL",
	"NULL_SYMBOL",
	"NUMERICSTRING_SYMBOL",
	"OBJECT_SYMBOL",
	"OBJECTDESCRIPTOR_SYMBOL",
	"OCTET_SYMBOL",
	"OF_SYMBOL",
	"OIDIRI_SYMBOL",
	"OPTIONAL_SYMBOL",
	"PATTERN_SYMBOL",
	"PDV_SYMBOL",
	"PLUSINFINITY_SYMBOL",
	"PRESENT_SYMBOL",
	"PRINTABLESTRING_SYMBOL",
	"PRIVATE_SYMBOL",
	"REAL_SYMBOL",
	"RELATIVEOID_SYMBOL",
	"RELATIVEOIDIRI_SYMBOL",
	"SEQUENCE_SYMBOL",
	"SET_SYMBOL",
	"SETTINGS_SYMBOL",
	"SIZE_SYMBOL",
	"STRING_SYMBOL",
	"SYNTAX_SYMBOL",
	"T61STRING_SYMBOL",
	"TAGS_SYMBOL",
	"TELETEXSTRING_SYMBOL",
	"TIME_SYMBOL",
	"TIMEOFDAY_SYMBOL",
	"TRUE_SYMBOL",
	"TYPEIDENTIFIER_SYMBOL",
	"UNION_SYMBOL",
	"UNIQUE_SYMBOL",
	"UNIVERSAL_SYMBOL",
	"UNIVERSALSTRING_SYMBOL",
	"UTCTIME_SYMBOL",
	"UTF8STRING_SYMBOL",
	"VIDEOTEXSTRING_SYMBOL",
	"VISIBLESTRING_SYMBOL",
	"WITH_SYMBOL",
	"ASSIGNMENT_SYMBOL",
	"TokenCapitalString",
	"TokenString",
	"TokenNumber",
	"TokenInteger",
	"TokenFloat",
	"TokenBoolean",
	"TokenBString",
	"TokenHString",
	"TokenCString",
}

var ASNStatenames = [...]string{}

const ASNEofCode = 1
const ASNErrCode = 2
const ASNInitialStackSize = 16

//line asn.y:1415

//line yacctab:1
var ASNExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 45,
	52, 27,
	-2, 31,
	-1, 191,
	10, 117,
	-2, 54,
}

const ASNPrivate = 57344

const ASNLast = 257

var ASNAct = [...]int{
	75, 5, 197, 5, 192, 181, 178, 140, 169, 23,
	179, 33, 34, 23, 156, 21, 64, 61, 21, 63,
	14, 23, 39, 203, 6, 7, 38, 37, 60, 194,
	66, 23, 29, 51, 189, 40, 23, 50, 28, 180,
	43, 23, 91, 134, 58, 50, 23, 170, 30, 36,
	85, 23, 51, 65, 53, 23, 59, 48, 9, 45,
	85, 88, 27, 175, 83, 52, 49, 207, 187, 44,
	199, 199, 32, 26, 16, 187, 87, 201, 42, 46,
	12, 1, 202, 3, 41, 171, 8, 125, 190, 173,
	31, 172, 166, 165, 164, 163, 89, 162, 161, 160,
	86, 159, 84, 158, 157, 155, 154, 55, 62, 82,
	61, 174, 153, 89, 123, 54, 6, 7, 152, 22,
	24, 20, 151, 22, 24, 150, 136, 149, 137, 167,
	168, 22, 24, 126, 148, 182, 133, 183, 6, 7,
	132, 22, 24, 6, 7, 147, 22, 24, 6, 7,
	146, 22, 24, 6, 7, 145, 22, 24, 6, 7,
	90, 22, 24, 20, 144, 22, 24, 143, 142, 188,
	191, 139, 183, 138, 135, 122, 129, 130, 193, 196,
	196, 121, 120, 119, 195, 118, 198, 117, 200, 116,
	115, 114, 113, 112, 111, 110, 109, 108, 107, 196,
	106, 104, 204, 206, 195, 105, 103, 205, 102, 101,
	100, 99, 98, 97, 96, 95, 94, 93, 81, 80,
	79, 78, 77, 76, 177, 176, 92, 128, 127, 141,
	74, 73, 72, 71, 70, 69, 68, 67, 186, 185,
	184, 131, 124, 57, 56, 47, 35, 13, 25, 19,
	18, 17, 15, 11, 10, 4, 2,
}

var ASNPact = [...]int{
	-95, -1000, -95, -1000, 11, 76, -1000, -1000, -1000, -99,
	-1000, -1000, 1, 7, -39, 43, -1000, -1000, -1000, -1000,
	55, -1000, -1000, -111, -1000, -8, -76, -77, -81, -1000,
	-1000, -1000, 9, -1000, -1000, 67, -27, -1000, -1000, -1000,
	51, 27, 68, -1000, -1000, -23, 46, 2, -4, -31,
	-103, -10, -1000, -1000, -95, -95, 38, -103, -1000, 40,
	-1000, -1000, 50, 35, -1000, -95, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 67, -1000, -1000, -1000, -1000,
	-1000, -1000, -95, -1000, -1000, -103, -95, -1000, -1000, -1000,
	-1000, 67, 67, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 39, -1000, -1000, -1000, 4,
	-1000, -1000, -1000, -1000, 34, -1000, 60, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 29,
	4, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 24, -3,
	-1000, -1000, 53, -1000, -1000, -1000, -1000, -95, -1000, -1000,
	72, 53, -1000, -1000, -1000, -1000, 54, -1000, 19, 9,
	-1000, -1000, -95, -1000, 49, -1000, -1000, -1000,
}

var ASNPgo = [...]int{
	0, 256, 83, 255, 254, 253, 252, 74, 251, 250,
	249, 248, 247, 246, 245, 57, 66, 244, 243, 44,
	56, 28, 242, 241, 14, 6, 5, 240, 239, 238,
	53, 30, 10, 237, 236, 235, 234, 233, 232, 231,
	230, 42, 7, 229, 228, 227, 226, 225, 224, 223,
	222, 221, 220, 219, 218, 217, 216, 215, 214, 213,
	212, 211, 210, 209, 208, 206, 205, 201, 200, 198,
	197, 196, 195, 194, 193, 192, 191, 190, 189, 187,
	185, 183, 182, 181, 175, 174, 173, 171, 169, 168,
	167, 164, 155, 150, 145, 134, 127, 125, 122, 118,
	112, 106, 105, 104, 103, 101, 99, 98, 97, 95,
	94, 93, 92, 91, 89, 88, 4, 84, 0, 2,
	85, 81,
}

var ASNR1 = [...]int{
	0, 121, 1, 1, 2, 3, 12, 12, 4, 4,
	5, 6, 6, 7, 7, 7, 8, 9, 10, 11,
	11, 11, 11, 13, 13, 14, 14, 14, 16, 16,
	16, 16, 20, 20, 21, 15, 15, 17, 17, 18,
	18, 19, 22, 23, 23, 23, 24, 24, 24, 25,
	25, 26, 26, 26, 27, 28, 28, 29, 30, 30,
	30, 31, 31, 31, 31, 31, 31, 31, 31, 33,
	34, 35, 36, 37, 38, 39, 40, 40, 40, 40,
	40, 40, 41, 41, 41, 42, 42, 42, 89, 89,
	89, 89, 89, 89, 89, 89, 89, 89, 89, 89,
	89, 89, 89, 89, 89, 89, 89, 89, 89, 89,
	92, 92, 92, 92, 92, 115, 115, 116, 93, 94,
	94, 113, 114, 95, 96, 97, 98, 99, 100, 101,
	102, 24, 103, 104, 105, 106, 107, 108, 109, 110,
	111, 112, 90, 91, 44, 43, 45, 46, 47, 48,
	49, 50, 51, 52, 53, 54, 32, 32, 32, 32,
	85, 86, 87, 88, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 67, 66, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	120, 120, 118, 118, 119, 119, 119, 119, 117,
}

var ASNR2 = [...]int{
	0, 1, 1, 2, 9, 2, 2, 0, 1, 0,
	3, 1, 2, 1, 1, 1, 1, 1, 4, 2,
	2, 2, 0, 2, 0, 3, 3, 0, 3, 3,
	2, 0, 1, 3, 1, 3, 0, 1, 0, 1,
	2, 3, 2, 1, 1, 0, 3, 4, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 4, 1, 2,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 3, 4, 3, 4, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 2, 1, 3, 1, 1, 1,
	1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1, 1, 1, 1,
	3, 2, 0, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1, 1, 1, 1, 1, 2, 1, 2, 3,
}

var ASNChk = [...]int{
	-1000, -121, -1, -2, -3, -118, 119, 120, -2, 47,
	-4, -5, 4, -12, 119, -6, -7, -8, -9, -10,
	120, -119, 122, 12, 123, -11, 66, 55, 31, 71,
	5, -7, 17, 122, 123, -13, 57, 103, 103, 103,
	-119, -117, 11, 67, 18, 32, 11, -14, -15, -16,
	68, 56, 19, 52, -16, -15, -17, -18, -19, -20,
	-21, 120, -20, 29, 26, -30, -31, -33, -34, -35,
	-36, -37, -38, -39, -40, -118, -49, -50, -51, -52,
	-53, -54, -30, 26, -19, 10, 60, 26, 26, -31,
	-117, -41, -46, -55, -56, -57, -58, -59, -60, -61,
	-62, -63, -64, -65, -67, -66, -68, -69, -70, -71,
	-72, -73, -74, -75, -76, -77, -78, -79, -80, -81,
	-82, -83, -84, -21, -22, -118, -41, -44, -45, -117,
	-117, -23, -24, -32, 4, -85, -118, -119, -86, -87,
	-42, -43, -89, -90, -91, -92, -93, -94, -95, -96,
	-97, -98, -99, -100, -101, -102, -24, -103, -104, -105,
	-106, -107, -108, -109, -110, -111, -112, 125, 126, 4,
	43, -120, -113, -114, 107, 59, -47, -48, -25, -32,
	5, -26, -118, -119, -27, -28, -29, 15, -88, 5,
	-115, -118, -116, -42, 5, -26, -118, -119, -25, 17,
	-118, 5, 10, 4, -119, -116, -118, 18,
}

var ASNDef = [...]int{
	0, -2, 1, 2, 0, 9, 222, 223, 3, 7,
	5, 8, 0, 22, 0, 0, 11, 13, 14, 15,
	16, 17, 224, 0, 226, 24, 0, 0, 0, 6,
	10, 12, 0, 225, 227, 0, 0, 19, 20, 21,
	0, 0, 0, 23, 18, -2, 0, 0, 31, 36,
	38, 0, 228, 4, 60, 60, 0, 37, 39, 0,
	32, 34, 0, 0, 30, 25, 58, 61, 62, 63,
	64, 65, 66, 67, 68, 0, 76, 77, 78, 79,
	80, 81, 26, 35, 40, 0, 0, 28, 29, 59,
	144, 0, 0, 82, 83, 84, 164, 165, 166, 167,
	168, 169, 170, 171, 172, 173, 174, 175, 176, 177,
	178, 179, 180, 181, 182, 183, 184, 185, 186, 187,
	188, 189, 190, 33, 41, 45, 69, 71, 73, 121,
	148, 42, 43, 44, 0, 156, 157, 158, 159, 163,
	70, 72, 85, 86, 87, 88, 89, 90, 91, 92,
	93, 94, 95, 96, 97, 98, 99, 100, 101, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 0,
	121, 118, 119, 120, 220, 221, 74, 75, 0, 0,
	48, 49, 54, 55, 51, 52, 53, 0, 161, 48,
	0, -2, 115, 114, 46, 50, 54, 55, 0, 0,
	160, 112, 0, 47, 0, 116, 117, 57,
}

var ASNTok1 = [...]int{
	1,
}

var ASNTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127,
}

var ASNTok3 = [...]int{
	0,
}

var ASNErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	ASNDebug        = 0
	ASNErrorVerbose = false
)

type ASNLexer interface {
	Lex(lval *ASNSymType) int
	Error(s string)
}

type ASNParser interface {
	Parse(ASNLexer) int
	Lookahead() int
}

type ASNParserImpl struct {
	lval  ASNSymType
	stack [ASNInitialStackSize]ASNSymType
	char  int
}

func (p *ASNParserImpl) Lookahead() int {
	return p.char
}

func ASNNewParser() ASNParser {
	return &ASNParserImpl{}
}

const ASNFlag = -1000

func ASNTokname(c int) string {
	if c >= 1 && c-1 < len(ASNToknames) {
		if ASNToknames[c-1] != "" {
			return ASNToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func ASNStatname(s int) string {
	if s >= 0 && s < len(ASNStatenames) {
		if ASNStatenames[s] != "" {
			return ASNStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func ASNErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !ASNErrorVerbose {
		return "syntax error"
	}

	for _, e := range ASNErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + ASNTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := ASNPact[state]
	for tok := TOKSTART; tok-1 < len(ASNToknames); tok++ {
		if n := base + tok; n >= 0 && n < ASNLast && ASNChk[ASNAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if ASNDef[state] == -2 {
		i := 0
		for ASNExca[i] != -1 || ASNExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; ASNExca[i] >= 0; i += 2 {
			tok := ASNExca[i]
			if tok < TOKSTART || ASNExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if ASNExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += ASNTokname(tok)
	}
	return res
}

func ASNlex1(lex ASNLexer, lval *ASNSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = ASNTok1[0]
		goto out
	}
	if char < len(ASNTok1) {
		token = ASNTok1[char]
		goto out
	}
	if char >= ASNPrivate {
		if char < ASNPrivate+len(ASNTok2) {
			token = ASNTok2[char-ASNPrivate]
			goto out
		}
	}
	for i := 0; i < len(ASNTok3); i += 2 {
		token = ASNTok3[i+0]
		if token == char {
			token = ASNTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = ASNTok2[1] /* unknown char */
	}
	if ASNDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", ASNTokname(token), uint(char))
	}
	return char, token
}

func ASNParse(ASNlex ASNLexer) int {
	return ASNNewParser().Parse(ASNlex)
}

func (ASNrcvr *ASNParserImpl) Parse(ASNlex ASNLexer) int {
	var ASNn int
	var ASNVAL ASNSymType
	var ASNDollar []ASNSymType
	_ = ASNDollar // silence set and not used
	ASNS := ASNrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	ASNstate := 0
	ASNrcvr.char = -1
	ASNtoken := -1 // ASNrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		ASNstate = -1
		ASNrcvr.char = -1
		ASNtoken = -1
	}()
	ASNp := -1
	goto ASNstack

ret0:
	return 0

ret1:
	return 1

ASNstack:
	/* put a state and value onto the stack */
	if ASNDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", ASNTokname(ASNtoken), ASNStatname(ASNstate))
	}

	ASNp++
	if ASNp >= len(ASNS) {
		nyys := make([]ASNSymType, len(ASNS)*2)
		copy(nyys, ASNS)
		ASNS = nyys
	}
	ASNS[ASNp] = ASNVAL
	ASNS[ASNp].yys = ASNstate

ASNnewstate:
	ASNn = ASNPact[ASNstate]
	if ASNn <= ASNFlag {
		goto ASNdefault /* simple state */
	}
	if ASNrcvr.char < 0 {
		ASNrcvr.char, ASNtoken = ASNlex1(ASNlex, &ASNrcvr.lval)
	}
	ASNn += ASNtoken
	if ASNn < 0 || ASNn >= ASNLast {
		goto ASNdefault
	}
	ASNn = ASNAct[ASNn]
	if ASNChk[ASNn] == ASNtoken { /* valid shift */
		ASNrcvr.char = -1
		ASNtoken = -1
		ASNVAL = ASNrcvr.lval
		ASNstate = ASNn
		if Errflag > 0 {
			Errflag--
		}
		goto ASNstack
	}

ASNdefault:
	/* default state action */
	ASNn = ASNDef[ASNstate]
	if ASNn == -2 {
		if ASNrcvr.char < 0 {
			ASNrcvr.char, ASNtoken = ASNlex1(ASNlex, &ASNrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if ASNExca[xi+0] == -1 && ASNExca[xi+1] == ASNstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			ASNn = ASNExca[xi+0]
			if ASNn < 0 || ASNn == ASNtoken {
				break
			}
		}
		ASNn = ASNExca[xi+1]
		if ASNn < 0 {
			goto ret0
		}
	}
	if ASNn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			ASNlex.Error(ASNErrorMessage(ASNstate, ASNtoken))
			Nerrs++
			if ASNDebug >= 1 {
				__yyfmt__.Printf("%s", ASNStatname(ASNstate))
				__yyfmt__.Printf(" saw %s\n", ASNTokname(ASNtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for ASNp >= 0 {
				ASNn = ASNPact[ASNS[ASNp].yys] + ASNErrCode
				if ASNn >= 0 && ASNn < ASNLast {
					ASNstate = ASNAct[ASNn] /* simulate a shift of "error" */
					if ASNChk[ASNstate] == ASNErrCode {
						goto ASNstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if ASNDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", ASNS[ASNp].yys)
				}
				ASNp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if ASNDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", ASNTokname(ASNtoken))
			}
			if ASNtoken == ASNEofCode {
				goto ret1
			}
			ASNrcvr.char = -1
			ASNtoken = -1
			goto ASNnewstate /* try again in the same state */
		}
	}

	/* reduction by production ASNn */
	if ASNDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", ASNn, ASNStatname(ASNstate))
	}

	ASNnt := ASNn
	ASNpt := ASNp
	_ = ASNpt // guard against "declared and not used"

	ASNp -= ASNR2[ASNn]
	// ASNp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if ASNp+1 >= len(ASNS) {
		nyys := make([]ASNSymType, len(ASNS)*2)
		copy(nyys, ASNS)
		ASNS = nyys
	}
	ASNVAL = ASNS[ASNp+1]

	/* consult goto table to find next state */
	ASNn = ASNR1[ASNn]
	ASNg := ASNPgo[ASNn]
	ASNj := ASNg + ASNS[ASNp].yys + 1

	if ASNj >= ASNLast {
		ASNstate = ASNAct[ASNg]
	} else {
		ASNstate = ASNAct[ASNj]
		if ASNChk[ASNstate] != -ASNn {
			ASNstate = ASNAct[ASNg]
		}
	}
	// dummy call; replaced with literal code
	switch ASNnt {

	case 1:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:314
		{
			SetResult(ASNlex, ASNDollar[1].TypeValue)
			Print("Done")
			Print("--------------------------------------------------------------------------------")
			Print(JSON(&ASNDollar[1].TypeValue))
			Print("--------------------------------------------------------------------------------")
		}
	case 2:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:323
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 3:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:328
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 4:
		ASNDollar = ASNS[ASNpt-9 : ASNpt+1]
//line asn.y:343
		{
			ASNVAL.TypeValue = MAP{
				"identifier": ASNDollar[1].TypeValue,
				"encoding":   ASNDollar[3].TypeValue,
				"tag":        ASNDollar[4].TypeValue,
				"body":       ASNDollar[8].TypeValue,
			}
		}
	case 5:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:355
		{
			ASNVAL.TypeValue = MAP{
				"reference":             ASNDollar[1].TypeValue,
				"definitiveIdentifiers": ASNDollar[2].TypeValue,
			}
		}
	case 6:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:363
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 7:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:366
		{
			ASNVAL.TypeValue = ""
		}
	case 8:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:371
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 9:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:374
		{
			ASNVAL.TypeValue = nil
		}
	case 10:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:379
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 11:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:384
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 12:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:389
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 13:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:395
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 14:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:398
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 15:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:401
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 16:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:406
		{
			ASNVAL.TypeValue = MAP{
				"name": ASNDollar[1].TypeString,
			}
		}
	case 17:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:413
		{
			ASNVAL.TypeValue = MAP{
				"number": ASNDollar[1].TypeValue,
			}
		}
	case 18:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:420
		{
			ASNVAL.TypeValue = MAP{
				"name":   ASNDollar[1].TypeString,
				"number": ASNDollar[3].TypeValue,
			}
		}
	case 19:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:428
		{
			ASNVAL.TypeValue = "Implicit"
		}
	case 20:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:431
		{
			ASNVAL.TypeValue = "Explicit"
		}
	case 21:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:434
		{
			ASNVAL.TypeValue = "Automatic"
		}
	case 22:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:437
		{
			ASNVAL.TypeValue = "Explicit"
		}
	case 23:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:442
		{
			ASNVAL.TypeValue = true
		}
	case 24:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:445
		{
			ASNVAL.TypeValue = false
		}
	case 25:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:452
		{
			ASNVAL.TypeValue = MAP{
				"imports":     ASNDollar[1].TypeValue,
				"exports":     ASNDollar[2].TypeValue,
				"assignments": ASNDollar[3].TypeValue,
			}
		}
	case 26:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:461
		{
			ASNVAL.TypeValue = MAP{
				"imports":     ASNDollar[2].TypeValue,
				"exports":     ASNDollar[1].TypeValue,
				"assignments": ASNDollar[3].TypeValue,
			}
		}
	case 27:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:468
		{
			ASNVAL.TypeValue = nil
		}
	case 28:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:473
		{
			ASNVAL.TypeValue = MAP{
				"all":     "false",
				"symbols": ASNDollar[2].TypeValue,
			}
		}
	case 29:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:479
		{
			ASNVAL.TypeValue = MAP{
				"all": "true",
			}
		}
	case 30:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:484
		{
			ASNVAL.TypeValue = MAP{
				"all": "false",
			}
		}
	case 31:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:489
		{
			ASNVAL.TypeValue = MAP{
				"all": "true",
			}
		}
	case 32:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:496
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 33:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:501
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[3].TypeValue)
		}
	case 34:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:507
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 35:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:512
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 36:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:515
		{
			ASNVAL.TypeValue = nil
		}
	case 37:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:520
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 38:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:523
		{
			ASNVAL.TypeValue = nil
		}
	case 39:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:528
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 40:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:533
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 41:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:539
		{
			ASNVAL.TypeValue = MAP{
				"symbols":   ASNDollar[1].TypeValue,
				"reference": ASNDollar[3].TypeValue,
			}
		}
	case 42:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:547
		{
			ASNVAL.TypeValue = MAP{
				"name":        ASNDollar[1].TypeValue,
				"identifiers": ASNDollar[2].TypeValue,
			}
		}
	case 43:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:555
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 44:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:558
		{
			ASNVAL.TypeValue = nil
		}
	case 45:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:561
		{
			ASNVAL.TypeValue = nil
		}
	case 46:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:566
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 47:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:569
		{
			ASNVAL.TypeValue = ASNDollar[3].TypeValue
		}
	case 48:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:572
		{
			ASNVAL.TypeValue = nil
		}
	case 49:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:577
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 50:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:582
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 51:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:588
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 52:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:591
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 53:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:594
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 54:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:599
		{
			ASNVAL.TypeValue = MAP{
				"name": ASNDollar[1].TypeValue,
			}
		}
	case 55:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:606
		{
			ASNVAL.TypeValue = MAP{
				"number": ASNDollar[1].TypeValue,
			}
		}
	case 56:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:611
		{
			ASNVAL.TypeValue = MAP{
				"number": ASNDollar[1].TypeValue,
			}
		}
	case 57:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:618
		{
			ASNVAL.TypeValue = MAP{
				"name":   ASNDollar[1].TypeValue,
				"number": ASNDollar[3].TypeValue,
			}
		}
	case 58:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:626
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 59:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:631
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeValue)
		}
	case 60:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:635
		{
			ASNVAL.TypeValue = nil
		}
	case 61:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:640
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 62:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:643
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 63:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:646
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 64:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:649
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 65:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:652
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 66:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:655
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 67:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:658
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 68:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:661
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 69:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:666
		{
			ASNVAL.TypeValue = MAP{
				"assignment": "TYPE",
				"reference":  ASNDollar[1].TypeValue,
				"type":       ASNDollar[2].TypeValue,
			}
		}
	case 70:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:675
		{
			ASNVAL.TypeValue = MAP{
				"assignment": "VALUE",
				"reference":  ASNDollar[1].TypeValue,
				"type":       ASNDollar[2].TypeValue,
				"value":      ASNDollar[4].TypeValue,
			}
		}
	case 71:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:685
		{
			ASNVAL.TypeValue = MAP{
				"assignment": "XML_VALUE",
				"reference":  ASNDollar[1].TypeValue,
				"value":      ASNDollar[3].TypeValue,
			}
		}
	case 72:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:694
		{
			ASNVAL.TypeValue = MAP{
				"assignment": "VALUE_SET",
				"reference":  ASNDollar[1].TypeValue,
				"type":       ASNDollar[2].TypeValue,
				"values":     ASNDollar[4].TypeValue,
			}
		}
	case 73:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:704
		{
			ASNVAL.TypeValue = MAP{
				"assignment": "OBJECT_CLASS",
				"reference":  ASNDollar[1].TypeValue,
				"class":      ASNDollar[3].TypeValue,
			}
		}
	case 74:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:713
		{
			ASNVAL.TypeValue = MAP{
				"assignment": "OBJECT",
				"reference":  ASNDollar[1].TypeValue,
				"class":      ASNDollar[2].TypeValue,
				"value":      ASNDollar[4].TypeValue,
			}
		}
	case 75:
		ASNDollar = ASNS[ASNpt-4 : ASNpt+1]
//line asn.y:723
		{
			ASNVAL.TypeValue = MAP{
				"assignment": "OBJECT_SET",
				"reference":  ASNDollar[1].TypeValue,
				"class":      ASNDollar[2].TypeValue,
				"values":     ASNDollar[4].TypeValue,
			}
		}
	case 76:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:733
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 77:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:736
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 78:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:739
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 79:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:742
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 80:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:745
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 81:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:748
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 82:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:753
		{
			ASNVAL.TypeValue = MAP{
				"type":       "BUILTIN_TYPE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 83:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:759
		{
			ASNVAL.TypeValue = MAP{
				"type":       "REFERENCED_TYPE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 84:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:765
		{
			ASNVAL.TypeValue = MAP{
				"type":       "CONSTRAINED_TYPE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 85:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:773
		{
			ASNVAL.TypeValue = MAP{
				"type":       "BUILTIN_VALUE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 86:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:779
		{
			ASNVAL.TypeValue = MAP{
				"type":       "REFERENCED_VALUE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 87:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:785
		{
			ASNVAL.TypeValue = MAP{
				"type":       "OBJECT_CLASS_FIELD_VALUE",
				"properties": ASNDollar[1].TypeValue,
			}
		}
	case 88:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:793
		{
			ASNVAL.TypeValue = MAP{
				"bitString": ASNDollar[1].TypeValue,
			}
		}
	case 89:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:798
		{
			ASNVAL.TypeValue = MAP{
				"boolean": ASNDollar[1].TypeValue,
			}
		}
	case 90:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:803
		{
			ASNVAL.TypeValue = MAP{
				"characterString": ASNDollar[1].TypeValue,
			}
		}
	case 91:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:808
		{
			ASNVAL.TypeValue = MAP{
				"choice": ASNDollar[1].TypeValue,
			}
		}
	case 92:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:813
		{
			ASNVAL.TypeValue = MAP{
				"embeddedPDV": ASNDollar[1].TypeValue,
			}
		}
	case 93:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:818
		{
			ASNVAL.TypeValue = MAP{
				"enumerated": ASNDollar[1].TypeValue,
			}
		}
	case 94:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:823
		{
			ASNVAL.TypeValue = MAP{
				"external": ASNDollar[1].TypeValue,
			}
		}
	case 95:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:828
		{
			ASNVAL.TypeValue = MAP{
				"instanceOf": ASNDollar[1].TypeValue,
			}
		}
	case 96:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:833
		{
			ASNVAL.TypeValue = MAP{
				"integer": ASNDollar[1].TypeValue,
			}
		}
	case 97:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:838
		{
			ASNVAL.TypeValue = MAP{
				"iri": ASNDollar[1].TypeValue,
			}
		}
	case 98:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:843
		{
			ASNVAL.TypeValue = MAP{
				"null": ASNDollar[1].TypeValue,
			}
		}
	case 99:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:848
		{
			ASNVAL.TypeValue = MAP{
				"objectIdentifier": ASNDollar[1].TypeValue,
			}
		}
	case 100:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:853
		{
			ASNVAL.TypeValue = MAP{
				"octetString": ASNDollar[1].TypeValue,
			}
		}
	case 101:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:858
		{
			ASNVAL.TypeValue = MAP{
				"real": ASNDollar[1].TypeValue,
			}
		}
	case 102:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:863
		{
			ASNVAL.TypeValue = MAP{
				"relativeIRI": ASNDollar[1].TypeValue,
			}
		}
	case 103:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:868
		{
			ASNVAL.TypeValue = MAP{
				"relativeOID": ASNDollar[1].TypeValue,
			}
		}
	case 104:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:873
		{
			ASNVAL.TypeValue = MAP{
				"sequence": ASNDollar[1].TypeValue,
			}
		}
	case 105:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:878
		{
			ASNVAL.TypeValue = MAP{
				"sequenceOf": ASNDollar[1].TypeValue,
			}
		}
	case 106:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:883
		{
			ASNVAL.TypeValue = MAP{
				"set": ASNDollar[1].TypeValue,
			}
		}
	case 107:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:888
		{
			ASNVAL.TypeValue = MAP{
				"setOf": ASNDollar[1].TypeValue,
			}
		}
	case 108:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:893
		{
			ASNVAL.TypeValue = MAP{
				"prefixed": ASNDollar[1].TypeValue,
			}
		}
	case 109:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:898
		{
			ASNVAL.TypeValue = MAP{
				"time": ASNDollar[1].TypeValue,
			}
		}
	case 110:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:905
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 111:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:908
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 112:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:911
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 113:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:914
		{
			ASNVAL.TypeValue = nil
		}
	case 114:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:917
		{
			ASNVAL.TypeValue = ASNDollar[2].TypeValue
		}
	case 115:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:922
		{
			ASNVAL.TypeValue = LIST{
				ASNDollar[1].TypeValue,
			}
		}
	case 116:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:927
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
			ASNVAL.TypeValue = append(ASNVAL.TypeValue.(LIST), ASNDollar[2].TypeToken)
		}
	case 117:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:933
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 118:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:938
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeValue
		}
	case 119:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:943
		{
			ASNVAL.TypeValue = nil
		}
	case 120:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:946
		{

		}
	case 121:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:951
		{
			ASNVAL.TypeValue = nil
		}
	case 122:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:956
		{
			ASNVAL.TypeValue = nil
		}
	case 123:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:961
		{
			ASNVAL.TypeValue = nil
		}
	case 124:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:965
		{
			ASNVAL.TypeValue = nil
		}
	case 125:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:969
		{
			ASNVAL.TypeValue = nil
		}
	case 126:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:973
		{
			ASNVAL.TypeValue = nil
		}
	case 127:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:977
		{
			ASNVAL.TypeValue = nil
		}
	case 128:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:981
		{
			ASNVAL.TypeValue = nil
		}
	case 129:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:985
		{
			ASNVAL.TypeValue = nil
		}
	case 130:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:989
		{
			ASNVAL.TypeValue = nil
		}
	case 131:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:993
		{
			ASNVAL.TypeValue = nil
		}
	case 132:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:997
		{
			ASNVAL.TypeValue = nil
		}
	case 133:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1001
		{
			ASNVAL.TypeValue = nil
		}
	case 134:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1005
		{
			ASNVAL.TypeValue = nil
		}
	case 135:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1009
		{
			ASNVAL.TypeValue = nil
		}
	case 136:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1013
		{
			ASNVAL.TypeValue = nil
		}
	case 137:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1017
		{
			ASNVAL.TypeValue = nil
		}
	case 138:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1021
		{
			ASNVAL.TypeValue = nil
		}
	case 139:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1025
		{
			ASNVAL.TypeValue = nil
		}
	case 140:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1029
		{
			ASNVAL.TypeValue = nil
		}
	case 141:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1033
		{
			ASNVAL.TypeValue = nil
		}
	case 142:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1038
		{
			ASNVAL.TypeValue = nil
		}
	case 143:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1043
		{
			ASNVAL.TypeValue = nil
		}
	case 144:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1048
		{
			ASNVAL.TypeValue = nil
		}
	case 145:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1053
		{
			ASNVAL.TypeValue = nil
		}
	case 146:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1058
		{
			ASNVAL.TypeValue = nil
		}
	case 147:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1063
		{
			ASNVAL.TypeValue = nil
		}
	case 148:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1068
		{
			ASNVAL.TypeValue = nil
		}
	case 149:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1073
		{
			ASNVAL.TypeValue = nil
		}
	case 150:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1078
		{
			ASNVAL.TypeValue = nil
		}
	case 151:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1083
		{
			ASNVAL.TypeValue = nil
		}
	case 152:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1088
		{
			ASNVAL.TypeValue = nil
		}
	case 153:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1093
		{
			ASNVAL.TypeValue = nil
		}
	case 154:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1098
		{
			ASNVAL.TypeValue = nil
		}
	case 155:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1103
		{
			ASNVAL.TypeValue = nil
		}
	case 156:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1108
		{
			ASNVAL.TypeValue = MAP{
				"type":  "EXTERNAL_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 157:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1114
		{
			ASNVAL.TypeValue = MAP{
				"type":  "STRING_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 158:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1120
		{
			ASNVAL.TypeValue = MAP{
				"type":  "NUMBER_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 159:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1126
		{
			ASNVAL.TypeValue = MAP{
				"type":  "PARAMETERIZED_VALUE",
				"value": ASNDollar[1].TypeValue,
			}
		}
	case 160:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1134
		{
			ASNVAL.TypeValue = MAP{
				"module": ASNDollar[1].TypeValue,
				"value":  ASNDollar[3].TypeValue,
			}
		}
	case 161:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1142
		{
			ASNVAL.TypeValue = nil
		}
	case 162:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1147
		{
			ASNVAL.TypeValue = nil
		}
	case 163:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1152
		{
			ASNVAL.TypeValue = nil
		}
	case 164:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1157
		{

		}
	case 165:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1160
		{

		}
	case 166:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1163
		{

		}
	case 167:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1166
		{

		}
	case 168:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1169
		{

		}
	case 169:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1172
		{

		}
	case 170:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1175
		{

		}
	case 171:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1178
		{

		}
	case 172:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1181
		{

		}
	case 173:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1184
		{

		}
	case 174:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1187
		{

		}
	case 175:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1190
		{

		}
	case 176:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1193
		{

		}
	case 177:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1196
		{

		}
	case 178:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1199
		{

		}
	case 179:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1202
		{

		}
	case 180:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1205
		{

		}
	case 181:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1208
		{

		}
	case 182:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1211
		{

		}
	case 183:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1214
		{

		}
	case 184:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1217
		{

		}
	case 185:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1220
		{

		}
	case 186:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1223
		{

		}
	case 187:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1226
		{

		}
	case 188:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1229
		{

		}
	case 189:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1232
		{

		}
	case 190:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1235
		{

		}
	case 191:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1240
		{
			ASNVAL.TypeValue = nil
		}
	case 192:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1245
		{
			ASNVAL.TypeValue = nil
		}
	case 193:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1250
		{
			ASNVAL.TypeValue = nil
		}
	case 194:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1255
		{
			ASNVAL.TypeValue = nil
		}
	case 195:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1260
		{
			ASNVAL.TypeValue = nil
		}
	case 196:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1264
		{
			ASNVAL.TypeValue = nil
		}
	case 197:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1269
		{
			ASNVAL.TypeValue = nil
		}
	case 198:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1273
		{
			ASNVAL.TypeValue = nil
		}
	case 199:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1277
		{
			ASNVAL.TypeValue = nil
		}
	case 200:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1282
		{
			ASNVAL.TypeValue = nil
		}
	case 201:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1287
		{
			ASNVAL.TypeValue = nil
		}
	case 202:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1292
		{
			ASNVAL.TypeValue = nil
		}
	case 203:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1297
		{
			ASNVAL.TypeValue = nil
		}
	case 204:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1302
		{
			ASNVAL.TypeValue = nil
		}
	case 205:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1307
		{
			ASNVAL.TypeValue = nil
		}
	case 206:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1312
		{
			ASNVAL.TypeValue = nil
		}
	case 207:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1317
		{
			ASNVAL.TypeValue = nil
		}
	case 208:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1322
		{
			ASNVAL.TypeValue = nil
		}
	case 209:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1327
		{
			ASNVAL.TypeValue = nil
		}
	case 210:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1332
		{
			ASNVAL.TypeValue = nil
		}
	case 211:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1337
		{
			ASNVAL.TypeValue = nil
		}
	case 212:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1342
		{
			ASNVAL.TypeValue = nil
		}
	case 213:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1347
		{
			ASNVAL.TypeValue = nil
		}
	case 214:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1352
		{
			ASNVAL.TypeValue = nil
		}
	case 215:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1357
		{
			ASNVAL.TypeValue = nil
		}
	case 216:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1362
		{
			ASNVAL.TypeValue = nil
		}
	case 217:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1367
		{
			ASNVAL.TypeValue = nil
		}
	case 218:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1372
		{
			ASNVAL.TypeValue = nil
		}
	case 219:
		ASNDollar = ASNS[ASNpt-0 : ASNpt+1]
//line asn.y:1377
		{
			ASNVAL.TypeValue = nil
		}
	case 220:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1382
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 221:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1385
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 222:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1390
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 223:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1393
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeString
		}
	case 224:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1398
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeNumber
		}
	case 225:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1401
		{
			ASNVAL.TypeValue = (-1) * ASNDollar[2].TypeNumber
		}
	case 226:
		ASNDollar = ASNS[ASNpt-1 : ASNpt+1]
//line asn.y:1404
		{
			ASNVAL.TypeValue = ASNDollar[1].TypeNumber
		}
	case 227:
		ASNDollar = ASNS[ASNpt-2 : ASNpt+1]
//line asn.y:1407
		{
			ASNVAL.TypeValue = (-1) * ASNDollar[2].TypeNumber
		}
	case 228:
		ASNDollar = ASNS[ASNpt-3 : ASNpt+1]
//line asn.y:1412
		{
			ASNVAL.TypeValue = "::="
		}
	}
	goto ASNstack /* stack new state and value */
}
